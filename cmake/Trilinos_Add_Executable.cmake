# $Header$

# 2008/06/09: rabartl: Below: I removed these comment blocks from other
# CMakeLists.txt files.  Which comment is correct?

# From epetra/test/CMakeLists.txt: Syntax for adding an executable:
#   TRILINOS_ADD_EXECUTABLE(<SOURCE_DIR> [TEST] [MPITEST] [EXAMPLE] [INSTALL] SOURCES <SOURCE1> <SOURCE2> ... ARGS <ARG1> <ARG2> ...)

# From epetra/test/CMakeLists.txt: Syntax for adding a test:
#   TRILINOS_ADD_EXECUTABLE(<TEST_DIR_NAME> SOURCES <SOURCE1> <SOURCE2> ... ARGS <ARG1> <ARG2> ...)

INCLUDE(Parse_Variable_Arguments)

MACRO(TRILINOS_ADD_EXECUTABLE EXECUTABLE_DIR)

  SET(KEYWORD )
  SET(EXECUTABLE_NAME ${EXECUTABLE_DIR})
  SET(EXECUTABLE_SOURCES )
  SET(EXECUTABLE_ARGS )
  SET(INSTALL_EXECUTABLE 0)
  SET(TEST_EXECUTABLE 0)
  SET(MPI_TEST_EXECUTABLE 0)

  FOREACH(ARGUMENT ${ARGN})
    IF(ARGUMENT STREQUAL "NAME")
      SET(KEYWORD ${ARGUMENT})
    ELSEIF(ARGUMENT STREQUAL "SOURCES")
      SET(KEYWORD ${ARGUMENT})
    ELSEIF(ARGUMENT STREQUAL "ARGS")
      SET(KEYWORD ${ARGUMENT})
    ELSEIF(ARGUMENT STREQUAL "TYPE")
    ELSEIF(ARGUMENT STREQUAL "INSTALL")
      SET(INSTALL_EXECUTABLE 1)
    ELSEIF(ARGUMENT STREQUAL "TEST")
      SET(TEST_EXECUTABLE 1)
      SET(EXEC_TYPE "Test")
    ELSEIF(ARGUMENT STREQUAL "EXAMPLE")
      SET(EXEC_TYPE "Example")
    ELSEIF(ARGUMENT STREQUAL "MPITEST")
      SET(MPI_TEST_EXECUTABLE 1)
      SET(EXEC_TYPE "Test")
    ELSE(ARGUMENT STREQUAL "NAME")
      IF(KEYWORD STREQUAL "NAME")
        SET(EXECUTABLE_NAME ${ARGUMENT})
      ELSEIF(KEYWORD STREQUAL "SOURCES")
        SET(EXECUTABLE_SOURCES ${EXECUTABLE_SOURCES} ${EXECUTABLE_DIR}/${ARGUMENT})
      ELSEIF(KEYWORD STREQUAL "ARGS")
        SET(EXECUTABLE_ARGS ${EXECUTABLE_ARGS} ${ARGUMENT})
      ELSE(KEYWORD STREQUAL "NAME")
        MESSAGE(SEND_ERROR "TRILINOS_ADD_EXECUTABLE() - unknown keyword: ${KEYWORD}")
      ENDIF(KEYWORD STREQUAL "NAME")
    ENDIF(ARGUMENT STREQUAL "NAME")
  ENDFOREACH(ARGUMENT)

  SET(EXECUTABLE_BINARY "${PROJECT_NAME}-${EXEC_TYPE}-${EXECUTABLE_NAME}")
  SET(TEST_NAME "${PROJECT_NAME}-${EXEC_TYPE}-${EXECUTABLE_NAME}")
  SET(MPI_TEST_NAME "${PROJECT_NAME}-${EXEC_TYPE}-${EXECUTABLE_NAME}-MPI")

  INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR}/${EXECUTABLE_DIR})
  INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/${EXECUTABLE_DIR})

  ADD_EXECUTABLE(${EXECUTABLE_BINARY} ${EXECUTABLE_SOURCES})
  GET_TARGET_PROPERTY(EXECUTABLE_PATH ${EXECUTABLE_BINARY} LOCATION)

  IF(INSTALL_EXECUTABLE)
    INSTALL(TARGETS ${EXECUTABLE_BINARY} RUNTIME DESTINATION bin)
  ENDIF(INSTALL_EXECUTABLE)

  IF(TEST_EXECUTABLE)
    ADD_TEST(${TEST_NAME} ${EXECUTABLE_BINARY} ${EXECUTABLE_ARGS})
  ENDIF(TEST_EXECUTABLE)

  IF(MPI_TEST_EXECUTABLE)
    ADD_TEST(${MPI_TEST_NAME} ${MPI_EXECUTABLE} ${MPI_EXECUTABLE_FLAGS} ${EXECUTABLE_PATH} ${EXECUTABLE_ARGS})
  ENDIF(MPI_TEST_EXECUTABLE)

ENDMACRO(TRILINOS_ADD_EXECUTABLE) 

# 2008/07/09: rabartl: ToDo::
#
# (*) Change the name of the current TRILINOS_ADD_EXECUTABLE(...) to
#     TRILINOS_ADD_EXECUTABLE_AND_TEST(...).
#
# (*) break these macros each into their separate *.cmake files
#


# 2008/07/09: rabartl: ToDo::
#
# (*) Change the name of the current TRILINOS_ADD_TARGET(...) to 
#     TRILINOS_ADD_EXECUTABLE(...)
#
# (*) Add an optional DIRECTORY argument and put the executable in that directory
#
# (*) Add same COMM logic for deciding whether to add an executable depending
#     on serial or COMM
#
# (*) ??? 
#
FUNCTION (TRILINOS_ADD_TARGET EXE_NAME)
   PARSE_ARGUMENTS(
     PARSE  #prefix
     "SOURCES;DIRECTORY;COMM" #lists
     "" #options
     ${ARGN} )
  

  SET(ADD_THE_EXE OFF)
  IF(TRILINOS_ENABLE_MPI)
    MESSAGE("MPI Mode!")
    IF (NOT PARSE_COMM)
      # If no COMM is given assume we will add the exe
     
      SET(ADD_THE_EXE ON)
    ELSE()
      # Else, if COMM is defined we have to find 'mpi'
      LIST (FIND PARSE_COMM "mpi" DO_MPI_INDEX)
    ENDIF()
    IF(NOT ${DO_MPI_INDEX} EQUAL -1)
      
      SET(ADD_THE_EXE ON)    
    ENDIF()
  ELSE()
    MESSAGE("SERIAL Mode!")
    IF (NOT PARSE_COMM)
      # If no COMM is given assume we will add the exe
      
      SET(ADD_THE_EXE ON)
    ELSE()
      # Else, if COMM is defined we have to find 'serial'
      LIST (FIND PARSE_COMM "serial" DO_SERIAL_INDEX)
    ENDIF()
    IF(NOT ${DO_SERIAL_INDEX} EQUAL -1)
      
      SET(ADD_THE_EXE ON)    
    ENDIF()
  ENDIF()
  
  IF(ADD_THE_EXE)  
    SET (EXE_SOURCES)
    SET(EXE_BINARY_NAME "${EXE_NAME}.exe")
    IF(PARSE_DIRECTORY ) #If exe is in subdirectory prepend that dir name to the source files
      FOREACH( SOURCE_FILE ${PARSE_SOURCES} )
        SET (EXE_SOURCES ${EXE_SOURCES} ${PARSE_DIRECTORY}/${SOURCE_FILE})
      ENDFOREACH( )
    ENDIF()                
    ADD_EXECUTABLE(${EXE_BINARY_NAME} ${EXE_SOURCES})
    IF(PARSE_DIRECTORY)
      SET_TARGET_PROPERTIES( ${EXE_BINARY_NAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${PARSE_DIRECTORY} )
    ENDIF()
  ENDIF()
  
  
ENDFUNCTION()


# 2008/07/09: rabartl: ToDo:
#
# (*) Support optional DIRECTORY argument
#
# (*) Support multiple ARGS keywords
#
# (*) Support an optional POSTFIX argument for naming tests with different
# ARGS keywords

#
FUNCTION (TRILINOS_ADD_TEST EXE_NAME)
   
  PARSE_ARGUMENTS(
     PARSE   #prefix
     "NUM_MPI_PROCS;DIRECTORY;KEYWORDS;COMM;ARGS;NAME;PASS_REGULAR_EXPRESSION;HOST;XHOST;FAIL_REGULAR_EXPRESSION"  #lists
     "DESEND_INTO_DIR"   #options
     ${ARGN} )
  

  #If KEYWORDS are provided then check that at least one of the KEYWORDS exists in the list of
  #KEYWORDS provided at configure time (RUN_TEST_KEYWORDS) 
  IF(PARSE_KEYWORDS)
    SET(KEYWORD_FOUND FALSE)
    FOREACH(KEYWORD ${PARSE_KEYWORDS})
      LIST (FIND RUN_TEST_KEYWORDS ${KEYWORD} INDEX_OF_KEYWORD_IN_KEYWORDS_LIST)
      IF(NOT ${INDEX_OF_KEYWORD_IN_KEYWORDS_LIST} EQUAL -1)
        SET(KEYWORD_FOUND TRUE)
        BREAK()
      ENDIF()
    ENDFOREACH()
    IF(NOT KEYWORD_FOUND)
      RETURN()
    ENDIF()
  ENDIF()
  
  
  
  # Don't add the test if the host or xhost tests don't pass
  
  IF(NOT PARSE_XHOST)
    SET (PARSE_XHOST NONE)
  ENDIF()    
  LIST (FIND PARSE_XHOST ${TRILINOS_HOSTNAME} INDEX_OF_HOSTNAME_IN_XHOST_LIST)           
  IF (NOT ${INDEX_OF_HOSTNAME_IN_XHOST_LIST} EQUAL -1)
    RETURN()
  ENDIF()

  IF(NOT PARSE_HOST)
    SET (PARSE_HOST ${TRILINOS_HOSTNAME})
  ENDIF()  
  LIST (FIND PARSE_HOST ${TRILINOS_HOSTNAME} INDEX_OF_HOSTNAME_IN_HOST_LIST)                 
  IF (${INDEX_OF_HOSTNAME_IN_HOST_LIST} EQUAL -1)
    RETURN()
  ENDIF()

  # 2008/07/09: rabartl: ToDo: Above, change the logic to allow HOST and XHOST
  # to be lists!


  
  SET(EXE_BINARY_NAME "${EXE_NAME}.exe")
  IF(PARSE_NAME)
    SET(TEST_NAME "${PARSE_NAME}")
  ELSE()
    SET(TEST_NAME "${EXE_NAME}")  
  ENDIF()
  GET_TARGET_PROPERTY(EXECUTABLE_PATH ${EXE_BINARY_NAME} LOCATION)
  
  SET(ADDED_THE_TEST OFF)  
    
  IF(TRILINOS_ENABLE_MPI)
    SET(NP)
    IF(PARSE_NUM_MPI_PROCS)
      IF(${PARSE_NUM_MPI_PROCS} MATCHES [0-9]+-[0-9]+)
        
        STRING(REGEX REPLACE  "([0-9]+)-([0-9]+)" "\\1" MIN_NP ${PARSE_NUM_MPI_PROCS} )
        STRING(REGEX REPLACE  "([0-9]+)-([0-9]+)" "\\2" MAX_NP ${PARSE_NUM_MPI_PROCS} )
        IF(${MIN_NP} LESS ${MPIEXEC_MAX_NUMPROCS} AND  ${MAX_NP} GREATER ${MPIEXEC_MAX_NUMPROCS} )
            SET(NP ${MPI_NUMPROCS_FLAG} ${MPIEXEC_MAX_NUMPROCS})
        ELSEIF(${MIN_NP} EQUAL ${MPIEXEC_MAX_NUMPROCS})
            SET(NP ${MPI_NUMPROCS_FLAG} ${MIN_NP})
        ELSEIF(${MAX_NP} EQUAL ${MPIEXEC_MAX_NUMPROCS})
            SET(NP ${MPI_NUMPROCS_FLAG} ${MAX_NP})
        ELSEIF(${MAX_NP} LESS ${MPIEXEC_MAX_NUMPROCS})
            SET(NP ${MPI_NUMPROCS_FLAG} ${MAX_NP})
        ELSE()
           RETURN() #The number of available processor is outside the given range
                    #so the test should not be run
        ENDIF()
      ELSE()
        IF(${PARSE_NUM_MPI_PROCS} LESS ${MPIEXEC_MAX_NUMPROCS})
          SET(NP ${MPI_NUMPROCS_FLAG} ${PARSE_NUM_MPI_PROCS})
        ELSE()
           SET(NP ${MPI_NUMPROCS_FLAG} ${MPIEXEC_MAX_NUMPROCS})
        ENDIF()
      ENDIF()
    ENDIF()
    MESSAGE("PROCS: ${NP}")
   
    MESSAGE("MPI Mode!")
    IF (NOT PARSE_COMM)
      # If no COMM is given assume we will add the test
      SET(DO_MPI_INDEX 0)
    ELSE()
      # Else, if COMM is defined we have to find 'mpi'
      LIST (FIND PARSE_COMM "mpi" DO_MPI_INDEX)
    ENDIF()
    IF(NOT ${DO_MPI_INDEX} EQUAL -1)
      SET(TEST_NAME "${TEST_NAME}-MPI")
      
      SET(COUNTER 0)
      IF(PARSE_ARGS)
        FOREACH(PARSE_ARG ${PARSE_ARGS})
          #MESSAGE("ADD TEST WITH ARGS: ${PARSE_ARG}")
          
          #ADD_TEST(${TEST_NAME}_${COUNTER} ${MPI_EXECUTABLE} ${MPI_EXECUTABLE_FLAGS} ${EXECUTABLE_PATH} ${PARSE_ARG})
          ADD_TEST(${TEST_NAME}_${COUNTER} ${MPI_EXECUTABLE} ${NP} ${EXECUTABLE_PATH} ${PARSE_ARG})
          MESSAGE(${TEST_NAME}_${COUNTER} ${MPI_EXECUTABLE} ${NP} ${EXECUTABLE_PATH} ${PARSE_ARG})
          
          IF (PARSE_PASS_REGULAR_EXPRESSION AND ADDED_THE_TEST)
            SET_TESTS_PROPERTIES(${TEST_NAME}_${COUNTER} PROPERTIES PASS_REGULAR_EXPRESSION
              ${PARSE_PASS_REGULAR_EXPRESSION})
          ENDIF()
  
          IF (PARSE_FAIL_REGULAR_EXPRESSION AND ADDED_THE_TEST)
            SET_TESTS_PROPERTIES(${TEST_NAME}_${COUNTER} PROPERTIES FAIL_REGULAR_EXPRESSION
            ${PARSE_FAIL_REGULAR_EXPRESSION})
          ENDIF()
          MATH(EXPR COUNTER ${COUNTER}+1 )
        
        ENDFOREACH()
      ELSE()
        #ADD_TEST(${TEST_NAME} ${MPI_EXECUTABLE} ${MPI_EXECUTABLE_FLAGS} ${EXECUTABLE_PATH} ${PARSE_ARGS})
        ADD_TEST(${TEST_NAME} ${MPI_EXECUTABLE} ${NP} ${EXECUTABLE_PATH} ${PARSE_ARGS})
        MESSAGE(${TEST_NAME} ${MPI_EXECUTABLE} ${NP} ${EXECUTABLE_PATH} ${PARSE_ARGS})
      
      ENDIF()
      
      SET(ADDED_THE_TEST ON)    
    ENDIF()
  ELSE()
    MESSAGE("SERIAL Mode!")
    IF (NOT PARSE_COMM)
      # If no COMM is given assume we will add the test
      SET(DO_SERIAL_INDEX 0)
    ELSE()
      # Else, if COMM is defined we have to find 'serial'
      LIST (FIND PARSE_COMM "serial" DO_SERIAL_INDEX)
    ENDIF()
    MESSAGE("DO_SERIAL_INDEX = ${DO_SERIAL_INDEX}")
    IF(NOT ${DO_SERIAL_INDEX} EQUAL -1)
      SET(COUNTER 0)
      IF(PARSE_ARGS)
        FOREACH(PARSE_ARG ${PARSE_ARGS})
       
          ADD_TEST(${TEST_NAME}${COUNTER} ${EXECUTABLE_PATH} ${PARSE_ARG})
          IF (PARSE_PASS_REGULAR_EXPRESSION AND ADDED_THE_TEST)
            SET_TESTS_PROPERTIES(${TEST_NAME}_${COUNTER} PROPERTIES PASS_REGULAR_EXPRESSION
              ${PARSE_PASS_REGULAR_EXPRESSION})
          ENDIF()
  
          IF (PARSE_FAIL_REGULAR_EXPRESSION AND ADDED_THE_TEST)
            SET_TESTS_PROPERTIES(${TEST_NAME}_${COUNTER} PROPERTIES FAIL_REGULAR_EXPRESSION
            ${PARSE_FAIL_REGULAR_EXPRESSION})
          ENDIF()
          MATH(EXPR COUNTER ${COUNTER}+1 )
        
        ENDFOREACH()
      ELSE()
        ADD_TEST(${TEST_NAME} ${EXECUTABLE_PATH} ${PARSE_ARGS})
      ENDIF()
      
     
      SET(ADDED_THE_TEST ON)    
    ENDIF()
  ENDIF()

  # 2008/07/09: rabartl: ToDo: Above, create a macho called
  # ???ITEM_EXITS_IN_LIST??(...) to simplify logic!
    
  IF (PARSE_PASS_REGULAR_EXPRESSION AND ADDED_THE_TEST  AND NOT PARSE_ARGS)
   SET_TESTS_PROPERTIES(${TEST_NAME} PROPERTIES PASS_REGULAR_EXPRESSION
     ${PARSE_PASS_REGULAR_EXPRESSION})
  ENDIF()
  
  IF (PARSE_FAIL_REGULAR_EXPRESSION AND ADDED_THE_TEST AND NOT PARSE_ARGS)
   SET_TESTS_PROPERTIES(${TEST_NAME} PROPERTIES FAIL_REGULAR_EXPRESSION
     ${PARSE_FAIL_REGULAR_EXPRESSION})
  ENDIF()

ENDFUNCTION(TRILINOS_ADD_TEST)

