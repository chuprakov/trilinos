(*) Installing CMake

  $ $TRILINOS_HOME/cmake/python/install-cmake.phy --install-dir=INSTALL_BASE_DIR

  This will result in cmake and related tools being installed in
  INSTALL_BASE_DIR/bin.

(*) Getting CMake help

    http://www.cmake.org

(*) Viewing available configure-time options with documentation

  $ cd $BUILD_DIR
  $ rm CMakeCache.txt
  $ cmake -LAH -D Trilinos_ENABLE_ALL_PACKAGES:BOOL=ON \
      -D Trilinos_ENABLE_CXX:BOOL=OFF \
      -D Trilinos_ENABLE_Fortran:BOOL=OFF \
       $TRILINOS_BASE_DIR

  NOTE: You can also just look at the text file CMakeCache.txt which
  has all of the cache variables and documentation.

(*) Viewing available configure-time options without documentation

  $ cd $BUILD_DIR
  $ rm CMakeCache.txt
  $ cmake -LA $TRILINOS_BASE_DIR

(*) Configuring Trilinos to build

  a) Using ccmake:

    $ ccmake $TRILINOS_BASE_DIR

  b) [Recommended] Create a 'do_configure' scripts like:

        EXTRA_ARGS=$@
        
        cmake \
        -D Trilinos_ENABLE_ALL_PACKAGES:BOOL=ON \
        -D Trilinos_ENABLE_TESTS:BOOL=ON \
        -D Trilinos_ENABLE_EXAMPLES:BOOL=ON \
        -D Teuchos_ENABLE_COMPLEX:BOOL=ON \
        -D Teuchos_ENABLE_EXTENDED:BOOL=ON \
        -D Teuchos_ENABLE_GCC_DEMANGLE:BOOL=ON \
        -D Epetra_ENABLE_FORTRAN:BOOL=ON \
        -D CMAKE_CXX_FLAGS:STRING="-DTEUCHOS_DEBUG -g -O0 -ansi -pedantic -Wall" \
        -D F77_FUNC_:STRING="(name,NAME) name ## __" \
        -D DART_TESTING_TIMEOUT:STRING=600 \
        -D CMAKE_VERBOSE_MAKEFILE:BOOL=TRUE \
        $EXTRA_ARGS \
        ../../../Trilinos

      and then run it as:

        $ ./do-configure [OTHER_OPTIONS]

      See Trilinos/sampleScripts/*cmake for real examples.

(*) Configuring Trilinos to build all packages with all tests and examples:

  $ do-configure \
     -D Trilinos_ENABLE_ALL_PACKAGES:BOOL=ON \
     -D Trilinos_ENABLE_TESTS:BOOL=ON \
     -D Trilinos_ENABLE_EXAMPLES:BOOL=ON

  NOTE: Specific packages can be disabled with
  Trilinos_ENABLE_PACKAGE:BOOL=OFF.

(*) Configuring a package(s) along with all of the packages it can use:

  $ do-configure \
     -D Trilinos_ENABLE_ALL_PACKAGES:BOOL=OFF \
     -D Trilinos_ENABLE_NOX:BOOL=ON \
     -D Trilinos_ENABLE_ALL_OPTIONAL_PACKAGES:BOOL=ON \
     -D Trilinos_ENABLE_TESTS:BOOL=ON \
     -D Trilinos_ENABLE_EXAMPLES:BOOL=ON

  NOTE: This set of arguments allows a user to turn on NOX as well as all
  packages that NOX can use.  However, tests and examples will only be turned
  on for NOX.

(*) Configuring Trilinos to test all effects of changing a given package(s):

  $ do-configure \
     -D Trilinos_ENABLE_ALL_PACKAGES:BOOL=OFF \
     -D Trilinos_ENABLE_Epetra:BOOL=ON \
     -D Trilinos_ENABLE_ALL_FORWARD_DEP_PACAKGES:BOOL=ON \
     -D Trilinos_ENABLE_TESTS:BOOL=ON \
     -D Trilinos_ENABLE_EXAMPLES:BOOL=ON

  NOTE: The above set of argument will result in Epetra and all packages that
  depend on Epetra to be enabled and have all of their tests turned on.  Tests
  will not be enabled in packages that do not depend on Epetra in this case.
  This speeds up and robustifies pre-checkin testing.

(*) Getting verbose output from configure

  $ ./do_configure -D Trilinos_VERBOSE_CONFIGURE:BOOL=ON

(*) Getting very verbose output from configure

  $ ./do_configure -D Trilinos_VERBOSE_CONFIGURE:BOOL=ON --debug-output --trace

(*) Viewing current values of cache variables

  $ cmake -LA $TRILINOS_BASE_DIR

(*) Discovering what targets are available to build after configuration:

  $ make help

(*) Figuring out how to build a single object file:

  Look for the name of the object file to build source file
  SomeSourceFile.cpp:

    $ make help | grep SomeSourceFile.o

  Build the source file:

    $ make WHATEVER_WAS_RETURNED_ABOVE

(*) Running the CTest tests:

  a) Using 'make test'

    $ make test

  b) Using 'ctest'

    $ ctest

    (see output in Testing/Temporary/LastTest.log)

    with verbose output to the console:

    $ ctest -VV

  c) Only running tests for a single package

    Running a single package test:

    $ ctest -W 100 -R '^PACKAGE_NAME_'

    (e.g. PACKAGE_NAME = Teuchos, Epetra, etc.)
    (see output in Testing/Temporary/LastTest.log)

  d) Running a single test with full output to the console:

    $ ctest -R FULL_TEST_NAME -VV

    (i.e. FULL_TEST_NAME = Teuchos_Comm_test, Epetra_MultiVector_test, etc. )

  e) Runing memory checking:

    Running memory tets for just a single package:

    $ ctest -R '^Epetra_' -T memcheck

    (see the detailed output in
    ./Testing/Temporary/LastDynamicAnalysis_DATE_TIME.log)
  
(*) Running the perl-based runtest tests from global level:

  a) Serial tests:

    $ make runtests-serial

  b) MPI tests:

    $ make runtests-mpi

    (NOTE: No need to specify MPIGO or anything else!)
  
(*) Running the perl-based runtest tests from package level:

  a) Serial tests:

    $ make runtests-serial-PACKAGE_DIR

    Where PACKAGE_DIR = epetra, thyra, nox, etc.

  b) MPI tests:

    $ make runtests-mpi-PACKAGE_DIR

    (NOTE: No need to specify MPIGO or anything else!)

(*) Creating a tarball of the source tree:

   $ make package_source

   NOTE: TThe above command will tar up *everything* in the source tree
   without exception so make sure that you start with a totally clean source
   tree before you do this.  Or, you could build doxygen documentation first
   and then tar up Trilinos.
