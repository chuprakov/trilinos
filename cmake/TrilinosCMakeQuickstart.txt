(*) Getting CMake help

    http://http://www.cmake.org/cmake/help/cmake2.6docs.html

(*) Viewing available configure-time options with documentation

  $ cd $BUILD_DIR
  $ rm CmakeCache.txt
  $ cmake -LAH $TRILINOS_BASE_DIR

(*) Viewing available configure-time options without documentation

  $ cd $BUILD_DIR
  $ rm CmakeCache.txt
  $ cmake -LA $TRILINOS_BASE_DIR

(*) Configuring Trilinos to build

  a) Using ccmake:

    $ ccmake $TRILINOS_BASE_DIR

  b) [Recommened] Create a 'do_configure' scripts like:

        EXTRA_ARGS=$@
        
        cmake \
        -D Trilinos_ENABLE_ALL_PACKAGES:BOOL=ON \
        -D Trilinos_ENABLE_TESTS:BOOL=ON \
        -D Trilinos_ENABLE_EXAMPLES:BOOL=ON \
        -D Teuchos_ENABLE_COMPLEX:BOOL=ON \
        -D Teuchos_ENABLE_EXTENDED:BOOL=ON \
        -D Teuchos_ENABLE_GCC_DEMANGLE:BOOL=ON \
        -D Epetra_ENABLE_FORTRAN:BOOL=ON \
        -D CMAKE_CXX_FLAGS:STRING="-DTEUCHOS_DEBUG -g -O0 -ansi -pedantic -Wall" \
        -D F77_FUNC_:STRING="(name,NAME) name ## __" \
        -D DART_TESTING_TIMEOUT:STRING=600 \
        -D CMAKE_VERBOSE_MAKEFILE:BOOL=TRUE \
        $EXTRA_ARGS \
        ../../../Trilinos

      and then run it as:

        $ ./do-configure [OTHER_OPTIONS]

      See Trilinos/sampleScripts/*cmake for real examples.

(*) Configuring Trilinos to test all effects of changing a given package(s):

  $ do-configure \
     -D Trilinos_ENABLE_ALL_PACKAGES:BOOL=OFF \
     -D Trilinos_ENABLE_Epetra:BOOL=ON \
     -D Trilinos_ENABLE_ALL_FORWARD_DEP_PACAKGES:BOOL=ON \
     -D Trilinos_ENABLE_TESTS:BOOL=ON \
     -D Trilinos_ENABLE_EXAMPLES:BOOL=ON

  NOTE: The above set of argument will result in Epetra and all packages
  that depend on Epetra to be enabled and have all of their tests turned
  on.  Tests will not be enabled in packages that do not depend on
  Epetra in this case.  This speeds up and robustifies pre-checkin testing.

(*) Configuring a package(s) along with all of the packages it can use

  $ do-configure \
     -D Trilinos_ENABLE_ALL_PACKAGES:BOOL=OFF \
     -D Trilinos_ENABLE_NOX:BOOL=ON \
     -D Trilinos_ENABLE_ALL_OPTIONAL_PACKAGES:BOOL=ON \
     -D Trilinos_ENABLE_TESTS:BOOL=ON \
     -D Trilinos_ENABLE_EXAMPLES:BOOL=ON

  NOTE: This set of arguments allows a user to turn on NOX
  as well as all packages that NOX can use.  However, tests
  and examples will only be turned on for NOX.

(*) Getting verbose output from configure

  $ ./do_configure -D VERBOSE_CONFIGURE:BOOL=ON

(*) Getting very verbose output from configure

  $ ./do_configure -D VERBOSE_CONFIGURE:BOOL=ON --debug-output --trace

(*) Viewing current values of cache variables

  $ cmake -LA $TRILINOS_BASE_DIR

(*) Discovering what targets are available to build after configuration:

  $ make help

(*) Figuring out how to build a single object file:

  a) Look for the name of the object file to build source file SomeSourceFile.cpp:

    $ make help | grep SomeSourceFile.o

  b) Build the source file:

    $ make WHATEVER_WAS_RETURNED_ABOVE

(*) Running the CTest tests:

  a) Using 'make test'

    $ make test

  b) Using 'ctest'

    $ ctest

    (see output in Testing/Temporary/LastTest.log)

  c) Only running tests for a single package

    $ ctest -R PACKAGE_NAME

    (e.g. PACKAGE_NAME = Teuchos, Epetra, etc.)
    (see output in Testing/Temporary/LastTest.log)

  d) Runing memory checking

    $ ctest -R Epetra -T memcheck

    (see the detailed output in
    ./Testing/Temporary/LastDynamicAnalysis_DATE_TIME.log)
  
(*) Running the perl-based runtest tests from global level

  a) Serial tests

    $ make runtests-serial

  b) MPI tests

    $ make runtests-mpi

    (NOTE: No need to specify MPIGO or anything else!)
  
(*) Running the perl-based runtest tests from package level

  a) Serial tests

    $ make runtests-serial-PACKAGE_SOURCE_DIR

  b) MPI tests

    $ make runtests-mpi-PACKAGE_SOURCE_DIR

    (NOTE: No need to specify MPIGO or anything else!)
