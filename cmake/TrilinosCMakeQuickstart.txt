------------------------------------------------------------------------------
                         Trilinos CMake Quickstart
------------------------------------------------------------------------------


Last Updated: 2009/01/11


A) Getting set up to use CMake
------------------------------

(*) Installing CMake

  $ $TRILINOS_HOME/cmake/python/install-cmake.phy --install-dir=INSTALL_BASE_DIR

  This will result in cmake and related CMake tools being installed in
  INSTALL_BASE_DIR/bin.

  Getting help:

  $ $TRILINOS_HOME/cmake/python/install-cmake.phy --help

  NOTE:  


B) Getting Help
-----------------

(*) Finding CMake help at the website

    http://www.cmake.org

(*) Building CMake help locally

  $ cmake --help-full cmake.help.html

  (Open your web browser to the file cmake.help.html)



C) Configuring
---------------

(*) Viewing available configure-time options with documentation

  $ cd $BUILD_DIR
  $ rm CMakeCache.txt
  $ cmake -LAH -D Trilinos_ENABLE_ALL_PACKAGES:BOOL=ON \
      -D Trilinos_ENABLE_C:BOOL=OFF \
      -D Trilinos_ENABLE_CXX:BOOL=OFF \
      -D Trilinos_ENABLE_Fortran:BOOL=OFF \
       $TRILINOS_BASE_DIR

  NOTE: You can also just look at the text file CMakeCache.txt after any
  configure which has all of the cache variables and documentation.

(*) Viewing available configure-time options without documentation

  $ cd $BUILD_DIR
  $ rm CMakeCache.txt
  $ cmake -LA SAME_AS_ABOVE $TRILINOS_BASE_DIR

(*) Configuring Trilinos to build

  a) Using ccmake:

    $ ccmake $TRILINOS_BASE_DIR

  b) [Recommended] Create a 'do-configure' scripts like:

        EXTRA_ARGS=$@
        
        cmake \
          -D CMAKE_BUILD_TYPE:STRING=DEBUG \
          -D Trilinos_ENABLE_ALL_PACKAGES:BOOL=ON \
          -D Trilinos_ENABLE_TESTS:BOOL=ON \
          -D Trilinos_ENABLE_DEBUG:BOOL=ON \
          -D DART_TESTING_TIMEOUT:STRING=600 \
          -D CMAKE_VERBOSE_MAKEFILE:BOOL=TRUE \
          $EXTRA_ARGS \
          ../../../Trilinos

      and then run it as:

        $ ./do-configure [OTHER_OPTIONS]

      See Trilinos/sampleScripts/*cmake for real examples.

(*) Configuring Trilinos to build all packages with all tests and examples:

  $ ./do-configure \
     -D Trilinos_ENABLE_ALL_PACKAGES:BOOL=ON \
     -D Trilinos_ENABLE_TESTS:BOOL=ON

  NOTE: Specific packages can be disabled with
  Trilinos_ENABLE_PACKAGE:BOOL=OFF.

  NOTE: All examples are enabled by default by setting
  Trilinos_ENABLE_TESTS:BOOL=ON.

(*) Configuring a package(s) along with all of the packages it can use:

  $ ./do-configure \
     -D Trilinos_ENABLE_ALL_PACKAGES:BOOL=OFF \
     -D Trilinos_ENABLE_NOX:BOOL=ON \
     -D Trilinos_ENABLE_ALL_OPTIONAL_PACKAGES:BOOL=ON \
     -D Trilinos_ENABLE_TESTS:BOOL=ON

  NOTE: This set of arguments allows a user to turn on NOX as well as all
  packages that NOX can use.  However, tests and examples will only be turned
  on for NOX (or any other packages specifically enabled).

(*) Configuring Trilinos to test all effects of changing a given package(s):

  $ ./do-configure \
     -D Trilinos_ENABLE_ALL_PACKAGES:BOOL=OFF \
     -D Trilinos_ENABLE_Epetra:BOOL=ON \
     -D Trilinos_ENABLE_ALL_FORWARD_DEP_PACAKGES:BOOL=ON \
     -D Trilinos_ENABLE_TESTS:BOOL=ON

  NOTE: The above set of arguments will result in Epetra and all
  packages that depend on Epetra to be enabled and have all of their
  tests turned on.  Tests will not be enabled in packages that do not
  depend on Epetra in this case.  This speeds up and robustifies
  pre-checkin testing.

(*) Adding support for optional Third-Party Libraries (TPLs)

  -D TPL_ENABLE_<TPLNAME>:BOOL=ON

  where TPLNAME = Boost, MPI, etc.

  The headers, libraries, and library directories can then be specified with:

    <TPLNAME>_INCLUDE_DIRS: List of paths to the header include directories

    <TPLNAME>_LIBRARY_NAMES: List of unadorned library names, in the order of
    the link line.  The platform-specific prefixes (e.g.. 'lib') and postfixes
    (e.g. '.a', '.lib', or '.dll') will be added automatically.

    <TPLNAME>_LIBRARY_DIRS: The list of directories where the library files
    can be found.

  NOTE: The variables TPL_<TPLNAME>_INCLUDE_DIRS and TPL_<TPLNAME>_LIBRARIES
  are directly used by the CMake build infrastructure.  These variables are
  normally set by the varaibles <TPLNAME>_INCLUDE_DIRS,
  <TPLNAME>_LIBRARY_NAMES, and <TPLNAME>_LIBRARY_DIRS through a set of find
  commands but you can always override these and just directly set
  TPL_<TPLNAME>_INCLUDE_DIRS and TPL_<TPLNAME>_LIBRARIES.  This gives you
  directly control to set exactly what is used in the build process.

  Optional package-specific support for TPLs can be turned off by setting:

    -D <PACKAGE>_ENABLE_<TPLNAME>:BOOL=OFF

  where PACKAGE is Epetra, NOX etc.  This gives the user full control over
  what TPLs are supported by which package independently.

(*) Getting verbose output from configure

  $ ./do_configure -D Trilinos_VERBOSE_CONFIGURE:BOOL=ON

(*) Getting very verbose output from configure

  $ ./do_configure -D Trilinos_VERBOSE_CONFIGURE:BOOL=ON --debug-output --trace

(*) Viewing current values of cache variables

  $ cmake -LA $TRILINOS_BASE_DIR

  or just examine and grep the file CMakeCache.txt.

(*) Reconfiguring from scratch

  $ rm CMakeCache ; ./do-configure

  NOTE: Removing the CMakeCache.txt file is often needed when removing
  variables from the configure line.

(*) Seeing configure errors

  Configure time errors are shown in the file:

      $BUILD_BASE_DIR/CMakeFiles/CMakeError.log.


D) Building
---------------

(*) Discovering what targets are available to build after configuration:

  $ make help

(*) See all of the targets to build for a package:

  $ make help | grep <PACKAGE>_

  (where PACKAGE = Teuchos, Epetra, NOX, etc.)

(*) Building all of the targets for a package:

  $ make <PACKAGE>_all

  (where PACKAGE = Teuchos, Epetra, NOX, etc.)

(*) Building all of the libraries for a package:

  $ make <PACKAGE>_libs

  (where PACKAGE = Teuchos, Epetra, NOX, etc.)

(*) Figuring out how to build a single object file:

  Look for the name of the object file to build source file
  SomeSourceFile.cpp:

    $ make help | grep SomeSourceFile.o

  Build the source file:

    $ make WHATEVER_WAS_RETURNED_ABOVE


E) Testing
---------------

(*) Running the CTest tests:

  a) Using 'make test'

    $ make test

  b) Using 'ctest'

    $ ctest

    (see output in Testing/Temporary/LastTest.log)

    with verbose output to the console:

    $ ctest -VV

  c) Only running tests for a single package

    Running a single package test:

    $ ctest -W 100 -R '^<PACKAGE>_'

    (e.g. PACKAGE = Teuchos, Epetra, etc.)
    (see output in Testing/Temporary/LastTest.log)

  d) Running a single test with full output to the console:

    $ ctest -R FULL_TEST_NAME -VV

    (i.e. FULL_TEST_NAME = Teuchos_Comm_test, Epetra_MultiVector_test, etc. )

  e) Runing memory checking:

    Running memory tets for just a single package:

    $ ctest -R '^Epetra_' -T memcheck

    (see the detailed output in
    ./Testing/Temporary/LastDynamicAnalysis_DATE_TIME.log)
  
(*) Running the perl-based runtests tests from all of Trilinos:

  a) Serial tests:

    $ make runtests-serial

  b) MPI tests:

    $ make runtests-mpi

    (NOTE: No need to specify MPIGO or anything else!)
  
(*) Running the perl-based runtests tests for a single package:

  a) Serial tests:

    $ make <PACKAGE>-runtests-seial

    Where PACKAGE = Epetra, Thyra, NOX, etc.

  b) MPI tests:

    $ make <PACKAGE>-runtests-mpi

    (NOTE: No need to specify MPIGO or anything else!)



F) Installing
---------------

(*) Setting the install prefix and installing

  -D CMAKE_INSTALL_PREFIX:PATH=$HOME/PROJECTS/install/trilinos/mpi/opt


G) Packaging
---------------

(*) Creating a tarball of the source tree:

   $ make package_source

   NOTE: TThe above command will tar up *everything* in the source tree
   (except for files explicitly exluded in the CMakeLists.txt files) so make
   sure that you start with a totally clean source tree before you do this.
   Or, you could build doxygen documentation first and then tar up Trilinos
   and that would give you the source with doxygen documentation.
