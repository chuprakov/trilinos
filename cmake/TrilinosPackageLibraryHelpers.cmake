INCLUDE(Parse_Variable_Arguments)
INCLUDE(Global_Set)
INCLUDE(Append_Set)
INCLUDE(Append_Global_Set)
INCLUDE(Remove_Global_Duplicates)
INCLUDE(TrilinosTPLHelpers)


#
# Macro that configures the package's main config.h file
#

MACRO(TRILINOS_PACKAGE_CONFIGURE_FILE PACKAGE_NAME_CONFIG_FILE)

  IF (Trilinos_VERBOSE_CONFIGURE)
    MESSAGE("\nTRILINOS_PACKAGE_CONFIGURE_FILE: ${PACKAGE_NAME_CONFIG_FILE}")
  ENDIF()

  CONFIGURE_FILE(
    ${PACKAGE_SOURCE_DIR}/cmake/${PACKAGE_NAME_CONFIG_FILE}.in 
    ${CMAKE_CURRENT_BINARY_DIR}/${PACKAGE_NAME_CONFIG_FILE}
    )

  INSTALL(
    FILES ${CMAKE_CURRENT_BINARY_DIR}/${PACKAGE_NAME_CONFIG_FILE}
    DESTINATION ${TRILINOS_INSTALL_LIB_INCLUDE_DIR}
    COMPONENT ${PACKAGE_NAME}
    )

ENDMACRO()


#
# Macro used to add a package library
#

MACRO(TRILINOS_PACKAGE_ADD_LIBRARY LIBRARY_NAME)

  IF (Trilinos_VERBOSE_CONFIGURE)
    MESSAGE("\nTRILINOS_PACKAGE_ADD_LIBRARY: ${LIBRARY_NAME}")
  ENDIF()

  PARSE_ARGUMENTS(
    PARSE #prefix
    "HEADERS;NOINSTALLHEADERS;SOURCES;DEPLIBS" # Lists
    "" #Options
    ${ARGN} # Remaining arguments passed in
    )

  # Add the link directory for this library.

  LINK_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR})

  # NOTE: Above , this link path not really used here for anything.
  # Instead it is just added to the other set link library directories
  # that are already set.  These link directories are then extracted
  # and stored into stored in ${PACKAGE_NAME}_LIBRARY_DIRS.

  # Add whatever include directories have been defined so far

  INCLUDE_DIRECTORIES(AFTER ${${PACKAGE_NAME}_INCLUDE_DIRS})

  # Add whatever link directories have been added so far

  LINK_DIRECTORIES(${${PACKAGE_NAME}_LIBRARY_DIRS})
  LINK_DIRECTORIES(${${PACKAGE_NAME}_TEST_LIBRARY_DIRS})

  # Add dependent libraries passed directly in

  IF (PARSE_DEPLIBS AND Trilinos_VERBOSE_CONFIGURE)
    MESSAGE(STATUS "DEPLIBS = ${PARSE_DEPLIBS}")
  ENDIF()

  # Add the library and all the dependencies

  ADD_LIBRARY(${LIBRARY_NAME} ${PARSE_HEADERS} ${PARSE_NOINSTALLHEADERS}
    ${PARSE_SOURCES})

  APPEND_GLOBAL_SET(${PACKAGE_NAME}_LIB_TARGETS ${LIBRARY_NAME})
  APPEND_GLOBAL_SET(${PACKAGE_NAME}_ALL_TARGETS ${LIBRARY_NAME})




  # ToDo: Redo all of this package and TPL library handling.

  # We only want to link to the dependent package and TPL libraries when we need
  # to.  We only need to link to these dependent libraries when this is the first
  # library being created for the package or if this library does not depend
  # on other libraries created for this package.

  




  # Add whatever link libraries there are

  TARGET_LINK_LIBRARIES(${LIBRARY_NAME} ${${PACKAGE_NAME}_LIBRARIES})
  TARGET_LINK_LIBRARIES(${LIBRARY_NAME} ${${PACKAGE_NAME}_TEST_LIBRARIES})

  SET(EXTRA_DEP_LIBS)

  IF (PARSE_DEPLIBS)
    APPEND_SET(EXTRA_DEP_LIBS ${PARSE_DEPLIBS})
  ENDIF()

  # Add the dependent package libraries (if we have not done so yet for this package)

  # ToDo: Implement!

  # Add the TPL libraries (if we have not done so yet for this package)

  TRILINOS_PACKAGE_TARGET_SETUP_TPL_PATHS_LIBS(${PACKAGE_NAME} EXTRA_DEP_LIBS)

  TARGET_LINK_LIBRARIES(${LIBRARY_NAME} ${EXTRA_DEP_LIBS})





  
  # Add to the install target

  INSTALL(
    TARGETS ${LIBRARY_NAME}
      RUNTIME DESTINATION bin
      LIBRARY DESTINATION lib
      ARCHIVE DESTINATION lib
    COMPONENT ${PACKAGE_NAME}
    )
  
  INSTALL(
    FILES ${PARSE_HEADERS}
    DESTINATION ${TRILINOS_INSTALL_INCLUDE_DIR}
    COMPONENT ${PACKAGE_NAME}
    )

  # Append the new include dirs, library dirs, and libraries 

  GET_DIRECTORY_PROPERTY(INCLUDE_DIRS_CURRENT INCLUDE_DIRECTORIES)
  APPEND_GLOBAL_SET(${PACKAGE_NAME}_INCLUDE_DIRS ${INCLUDE_DIRS_CURRENT})

  GET_DIRECTORY_PROPERTY(LIBRARY_DIRS_CURRENT LINK_DIRECTORIES)
  APPEND_GLOBAL_SET(${PACKAGE_NAME}_LIBRARY_DIRS ${LIBRARY_DIRS_CURRENT})

  APPEND_GLOBAL_SET(${PACKAGE_NAME}_LIBRARIES ${LIBRARY_NAME})

  REMOVE_GLOBAL_DUPLICATES(${PACKAGE_NAME}_INCLUDE_DIRS)
  REMOVE_GLOBAL_DUPLICATES(${PACKAGE_NAME}_LIBRARY_DIRS)
  REMOVE_GLOBAL_DUPLICATES(${PACKAGE_NAME}_LIBRARIES)

  IF (Trilinos_VERBOSE_CONFIGURE)
    PRINT_VAR(${PACKAGE_NAME}_INCLUDE_DIRS)
    PRINT_VAR(${PACKAGE_NAME}_LIBRARY_DIRS)
    PRINT_VAR(${PACKAGE_NAME}_LIBRARIES)
  ENDIF()

  # 2008/11/21: rabartl: ToDo: Above: Generalize this for test-only
  # libraries!

ENDMACRO()


MACRO(TRILINOS_PACKAGE_EXPORT_DEPENDENCY_VARIABLES)
  # 2008/11/21: rabartl: ToDo: Get rid if this macro all together!
ENDMACRO()


#
# Private macros
#


MACRO(TRILINOS_PRIVATE_ADD_DEP_PACKAGES_INCLUDES_AND_LIBS PACKAGE_NAME
  DEP_LIST_TYPE EXTRA_DEP_LIBS
  )
  FOREACH(DEP_PKG ${${PACKAGE_NAME}_${DEP_LIST_TYPE}})
    TRILINOS_PRIVATE_ADD_DEP_PACKAGE_INCLUDES_AND_LIBS(
      ${PACKAGE_NAME} ${DEP_PKG} ${EXTRA_DEP_LIBS})
  ENDFOREACH()
ENDMACRO()


MACRO(TRILINOS_PRIVATE_ADD_DEP_PACKAGE_INCLUDES_AND_LIBS PACKAGE_NAME
  DEP_PKG EXTRA_DEP_LIBS
  )
  INCLUDE_DIRECTORIES(${${DEP_PKG}_INCLUDE_DIRS})
  LINK_DIRECTOIRES(${${DEP_PKG}_LIBRARY_DIRS})
  APPEND_SET(${EXTRA_DEP_LIBS} ${${DEP_PKG}_LIBRARIES})
ENDMACRO()


MACRO(TRILINOS_PACKAGE_TARGET_SETUP_TPL_PATHS_LIBS PACKAGE_NAME EXTRA_DEP_LIBS)

  SET(ALL_TPLS)

  FOREACH(TPL ${${PACKAGE_NAME}_LIB_REQUIRED_DEP_TPLS})
    APPEND_SET(ALL_TPLS ${TPL})
  ENDFOREACH()

  FOREACH(TPL ${${PACKAGE_NAME}_LIB_OPTIONAL_DEP_TPLS})
    ASSERT_DEFINED(${PACKAGE_NAME}_ENABLE_${TPL})
    IF (${PACKAGE_NAME}_ENABLE_${TPL})
      APPEND_SET(ALL_TPLS ${TPL})
    ENDIF()
  ENDFOREACH()

  TPL_SORT_TPLS(ALL_TPLS)

  FOREACH(TPL ${ALL_TPLS})
    APPEND_SET(${EXTRA_DEP_LIBS} ${TPL_${TPL}_LIBRARIES})
    INCLUDE_DIRECTORIES(${TPL_${TPL}_INCLUDE_DIRS})
    LINK_DIRECTORIES(${TPL_${TPL}_LIBRARY_DIRS})
  ENDFOREACH()

ENDMACRO()
