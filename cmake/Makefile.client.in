# @HEADER
# ************************************************************************
# 
#                              Sundance
#                 Copyright (2005) Sandia Corporation
# 
# Copyright (year first published) Sandia Corporation.  Under the terms 
# of Contract DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government 
# retains certain rights in this software.
# 
# This library is free software; you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation; either version 2.1 of the
# License, or (at your option) any later version.
#  
# This library is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#                                                                                 
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
# USA                                                                                
# Questions? Contact Kevin Long (krlong@sandia.gov), 
# Sandia National Laboratories, Livermore, California, USA
# 
# ************************************************************************
# @HEADER

# ------------------------------------------------------------------------
#
# Makefile.client is an example of a simple makefile that will let
# a user build a Trilinos-based application in an arbitrary directory.
# It will be configured by cmake to refer to the Trilinos installation
# directory. If you want to use the same client makefile with several
# Trilinos installations (debug and optimized, for instance) you can do 
# so: you'll merely need to hand-edit the TRILINOS_INSTALL_DIR that has been
# set automatically during installation.
#
# Author: Kevin Long, Texas Tech University
#         kevin.long@ttu.edu
# 
# To use this makefile, you need to do two steps:
# (1) Copy Makefile.client to the location of your application source.
# (2) Edit the definition of EXTRA_OBJS to list names of any object files
#     required by your application other than that corresponding to the 
#     application name. 
#
# Example: Suppose you are building an application "RANS.exe" whose code is in 
# three source files: RANS.cpp, TurbulenceModel.cpp, and BC.cpp. You have
# installed Trilinos in /home/bob/Soft/Trilinos/INSTALL. You are building your 
# application in /home/bob/FlowModels/RANS. You would do the following:
#
# (1) copy the file /home/bob/Soft/Trilinos/INSTALL/Makefile.client 
#     to /home/bob/FlowModels/RANS/Makefile
# (2) Edit /home/bob/FlowModels/RANS/Makefile to set 
#     EXTRA_OBJS = TurbulenceModel.o BC.o
# (3) Do "make RANS.exe" to build the executable.
# 
# ------------------------------------------------------------------------




#--------------------------------------------------------------------------
# Set the value of TRILINOS_INSTALL_DIR to point to the directory
# into which you have installed Trilinos. For example, if you have
# installed into /usr/local/trilinos-3.14.59, this variable will be set to
#
# TRILINOS_INSTALL_DIR = /usr/local/trilinos-3.14.59 
#
# automatically by CMake. If you're using
# a single application makefile to build against several versions of Trilinos
# you may need to edit TRILINOS_INSTALL_DIR manually. 
#
#--------------------------------------------------------------------------

TRILINOS_INSTALL_DIR = @CMAKE_INSTALL_PREFIX@




#--------------------------------------------------------------------------
# If your application contains more than one source file, list any additional
# object files in the variable EXTRA_OBJS, e.g.,
# 
# EXTRA_OBJS = SomeFile.o SomeOtherFile.o
#
# In this section you can also add any dependency specifications for these
# extra files, e.g.,
# 
# SomeFile.o: SomeFile.hpp
# SomeOtherFile.o: SomeOtherFile.hpp SomeFile.hpp
# 
#--------------------------------------------------------------------------

EXTRA_OBJS =


#--------------------------------------------------------------------------
# The remaining lines will not normally need to be changed. 
#
# Cases where you'll need to edit them include 
# (1) Your application needs some compiler flags not used in the Trilinos
#     build. Be careful to avoid inconsistency: for instance, mixing C++ 
#     libraries built with and without STL checking can cause segfaults.
# (2) Your application must link to some 3rd party libraries not among those 
#     specified when building Trilinos. You'll need to add them to the
#     linker command line. You may need to add their locations
#     to the library search path, and to the rpath if you're using shared
#     libraries.  
#--------------------------------------------------------------------------


# Include the Trilinos export makefile from package=@PACKAGE_DIR_NAME@.
include $(TRILINOS_INSTALL_DIR)/packages/@PACKAGE_DIR_NAME@/Makefile.export

# Add the Trilinos installation directory to the search paths
# for libraries and headers
LIB_PATH = $(TRILINOS_INSTALL_DIR)/lib

INCLUDE_PATH = $(TRILINOS_INSTALL_DIR)/include

# Set the C++ compiler and flags to those specified in the export makefile
CXX = $(@CAPS_PACKAGE_NAME@_CXX_COMPILER)

CXXFLAGS = $(@CAPS_PACKAGE_NAME@_CXX_FLAGS)

# Add the Trilinos libraries, search path, and rpath to the 
# linker command line arguments 
LIBS = $(SHARED_LIB_RPATH_COMMAND) $(@CAPS_PACKAGE_NAME@_LIBRARIES) $(@CAPS_PACKAGE_NAME@_TPL_LIBRARIES) $(@CAPS_PACKAGE_NAME@_EXTRA_LD_FLAGS) 


# Rules for building executables and objects. 
%.exe : %.o $(EXTRA_OBJS)
	$(CXX) -o $@ $(LDFLAGS) $(CXXFLAGS) $< $(EXTRA_OBJS) -L$(LIB_PATH) $(LIBS)

%.o : %.cpp
	$(CXX) -c -o $@ $(CXXFLAGS) -I$(INCLUDE_PATH) $(@CAPS_PACKAGE_NAME@_TPL_INCLUDES) $<

