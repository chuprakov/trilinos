-----------------------------------
TODOs for the Trilinos/CMake System
-----------------------------------

Last updated: 2008/11/18


Active items:
-------------

(*) [Ross, Brent, Roger] (Ongoing): Add basic CMake support for every Trilinos
package being used by SIERRA and needed to create a new NonlinearStrategies
package.

(*) [Everyone] (Ongoing): Add to the HOWTO.CMAKEIFY_PACKAGE file a list of all
common scenarios that we need to cmakify a package so that users that want to
do something can just go down the list to learn how to implement that
funcitonality.


Backlog:
--------

(*) [???] Experiment with extended CTest scripting to avoid the
configure failure problems and create a centralized CTest script and
specializations of that script.

(*) [???] Write pre-checkin tool that will configure a SERIAL_DEBUG
and MPI_OPT build directory and enable only "Primary Stable" code.
This will need a minimal configuration script to pull in only the
basic info needed in order to find compilers, MPI, BLAS, and LAPACK
and nothing else.

(*) [???] Experiment with using cmake -P <script_file> as a
platform-independent scripting language.  We can use this for creating
platform-independent scripts that will allow us to run on any
platform.

(*) [???] Rewrite the MPI find module from sctatch.  The built-in one
in CMake is just not very good.  Also, make this automatically set up
the C++ and C compilers based on the MPI compilers that are found.  We
are going to have to take control over this and do it right.  You
should be able to just set MPI_BASE_DIR and everything else should be
figured out automatically.

(*) [???] Sacado tradop tests use shell scripts to generate files.
Need to find a simpler way to do this.

(*) [???] Upgrade TRILINOS_PACKAGE_ADD_LIBRARY(...) and
TRILINOS_ADD_EXECUTABLE(...) to handle test libraries.  Add
NOINSTALLLIB argument for test libraries that you don't want to
install.  This is needed for some NOX test librries.  This effects
Isorropia, NOX, Sacado...

(*) [???] Add option SKIPMEMCHECK to TRILINOS_ADD_[EXECUTABLE_AND_]TEST(...) 
to add test to CMAKE_CUSTOM_MEMCHECK_IGNORE that gets written to
CTestCustomer.ctest.

(*) [???] Change the macro TPL_DELCARE_LIBRARIES(...) to validate that
all pased in header files are found (This was requested by Roger P.).

(*) [???] Rename and reorganize the package architecture modules and
macros/function to be as Trilinos-independent as possible and put them
in cmake/package_arch.  This will allow them to be reused for projects
like Dakota, SIERRA, and others and take advantage of all that is
being constructed.

(*) [???] Add unit testing infrastructure for TRILINOS_ADD_EXECUTABLE(...),
TRILINOS_ADD_TEST(...).  These unit tests will serve both as tests and as
documentation.  I need to see if you can redefine ADD_EXECUTABLE(...),
ADD_TEST(...), and other commands so that I can unit test that these things
are being set correctly.  If not, then I can always wrap these with my own and
then redefine them when unit testing.

(*) [???] Add new TPL_DEFAULT_[INCLUDE_DIRS,LIBRARY_DIRS] user
varibles that will be the default for all
TPL_${TPL_NAME}_[INCLUDE_DIRS,LIBRARY_DIRS] user cache variables.

(*) [???] Fix TRILINOS_ADD_EXECUTABLE(...) to not add ./ to absolute paths

(*) [???] Add file CTestCustom.cmake.in in Trilinos/cmake and do a
CONFIGURE_FILE(...) command to put it in the base build tree.  In this file,
set CTEST_CUSTOM_MAXIMUM_PASSED_TEST_OUTPUT_SIZE and
CTEST_CUSTOM_MAXIMUM_FAILED_TEST_OUTPUT_SIZE and any other options given at
http://www.vtk.org/Wiki/CMake_Testing_With_CTest.

(*) [???] Set the variable CPACK_SOURCE_IGNORE_FILES to ignore groups of files
(and hopefully directories) that you don't want to add to the source
distribution tarball!  We need to be able to set these at the global level as
an internal cache variables and then reset them at the package level.

(*) [???] Automatically add the right compiler options when on the
primary development platform (i.e. lots of warnings).  We can do this
automatically with the module CheckCXXSourceCompiles(....).  This will
be used for pre-checkin script.

(*) [???] Add a global 'libs' target to rebuild only libraries so that
we can skip unecessary relinking when shared libraries are used.  This
target can be built by simply looping over all enabled packages and
adding dependencies on ${PACKAGE}_libs.

(*) [???] Change all source files to be globbed and use internal ifdefs to
control what gets built.  This will make it easier to maintain the BJAM build
system.

(*) [???] Add a POSTFIXES argument to TRILNOS_ADD_[EXECUTABLE_AND_]TEST(...) 
to replace the silly numeric numbering.  This will be important for keeping
track of test results for different enables/disables.

(*) [???] Change how XXX_config.h.in files get created so that they get
created automatically.  We can do this by changing the scripts
TRILINOS_ADD_OPTION(...) and TRILINOS_PACKAGE_CONFIGURE_FILE(...) and adding a
few new scripts.

(*) [???] Upgrade Trilinos/CMakeLists.txt and
dump-package-dep-table.py add an option to only show dependencies for
enabled packages.

(*) [???] dump-package-dep-table.py to show tables for TPL
dependencies

(*) [???] Add installation testing for CMake build system.  Here, we
will build and install libraries, and then configure a new project
against this.  It would be good to install a PACKAGEConfig.cmake file
for each package that could then be used to specify what to build
against.

(*) [???] Revive system for generating sample output.  I would like to
have a top-level target called something like
Trilinos_generate_sample_output and this target should dependend on
package-level targets ${PACKAGE_NAME}_generate_sample_output.  Some
type of macro should be created to automate this process.

(*) [???] Clean up tests and examples:

- Move (almost) all tests into subdirectories since that is the right thing to
do.

(*) [???] Set up our own CDash results for Trilinos serial and mpi

- Set up a MS Windows test machine feeding into Trilinos dashbaord
  + Get automated builds/tests with CTest/CDash running on Esteban
  + Get CVS update working

- Set up a MAC test machine feeding into Trilinos dashboard
  + Look into 

- Add 'serial' and 'mpi' categories to dashboard on trilinos.sandia.gov

(*) [???] Put out binary Windows and Mac installers for an interm
release of Trilinos up on website and send an email to
Trilinos-Announce allowing others to use this.

(*) [???] Add an auto-documentation system so that each package and
print detailed documentation on what options that it supports.  In
this way, we could provide an option like Trilinos_PRINT_DOCUMENTATION
who's main purpose was to print out a complete set of documentation at
the top level and for all of the enabled packages.  I think that we
could set this up so that it would automatically print out all of the
cache variables with documentation inside of the detailed
documentation.

(*) [???] Create automated support for stripping out all "Experimental" code
(both files and code inside of ifdefs) so that we don't put it out in releases
of Trilinos.  This negates the need for the autotools way of creating
tarballs.  Or, you could add to the CPACK_SOURCE_IGNORE_FILES varaible
automatically to exclude all such files.

(*) [???] Add the Trilinos LGPL license to the NSIS installer

(*) [???] Add automatic demangle checking with try_compile(...)

(*) [???] Create separate dashboards for each Trilinos package.  For
now, we could write an advanced ctest script that would loop through
all of the enabled Trilinos packages and then build and run the tests
just for that package.  We would therefore have each Trilinos package
as a separate "project".  For the purpose of testing, we could do this
by setting Trilinos_ENABLE_ALL_OPTIONAL_PACKAGES:BOOL=ON for each
package.  This would allow us to get around the more complex problems
with CDash.  This would require some more disk space for the results
but at least we would get the information that we need.  We can also
run a full rebuild and retest in the end to give a an overall package
for Trilinos.


Completed:
----------
