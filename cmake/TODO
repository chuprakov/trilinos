
TODOs for the Trilinos/CMake system

Last updated: 2008/09/28

(*) [Ross] Create python script to checkout, untar, build, and install CMake
in one shot.

(*) [Ross] Add automatic demangle checking

(*) [Ross] Add unit testing infrastructure for
TRILINOS_ADD_EXECUTABLE(...), TRILINOS_ADD_TEST(...).  These unit
tests will serve both as tests and as documentation.

(*) [Ross] Add the package name as a prefix to all test and example
executables.  This will require changes to the
TRILINOS_ADD_EXECUTABLE(..) and TRILINOS_ADD_TEST(...) functions.  It
will also require changes to all of the existing Makefile.am files
that create these tests in the autotools system and in the
test/definition files.

(*) [Ross] Clean up tests and examples:

- Move (almost) all tests into subdirectories since that is the right thing to
do.

(*) [Ross] Add a 'libs' target to rebuild only libraries so that we can skip
unecessary relinking when shared libraries are used

(*) [Ross] Add a POSTFIXES argument to TRILNOS_ADD_[EXECUTABLE_AND_]TEST(...) 
to replace the silly numeric numbering.  This will be important for keeping
track of test results for different enables/disables.

(*) [???] Change all source files to be globbed and use internal ifdefs to
control what gets built.  This will make it easier to maintain the BJAM build
system.

(*) [Esteban] Set up our own CDash results for Trilinos serial and mpi

- Set up a MS Windows test machine feeding into Trilinos dashbaord
  + Get automated builds/tests with CTest/CDash running on Esteban
  + Get CVS update working

- Set up a MAC test machine feeding into Trilinos dashboard
  + Look into 

- Add 'serial' and 'mpi' categories to dashboard on trilinos.sandia.gov

(*) [Esteban] Experiment with using CPack to create a MS Windows binary
installer (NSIS)

- Post a installer exe file on software.sandia.gov (hidden) and send
out link in an email to Trilinos-Announce allowing others to get
Trilinos.

(*) [Everyone] Expand TrlinosCMakeQuickstart.txt
- Configuring Trilinos to build
- Getting debug output
- Building
- Running tests (cmake and runtests-[serial,mpi])
- Will lead into a rewriting of the Trilinos Developers Guide

(*) [Esteban] Add the Trilinos LGPL license to the NSIS installer

(*) [???] Write unit tests for all important Trilinos Cmake
macros (like TRILINOS_ADD_[EXECUTABLE,TEST,EXECUTABLE_AND_TEST)(...) etc.)

(*) [???] Create separate dashboards for each Trilinos package.  For
now, we could write an advanced ctest script that would loop through
all of the enabled Trilinos packages and then build and run the tests
just for that package.  We would therefore have each Trilinos package
as a separate "project".  For the purpose of testing, we could do this
by setting Trilinos_ENABLE_ALL_OPTIONAL_PACKAGES:BOOL=ON for each
package.  This would allow us to get around the more complex problems
with CDash.  This would require some more disk space for the results
but at least we would get the information that we need.  We can also
run a full rebuild and retest in the end to give a an overall package
for Trilinos.

Completed:
----------


(*) [Ross] Add automatic Fortran 77 name mangling [Done]


(*) [Ross] Set up a linux machine to do nightly builds of serial debug
and mpi optimized to send to dashboard.  These are done on new machine
godel.sandia.gov.  See 
