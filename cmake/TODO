-----------------------------------
TODOs for the Trilinos/CMake System
-----------------------------------

Last updated: 2008/11/18


Active items:
-------------

(*) [Everyone] (Ongoing): Add to the HOWTO.CMAKEIFY_PACKAGE file a list of all
common scenarios that we need to cmakify a package so that users that want to
do something can just go down the list to learn how to implement that
funcitonality.

(*) [Ross and Kitware] (Ongoing) Create separate dashboards for each
Trilinos package.  Kitware is going to actively work on this.

(*) [Roger] Add configure-time test for LAPACK support for GGEV and/or GEEV to
define HAVE_LAPACK_GGEV/GEEV.  See the file teuchos/config/acx_ggev.m4.


Backlog:
--------

(*) [???] Write pre-checkin tool that will configure a SERIAL_DEBUG and
MPI_OPT build directory and enable only "Primary Stable" code.  This will need
a minimal configuration script to pull in only the basic info needed in order
to find compilers, MPI, BLAS, and LAPACK and nothing else.

(*) [???] Experiment with using cmake -P <script_file> as a
platform-independent scripting language.  We can use this for creating
platform-independent scripts that will allow us to run on any platform.  This
will also allow us to append more types of tests on to an existing test like
running the compareOutput program.

(*) [???] Create new PACKAGE_ADD_ADVANCED_TEST(...) function that will group
together a set of commands (with various pass/fail critieria) and then run as
a CMake -P script.

(*) [???] Add installation testing for the CMake build system.  Here, we will
build and install libraries, and then configure the tests and examples in a
new build directory against this.  It would be good to install a
PACKAGEConfig.cmake file for each package that could then be used to specify
what to build against.  We could also consider makefile fragments instead and
just kill two birds with one stone.

(*) [???] Add installation testing for the autotools installed libraries.
This will be done in the same way as with the CMake built and installed
libraries and headers instead we will use the autotools system to build and
install the libraries and headers instead.  The CMake build system would be
used to configure and build the tests and examples against the installed
libraries and headers.

(*) [???] Add option SKIPMEMCHECK to PACKAGE_ADD_[EXECUTABLE_AND_]TEST(...) to
add test to CMAKE_CUSTOM_MEMCHECK_IGNORE that gets written to
CTestCustomer.ctest.

(*) [???] Add a global 'libs' target to rebuild only libraries so that we can
skip unecessary relinking when shared libraries are used.  This target can be
built by simply looping over all enabled packages and adding dependencies on
${PACKAGE}_libs.

(*) [???] Add unit testing infrastructure and documentation for
PACKAGE_ADD_EXECUTABLE(...) and PACKAGE_ADD_TEST(...).  These unit tests will
serve both as tests and as extra documentation.  I need to see if you can
redefine ADD_EXECUTABLE(...), ADD_TEST(...), and other commands so that I can
unit test that these things are being set correctly.  If not, then I can
always wrap these with my own and then redefine them when unit testing.

(*) [???] Change the macro TPL_DELCARE_LIBRARIES(...) to validate that all
pased in header files are found (This was requested by Roger P.).

(*) [???] Add new TPL_DEFAULT_[INCLUDE_DIRS,LIBRARY_DIRS] user variables that
will be the default for all TPL_${TPL_NAME}_[INCLUDE_DIRS,LIBRARY_DIRS] user
cache variables.

(*) [???] Set the variable CPACK_SOURCE_IGNORE_FILES to ignore groups of files
(and hopefully directories) that you don't want to add to the source
distribution tarball!  We need to be able to set these at the global level as
an internal cache variables and then reset them at the package level.

(*) [???] Change all source files to be globbed and use internal ifdefs to
control what gets built.  This will make it easier to maintain the BJAM build
system.  I have done this for MOOCHO and it is great.

(*) [???] Add POSTFIX and POSTFIXES arguments to
PACKAGE_ADD_[EXECUTABLE_AND_]TEST(...)  to avoid duplicating the exec name in
NAME and to replace the silly numeric numbering.  This will be important for
keeping track of test results for different enables/disables.

(*) [???] Upgrade Trilinos/CMakeLists.txt and dump-package-dep-table.py add an
option to only show dependencies for enabled packages.  Actually, this could
be done from within the CMake code when generating the XML file to only add
entries for enabled packages.  It would be good to have configure time option
to control this.  By default, only show packages that are enabled.

(*) [???] Update dump-package-dep-table.py to print a table of TPLs that
packages depend on.

(*) [???] Revive system in CMake for generating sample output.  I would like
to have a top-level target called something like
Trilinos_generate_sample_output and this target should dependend on
package-level targets ${PACKAGE_NAME}_generate_sample_output.  Some type of
macro should be created to automate this process.

(*) [???] Clean up tests and examples:

- Move (almost) all tests into subdirectories since that is the right
thing to do.

(*) [???] Set up our own CDash results for Trilinos serial and mpi

- Set up a MS Windows test machine feeding into Trilinos dashbaord
  + Get automated builds/tests with CTest/CDash running on Esteban
  + Get CVS update working

- Set up a MAC test machine feeding into Trilinos dashboard ...

(*) [???] Add an auto-documentation print system so that each package
has detailed documentation on what options that it supports.  In this
way, we could provide an option like Trilinos_PRINT_DOCUMENTATION
who's main purpose was to print out a complete set of documentation at
the top level and for all of the enabled packages.  I think that we
could set this up so that it would automatically print out all of the
cache variables with documentation inside of the detailed
documentation.  We may need to an external tool to do this that would
read everything out of CMakeCache.txt.

(*) [???] Create automated support for stripping out all "Experimental" code
(both files and code inside of ifdefs) so that we don't put it out in releases
of Trilinos.  This negates the need for the autotools way of creating
tarballs.  Or, you could add to the CPACK_SOURCE_IGNORE_FILES varaible
automatically to exclude all such files.

(*) [???] Add the Trilinos LGPL license to the NSIS installer


Tentative:
----------
