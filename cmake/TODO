-----------------------------------
TODOs for the Trilinos/CMake System
-----------------------------------


Active items:
-------------

(*) [Ross and Brent] Automated CTest/CDash testing:

- [Ross] Add Primary Stable Code versions of serial and build builds

- [Ross and Brent] Move platform-specific testing scripts into
Trilinos/cmake/ctest/drivers/COMPUTER_NAME.  This will make it cleaner to add
more test machines.

- [Ross] Add automated support for turning on SS TPLs when building

- [Brent] Get a Windows CSRI machine set up to build Trilinos Dev with CMake
and run nightly tests.



Backlog:
--------

(*) [???] Write pre-checkin tool that will configure a SERIAL_DEBUG and
MPI_OPT build directory and enable only "Primary Stable" code.  This will need
a minimal configuration script to pull in only the basic info needed in order
to find compilers, MPI, BLAS, and LAPACK and nothing else.

(*) [???] Add the option TPL_ENABLE_ALL_TPLS that will be set to OFF by
default but when set to ON will enable all PS TPLs and when
Trilinos_ENABLE_SECONDARY_STABLE_CODE=ON will also enable all SS TPLs.
Therefore, by setting Trilinos_ENABLE_ALL_PACKAGES=ON, TPL_ENABLE_ALL_TPLS=ON,
and Trilinos_ENABLE_SECONDARY_STABLE_CODE=ON and this will make sure that you
capture all of the SS code and make sure that you test correctly.

(*) [???] Update all SS optional enables in Trilinos to have a default value
based on Trilinos_ENABLE_SECONDARY_STABLE_CODE to turn on by default those
parts of their package that they don't consider PS code but are SS.  For
example, EpetraExt_BUILD_GRAPH_REORDERINGS should default to ON if
Trilinos_ENABLE_SECONDARY_STABLE_CODE=ON.

(*) [???] Resolve the runtime MPI errors on godel: Perhaps we should just
rebuild and reinstall MPI on godel.

(*) [???] Go back over packages and add remaining TPL support and configure
options.

(*) [???] Add a global 'libs' target to rebuild only libraries so that we can
skip unecessary relinking when shared libraries are used.  This target can be
built by simply looping over all enabled packages and adding dependencies on
${PACKAGE}_libs.

(*) [???] Add installation testing for the CMake build system.  Here, we will
build and install libraries, and then configure the tests and examples in a
new build directory against this.  It would be good to install a
PACKAGEConfig.cmake file for each package that could then be used to specify
what to build against.  We could also consider makefile fragments instead and
just kill two birds with one stone.

(*) [???] Add installation testing for the autotools installed libraries.
This will be done in the same way as with the CMake built and installed
libraries and headers instead we will use the autotools system to build and
install the libraries and headers instead.  The CMake build system would be
used to configure and build the tests and examples against the installed
libraries and headers.

(*) [???] Revise the behavior of Trilinos_ENABLE_ALL_OPTIONAL_PACKAGES=ON so
that it only enables packages needed for the initial set of enabled packages.
Currently, all packges used by the libraries and the tests are being enabled.
However, this is too much.  You only need to enabled the optional and required
packages for the tests and examples of the initial set of required packages.
To implement the right set of packages, first you need to loop forward over
all of the currently enabled packages that have enabled tests and/or examples
and enable all of the packages that are test/example dependencies (required
and optional).  Then you need to loop in reverse over all currenty enabled
packages and enabled all required and optional library dependent packages.  At
the end of this, all of the packages that could possibly affect the libraries,
tests and examples of the set of initially enabled packages will be enabled.

(*) [???] Add option SKIPMEMCHECK to PACKAGE_ADD_[EXECUTABLE_AND_]TEST(...) to
add test to CMAKE_CUSTOM_MEMCHECK_IGNORE that gets written to
CTestCustomer.ctest.

(*) [???] Set the variable CPACK_SOURCE_IGNORE_FILES to ignore groups of files
(and hopefully directories) that you don't want to add to the source
distribution tarball!  We need to be able to set these at the global level as
an internal cache variables and then reset them at the package level.

(*) [???] Change all source files to be globbed and use internal ifdefs to
control what gets built.  This will make it easier to maintain the BJAM build
system.  I have done this for MOOCHO and it is great.

(*) [???] Add POSTFIX and POSTFIXES arguments to
PACKAGE_ADD_[EXECUTABLE_AND_]TEST(...)  to avoid duplicating the exec name in
NAME and to replace the silly numeric numbering.  This will be important for
keeping track of test results for different enables/disables.

(*) [???] Upgrade Trilinos/CMakeLists.txt and dump-package-dep-table.py add an
option to only show dependencies for enabled packages.  Actually, this could
be done from within the CMake code when generating the XML file to only add
entries for enabled packages.  It would be good to have configure time option
to control this.  By default, only show packages that are enabled.

(*) [???] Update dump-package-dep-table.py to print a table of TPLs that
packages depend on.

(*) [???] Revive system in CMake for generating sample output.  I would like
to have a top-level target called something like
Trilinos_generate_sample_output and this target should dependend on
package-level targets ${PACKAGE_NAME}_generate_sample_output.  Some type of
macro should be created to automate this process.

(*) [???] Add an auto-documentation print system so that each package has
detailed documentation on what options that it supports.  In this way, we
could provide an option like Trilinos_PRINT_DOCUMENTATION who's main purpose
was to print out a complete set of documentation at the top level and for all
of the enabled packages.  I think that we could set this up so that it would
automatically print out all of the cache variables with documentation inside
of the detailed documentation.  We may need to an external tool to do this
that would read everything out of CMakeCache.txt.

(*) [???] Create automated support for stripping out all "Experimental" code
(both files and code inside of ifdefs) so that we don't put it out in releases
of Trilinos.  This negates the need for the autotools way of creating
tarballs.  Or, you could add to the CPACK_SOURCE_IGNORE_FILES varaible
automatically to exclude all such files.

(*) [???] Add the Trilinos LGPL license to the NSIS installer


Tentative:
----------
