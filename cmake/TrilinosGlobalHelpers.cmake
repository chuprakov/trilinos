
INCLUDE(Trilinos_Add_Option)
INCLUDE(TrilinosHelpers)

#
# 2008/10/06: rabartl:
#
# Below, we change the value of user cache values like
# Trilinos_ENABLE_${PACKAGE_NAME}, ${PACKAGE_NAME}_ENABLE_TESTS, and
# ${PACKAGE_NAME}_ENABLE_EXAMPLES by just setting them to regular variables
# instead of putting them back on the cache.  That means that they are used as
# global varibles but we don't want to distrube the cache since that would
# change the behavior for future invocations of cmake.  Because of this, these
# macros must all be called from the top-level Trilinos CMakeLists.txt file.
#
# I had to do it this way in order to be able to get the right behavior which
# is:
#
# 1) Override the value of these variables in all CMake processing
#
# 2) Avoid changing the user cache values because that would be confusing and
# would make it hard to change package enables/disable later without blowing
# away the cache
# 

#
# Macro that sets up standard user options for each package
#

MACRO(TRILINOS_INSERT_STANDARD_PACKAGE_OPTIONS PACKAGE_NAME)

  #MESSAGE("TRILINOS_INSERT_STANDARD_PACKAGE_OPTIONS: ${PACKAGE_NAME}")

  SET( Trilinos_ENABLE_${PACKAGE_NAME} "" CACHE BOOL
    "Enable the ${PACKAGE_NAME} package.")
  SET( ${PACKAGE_NAME}_ENABLE_TESTS "" CACHE BOOL
    "Build ${PACKAGE_NAME} tests." )
  SET( ${PACKAGE_NAME}_ENABLE_EXAMPLES "" CACHE BOOL
    "Build ${PACKAGE} examples." )

ENDMACRO()


#
# Macro that helps to set up forward package dependency lists
#

FUNCTION(TRILINOS_APPEND_FORWARD_DEP_PACKAGES PACKAGE_NAME LIST_TYPE)

  SET(DEP_PKG_LIST_NAME "${PACKAGE_NAME}_${LIST_TYPE}")

  #MESSAGE("DEP_PKG_LIST_NAME = ${DEP_PKG_LIST_NAME}")
  #MESSAGE("${DEP_PKG_LIST_NAME} = ${${DEP_PKG_LIST_NAME}}")

  FOREACH(DEP_PKG ${${DEP_PKG_LIST_NAME}})
    #MESSAGE("DEP_PKG = ${DEP_PKG}")
    SET(FWD_DEP_PKG_LIST_NAME "${DEP_PKG}_FORWARD_${LIST_TYPE}")
    #MESSAGE("FWD_DEP_PKG_LIST_NAME = ${FWD_DEP_PKG_LIST_NAME}")
    IF (NOT DEFINED ${FWD_DEP_PKG_LIST_NAME})
      MESSAGE(SEND_ERROR "Error, the package '${DEP_PKG}' is listed as a dependency of the package '${PACKAGE_NAME}' in the list '${DEP_PKG_LIST_NAME}' but the package '${DEP_PKG}' is listed later in the package order.  We do not allow circular package dependencies!")
    ENDIF()
    SET(${FWD_DEP_PKG_LIST_NAME} ${${FWD_DEP_PKG_LIST_NAME}} ${PACKAGE_NAME} PARENT_SCOPE)
  ENDFOREACH()

ENDFUNCTION()


#
# Private helper macro
#

MACRO(TRILINOS_PRIVATE_ADD_OPTIONAL_PACKAGE_ENABLE PACKAGE_NAME OPTIONAL_DEP_PACKAGE)

  SET( ${PACKAGE_NAME}_ENABLE_${OPTIONAL_DEP_PACKAGE} "" CACHE BOOL
    "Enable optional support for ${OPTIONAL_DEP_PACKAGE} in ${PACKAGE_NAME}" )

ENDMACRO()


#
# Macro that enables optional package interdependencies dependancies
#

MACRO(TRILINOS_ADD_OPTIONAL_PACKAGE_ENABLES PACKAGE_NAME)

  #MESSAGE("\nTRILINOS_ADD_OPTIONAL_PACKAGE_ENABLES: ${PACKAGE_NAME}")

  FOREACH(OPTIONAL_DEP_PACKAGE ${${PACKAGE_NAME}_LIB_OPTIONAL_DEP_PACKAGES})
    TRILINOS_PRIVATE_ADD_OPTIONAL_PACKAGE_ENABLE(
      ${PACKAGE_NAME} ${OPTIONAL_DEP_PACKAGE} )
  ENDFOREACH()

  FOREACH(OPTIONAL_DEP_PACKAGE ${${PACKAGE_NAME}_TEST_OPTIONAL_DEP_PACKAGES})
    TRILINOS_PRIVATE_ADD_OPTIONAL_PACKAGE_ENABLE(
      ${PACKAGE_NAME} ${OPTIONAL_DEP_PACKAGE} )
  ENDFOREACH()

ENDMACRO()


#
# Private helper macro
#

MACRO(TRILINOS_PRIVATE_DISABLE_REQUIRED_PACKAGE_ENABLES FORWARD_DEP_PACKAGE_NAME PACKAGE_NAME LIBRARY_DEP)

  #MESSAGE("TRILINOS_PRIVATE_DISABLE_REQUIRED_PACKAGE_ENABLES ${FORWARD_DEP_PACKAGE_NAME} ${LIBRARY_DEP}")  

  IF ("${LIBRARY_DEP}" STREQUAL "TRUE")
    SET(DEP_TYPE_STR "library")
    ASSERT_DEFINED(Trilinos_ENABLE_${FORWARD_DEP_PACKAGE_NAME})
    IF (Trilinos_ENABLE_${FORWARD_DEP_PACKAGE_NAME} OR Trilinos_ENABLE_${FORWARD_DEP_PACKAGE_NAME} STREQUAL "")
      MESSAGE(STATUS
        "Setting Trilinos_ENABLE_${FORWARD_DEP_PACKAGE_NAME}=OFF because ${FORWARD_DEP_PACKAGE_NAME} has a required ${DEP_TYPE_STR} dependence on disabled package ${PACKAGE_NAME}")
      SET(Trilinos_ENABLE_${FORWARD_DEP_PACKAGE_NAME} OFF)
    ENDIF()
  ELSE()
    SET(DEP_TYPE_STR "test/example")
  ENDIF()

  ASSERT_DEFINED(${FORWARD_DEP_PACKAGE_NAME}_ENABLE_TESTS)
  IF (${FORWARD_DEP_PACKAGE_NAME}_ENABLE_TESTS OR ${FORWARD_DEP_PACKAGE_NAME}_ENABLE_TESTS STREQUAL "")
    MESSAGE(STATUS
      "Setting ${FORWARD_DEP_PACKAGE_NAME}_ENABLE_TESTS=OFF because ${FORWARD_DEP_PACKAGE_NAME} has a required ${DEP_TYPE_STR} dependence on disabled package ${PACKAGE_NAME}")
    SET(${FORWARD_DEP_PACKAGE_NAME}_ENABLE_TESTS OFF)
  ENDIF()

  ASSERT_DEFINED(${FORWARD_DEP_PACKAGE_NAME}_ENABLE_EXAMPLES)
  IF (${FORWARD_DEP_PACKAGE_NAME}_ENABLE_EXAMPLES OR ${FORWARD_DEP_PACKAGE_NAME}_ENABLE_EXAMPLES STREQUAL "")
    MESSAGE(STATUS
      "Setting ${FORWARD_DEP_PACKAGE_NAME}_ENABLE_EXAMPLES=OFF because ${FORWARD_DEP_PACKAGE_NAME} has a required ${DEP_TYPE_STR} dependence on disabled package ${PACKAGE_NAME}")
    SET(${FORWARD_DEP_PACKAGE_NAME}_ENABLE_EXAMPLES OFF)
  ENDIF()

ENDMACRO()


#
# Private helper macro
#

MACRO(TRILINOS_PRIVATE_DISABLE_OPTIONAL_PACKAGE_ENABLES FORWARD_DEP_PACKAGE_NAME PACKAGE_NAME)

  #MESSAGE("TRILINOS_PRIVATE_DISABLE_OPTIONAL_PACKAGE_ENABLES ${FORWARD_DEP_PACKAGE_NAME} ${PACKAGE_NAME}")  

  ASSERT_DEFINED(${FORWARD_DEP_PACKAGE_NAME}_ENABLE_${PACKAGE_NAME})
  IF (${FORWARD_DEP_PACKAGE_NAME}_ENABLE_${PACKAGE_NAME} OR ${FORWARD_DEP_PACKAGE_NAME}_ENABLE_${PACKAGE_NAME} STREQUAL "")
    MESSAGE(STATUS
      "Setting ${FORWARD_DEP_PACKAGE_NAME}_ENABLE_${PACKAGE_NAME}=OFF because ${FORWARD_DEP_PACKAGE_NAME} has an optional library dependence on disabled package ${PACKAGE_NAME}")
    SET(${FORWARD_DEP_PACKAGE_NAME}_ENABLE_${PACKAGE_NAME} OFF)
  ENDIF()

ENDMACRO()


#
# Function that disables all forward packages recurrsively
#

MACRO(TRILINOS_DISABLE_FORWARD_REQUIRED_DEP_PACKAGES PACKAGE_NAME)

  #MESSAGE("TRILINOS_DISABLE_FORWARD_REQUIRED_DEP_PACKAGES: ${PACKAGE_NAME}")

  IF ("${Trilinos_ENABLE_${PACKAGE}}" STREQUAL "OFF")

    FOREACH(FWD_DEP_PKG ${${PACKAGE_NAME}_FORWARD_LIB_REQUIRED_DEP_PACKAGES})
      TRILINOS_PRIVATE_DISABLE_REQUIRED_PACKAGE_ENABLES(${FWD_DEP_PKG} ${PACKAGE_NAME} TRUE)
    ENDFOREACH()

    FOREACH(FWD_DEP_PKG ${${PACKAGE_NAME}_FORWARD_LIB_OPTIONAL_DEP_PACKAGES})
      TRILINOS_PRIVATE_DISABLE_OPTIONAL_PACKAGE_ENABLES(${FWD_DEP_PKG} ${PACKAGE_NAME})
    ENDFOREACH()

    FOREACH(FWD_DEP_PKG ${${PACKAGE_NAME}_FORWARD_TEST_REQUIRED_DEP_PACKAGES})
      TRILINOS_PRIVATE_DISABLE_REQUIRED_PACKAGE_ENABLES(${FWD_DEP_PKG} ${PACKAGE_NAME} FALSE)
    ENDFOREACH()

  ENDIF()

ENDMACRO()


#
# Private helper macro
#

MACRO(TRILINOS_PRIVATE_POSTPROCESS_OPTIONAL_PACKAGE_ENABLE PACKAGE_NAME OPTIONAL_DEP_PACKAGE)

  #MESSAGE("TRILINOS_PRIVATE_POSTPROCESS_OPTIONAL_PACKAGE_ENABLE: ${PACKAGE_NAME} ${OPTIONAL_DEP_PACKAGE}")

  IF("${${PACKAGE_NAME}_ENABLE_${OPTIONAL_DEP_PACKAGE}}" STREQUAL "")
    IF(Trilinos_ENABLE_${PACKAGE_NAME} AND Trilinos_ENABLE_${OPTIONAL_DEP_PACKAGE})
      MESSAGE(STATUS "Setting ${PACKAGE_NAME}_ENABLE_${OPTIONAL_DEP_PACKAGE}=ON since Trilinos_ENABLE_${PACKAGE_NAME}=ON AND Trilinos_ENABLE_${OPTIONAL_DEP_PACKAGE}=ON")
      SET(${PACKAGE_NAME}_ENABLE_${OPTIONAL_DEP_PACKAGE} ON)
    ENDIF()
  ENDIF()

  STRING(TOUPPER ${PACKAGE_NAME} PACKAGE_NAME_UPPER)
  STRING(TOUPPER ${OPTIONAL_DEP_PACKAGE} OPTIONAL_DEP_PACKAGE_UPPER)
  SET(MACRO_DEFINE_NAME HAVE_${PACKAGE_NAME_UPPER}_${OPTIONAL_DEP_PACKAGE_UPPER})

  IF(${PACKAGE_NAME}_ENABLE_${OPTIONAL_DEP_PACKAGE})
    SET(${MACRO_DEFINE_NAME} ON)
  ELSE()
    SET(${MACRO_DEFINE_NAME} OFF)
  ENDIF()

ENDMACRO()


#
# Macro that post-processes optional dependancies after all other
# dependencies have been worked out
#

MACRO(TRILINOS_POSTPROCESS_OPTIONAL_PACKAGE_ENABLES PACKAGE_NAME)

  #MESSAGE("\nTRILINOS_ADD_OPTIONAL_PACKAGE_ENABLES: ${PACKAGE_NAME}")

  FOREACH(OPTIONAL_DEP_PACKAGE ${${PACKAGE_NAME}_LIB_OPTIONAL_DEP_PACKAGES})
    TRILINOS_PRIVATE_POSTPROCESS_OPTIONAL_PACKAGE_ENABLE(
      ${PACKAGE_NAME} ${OPTIONAL_DEP_PACKAGE} )
  ENDFOREACH()

  FOREACH(OPTIONAL_DEP_PACKAGE ${${PACKAGE_NAME}_TEST_OPTIONAL_DEP_PACKAGES})
    TRILINOS_PRIVATE_POSTPROCESS_OPTIONAL_PACKAGE_ENABLE(
      ${PACKAGE_NAME} ${OPTIONAL_DEP_PACKAGE} )
  ENDFOREACH()

ENDMACRO()


#
# Set an individual pacakge variable based on the global value
#

MACRO(TRILINOS_POSTPROCESS_STANDARD_PACKAGE_VARIABLE TRILINOS_VAR PACKAGE_VAR)

  IF (VERBOSE_CONFIGURE)
    MESSAGE("")
    MESSAGE("TRILINOS_POSTPROCESS_STANDARD_PACKAGE_VARIABLE:")
    MESSAGE(STATUS "${PACKAGE_VAR} = ${${PACKAGE_VAR}}")
    MESSAGE(STATUS "${TRILINOS_VAR} = ${${TRILINOS_VAR}}")
  ENDIF()

  IF (${PACKAGE_VAR} STREQUAL "")
    IF (${TRILINOS_VAR} STREQUAL "ON")
      MESSAGE(STATUS "Setting ${PACKAGE_VAR}=ON")
      SET(${PACKAGE_VAR} ON)
    ELSEIF (TRILINOS_VAR STREQUAL "OFF")
      MESSAGE(STATUS "Setting ${PACKAGE_VAR}=OFF")
      SET(${PACKAGE_VAR} OFF)
    ELSE()
      #MESSAGE(STATUS "ELSE")
      # Otherwise, we will leave it up the the individual package
      # to decide?
    ENDIF()
  ELSE()
    #MESSAGE(STATUS "PACKAGE_VAR NOT DEFAULT")
  ENDIF()

  IF (VERBOSE_CONFIGURE)
    MESSAGE(STATUS "${PACKAGE_VAR} = ${${PACKAGE_VAR}}")
  ENDIF()

ENDMACRO()


#
# Macro used to set Trilinos_ENABLE_${PACKAGE_NAME} based on
# Trilinos_ENABLE_ALL_PACKAGES
#

MACRO(TRILINOS_APPLY_ALL_PACKAGE_ENABLES PACKAGE_NAME)

  TRILINOS_POSTPROCESS_STANDARD_PACKAGE_VARIABLE(
    Trilinos_ENABLE_ALL_PACKAGES Trilinos_ENABLE_${PACKAGE_NAME} )

ENDMACRO()


#
# Macro used to set ${PACKAGE)_ENABLE_TESTS and ${PACKAGE)_ENABLE_EXAMPLES
# based on Trilinos_ENABLE_ALL_PACKAGES
#

MACRO(TRILINOS_APPLY_TEST_EXAMPLE_ENABLES PACKAGE_NAME)

  IF (Trilinos_ENABLE_${PACKAGE_NAME})

    TRILINOS_POSTPROCESS_STANDARD_PACKAGE_VARIABLE(
      Trilinos_ENABLE_TESTS ${PACKAGE_NAME}_ENABLE_TESTS )

    TRILINOS_POSTPROCESS_STANDARD_PACKAGE_VARIABLE(
      Trilinos_ENABLE_EXAMPLES ${PACKAGE_NAME}_ENABLE_EXAMPLES )

  ENDIF()

ENDMACRO()




#
# Private helper macro
#


MACRO(TRILINOS_PRIVATE_ENABLE_FORWARD_PACKAGE FORWARD_DEP_PACKAGE_NAME PACKAGE_NAME)
  # Enable the forward package if it is not already set to ON or OFF
  ASSERT_DEFINED(Trilinos_ENABLE_${FORWARD_DEP_PACKAGE_NAME})
  IF(Trilinos_ENABLE_${FORWARD_DEP_PACKAGE_NAME} STREQUAL "")
    MESSAGE(STATUS "Setting Trilinos_ENABLE_${FORWARD_DEP_PACKAGE_NAME}=ON because Trilinos_ENABLE_${PACKAGE_NAME}=ON")
    ASSERT_DEFINED(Trilinos_ENABLE_${FORWARD_DEP_PACKAGE_NAME})
    SET(Trilinos_ENABLE_${FORWARD_DEP_PACKAGE_NAME} ON)
  ENDIF()
ENDMACRO()


#
# Macro used to set Trilinos_ENABLE_${FWD_PACKAGE_NAME)=ON for all optional
# and required forward dependencies of the package ${PACKAGE_NAME}
#

MACRO(TRILINOS_ENABLE_FORWARD_PACKAGE_ENABLES PACKAGE_NAME)

  #MESSAGE("\nTRILINOS_ENABLE_FORWARD_PACKAGE_ENABLES ${PACKAGE_NAME}")
  #MESSAGE(STATUS "Trilinos_ENABLE_${PACKAGE_NAME}=${Trilinos_ENABLE_${PACKAGE_NAME}}")

  # Enable the forward packages if this package is enabled
  ASSERT_DEFINED(Trilinos_ENABLE_${PACKAGE_NAME})
  IF (Trilinos_ENABLE_${PACKAGE_NAME})

    FOREACH(FWD_DEP_PKG ${${PACKAGE_NAME}_FORWARD_LIB_REQUIRED_DEP_PACKAGES})
      TRILINOS_PRIVATE_ENABLE_FORWARD_PACKAGE(${FWD_DEP_PKG} ${PACKAGE_NAME})
    ENDFOREACH()

    FOREACH(FWD_DEP_PKG ${${PACKAGE_NAME}_FORWARD_LIB_OPTIONAL_DEP_PACKAGES})
      TRILINOS_PRIVATE_ENABLE_FORWARD_PACKAGE(${FWD_DEP_PKG} ${PACKAGE_NAME})
    ENDFOREACH()

  ENDIF()

ENDMACRO()


#
# Public macro
#

MACRO(TRILINOS_ENABLE_OPTIONAL_PACKAGES PACKAGE_NAME)

  #MESSAGE("TRILINOS_ENABLE_OPTIONAL_PACKAGE_ENABLES: ${PACKAGE_NAME}")
  #MESSAGE(STATUS "Trilinos_ENABLE_${PACKAGE_NAME}=${Trilinos_ENABLE_${PACKAGE_NAME}}")

  ASSERT_DEFINED(Trilinos_ENABLE_${PACKAGE_NAME})

  IF (Trilinos_ENABLE_${PACKAGE_NAME})

    FOREACH(DEP_PKG ${${PACKAGE_NAME}_LIB_OPTIONAL_DEP_PACKAGES})

      ASSERT_DEFINED(Trilinos_ENABLE_${DEP_PKG})
      IF(Trilinos_ENABLE_${DEP_PKG} STREQUAL "")
        MESSAGE(STATUS "Setting Trilinos_ENABLE_${DEP_PKG}=ON because Trilinos_ENABLE_${PACKAGE_NAME}=ON")
        ASSERT_DEFINED(Trilinos_ENABLE_${DEP_PKG})
        SET(Trilinos_ENABLE_${DEP_PKG} ON)
      ENDIF()

    ENDFOREACH()

  ENDIF()

ENDMACRO()


#
# Public macro
#

MACRO(TRILINOS_ENABLE_REQUIRED_PACKAGES PACKAGE_NAME)

  #MESSAGE("TRILINOS_ENABLE_REQUIRED_PACKAGE_ENABLES: ${PACKAGE_NAME}")
  #MESSAGE(STATUS "Trilinos_ENABLE_${PACKAGE_NAME}=${Trilinos_ENABLE_${PACKAGE_NAME}}")

  ASSERT_DEFINED(Trilinos_ENABLE_${PACKAGE_NAME})

  IF (Trilinos_ENABLE_${PACKAGE_NAME})

    FOREACH(DEP_PKG ${${PACKAGE_NAME}_LIB_REQUIRED_DEP_PACKAGES})

      ASSERT_DEFINED(Trilinos_ENABLE_${DEP_PKG})
      IF(Trilinos_ENABLE_${DEP_PKG} STREQUAL "")
        MESSAGE(STATUS "Setting Trilinos_ENABLE_${DEP_PKG}=ON because Trilinos_ENABLE_${PACKAGE_NAME}=ON")
        ASSERT_DEFINED(Trilinos_ENABLE_${DEP_PKG})
        SET(Trilinos_ENABLE_${DEP_PKG} ON)
      ENDIF()

    ENDFOREACH()

  ENDIF()

ENDMACRO()
