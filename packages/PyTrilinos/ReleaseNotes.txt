=============================================
 PyTrilinos 4.0 (Trilinos 8.0) Release Notes
=============================================

* PyTrilinos is now a single, self-contained package again.  For the
  most part, this affects developers more than users, with one
  exception.  The PyTrilinos package is enabled with the configuration
  option

    --enable-pytrilinos

  rather than the previous option, --enable-python, which had the
  effect of enabling python support within each package that provided
  wrappers.  Individual PyTrilinos package wrappers can be enabled or
  disabled with

    --enable-pytrilinos-package
    --disable-pytrilinos-package

  where "package" refers to a specific Trilinos package.

* Under Linux and Mac OS X, PyTrilinos creates shared versions of
  Trilinos libraries and links against them rather than the static
  versions (previously, this was the case for MPI builds only, but now
  is universal).  This solves many dynamic casting errors by
  preventing multiple copies of the same static library being linked
  to the PyTrilinos extension modules.  This is not yet supported on
  any other operating systems.

* Shared libraries (for all enabled Trilinos packages, not just those
  with python wrappers) can be built on Linux and Mac OS X without
  enabling PyTrilinos.  Use the configuration option

    --enable-shared

  Note that the build system for building shared libraries employs
  python, so this must be installed.  However, the other PyTrilinos
  prerequisites -- swig and numpy -- are not required for building
  shared libraries.  The resulting shared libraries are stored in your
  build directory in the sub-directory

    packages/PyTrilinos/shared

  and are installed in the same directory in which the static
  libraries are installed.  Note that these shared libraries are
  considered EXPERIMENTAL.  Only those shared libraries that are
  linked to PyTrilinos extension modules get tested.  The other shared
  libraries might possibly have unresolved symbols.  Please report any
  problems.

* The Teuchos::RCP<> reference-counting pointer templated class that
  provides memory management for many Trilinos packages, is now
  supported within PyTrilinos.  Note that since all python objects are
  automatically reference-counted, a design decision was made that
  Teuchos::RCP<> shall be "invisible" to the python user.  In other
  words, when a method argument requests a Teuchos::RCP<> of an
  object, the python interface merely requires the object.

* The PyTrilinos interface to the nonlinear solver package NOX has
  been re-enabled.

* The Anasazi eigensolver package now has a PyTrilinos interface.

* If ML is enabled (which is the default) and PyTrilinos is enabled
  (which is not), then Amesos must also be enabled (which is not the
  default) or the compilation will fail.  This is a known bug.

* It may be necessary to manually add position-independent code
  options to the compiler flag variables.  This is not necessary on
  Mac OS X or some flavors of Linux, because position-independent code
  is the default.  However, on those Linux versions for which this is
  not the default, and on 64-bit sytems, you will need to add these
  compiler options.  For example, if the proper option for your
  compiler for position-independent code is "-fPIC", then your
  configuration invocation should include

    FFLAGS=-fPIC CFLAGS=-fPIC CXXFLAGS=-fPIC

  There is a standing feature request that this be done automatically,
  but it has not been implemented yet.

* Because of bug fixes and feature enhancements, the latest version of
  swig at the time of this release, 1.3.31, is required to build
  PyTrilinos.
