#! /usr/bin/env python
# -*- python -*-

# @HEADER
# ************************************************************************
#
#                PyTrilinos: Python Interface to Trilinos
#                   Copyright (2005) Sandia Corporation
#
# Under terms of Contract DE-AC04-94AL85000, there is a non-exclusive
# license for use of this work by or on behalf of the U.S. Government.
#
# This library is free software; you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation; either version 2.1 of the
# License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
# USA
# Questions? Contact Bill Spotz (wfspotz@sandia.gov)
#
# ************************************************************************
# @HEADER

# Imports.  Users importing an installed version of PyTrilinos should use the
# "from PyTrilinos import ..." syntax.  Here, the setpath module adds the build
# directory, including "PyTrilinos", to the front of the search path.  We thus
# use "import ..." for Trilinos modules.  This prevents us from accidentally
# picking up a system-installed version and ensures that we are testing the
# build module.
from   numpy    import *
from   optparse import *
import sys
import unittest

parser = OptionParser()
parser.add_option("-b", "--use-boost", action="store_true", dest="boost",
                  default=False,
                  help="test the experimental boost-generated PyTrilinos package")
parser.add_option("-t", "--testharness", action="store_true",
                  dest="testharness", default=False,
                  help="test local build modules; prevent loading system-installed modules")
parser.add_option("-v", "--verbosity", type="int", dest="verbosity", default=2,
                  help="set the verbosity level [default 2]")
options,args = parser.parse_args()
if options.testharness:
    import setpath
    if options.boost: setpath.setpath("src-boost")
    else:             setpath.setpath()
    import Epetra
    import Komplex
else:
    try:
        import setpath
        if options.boost: setpath.setpath("src-boost")
        else:             setpath.setpath()
        import Epetra
        import Komplex
    except ImportError:
        from PyTrilinos import Epetra
        from PyTrilinos import Komplex
        print >>sys.stderr, "Using system-installed Epetra, Komplex"

##########################################################################

class KomplexLinearProblemTestCase(unittest.TestCase):
    "TestCase for Komplex_LinearProblems"

    def setUp(self):
        self.comm = Epetra.PyComm()
        self.size = self.comm.NumProc() * 9
        self.map  = Epetra.Map(self.size,0,self.comm)
        self.Ar   = Epetra.CrsMatrix(Epetra.Copy,self.map,3)
        self.Ai   = Epetra.CrsMatrix(Epetra.Copy,self.map,3)
        self.fill(self.Ar)
        self.fill(self.Ai)
        self.xr   = Epetra.Vector(self.map)
        self.xi   = Epetra.Vector(self.map)
        self.br   = Epetra.Vector(self.map)
        self.bi   = Epetra.Vector(self.map)
        self.comm.Barrier()

    def fill(self, A):
        for gid in self.map.MyGlobalElements():
            if gid in (0,self.size-1):
                A.InsertGlobalValues(gid, [1.0], [gid])
            else:
                A.InsertGlobalValues(gid, [-1.0,2.0,-1.0], [gid-1,gid,gid+1])
        A.FillComplete()

    def tearDown(self):
        self.comm.Barrier()

    def testConstructor(self):
        "Test Komplex.LinearProblem constructor"
        klp = Komplex.LinearProblem(1, 0, self.Ar,
                                    1, 0, self.Ai,
                                    self.xr, self.xi,
                                    self.br, self.bi)
        self.failUnless(isinstance(klp,Komplex.LinearProblem))


##########################################################################

if __name__ == "__main__":

    # Create the test suite object
    suite = unittest.TestSuite()

    # Add the test cases to the test suite
    suite.addTest(unittest.makeSuite(KomplexLinearProblemTestCase))

    # Create a communicator
    comm    = Epetra.PyComm()
    iAmRoot = comm.MyPID() == 0
    comm.SetTracebackMode(0)    # Turn off errors printed to stderr

    # Run the test suite
    if iAmRoot: print >>sys.stderr, \
          "\n*****************************\nTesting Komplex.LinearProblem\n" \
          "*****************************\n"
    verbosity = options.verbosity * int(iAmRoot)
    result = unittest.TextTestRunner(verbosity=verbosity).run(suite)

    # Exit with a code that indicates the total number of errors and failures
    errsPlusFails = comm.SumAll(len(result.errors) + len(result.failures))
    if errsPlusFails == 0 and iAmRoot: print "End Result: TEST PASSED"
    sys.exit(errsPlusFails)
