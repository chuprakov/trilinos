/*
 * MueLu_SubBlockAggregationFactory_decl.hpp
 *
 *  Created on: Mar 28, 2012
 *      Author: wiesner
 */

#ifndef MUELU_SUBBLOCKAGGREGATIONFACTORY_DECL_HPP_
#define MUELU_SUBBLOCKAGGREGATIONFACTORY_DECL_HPP_

#include <Xpetra_Operator_fwd.hpp>

#include "MueLu_ConfigDefs.hpp"
#include "MueLu_SingleLevelFactoryBase.hpp"
#include "MueLu_SubBlockAggregationFactory_fwd.hpp"
#include "MueLu_Aggregates_fwd.hpp"

#include "MueLu_Level_fwd.hpp"
#include "MueLu_Exceptions.hpp"

namespace MueLu {

/*!
  @class SubBlockAggregationFactory class.
  @brief Factory for reusing already existing aggregtes in (volume) coupled multiphysics problems

  As an example assume A to be a blocked matrix for a (volume) coupled problem (e.g. from a discretization
  of the Navier-Stokes equations with velocity and pressure degrees of freedom).
  In a blocked manner we usually use the velocity degrees of freedom for building aggregates (using
  methods for nonsymmetric matrices like PG-AMG). For the pressure degrees of freedom we want to reuse
  the same aggregates.
  This factory rebuilds the unamalgamation information and provides the "Aggregates" variable for a
  specific given subblock of the input matrix A.

  Example: 2D Navier Stokes equation with strided maps (vel = 2 dofs per node, pressure = 1 dof per node).
  assume, that aggFact has built "Aggregates" for the velocity dof block. Then [Aggregates, aggFact] contains
  unamalgamation information for the velocity dofs only (=0,1,3,4,6,7).
  ["Aggregates",this] reuses above aggregates and rebuilds the unamalgamation information for the Dofs 2,5,8,...

  \note: input is a SubBlockAFactory object for which the aggregates from aggFact should be adapted.
  \note: We expect the global blocked operator to be generated by NoFactory. There's no special AFact_ parameter in constructor yet.
  \note: we make heavily use of strided maps. We need strided maps in the map extractor objects of the blocked operator.
*/

template <class Scalar = double, class LocalOrdinal = int, class GlobalOrdinal = LocalOrdinal, class Node = Kokkos::DefaultNode::DefaultNodeType, class LocalMatOps = typename Kokkos::DefaultKernels<void,LocalOrdinal,Node>::SparseOps> //TODO: or BlockSparseOp ?
class SubBlockAggregationFactory : public SingleLevelFactoryBase {
#undef MUELU_SUBBLOCKAGGREGATIONFACTORY_SHORT
#include "MueLu_UseShortNamesOrdinal.hpp"

public:
  //! @name Constructors/Destructors.
  //@{

  //! Constructor.
  SubBlockAggregationFactory(RCP<const FactoryBase> aggFact = Teuchos::null, RCP<const FactoryBase> subBlockAFact = Teuchos::null);

  //! Destructor.
  virtual ~SubBlockAggregationFactory() { }

  //@}

  //! Input
  //@{

  void DeclareInput(Level &currentLevel) const;

  //@}

  //! @name Build methods.
  //@{

  /*! @brief Build aggregates. */
  void Build(Level &currentLevel) const;

  //@}

private:

  //! Graph Factory
  RCP<const FactoryBase> aggFact_;

  //! SubBlockAFactory
  RCP<const FactoryBase> subBlockAFact_;

}; // class SubBlockAggregationFactory

} //namespace MueLu

#define MUELU_SUBBLOCKAGGREGATIONFACTORY_SHORT
#endif /* MUELU_SUBBLOCKAGGREGATIONFACTORY_DECL_HPP_ */
