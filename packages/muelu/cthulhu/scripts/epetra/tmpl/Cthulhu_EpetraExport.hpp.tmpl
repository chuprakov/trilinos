$TMPL_HEADERS

#include "Cthulhu_EpetraConfigDefs.hpp"

#include "Cthulhu_Export.hpp"
#include "Cthulhu_Exceptions.hpp"

#include "Cthulhu_EpetraMap.hpp"
#include "Epetra_Export.hpp"

// Note: 'export' is a reserved keyword in C++. Do not use 'export' as a variable name.

namespace Cthulhu {

  // TODO: move that elsewhere
  template <class LocalOrdinal, class GlobalOrdinal, class Node>
  const Epetra_Export<LocalOrdinal,GlobalOrdinal,Node> & toEpetra(const Export<LocalOrdinal,GlobalOrdinal,Node> &exp);
  //

  class $TMPL_CLASS
  $TMPL_INHERITANCE
  {

    typedef int LocalOrdinal;
    typedef int GlobalOrdinal;
    typedef Kokkos::DefaultNode::DefaultNodeType Node;

  public:

$TMPL_PUBLIC_FUNCTIONS

    //! @name Cthulhu specific
    //@{

    //! EpetraExport constructor to wrap a Epetra_Export object
    EpetraExport(const RCP<const Epetra_Export< LocalOrdinal, GlobalOrdinal, Node > > &exp) : export_(exp) {  }

    RCP< const Epetra_Export< LocalOrdinal, GlobalOrdinal, Node > > getEpetra_Export() const { return export_; }

    //@}
    
  private:
    
    RCP<const Epetra_Export< LocalOrdinal, GlobalOrdinal, Node > > export_;

  }; // EpetraExport class

  // TODO: move that elsewhere
  template <class LocalOrdinal, class GlobalOrdinal, class Node>
  const Epetra_Export<LocalOrdinal,GlobalOrdinal,Node> & toEpetra(const Export<LocalOrdinal,GlobalOrdinal,Node> &exp) {
    // TODO: throw exception
    const EpetraExport<LocalOrdinal,GlobalOrdinal,Node> & tpetraExport = dynamic_cast<const EpetraExport<LocalOrdinal,GlobalOrdinal,Node> &>(exp);
    return *tpetraExport.getEpetra_Export();
  }
  //

} // Cthulhu namespace

$TMPL_FOOTERS
