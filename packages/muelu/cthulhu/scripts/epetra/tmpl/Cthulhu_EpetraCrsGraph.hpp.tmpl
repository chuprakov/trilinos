$TMPL_HEADERS

#include "Cthulhu_EpetraConfigDefs.hpp"

#include "Cthulhu_CrsGraph.hpp"

#include "Cthulhu_EpetraMap.hpp"
#include "Cthulhu_EpetraImport.hpp"
#include "Cthulhu_Comm.hpp"

#include <Epetra_CrsGraph.h>

namespace Cthulhu {
 
/*   // TODO: move that elsewhere */
/*   template <class LocalOrdinal, class GlobalOrdinal, class Node, class LocalMatOps> */
/*   RCP< const CrsGraph<LocalOrdinal, GlobalOrdinal, Node, LocalMatOps> > toCthulhu(RCP< const Epetra_CrsGraph<LocalOrdinal, GlobalOrdinal, Node, LocalMatOps> > graph); */
/*   // */

#ifndef DOXYGEN_SHOULD_SKIP_THIS
  // forward declaration
  template <class S, class LO, class GO, class N, class SpMatOps>
  class CrsMatrix;
#endif
  
  class $TMPL_CLASS
  $TMPL_INHERITANCE
  {

    typedef int LocalOrdinal;
    typedef int GlobalOrdinal;
    typedef Kokkos::DefaultNode::DefaultNodeType Node;

  public:

$TMPL_PUBLIC_FUNCTIONS

    //! @name Cthulhu specific
    //@{

    //! EpetraCrsGraph constructor to wrap a Epetra_CrsGraph object
    EpetraCrsGraph(const Teuchos::RCP<Epetra_CrsGraph> &graph) : graph_(graph) { }

    //! Get the underlying Epetra graph
    RCP< const Epetra_CrsGraph> getEpetra_CrsGraph() const { return graph_; }
    
    //@}
    
  private:
    
    RCP<Epetra_CrsGraph> graph_;

  }; // $TMPL_CLASS class

/*   // TODO: move that elsewhere */
/*   template <class LocalOrdinal, class GlobalOrdinal, class Node, class LocalMatOps> */
/*   RCP< const CrsGraph<LocalOrdinal, GlobalOrdinal, Node, LocalMatOps> > toCthulhu(RCP< const Epetra_CrsGraph<LocalOrdinal, GlobalOrdinal, Node, LocalMatOps> > graph) { //TODO: return EpetraCrsGraph instead of CrsGraph */
/*     // typedef EpetraCrsGraph<LocalOrdinal, GlobalOrdinal, Node, LocalMatOps> EpetraCrsGraphClass; */
/*     // CTHULHU_RCP_DYNAMIC_CAST(const EpetraCrsGraphClass, graph, tGraph, "toEpetra"); */

/*     RCP<Epetra_CrsGraph<LocalOrdinal, GlobalOrdinal, Node, LocalMatOps> > tGraph = Teuchos::rcp_const_cast<Epetra::CrsGraph<LocalOrdinal, GlobalOrdinal, Node, LocalMatOps> >(graph); //TODO: can I avoid the const_cast ? */
/*     return rcp ( new Cthulhu::EpetraCrsGraph<LocalOrdinal, GlobalOrdinal, Node, LocalMatOps>(tGraph) ); */
/*   } */
/*   // */

} // Cthulhu namespace

$TMPL_FOOTERS
