<masterlist>
  <parameter>
    <name>verbosity</name>
    <type>string</type>
    <default>"high"</default>
    <description>Control of the amount of printed information. Possible values: "none", "low", "medium", "high", "extreme".</description>
  </parameter>

  <parameter>
    <name>number of equations</name>
    <type>int</type>
    <default>1</default>
    <description>Number of PDE equations at each gride node. Only constant block size is considered.</description>
  </parameter>

  <parameter>
    <name>max levels</name>
    <type>int</type>
    <default>10</default>
    <description>Maximum number of levels.</description>
  </parameter>

  <parameter>
    <name>cycle type</name>
    <type>string</type>
    <default>"V"</default>
    <description>Multigrid cycle type. Possible values: "V", "W".</description>
  </parameter>

  <parameter>
    <name>problem: symmetric</name>
    <type>bool</type>
    <default>true</default>
    <description>Symmetry of a problem.</description>
  </parameter>

  <parameter>
    <name>print</name>
    <type>\parameterlist</type>
    <description>Saving a subset of the hierarchy data in a file. Currently, the list can contain any of three parameter names ("A", "P", "R") of type "string" and value "\{levels separated by commas\}". A matrix is saved in two files: a) data is saved in the MatrixMarket format in a file called "A\_level.mm", or similar; b) row map is saved in the MatrixMarket format in a file called "rowmap\_A\_level.mm", or similar.</description>
  </parameter>

  <parameter>
    <name>multigrid algorithm</name>
    <type>string</type>
    <default>"sa"</default>
    <description>Multigrid method. Possible values: "unsmoothed", "sa", "emin", "pg".</description>
  </parameter>

  <parameter>
    <name>transpose: use implicit</name>
    <type>bool</type>
    <default>false</default>
    <description>Use implicit transpose for the restriction operator.</description>
  </parameter>

  <parameter>
    <name>aggregation: type</name>
    <type>string</type>
    <default>"uncoupled"</default>
    <description>Aggregation scheme. Possible values: "uncoupled", "coupled".</description>
  </parameter>

<!--
  <parameter>
    <name>aggregation: symmetrize</name>
    <type>bool</type>
    <default>false</default>
    <description>Symmetrize connectivity graph for nonsymmetric matrices.</description>
  </parameter>
-->

  <parameter>
    <name>aggregation: drop scheme</name>
    <type>string</type>
    <default>"classical"</default>
    <description>Aggregation connectivity dropping scheme. Possible values: "classical", "laplacian".</description>
  </parameter>

  <parameter>
    <name>aggregation: drop tol</name>
    <type>double</type>
    <default>0.0</default>
    <description>Aggregation dropping threshold.</description>
  </parameter>

  <parameter>
    <name>aggregation: min agg size</name>
    <type>int</type>
    <default>0</default>
    <description>Minimum size of an aggregate.</description>
  </parameter>

  <parameter>
    <name>aggregation: max agg size</name>
    <type>int</type>
    <default>0</default>
    <description>Maximum size of an aggregate.</description>
  </parameter>

  <parameter>
    <name>aggregation: Dirichlet threshold</name>
    <type>double</type>
    <default>0.0</default>
    <description>???</description>
  </parameter>

  <parameter>
    <name>aggregation: visualize</name>
    <type>bool</type>
    <default>false</default>
    <description>Visualized aggregates.</description>
  </parameter>

  <parameter>
    <name>aggregation: mode</name>
    <type>string</type>
    <default>"old"</default>
    <description>old = Tobias, new = ML</description>
    <visible>false</visible>
  </parameter>

  <parameter>
    <name>smoother: pre or post</name>
    <type>string</type>
    <default>"both"</default>
    <description>Smoother combination. Possible values: "pre", "post", "both", "none".</description>
  </parameter>

  <parameter>
    <name>smoother: type</name>
    <type>string</type>
    <default>"gs"</default>
    <description>Smoother type. Possible values: see Table~\ref{t:smoothers}.</description>
  </parameter>

  <parameter>
    <name>smoother: pre type</name>
    <type>string</type>
    <default>"gs"</default>
    <description>Pre-smoother type. Possible values: see Table~\ref{t:smoothers}.</description>
  </parameter>

  <parameter>
    <name>smoother: post type</name>
    <type>string</type>
    <default>"gs"</default>
    <description>Post-smoother type. Possible values: see Table~\ref{t:smoothers}.</description>
  </parameter>

  <parameter>
    <name>smoother: params</name>
    <type>\parameterlist</type>
    <description>Smoother parameters. For standard smoothers, \muelu passes them directly to \stratimikos.</description>
  </parameter>

  <parameter>
    <name>smoother: pre params</name>
    <type>\parameterlist</type>
    <description>Pre-smoother parameters. For standard smoothers, \muelu passes them directly to \stratimikos.</description>
  </parameter>

  <parameter>
    <name>smoother: post params</name>
    <type>\parameterlist</type>
    <description>Post-smoother parameters. For standard smoothers, \muelu passes them directly to \stratimikos.</description>
  </parameter>

<!--
  <parameter>
    <name>smoother: sweeps</name>
    <type>int</type>
    <default>2</default>
    <description>Number of smoother sweeps for relaxation methods, or the order of polynomial for Chebyshev.</description>
  </parameter>

  <parameter>
    <name>smoother: pre sweeps</name>
    <type>int</type>
    <default>2</default>
    <description>Number of pre-smoother sweeps for relaxation methods, or the order of polynomial for Chebyshev.</description>
  </parameter>

  <parameter>
    <name>smoother: post sweeps</name>
    <type>int</type>
    <default>2</default>
    <description>Number of post-smoother sweeps for relaxation methods, or the order of polynomial for Chebyshev.</description>
  </parameter>
-->

  <parameter>
    <name>smoother: overlap</name>
    <type>int</type>
    <default>0</default>
    <description>Smoother subdomain overlap.</description>
  </parameter>

  <parameter>
    <name>smoother: pre overlap</name>
    <type>int</type>
    <default>0</default>
    <description>Pre-smoother subdomain overlap.</description>
  </parameter>

  <parameter>
    <name>smoother: post overlap</name>
    <type>int</type>
    <default>0</default>
    <description>Post-smoother subdomain overlap.</description>
  </parameter>

  <parameter>
    <name>coarse: type</name>
    <type>string</type>
    <default>"SuperLU"</default>
    <description>Coarse solver. Possible values: see Table~\ref{t:coarse_solvers}.</description>
  </parameter>

  <parameter>
    <name>coarse: params</name>
    <type>\parameterlist</type>
    <description>Coarse solver parameters. \muelu passes them directly to coarse solver.</description>
  </parameter>

  <parameter>
    <name>coarse: max size</name>
    <type>int</type>
    <default>2000</default>
    <description>Maximum dimension of the coarse grid. \muelu will stop coarsening once it is achieved.</description>
  </parameter>


  <parameter>
    <name>repartition: enable</name>
    <type>bool</type>
    <default>false</default>
    <description>Repartitioning on/off switch.</description>
  </parameter>

  <parameter>
    <name>repartition: partitioner</name>
    <type>string</type>
    <default>"zoltan2"</default>
    <description>Partitioning package to use. Possible values: "zoltan", "zoltan2".</description>
  </parameter>

  <parameter>
    <name>repartition: params</name>
    <type>\parameterlist</type>
    <description>Partitioner parameters. \muelu passes them directly to partitioner.</description>
  </parameter>

  <parameter>
    <name>repartition: start level</name>
    <type>int</type>
    <default>2</default>
    <description>Minimum level to run partitioner. \muelu does not repartition for finer levels.</description>
  </parameter>

  <parameter>
    <name>repartition: min rows per proc</name>
    <type>int</type>
    <default>800</default>
    <description>Desired minimum number of rows per processor. If actual number if smaller, then repartitioning occurs.</description>
  </parameter>

  <parameter>
    <name>repartition: max imbalance</name>
    <type>double</type>
    <default>1.2</default>
    <description>Desired maximum nonzero imbalance ratio.</description>
  </parameter>

  <parameter>
    <name>repartition: remap parts</name>
    <type>bool</type>
    <default>true</default>
    <description>Postprocessing for partitioning to reduce data migration.</description>
  </parameter>

  <parameter>
    <name>repartition: keep proc 0</name>
    <type>bool</type>
    <default>true</default>
    <description>Postprocessing for partitioning to keep processor 0 from dropping out. The goal is to keep processor 0 of the original fine level communication even when we use level subcommunicators.</description>
    <visible>false</visible>
  </parameter>

  <parameter>
    <name>repartition: rebalance P and R</name>
    <type>bool</type>
    <default>true</default>
    <description>Do rebalancing of R and P during the setup. This speeds up the solve, but slows down the setup phases.</description>
  </parameter>

  <parameter>
    <name>sa: damping factor</name>
    <type>double</type>
    <default>4/3</default>
    <description>Damping factor for smoothed aggregation.</description>
  </parameter>

  <parameter>
    <name>sa: use filtered matrix</name>
    <type>bool</type>
    <default>true</default>
    <description>Matrix to use for smoothing the tentative prolongator. The two options are: to use the original matrix, and to use the filtered matrix with filtering based on filtered graph used for aggregation.</description>
  </parameter>

  <parameter>
    <name>filtered matrix: use lumping</name>
    <type>bool</type>
    <default>true</default>
    <description>During construction of a filtered matrix, we have an option to add dropped entries to the diagonal. This is useful for preserving constant nullspace for the Laplacian type matrix.</description>
  </parameter>

  <parameter>
    <name>filtered matrix: reuse eigenvalue</name>
    <type>bool</type>
    <default>true</default>
    <description>During construction of a filtered matrix, we have an option to get the eigenvalue estimate from the original matrix. This allows us to skip heavy computation.</description>
  </parameter>

  <parameter>
    <name>emin: iterative method</name>
    <type>string</type>
    <default>"cg"</default>
    <description>Iterative method to use for energy minimization of intial prolongator in energy-minimization. Possible values: "cg", "sd".</description>
  </parameter>

  <parameter>
    <name>emin: num iterations</name>
    <type>int</type>
    <default>2</default>
    <description>Number of iterations to minimize initial prolongator energy in energy-minimization.</description>
  </parameter>

  <parameter>
    <name>emin: pattern</name>
    <type>string</type>
    <default>"AkPtent"</default>
    <description>Sparsity pattern to use for energy minization. Possible values: "AkPtent".</description>
  </parameter>

  <parameter>
    <name>emin: pattern order</name>
    <type>int</type>
    <default>1</default>
    <description>Matrix order for the "AkPtent" pattern.</description>
  </parameter>

</masterlist>
