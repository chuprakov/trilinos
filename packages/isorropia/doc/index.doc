/*! \mainpage Isorropia: Partitioning, Coloring, and Ordering
\htmlonly
\endhtmlonly

\section isorropia_intro Introduction

Isorropia is a package for partitioning (load balancing), coloring, and ordering. Its main purpose is to assist with redistributing objects such as matrices and matrix-graphs in a parallel execution setting, to allow for more efficient computations. Isorropia produces good maps for Epetra matrices/graphs. Isorropia must be called after the matrix/graph is filled, so the sparsity pattern is known. <br/>

      Isorropia is primarily an interface to the Zoltan library, which is now required. Zoltan became a Trilinos package in 9.0 and is automatically enabled by
Isorropia. 
To enable Isorropia in your Trilinos build, provide the argument
'--enable-isorropia' to configure.
If you wish to use third-party libraries (such as ParMetis or PT-Scotch) with Isorropia via Zoltan, see the configure options for Zoltan.

<ul>
<li> <a href="#overview">Overview of Isorropia</a>
<li> <a href="#example_programs">Example Programs</a>
<li> <a href="#defaults_params">Defaults, Parameters</a>
</ul>

<a name="overview"> </a>
\section isorropia_overview Overview of Isorropia.

Isorropia contains algorithms for three separate problems, all of which can be formulated as a combinatorial problem based on graphs:
<ul>
<li> Partitioning (load-balancing) and redistribution. 
<li> Graph coloring.
<li> Fill-reducing ordering (for direct solvers).
</ul>

We focus here on the partitioning (load balancing), which is most heavily used.
Isorropia's user interface consists primarily of the Isorropia::Partitioner,
Isorropia::Redistributor and Isorropia::CostDescriber classes, as well as the
Isorropia::Epetra::create_balanced_copy functions.

The Isorropia::create_balanced_copy functions are free-standing functions
(not class members) which simply take an input object (Epetra_CrsGraph,
Epetra_CrsMatrix, etc.) and return a copy which is balanced across
partitions.

For more sophisticated use-cases, such as performing one partitioning
and then using it to redistribute multiple objects, it is more
efficient to use the Isorropia::Partitioner and Isorropia::Redistributor
classes. The general usage model is to:<br>
<ol>
<li> create a Isorropia::Partitioner instance (providing as input the
 matrix-graph or row-matrix object that is to be re-partitioned, and
 optionally a Isorropia::CostDescriber instance with weights/costs to
 influence the partitioning).
<li> create a Isorropia::Redistributor object (providing as input a
Isorropia::Partitioner instance)
<li> Use the Isorropia::Redistributor to redistribute one or more objects
 to the new partitioning.
</ol>

Isorropia currently supports  partitioning/redistributing of
Epetra objects, including Epetra_CrsGraph, Epetra_RowMatrix (which includes
Epetra_CrsMatrix and Epetra_VbrMatrix) and Epetra_MultiVector.

<a name="example_programs"> </a>
\section isorropia_example Example Programs

A number of example programs which demonstrate using Isorropia are
provided in the 'packages/isorropia/example' subdirectory.

\ref matrix_1 demonstrates creating a balanced copy of Epetra_CrsGraph and
Epetra_CrsMatrix objects using Isorropia::Epetra::create_balanced_copy
functions.

\ref part_redist demonstrates repartitioning and redistributing the
contents of an Epetra_LinearProblem object, using the Isorropia::Partitioner
and Isorropia::Redistributor classes. This program does not use
user-specified weights/costs.

Other programs in the example subdirectory demonstrate the use of
weights/costs data to influence the partitioner.
See \ref vert_weights, \ref graphedge_weights and \ref hgedge_weights.

<a name="defaults_params"> </a>
\section defaults Defaults, Parameters, ...

Several Isorropia classes and methods accept Teuchos::ParameterList
objects, allowing the user to control certain behavior.
<ul>
<li>Choice of partitioner<br>
If Isorropia is configured with Zoltan support, then by default Zoltan will
be used as the partitioner. To use the simple built-in linear partitioner
instead, set the following parameter:
\verbatim
  Teuchos::ParameterList params;
  params.set("PARTITIONING_METHOD", "SIMPLE_LINEAR");
\endverbatim

<li>Passing parameters through to Zoltan<br>
Isorropia can relay Zoltan parameters directly to Zoltan. Before passing
a Teuchos::ParameterList to Isorropia, create a sublist in it named "Zoltan".
Then, any parameters that should be passed to Zoltan itself, can be stored
in the sublist exactly as they appear in the Zoltan users guide. Example:
\verbatim
  Teuchos::ParameterList params;
  Teuchos::ParameterList& sublist = params.sublist("Zoltan");
  sublist.set("LB_METHOD", "GRAPH");
  sublist.set("PARMETIS_METHOD", "PARTKWAY");
\endverbatim
Refer to the Zoltan users guide (available at
<a href=http://www.cs.sandia.gov/zoltan>www.cs.sandia.gov/zoltan</a>)
for available Zoltan parameters.
</ul>

*/
