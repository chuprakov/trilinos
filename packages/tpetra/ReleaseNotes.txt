-----------------------------------------
Release Notes for Trilinos Package Tpetra
-----------------------------------------

Dev version:
-------------

* Map now implements view semantics, and it now has an isOneToOne
  predicate

isOneToOne is a collective which tests whether the Map is one to one
(that is, whether every global index is owned by at most one process
in the Map's communicator).

"View semantics" means that Map's copy constructor and assignment
operator (operator=) do a shallow copy, and that empty construction is
possible.  The new test for isOneToOne is the first Tpetra test that
assumes view semantics of Map.

Trilinos 11.8
-------------

* BACKWARDS IMCOMPATIBLE CHANGE: MultiVector and Vector now implement
  view semantics

This means that the copy constructor and assignment operator
(operator=) of both classes now do shallow copies.  This change will
support gradual porting to the new ("Kokkos Refactor") version of
Tpetra.

We have propagated this change to other Trilinos packages that use
Tpetra.  Please use the new createCopy nonmember function to get a new
instance of (Multi)Vector that is a deep copy of an existing
(Multi)Vector.  Also, please use the new nonmember function deep_copy
to do a deep copy between two existing compatible (Multi)Vector
instances.

* Kokkos Refactor updates

Development continues on the Kokkos Refactor version of Tpetra.  This
is a partial specialization of some Tpetra classes that uses the new
Kokkos programming model.  We plan eventually to switch to this
version of Tpetra and deprecate the old version.

This release adds a Kokkos Refactor version of Map.  Its GID->LID and
LID->GID conversion methods are now thread-safe and thread-scalable on
the host.  It also has a "device object" that you can use on CUDA
devices.

The Kokkos Refactor version of MultiVector now implements "dual view"
semantics.  This means that the Tpetra interface lets users mark
either host or device as modified, and synchronize between host and
device on demand, if necessary.

* Sparse matrix-matrix multiply performance improvements

This release includes many performance improvements to Tpetra's sparse
matrix-matrix multiply routine, and other supporting routines, such as
explicit transpose, and {im,ex}portAndFillComplete.  Tpetra now has a
sparse matrix-matrix multiply variant for implementing Jacobi
smoothing of matrices.  This is useful for algebraic multigrid.

* CrsMatrix: "Preserve Local Graph" defaults true (17 Mar 2014)
    
In CrsMatrix, the undocumented parameter "Preserve Local Graph" now
defaults to true.  This makes the following scenario work by default:
    
  1. Create a CrsMatrix A that creates and owns its graph (i.e., don't
      use the constructor that takes an RCP<const Tpetra::CrsGraph> or
      a local graph)
  2. Set an entry in the matrix A, and call fillComplete on it
  3. Create a CrsMatrix B using A's graph (obtained via
      A.getCrsGraph()), so that B has a const (a.k.a. "static") graph
  4. Change a value in B (you can't change its structure), and call
      fillComplete on B
    
Before this commit, the above scenario didn't work by default.  This
is because A's first fillComplete call would call
fillLocalGraphAndMatrix, which by default sets the local graph to
null.  As a result, from that point, A.getCrsGraph()->getLocalGraph()
returns null, which makes B's fillComplete throw an exception.  The
only way to make this scenario work was to set A's "Preserve Local
Graph" parameter to true.  (It defaulted to false.)
    
The idea behind this nonintuitive behavior was for the local sparse
ops object to own all the data.  This might make sense if it is a
third-party library that takes CSR's three arrays and copies them into
its own storage format.  In that case, it might be a good idea to free
the original three CSR arrays, in order to avoid duplicate storage.
However, resumeFill never had a way to get that data back out of the
local sparse ops object.  Rather than try to implement that, it's
easier just to make "Preserve Local Graph" default to true.
    
The possible data duplication mentioned in the previous paragraph can
never happen with the Kokkos Refactor version of CrsMatrix, since it
insists on controlling the matrix representation itself.  This makes
the code shorter and easier to read, and also ensures efficient fill.
That will in turn make the option unnecessary.

* Many bug fixes

The most important bug fixed is Bug 6069, an error in Distributor,
which would only manifest on MPICH.  This bug fix alone is enough
reason to upgrade to Trilinos 11.8.

Trilinos 11.6
-------------

* Gradual port to use (new) Kokkos

Tpetra will migrate to use the new Kokkos programming model.  The
tpetra/src/kokkos_refactor directory contains a preview of this
migration under development.  This will include backwards-incompatible
changes.  For example, MultiVector and Vector will have view
semantics, instead of their current container semantics.  This means
that their copy constructor and assignment operator (operator=) will
make shallow copies, instead of deep copies.  This will make Tpetra's
semantics more consistent with those of Kokkos.  In order to provide
deep copies, all Tpetra objects will get the following:

  - createCopy() method: returns a deep copy of its *this argument
  - deep_copy() nonmember function: copies the contents of one
    MultiVector into the contents of another existing MultiVector.
    This works like deep_copy() for Kokkos::View objects.

MultiVector already has both of these functions.  Thus, in order to
prepare for the backwards incompatible changes to Tpetra, users must
find all uses of the copy constructor and assignment operator, and
replace them with createCopy() resp. deep_copy().  This will affect at
least the following packages which have generic adapters for
Tpetra::MultiVector:

  - Amesos2 (MultiVecAdapter)
  - Anasazi (MultiVecTraits)
  - Belos (MultiVecTraits)
  - Xpetra (Xpetra::TpetraMultiVector)

* Accepted non-backwards compatible change to KokkosClassic, in which
  that subpackage changed its namespace from Kokkos to KokkosClassic.

Trilinos 11.4:
--------------

* Performance improvements to fillComplete (CrsGraph and CrsMatrix)

* Performance improvements to Map's global-to-local index conversions

* MPI performance optimizations

Methods that perform communication between (MPI) processes do less
communication than before.  This should improve performance,
especially for large process counts, of the following operations:

  - Creating a Map
  - Creating an Import or Export communication plan
  - Executing an Import or Export (e.g., in a distributed sparse
    matrix-vector multiply, or in global finite element assembly)
  - Calling fillComplete() on a CrsGraph or CrsMatrix

* Restrict a Map's communicator to processes with nonzero elements,
  and apply the result to a distributed object

Map now has two new methods.  The first, removeEmptyProcesses(),
returns a new Map with a new communicator, which contains only those
processes which have a nonzero number of entries in the original Map.
The second method, replaceCommWithSubset(), returns a new Map whose
communicator is an arbitrary subset of processes of the original Map's
communicator.  Distributed objects (subclasses of DistObject) also
have a new removeEmptyProcessesInPlace() method, for applying in place
the new Map created by calling removeEmptyProcesses() on the original
Map over which the object was distributed.

These methods are especially useful for algebraic multigrid.  At
coarser levels of the multigrid hierarchy, it is helpful for
performance to "rebalance" the matrices at those levels, so that a
subset of processes share the elements.  This leaves the remaining
processes without any elements.  Excluding them from the communicator
reduces the cost of all-reduces and other communication operations
necessary for creating the coarser levels of the hierarchy.

* CrsMatrix: Native SOR and Gauss-Seidel kernels

These kernels improve the performance of Ifpack2 and MueLu.
Gauss-Seidel is a special case of SOR (Symmetric Over-Relaxation).
See the documentation of Ifpack2::Relaxation for details on the
algorithm, which is actually a "hybrid" of Jacobi between MPI
processes, and SOR (or Gauss-Seidel) within an MPI process.  The
kernels also include the "symmetric" variant (forward and backward
sweeps) of SOR and Gauss-Seidel.

* CrsMatrix: Precompute and reuse offsets of diagonal entries

The (existing) one-argument verison of CrsMatrix's getLocalDiagCopy()
method requires the following operations per row:

  1. Convert current local row index to global, using the row Map
  2. Convert global index to local column index, using the column Map
  3. Search the row for that local column index
    
Precomputing the offsets of diagonal entries and reusing them skips
all these steps.  CrsMatrix has a new method getLocalDiagOffsets() to
precompute the offsets, and a two-argument version of
getLocalDiagCopy() that uses the precomputed offsets.  The precomputed
offsets are not meant to be used in any way other than to be given to
the two-argument version of getLocalDiagCopy().  They must be
recomputed whenever the structure of the sparse matrix changes (by
calling insertGlobalValues() or insertLocalValues()) or is optimized
(e.g., by calling fillComplete() for the first time).

* CrsGraph,CrsMatrix: Added "No Nonlocal Changes" parameter to
  fillComplete()

The fillComplete() method accepts an optional ParameterList which
controls the behavior of fillComplete(), as opposed to behavior of the
object in general.  "No Nonlocal Changes" is a bool parameter which is
false by default.  Its value must be the same on all processes in the
graph or matrix's communicator.  If the parameter is true, the caller
asserts that no entries were inserted in nonowned rows.  This lets
fillComplete() skip the global communication that checks whether any
processes inserted any entries in nonowned rows.

* Default Kokkos/Tpetra Node type is now Kokkos::SerialNode

NOTE: This change breaks backwards compatibility.

Users expect that Tpetra by default uses "MPI only" for parallelism,
rather than "MPI plus threads."  These users were therefore
experiencing unexpected performance issues when the default Kokkos
Node type is threaded, as was the case if Trilinos' support for any of
the threading libraries (Pthreads, TBB, OpenMP) are enabled.  Trilinos
detects and enables support for Pthreads automatically on many
platforms.  Therefore, after some discussion among Kokkos and Tpetra
developers, we decided to change the default Kokkos Node type (and
therefore, the default Node used by Tpetra objects) to
Kokkos::SerialNode. This can be overridden at configure time by
specifying the following option to CMake when configuring Trilinos:

-D KokkosClassic_DefaultNode:STRING="<node-type>" 

where <node-type> any of the official Kokkos Node types, such as the
following:
- Kokkos::SerialNode (current default) 
- Kokkos::TBBNode
- Kokkos::TPINode
- Kokkos::OpenMPNode


Trilinos 11.0: 
--------------
* Significant performance improvements to local sparse matrix-vector multiply on CPU nodes. 
* Removed all deprecated methods.


Trilinos 10.12:
--------------

* Major (backwards-compatible, internal) refactor to interaction between Tpetra::CrsGraph/CrsMatrix and their interaction 
  with their LocalSparseOps template parameter. 
* Removed generic kernels for GPU nodes; GPU sparse kernel support now provided by CUSPARSE library; requires CUDA 4.1
* Additional methods in Reduction/Transformation Interface (RTI) interface, examples in tpetra/examples/MultiPrec
* Fixed major bugs in Tpetra Import/Export
* Minor bug fixes and documenting tests
* Numerous improvements to documentation
* Better MatrixMarket support in tpetra/util
* Added the ability to construct a Tpetra::Vector/MultiVector using user data (host-based nodes only)
- Deprecated: fillComplete(OptimizeStorageOption) on Tpetra::CrsGraph and Tpetra::CrsMatrix, in favor of a ParameterList.


Trilinos 10.7:
--------------

* Added (experimental) Reduction/Transformation Interface (RTI) interface to tpetra/rti, examples in tpetra/examples/RTInterface

Trilinos 10.6.4:
----------------

* Fixed some bugs in the build system
* Updates to support CUDA 4.0 and built-in Thrust

Trilinos 10.6.1:
----------------

* Added new HybridPlatform examples, under tpetra/examples/HybridPlatform. Anasazi and Belos examples are currently not built, though they are functional.
* Added Added new MultiVector GEMM tests, to evaluate potential interference of TPI/TBB threads and a threaded BLAS, to tpetra/test/MultiVector.
* Added Tpetra timers to Anasazi and Belos adaptors.
* Added test/documentation build of Tpetra::CrsMatrix against KokkosExamples::DummySpasreKernelClass
* Fixed some bugs, added some bug verification tests, disabled by default.

Trilinos 10.6:
--------------

Significant internal changes in Tpetra for this release, mostly centered around
the CrsMatrix class. Lots of new features centering around multi-core/GPUs did
not make it in this release; look for more development in 10.6.1.

* Lots of additional documentation, testing and examples in Tpetra.
* Imported select Teuchos memory management classes/methods into the Tpetra namespace.
* Updates to the Anasazi/Tpetra adaptors for efficiency, node-awareness and debugging.
* Minor bug fixes, warnings addressed.

Changes breaking backwards compatbility:
* Tpetra CRS objects (i.e., CrsGraph and CrsMatrix) are required to be "fill-active" in order to be modified.
  Furthermore, they are requried to be "fill-complete" in order to call multiply/solve.
  The transition between these states is mediated by the methods fillComplete() and resumeFill(). 
  This will only effect users that modify a matrix after calling fillComplete().

Newly deprecated functionality:
* CrsGraph/CrsMatrix persisting views of graph and matrix data are now
  deprecated. New, non-persisting versions of these are provided.


Trilinos 10.4:
--------------

The Trilinos release 10.4 came at an unfortunate time, as we were in the middle
of a medium refactor in Kokkos/Tpetra in order to better support GPU and
multicore nodes. Therefore, there has been some potential regression in performance
for GPU nodes; and some known issues regarding multi-core CPU performance (especially 
on NUMA platforms) have not been addressed. The rest of this refactor is likely to happen 
in the development branch, and will not be released until 10.6 (estimated for September 2010). 

Users that require access to this code should contact a Trilinos developer regarding access to the 
development branch repository. 

(*) Improvements to doxygen documentation.
- added ifdefs to support profiling/tracing of host-to-device memory transfers 
  These are enable via cmake options
  -D KokkosClassic_ENABLE_CUDA_NODE_MEMORY_PROFILING:BOOL=ON
  -D KokkosClassic_ENABLE_CUDA_NODE_MEMORY_TRACE:BOOL=ON

(*) VBR capability (experimental)
- added variable-block row matrix (VbrMatrix) and underlying support classes (BlockMap, BlockMultiVector)
- added power method example of VBR classes

(*) CrsMatrix:
- now implements DisbObject, allowing import/export capability with CrsMatrix objects (experimental)
- combined LocalMatVec and LocalMatSolve objects into a single template parameter. (non BC)
  this required changes to CrsMatrixMultplyOp and CrsMatrixSolveOp operators as well. (non BC)
- access default for this type via Kokkos::DefaultKernels
- removed cached views of object data. this should have no effect on CPU-based nodes, but will result in slower performance
  for GPU-based nodes. this regression is a result of the release happening mid-refactor. it will not be addressed in the 
  10.4.x sequence.
- bug fixes regarding complex cases involving user-specified column maps and graphs.

(*) DistObject interface:
- added createViews(), releaseViews() methods to allow host-based objects to temporarily cache views of host data during import/export procedure

(*) Map: 
- added new non-member constructors: createContigMap(), createWeightedContigMap(), createUniformContigMap()
- fixed some bugs regarding use of unsigned Ordinal types
- fixed MPI-stalling bug in getRemoteIndexList()

(*) MultiVector:
- added view methods offsetView() and offsetViewNonConst() to create a MultiVector view of a subset of rows
- added non-member constructor Tpetra::createMultiVector(map,numVecs)

(*) Vector:
- added non-member constructor Tpetra::createVector(map)

(*) Tpetra I/O:
- added Galeri-type methods for generating pedagogical matrices (currently, only 3D Laplacian)

(*) External adaptors (experiemental)
- Efficiency improvements for Belos/Tpetra adaptors
- Brought Anasazi/Tpetra adaptors back online
