# To run makefile:
#    1) set environment variable TRILINOS_ARCH to sgi, sun, tflop, or pclinux.
#       Other machines require an appropriate makefile.$(TRILINOS_ARCH) file.
#    2) Set TRILINOS_COMM to SERIAL or MPI
#    3) (Optional) Set TRILINOS_ID to make unique version for same 
#       architecture and communication mode.
#
#    4) Make the archive $(LIBAZTEC) by typing 'make'.
#

include $(TRILINOS_HOME)/build/TRILINOS_TARGET_DEFS
TRILINOS_TARGET = $(TRILINOS_ARCH).$(TRILINOS_COMM)$(TRILINOS_ID)
include $(TRILINOS_HOME)/build/makefile.$(TRILINOS_TARGET)

DEFINES= -D$(TRILINOS_ARCH) $(EPETRA_ARCH_DEFINES) -D$(EPETRA_COMM)

INCLUDES = $(ARCH_INCLUDES) $(EPETRA_INCLUDES) $(IFPACK_INCLUDES)

CFLAGS=$(ARCH_CFLAGS) $(DEFINES) $(INCLUDES)
FFLAGS=$(ARCH_FFLAGS) $(DEFINES) $(INCLUDES)
CXXFLAGS=$(ARCH_CXXFLAGS) $(DEFINES) $(INCLUDES)
CCFLAGS=$(CXXFLAGS)
LDFLAGS=$(ARCH_LDFLAGS)


LIB_PATHS= $(LIBIFPACK) $(LIBEPETRA) $(LIBMACHDEP) $(LIBBLAS)

#=======================================================================
# Ifpack test source files
#=======================================================================

TEST_C = c_main.c

TEST_CXX = cxx_main.cpp

TEST_F = f_main.f

UTIL_C = 
UTIL_CXX = 
UTIL_F =
#=======================================================================
# TEST include files
#=======================================================================

TEST_INC = 

TEST_C_OBJ          = $(TEST_C:.c=.o)
TEST_CXX_OBJ          = $(TEST_CXX:.cpp=.o)
TEST_F_OBJ          = $(TEST_F:.f=.o)
UTIL_C_OBJ          = $(UTIL_C:.c=.o)
UTIL_CXX_OBJ          = $(UTIL_CXX:.cpp=.o)
UTIL_F_OBJ          = $(UTIL_F:.f=.o)

TARGET_C_SERIAL = c_CrsRilukSerial.exe
TARGET_CXX_SERIAL = cxx_CrsRilukSerial.exe
TARGET_F_SERIAL = f_CrsRilukSerial.exe

TARGET_C_MPI = c_CrsRilukMpi.exe
TARGET_CXX_MPI = cxx_CrsRilukMpi.exe
TARGET_F_MPI = f_CrsRilukMpi.exe

TARGET_C = $(TARGET_C_$(TRILINOS_COMM))
TARGET_CXX = $(TARGET_CXX_$(TRILINOS_COMM))
TARGET_F = $(TARGET_F_$(TRILINOS_COMM))

all: cxx
c: $(TARGET_C)
cxx: $(TARGET_CXX)
f: $(TARGET_F)

$(TARGET): $(TARGET_C) $(TARGET_CXX) $(TARGET_F)

$(TARGET_C): $(TEST_C_OBJ) $(UTIL_CXX_OBJ) $(UTIL_C_OBJ) $(UTIL_F_OBJ)
	$(LINKER) $(LDFLAGS) $(TEST_C_OBJ) $(LIB_PATHS) $(ARCH_LIBS) \
	$(LIBMPI)  -o $(TARGET_C)

$(TARGET_CXX): $(TEST_CXX_OBJ) $(UTIL_CXX_OBJ) $(UTIL_C_OBJ) $(UTIL_F_OBJ)
	$(LINKER) $(LDFLAGS) $(TEST_CXX_OBJ) $(LIB_PATHS) $(ARCH_LIBS) \
	$(LIBMPI)  -o $(TARGET_CXX)

$(TARGET_F): $(TEST_F_OBJ) $(UTIL_CXX_OBJ) $(UTIL_C_OBJ) $(UTIL_F_OBJ)
	$(LINKER) $(LDFLAGS) $(TEST_F_OBJ) $(LIB_PATHS) $(ARCH_LIBS) \
	$(LIBMPI)  -o $(TARGET_F)

#
# dependencies for 'f' files (none at this time)
#

clean:
	@echo "junk" > dummy.o
	@rm -f *.o  *~ $(TARGET_C_MPI) $(TARGET_C_SERIAL) \
                    $(TARGET_CXX_MPI) $(TARGET_CXX_SERIAL) \
                    $(TARGET_F_MPI) $(TARGET_F_SERIAL) 
                     
