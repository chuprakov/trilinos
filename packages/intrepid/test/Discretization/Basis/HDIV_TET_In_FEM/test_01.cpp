// @HEADER
// ************************************************************************
//
//                           Intrepid Package
//                 Copyright (2007) Sandia Corporation
//
// Under terms of Contract DE-AC04-94AL85000, there is a non-exclusive
// license for use of this work by or on behalf of the U.S. Government.
//
// This library is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of the
// License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
// USA
// Questions? Contact Pavel Bochev (pbboche@sandia.gov) or
//                    Denis Ridzal (dridzal@sandia.gov) or
//                    Robert Kirby (robert.c.kirby@ttu.edu)
//
// ************************************************************************
// @HEADER


/** \file
\brief  Unit test of Raviart-Thomas class for tetrahedra.
\author Created by R. Kirby
*/

#include "Intrepid_FieldContainer.hpp"
#include "Teuchos_oblackholestream.hpp"
#include "Teuchos_RCP.hpp"
#include "Teuchos_GlobalMPISession.hpp"
#include "Intrepid_PointTools.hpp"
#include "Intrepid_HDIV_TET_In_FEM.hpp"
#include "Shards_CellTopology.hpp"

#include <iostream>
using namespace Intrepid;

/** \brief Performs a code-code comparison to FIAT for Raviart-Thomas bases on tets (values and divs)
    \param argc [in] - number of command-line arguments
    \param argv [in] - command-line arguments
 */
int main(int argc, char *argv[]) {

  Teuchos::GlobalMPISession mpiSession(&argc, &argv);
  
  // This little trick lets us print to std::cout only if a (dummy) command-line argument is provided.
  int iprint     = argc - 1;
  
  Teuchos::RCP<std::ostream> outStream;
  Teuchos::oblackholestream bhs; // outputs nothing
  
  if (iprint > 0)
    outStream = Teuchos::rcp(&std::cout, false);
  else
    outStream = Teuchos::rcp(&bhs, false);
  
  // Save the format state of the original std::cout.
  Teuchos::oblackholestream oldFormatState;
  oldFormatState.copyfmt(std::cout);
  
  *outStream \
    << "===============================================================================\n" \
    << "|                                                                             |\n" \
    << "|                           Unit Test HDIV_TET_In_FEM                         |\n" \
    << "|                                                                             |\n" \
    << "|     1) Tests tetrahedral Raviart-Thomas basis                               |\n" \
    << "|                                                                             |\n" \
    << "|  Questions? Contact  Pavel Bochev (pbboche@sandia.gov) or                   |\n" \
    << "|                      Denis Ridzal (dridzal@sandia.gov) or                   |\n" \
    << "|                      Robert Kirby (robert.c.kirby@ttu.edu)                  |\n" \
    << "|                                                                             |\n" \
    << "|  Intrepid's website: http://trilinos.sandia.gov/packages/intrepid           |\n" \
    << "|  Trilinos website:   http://trilinos.sandia.gov                             |\n" \
    << "|                                                                             |\n" \
    << "===============================================================================\n";
  
  int errorFlag  = 0;

  // test for basis values, compare against fiat
  try {
    const int deg = 2;
    Basis_HDIV_TET_In_FEM<double,FieldContainer<double> >  myBasis( deg , POINTTYPE_EQUISPACED );

    // Get a lattice
    const int np_lattice = PointTools::getLatticeSize( myBasis.getBaseCellTopology() , deg , 0 );
    FieldContainer<double> lattice( np_lattice , 3 );
    FieldContainer<double> myBasisValues( myBasis.getCardinality() , np_lattice , 3 );
    PointTools::getLattice<double,FieldContainer<double> >( lattice , 
							    myBasis.getBaseCellTopology() , 
							    deg , 
							    0 , 
							    POINTTYPE_EQUISPACED );    

    myBasis.getValues( myBasisValues , lattice , OPERATOR_VALUE );

    const double fiat_vals[] = {
      7.047591069330449e-02, -5.824500587544065e+00, -2.609024107869118e-15,
      -2.499118683901267e-01, -1.932608695652173e+00, -1.720845688168993e-15,
      -3.164894242068148e+00, 1.959283196239718e+00, -8.326672684688674e-16,
      -1.054935370152743e-01, -1.012690951821386e+00, 1.110223024625157e-16,
      -9.899236192714425e-01, 7.170387779083440e-01, 6.106226635438361e-16,
      -1.824324324324322e-02, -4.500000000000013e-01, 2.386979502944087e-15,
      1.072267920094009e-02, -2.054054054054053e+00, 1.634665099882493e+00,
      -4.021445358401882e-01, 2.054054054054054e+00, -1.608578143360752e+00,
      5.508225616921253e-02, 1.171739130434782e+00, -1.552173913043478e+00,
      -2.506756756756707e-01, 2.202173913043479e+00, -3.052173913043474e+00,
      1.205611045828435e+00, 1.959283196239718e+00, 1.776356839400250e-15,
      2.182520564042299e+00, -1.932608695652173e+00, 1.443289932012704e-15,
      5.754024676850754e+00, -5.824500587544064e+00, 4.440892098500626e-16,
      2.728848413630996e-01, 7.170387779083433e-01, -1.665334536937735e-16,
      1.118184488836658e+00, -1.012690951821386e+00, -2.775557561562891e-16,
      4.682432432432404e-01, -4.499999999999968e-01, -1.665334536937735e-15,
      -4.333137485311206e-02, 2.054054054054053e+00, -1.608578143360754e+00,
      4.086662749706237e-01, -2.054054054054053e+00, 1.634665099882493e+00,
      3.253525264394816e-01, 1.171739130434781e+00, -1.552173913043478e+00,
      1.100675675675669e+00, 2.202173913043478e+00, -3.052173913043480e+00,
      -6.249999999999989e-01, 1.750000000000001e+00, -6.661338147750939e-16,
      -8.749999999999987e-01, 1.750000000000001e+00, -4.440892098500626e-16,
      -1.124999999999999e+00, 1.750000000000001e+00, -3.330669073875470e-16,
      -3.749999999999988e-01, 1.000000000000001e+00, -2.220446049250313e-16,
      -6.249999999999987e-01, 1.000000000000000e+00, -2.220446049250313e-16,
      -1.249999999999988e-01, 2.499999999999988e-01, 1.110223024625157e-16,
      1.249999999999992e-01, -2.000000000000001e+00, 1.500000000000001e+00,
      3.749999999999992e-01, -2.000000000000001e+00, 1.500000000000002e+00,
      -1.250000000000001e-01, -1.250000000000002e+00, 1.500000000000002e+00,
      -1.125000000000000e+00, -6.750000000000002e+00, 9.000000000000011e+00,
      1.205611045828437e+00, -4.071680376028135e-02, 1.110223024625157e-16,
      2.182520564042300e+00, 6.739130434782688e-02, 2.220446049250313e-16,
      5.754024676850754e+00, 1.754994124559345e-01, -5.551115123125783e-16,
      2.728848413631009e-01, -1.282961222091656e+00, -3.885780586188048e-16,
      1.118184488836659e+00, 9.873090481786153e-01, -3.330669073875470e-16,
      4.682432432432426e-01, -2.449999999999995e+00, -7.216449660063518e-16,
      -4.333137485311239e-02, 5.405405405405311e-02, -1.608578143360755e+00,
      4.086662749706225e-01, -5.405405405405359e-02, 1.634665099882494e+00,
      3.253525264394821e-01, -8.282608695652179e-01, -1.552173913043479e+00,
      1.100675675675669e+00, 2.021739130434784e-01, -3.052173913043482e+00,
      -6.510869565217391e-01, 1.152173913043480e-01, 6.106226635438361e-16,
      -1.057608695652172e+00, 1.152173913043462e-01, -1.665334536937735e-16,
      -1.464130434782605e+00, 1.152173913043445e-01, -7.216449660063518e-16,
      2.076086956521735e-01, 1.295652173913042e+00, 4.440892098500626e-16,
      4.967391304347831e-01, 1.295652173913041e+00, -2.220446049250313e-16,
      -3.249999999999998e-01, 6.649999999999995e+00, 7.771561172376096e-16,
      -9.239130434782654e-02, 9.783840404509192e-16, -1.526086956521741e+00,
      -3.815217391304342e-01, -7.979727989493313e-16, -1.526086956521740e+00,
      -2.554347826086948e-01, 9.065217391304363e-01, 1.604347826086955e+00,
      2.750000000000012e-01, 3.456521739130411e-01, -2.895652173913049e+00,
      -6.249999999999987e-01, -2.499999999999997e-01, -5.551115123125783e-16,
      -8.749999999999982e-01, -2.499999999999994e-01, -3.330669073875470e-16,
      -1.124999999999998e+00, -2.499999999999992e-01, -1.110223024625157e-16,
      -3.749999999999988e-01, -9.999999999999992e-01, -6.661338147750939e-16,
      -6.249999999999983e-01, -9.999999999999994e-01, -4.440892098500626e-16,
      -1.249999999999988e-01, -1.750000000000000e+00, -7.771561172376096e-16,
      1.249999999999991e-01, 8.326672684688674e-17, 1.500000000000000e+00,
      3.749999999999990e-01, 4.163336342344337e-16, 1.500000000000000e+00,
      -1.249999999999998e-01, 7.499999999999992e-01, 1.500000000000001e+00,
      -1.124999999999999e+00, -7.499999999999977e-01, 9.000000000000004e+00,
      -5.929524089306700e+00, 1.754994124559334e-01, 1.498801083243961e-15,
      -2.249911868390129e+00, 6.739130434782561e-02, 7.216449660063518e-16,
      -1.164894242068149e+00, -4.071680376028160e-02, 1.665334536937735e-16,
      -2.105493537015276e+00, 9.873090481786138e-01, 8.326672684688674e-16,
      1.010076380728558e+00, -1.282961222091657e+00, -2.775557561562891e-16,
      1.981756756756757e+00, -2.449999999999999e+00, -3.885780586188048e-16,
      -1.989277320799061e+00, -5.405405405405317e-02, 1.634665099882494e+00,
      1.597855464159813e+00, 5.405405405405388e-02, -1.608578143360754e+00,
      2.055082256169213e+00, -8.282608695652165e-01, -1.552173913043478e+00,
      1.749324324324328e+00, 2.021739130434800e-01, -3.052173913043472e+00,
      1.375000000000001e+00, -2.500000000000002e-01, -4.440892098500626e-16,
      1.125000000000001e+00, -2.499999999999992e-01, -2.220446049250313e-16,
      8.750000000000009e-01, -2.499999999999981e-01, 0.000000000000000e+00,
      1.625000000000001e+00, -9.999999999999993e-01, -2.220446049250313e-16,
      1.375000000000001e+00, -9.999999999999990e-01, 0.000000000000000e+00,
      1.875000000000001e+00, -1.750000000000001e+00, -2.220446049250313e-16,
      -1.875000000000001e+00, -8.881784197001252e-16, 1.500000000000001e+00,
      -1.625000000000001e+00, 1.665334536937735e-16, 1.500000000000000e+00,
      -2.125000000000000e+00, 7.499999999999989e-01, 1.500000000000001e+00,
      -7.124999999999998e+00, -7.499999999999996e-01, 9.000000000000004e+00,
      1.348913043478262e+00, 1.152173913043489e-01, 2.220446049250313e-16,
      9.423913043478275e-01, 1.152173913043477e-01, 5.551115123125783e-17,
      5.358695652173938e-01, 1.152173913043465e-01, 1.110223024625157e-16,
      -1.792391304347826e+00, 1.295652173913040e+00, -3.885780586188048e-16,
      -1.503260869565217e+00, 1.295652173913040e+00, -4.996003610813204e-16,
      -6.324999999999999e+00, 6.649999999999994e+00, -7.771561172376096e-16,
      1.907608695652173e+00, 1.304512053934559e-15, -1.526086956521740e+00,
      1.618478260869565e+00, 8.326672684688674e-17, -1.526086956521739e+00,
      -2.255434782608696e+00, 9.065217391304351e-01, 1.604347826086957e+00,
      2.275000000000000e+00, 3.456521739130409e-01, -2.895652173913047e+00,
      7.047591069330056e-02, 1.754994124559341e-01, -6.000000000000000e+00,
      -2.499118683901298e-01, 6.739130434782645e-02, -2.000000000000000e+00,
      -3.164894242068152e+00, -4.071680376028061e-02, 2.000000000000002e+00,
      -1.054935370152750e-01, 9.873090481786149e-01, -2.000000000000001e+00,
      -9.899236192714417e-01, -1.282961222091656e+00, 2.000000000000000e+00,
      -1.824324324324274e-02, -2.449999999999996e+00, 1.999999999999998e+00,
      1.072267920093910e-02, -5.405405405405374e-02, -3.653349001175052e-01,
      -4.021445358401882e-01, 5.405405405405371e-02, 3.914218566392471e-01,
      5.508225616921281e-02, -8.282608695652178e-01, 4.478260869565227e-01,
      -2.506756756756706e-01, 2.021739130434793e-01, -1.052173913043474e+00,
      -6.510869565217381e-01, 1.152173913043480e-01, 2.000000000000000e+00,
      -1.057608695652173e+00, 1.152173913043472e-01, 2.000000000000000e+00,
      -1.464130434782607e+00, 1.152173913043467e-01, 2.000000000000000e+00,
      2.076086956521739e-01, 1.295652173913041e+00, -2.000000000000000e+00,
      4.967391304347823e-01, 1.295652173913041e+00, -2.000000000000000e+00,
      -3.250000000000001e-01, 6.649999999999994e+00, -6.000000000000000e+00,
      -9.239130434782594e-02, -1.040834085586084e-16, 4.739130434782601e-01,
      -3.815217391304347e-01, -5.481726184086710e-16, 4.739130434782612e-01,
      -2.554347826086952e-01, 9.065217391304349e-01, -3.956521739130436e-01,
      2.750000000000000e-01, 3.456521739130387e-01, -8.956521739130445e-01,
      1.205611045828433e+00, -4.071680376028057e-02, 2.000000000000000e+00,
      2.182520564042298e+00, 6.739130434782749e-02, -2.000000000000000e+00,
      5.754024676850754e+00, 1.754994124559349e-01, -6.000000000000001e+00,
      2.728848413630991e-01, -1.282961222091656e+00, 2.000000000000000e+00,
      1.118184488836658e+00, 9.873090481786142e-01, -2.000000000000000e+00,
      4.682432432432426e-01, -2.449999999999998e+00, 2.000000000000001e+00,
      -4.333137485311311e-02, 5.405405405405317e-02, 3.914218566392457e-01,
      4.086662749706241e-01, -5.405405405405364e-02, -3.653349001175082e-01,
      3.253525264394833e-01, -8.282608695652184e-01, 4.478260869565214e-01,
      1.100675675675670e+00, 2.021739130434774e-01, -1.052173913043481e+00,
      -5.675675675675674e-01, 1.081081081081076e-01, -2.385222573469223e-16,
      7.837837837837853e-01, -3.446917475592232e-16, 7.173040673777598e-17,
      -4.594594594594528e-01, -1.081081081081076e-01, 6.496561623532029e-16,
      -1.891891891891872e-01, 1.135135135135135e+00, 2.211661401875995e-17,
      9.459459459459507e-01, -1.135135135135136e+00, 2.211661401875995e-17,
      -2.432432432432419e-01, -3.380161738379130e-16, -1.443523163679369e-16,
      2.702702702702586e-02, -5.405405405405340e-02, 1.621621621621625e+00,
      1.594594594594595e+00, 5.405405405405360e-02, -1.621621621621623e+00,
      -1.351351351351348e-01, 6.908545242802699e-16, 1.512257020028065e-15,
      -6.756756756756708e-01, 9.732509149114397e-17, 7.931986671487219e-15,
      3.607814336075197e-01, 3.014101057579428e-02, -5.273559366969494e-16,
      4.038484136310219e-01, -2.391304347825955e-02, 1.387778780781446e-16,
      -8.503819036427719e-01, -7.796709753231305e-02, 6.938893903907228e-16,
      -1.565511163337246e-01, 1.845828437132786e+00, -2.498001805406602e-16,
      -7.433313748531124e-01, 7.106933019976504e-01, 2.775557561562891e-17,
      1.533783783783786e-01, -5.499999999999998e-01, -3.053113317719180e-16,
      5.155699177438284e-02, -2.702702702702671e-02, 1.580376028202118e+00,
      -1.031139835487609e-02, 2.702702702702693e-02, -4.124559341950632e-02,
      1.552585193889540e-01, 1.132608695652172e+00, -1.578260869565217e+00,
      -2.628378378378360e-01, -7.173913043478147e-02, -7.826086956520995e-02,
      3.477379553466500e-01, 2.127497062279665e-01, -2.220446049250313e-16,
      3.125440658049347e-01, 1.586956521739130e-01, 0.000000000000000e+00,
      -1.019947121034076e+00, 1.046415981198597e-01, 2.220446049250313e-16,
      1.347532314923620e-01, 9.936545240893064e-01, 2.220446049250313e-16,
      -1.824618096357217e-01, -1.414806110458283e-01, 1.110223024625157e-16,
      5.337837837837807e-02, -3.499999999999993e-01, 3.330669073875470e-16,
      -5.713866039952994e-02, -2.702702702702687e-02, 2.067332549941247e+00,
      -3.885722679200934e-01, 2.702702702702705e-02, 4.457109283196235e-01,
      9.004112808460621e-02, -7.891304347826084e-01, 4.739130434782612e-01,
      4.371621621621633e-01, 4.760869565217388e-01, -2.026086956521737e+00
    };

    int cur=0;
    for (int i=0;i<myBasisValues.dimension(0);i++) {
      for (int j=0;j<myBasisValues.dimension(1);j++) {
	for (int k=0;k<myBasisValues.dimension(2);k++) {
	  if (std::abs( myBasisValues(i,j,k) - fiat_vals[cur] ) > 10.0*INTREPID_TOL ) {
	    errorFlag++;
	    *outStream << std::setw(70) << "^^^^----FAILURE!" << "\n";
	    
	    // Output the multi-index of the value where the error is:
	    *outStream << " At multi-index { ";
	    *outStream << i << " " << j << " " << k;
	    *outStream << "}  computed value: " << myBasisValues(i,j,k)
		       << " but correct value: " << fiat_vals[cur] << "\n";
          *outStream << "Difference: " << std::abs( myBasisValues(i,j,k) - fiat_vals[cur] ) << "\n";
	  }
	  cur++;
	}
      }
 }
  }
  catch (std::exception err) {
    *outStream << err.what() << "\n\n";
    errorFlag = -1000;
  }
  try {
    const int deg = 2;
    Basis_HDIV_TET_In_FEM<double,FieldContainer<double> >  myBasis( deg , POINTTYPE_EQUISPACED );

    // Get a lattice
    const int np_lattice = PointTools::getLatticeSize( myBasis.getBaseCellTopology() , deg , 0 );
    FieldContainer<double> lattice( np_lattice , 3 );
    FieldContainer<double> myBasisDivs( myBasis.getCardinality() , np_lattice );
    PointTools::getLattice<double,FieldContainer<double> >( lattice , 
							    myBasis.getBaseCellTopology() , 
							    deg , 
							    0 , 
							    POINTTYPE_EQUISPACED );    

    myBasis.getValues( myBasisDivs , lattice , OPERATOR_DIV );

    const double fiat_divs[] = {
      2.541739130434783e+01,
      9.417391304347840e+00,
      -6.582608695652151e+00,
      9.417391304347824e+00,
      -6.582608695652170e+00,
      -6.582608695652187e+00,
      9.417391304347827e+00,
      -6.582608695652169e+00,
      -6.582608695652182e+00,
      -6.582608695652182e+00,
      -6.582608695652190e+00,
      9.417391304347809e+00,
      2.541739130434781e+01,
      -6.582608695652175e+00,
      9.417391304347824e+00,
      -6.582608695652160e+00,
      -6.582608695652178e+00,
      9.417391304347820e+00,
      -6.582608695652165e+00,
      -6.582608695652169e+00,
      -5.000000000000002e+00,
      -5.000000000000004e+00,
      -5.000000000000005e+00,
      -5.000000000000004e+00,
      -5.000000000000005e+00,
      -5.000000000000005e+00,
      1.100000000000001e+01,
      1.100000000000001e+01,
      1.100000000000001e+01,
      2.700000000000002e+01,
      -6.582608695652187e+00,
      9.417391304347820e+00,
      2.541739130434782e+01,
      -6.582608695652175e+00,
      9.417391304347829e+00,
      -6.582608695652166e+00,
      -6.582608695652181e+00,
      9.417391304347824e+00,
      -6.582608695652169e+00,
      -6.582608695652174e+00,
      -5.834782608695654e+00,
      -5.834782608695647e+00,
      -5.834782608695640e+00,
      1.016521739130434e+01,
      1.016521739130435e+01,
      2.616521739130434e+01,
      -5.834782608695654e+00,
      -5.834782608695649e+00,
      1.016521739130434e+01,
      -5.834782608695658e+00,
      -4.999999999999997e+00,
      -5.000000000000000e+00,
      -5.000000000000002e+00,
      -4.999999999999999e+00,
      -5.000000000000002e+00,
      -5.000000000000003e+00,
      1.100000000000000e+01,
      1.100000000000000e+01,
      1.100000000000000e+01,
      2.700000000000001e+01,
      2.541739130434783e+01,
      9.417391304347827e+00,
      -6.582608695652175e+00,
      9.417391304347829e+00,
      -6.582608695652174e+00,
      -6.582608695652176e+00,
      9.417391304347833e+00,
      -6.582608695652171e+00,
      -6.582608695652170e+00,
      -6.582608695652169e+00,
      -4.999999999999995e+00,
      -4.999999999999998e+00,
      -5.000000000000003e+00,
      -5.000000000000000e+00,
      -5.000000000000004e+00,
      -5.000000000000006e+00,
      1.100000000000001e+01,
      1.100000000000000e+01,
      1.100000000000000e+01,
      2.700000000000001e+01,
      -5.834782608695666e+00,
      -5.834782608695659e+00,
      -5.834782608695651e+00,
      1.016521739130434e+01,
      1.016521739130435e+01,
      2.616521739130435e+01,
      -5.834782608695663e+00,
      -5.834782608695655e+00,
      1.016521739130435e+01,
      -5.834782608695660e+00,
      2.541739130434784e+01,
      9.417391304347831e+00,
      -6.582608695652176e+00,
      9.417391304347840e+00,
      -6.582608695652167e+00,
      -6.582608695652160e+00,
      9.417391304347829e+00,
      -6.582608695652180e+00,
      -6.582608695652172e+00,
      -6.582608695652183e+00,
      -5.834782608695658e+00,
      -5.834782608695654e+00,
      -5.834782608695653e+00,
      1.016521739130434e+01,
      1.016521739130434e+01,
      2.616521739130434e+01,
      -5.834782608695652e+00,
      -5.834782608695649e+00,
      1.016521739130435e+01,
      -5.834782608695647e+00,
      -6.582608695652179e+00,
      9.417391304347817e+00,
      2.541739130434782e+01,
      -6.582608695652176e+00,
      9.417391304347824e+00,
      -6.582608695652170e+00,
      -6.582608695652173e+00,
      9.417391304347824e+00,
      -6.582608695652169e+00,
      -6.582608695652167e+00,
      1.600000000000001e+01,
      2.808512866406673e-15,
      -1.600000000000000e+01,
      8.000000000000004e+00,
      -8.000000000000000e+00,
      -1.403377968465904e-15,
      8.000000000000007e+00,
      -7.999999999999996e+00,
      4.440892098500626e-15,
      8.881784197001252e-15,
      1.562608695652174e+01,
      7.626086956521737e+00,
      -3.739130434782654e-01,
      -3.739130434782613e-01,
      -8.373913043478264e+00,
      -1.637391304347827e+01,
      7.626086956521745e+00,
      -3.739130434782596e-01,
      -8.373913043478261e+00,
      -3.739130434782529e-01,
      1.520869565217392e+01,
      7.208695652173915e+00,
      -7.913043478260855e-01,
      7.208695652173916e+00,
      -7.913043478260851e-01,
      -7.913043478260837e-01,
      -7.913043478260855e-01,
      -8.791304347826086e+00,
      -8.791304347826085e+00,
      -1.679130434782609e+01
    };

    int cur=0;
    for (int i=0;i<myBasisDivs.dimension(0);i++) {
      for (int j=0;j<myBasisDivs.dimension(1);j++) {
	if (std::abs( myBasisDivs(i,j) - fiat_divs[cur] ) > 10.0 * INTREPID_TOL ) {
	  errorFlag++;
	  *outStream << std::setw(70) << "^^^^----FAILURE!" << "\n";
	  
	  // Output the multi-index of the value where the error is:
	  *outStream << " At multi-index { ";
	  *outStream << i << " " << j;
	  *outStream << "}  computed value: " << myBasisDivs(i,j)
		     << " but correct value: " << fiat_divs[cur] << "\n";
          *outStream << "Difference: " << std::abs( myBasisDivs(i,j) - fiat_divs[cur] ) << "\n";
	}
	cur++;
      }
    }
  }
  catch (std::exception err) {
    *outStream << err.what() << "\n\n";
    errorFlag = -1000;
  }


  if (errorFlag != 0)
    std::cout << "End Result: TEST FAILED\n";
  else
    std::cout << "End Result: TEST PASSED\n";
  
  // reset format state of std::cout
  std::cout.copyfmt(oldFormatState);
  
  return errorFlag;
}
