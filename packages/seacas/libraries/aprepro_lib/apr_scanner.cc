#line 2 "apr_scanner.cc"

#line 4 "apr_scanner.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer SEAMSFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *SEAMSalloc (yy_size_t  );
void *SEAMSrealloc (void *,yy_size_t  );
void SEAMSfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 90
#define YY_END_OF_BUFFER 91
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[636] =
    {   0,
        0,    0,   40,   40,    0,    0,   30,   30,    0,    0,
        3,    3,    0,    0,    0,    0,    0,    0,    0,    0,
       91,   88,   88,   89,   86,   87,   87,   87,   88,   83,
       40,   60,   75,   88,   57,   88,   88,   61,   62,   53,
       51,   63,   52,   39,   56,   38,   65,   64,   67,   42,
       68,   66,   41,   41,   41,   76,   77,   58,   83,   88,
       80,   54,   88,   88,   86,   87,   87,   87,   88,   83,
       33,   33,   34,   30,   33,   30,   30,   30,   30,   33,
       33,   88,   88,   86,   87,   87,   87,   88,   83,    4,
        4,    5,    3,    4,    3,    3,    3,    3,    4,    4,

       88,   88,   88,   86,   88,   88,   87,   87,   87,   88,
       83,   88,   88,   18,   86,   87,   87,   87,   88,   83,
       88,   88,   21,   86,   87,   87,   87,   88,   83,    0,
        0,   87,   87,   87,   81,   82,    0,    0,    0,    0,
        0,    0,    0,    0,   40,    0,   72,    0,   78,   73,
        0,   79,   59,   45,   49,   43,   50,   44,   39,    0,
       55,   46,   39,   38,    0,   69,   71,   70,   41,   41,
       41,   47,    0,   74,    0,    0,    0,    0,   87,   87,
       87,   81,   82,    0,    0,    0,    0,   30,   30,   30,
       30,   30,   31,   32,    0,    0,    0,    0,    0,    0,

       87,   87,   87,   81,   82,    0,    0,    0,    3,    3,
        3,    3,    3,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   87,   87,   87,   81,   82,
        0,    0,    0,   18,    0,    0,   87,   87,   87,   81,
       82,    0,    0,    0,    0,   21,    0,    0,   87,   87,
       87,   81,   82,    0,    0,    0,    0,   87,   87,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       48,    0,   39,    0,   38,   41,   41,    0,    0,   37,
        0,   87,   87,    0,    0,    0,   30,   30,    0,    0,
        0,    0,   87,   87,    0,    0,    0,    3,    3,    0,

        0,    0,    0,   13,    0,    0,    0,    0,    0,    0,
        0,   87,   87,    0,    0,    0,    0,    0,   87,   87,
        0,    0,    0,    0,    0,    0,   87,   87,    0,    0,
        0,    0,   84,   85,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   41,   41,    0,   37,   84,
       85,    0,    0,    0,   30,   30,    0,    0,    0,   23,
        0,   27,    0,   84,   85,    0,    0,    0,    3,    3,
        0,    0,   15,    0,    0,   13,    0,    0,   14,    0,
       84,   85,    0,    0,    0,    0,   84,   85,    0,    0,
        0,    0,    0,   84,   85,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    6,    0,    0,    0,    0,    0,    0,   12,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   28,    0,    0,   25,
        0,    0,    0,    0,    0,    0,    0,    0,   22,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,   18,    0,    0,    0,   17,    0,    0,   21,    0,
        0,    0,   20,    0,    0,    0,    0,   29,    0,   26,
        0,    8,    0,    0,    0,    0,   37,    0,    0,   24,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   18,    0,    0,    0,    0,
       21,    0,    0,    0,    0,   35,    0,    0,    0,   28,
        0,   37,    0,    0,    0,   27,    0,    0,    0,    0,
        0,    0,   15,    0,    0,    0,    0,    0,   16,    0,
        0,    0,   19,   36,    0,    7,    0,    0,    0,    7,
       29,    0,    7,    0,    0,   27,    0,    0,    0,    7,

        0,    0,   15,    0,    0,    7,    0,    7,    9,    0,
        0,    9,    9,    0,    0,    9,    0,    9,    9,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    1,    0,
        0,   10,    2,   11,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    1,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
       23,   24,   25,    1,   26,   27,   28,   29,   30,   31,
       29,   32,   33,   29,   29,   34,   35,   36,   37,   29,
       38,   39,   29,   40,   41,   42,   29,   43,   29,   29,
       44,   45,   46,   47,   29,    1,   29,   29,   48,   49,

       50,   51,   29,   29,   52,   29,   29,   53,   29,   54,
       55,   56,   38,   29,   57,   58,   59,   29,   29,   43,
       29,   29,   60,   61,   62,   63,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[64] =
    {   0,
        1,    2,    3,    4,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    5,    6,
        1,    1,    1,    1,    1,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    1,    1,    1,    1,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    2,
        1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[674] =
    {   0,
        0,    0,   63,    0,  126,    0,  189,    0,  252,    0,
      315,    0,  377,  378,  438,    0,  501,    0,  564,    0,
     2107, 2108,  626, 2108, 2108,    0, 2063,  342,  324,  659,
      630, 2108, 2082,  382, 2108, 2095, 2093, 2108, 2108,  374,
      375, 2108,  376,  372,  372,  377, 2108, 2108, 2079, 2078,
     2077, 2108,    0, 2056,  352, 2108, 2108, 2075,  370, 2036,
     2108, 2108, 2084,  631, 2083,  712, 2051,  362,  617,  619,
     2108,  634, 2108,  637, 2108,  638,  404,  633,  640,  344,
      379, 2081,  643, 2080,  775, 2048,  364,  640,  634, 2108,
      646, 2108,  655, 2108,  837,  406,  662,  836,  353,  386,

      839, 2078,  840, 2077,  834,  838,  900, 2045,  373,  836,
      658, 2084,  962, 2108, 2083, 1022, 2042,  376, 1083,  964,
     2081, 1086, 2108, 2080, 1146, 2039,  613, 1207,  965,  843,
      833,    0,  609,  623, 2108, 2108, 2029,  821,  819, 2025,
     2042, 2048,  365,  379, 1210, 2047, 2108,  659, 2108, 2108,
     2066, 2108, 2052, 2108, 2108, 2108, 2108, 2108,  832,  664,
     2108, 2108,  841,  952,  864, 2108, 2108, 2108,    0,  652,
      937, 2108,  947, 2108, 2062, 1209, 1213,  846,    0,  939,
      940, 2061, 2060, 1075,  966, 1214,  944, 1218, 1217,  647,
     1087, 1088, 2108, 2108, 2020, 2019, 2057, 1082, 1222,  860,

        0,  951,  952, 2056, 2055, 1081, 1083, 1225, 1226, 1221,
      654, 1227, 1228, 2036, 2053, 1221, 1233,  967, 1237, 1092,
      974, 1226, 1234, 1246,  993,    0,  954, 1063, 2052, 2051,
     1238, 1244, 2059, 2108, 1240, 1272,    0, 1064, 1065, 2058,
     2057, 1259, 1248, 1236, 2056, 2108, 1305, 1298,    0, 1066,
     1067, 2055, 2054, 1291, 1249, 1302, 2028, 1065, 1066, 2001,
     2022, 1996, 2003, 2016,  614, 2002, 1994, 2018, 2008, 2018,
     2108, 2026, 2025, 2024, 2023, 1072, 1073, 2009, 1312,  422,
     1098, 1074, 1196,  847,  964,  661, 1291, 1306,  838, 1319,
     1256, 1113, 1275, 1277, 1306, 1315, 1089, 1330, 1337, 2001,

     1317, 1229, 1340, 2108, 1350, 1351, 1328, 1347, 1355, 1357,
     1359, 1302, 1321, 1368, 1324, 1370, 1380, 1336, 1335, 1344,
      862, 1334, 1382, 1383, 1386, 1389, 1347, 1357,  978, 1391,
     1393, 1395,    0,    0, 1991, 2001, 1987, 1984, 1994, 1984,
     1984, 1979, 1975, 2002, 2002,    0,    0, 1991, 2024,    0,
        0,  659, 1387, 1389, 1400, 1402, 1976, 1976, 1405, 2108,
     1414, 2108, 1415,    0,    0,  971, 1399, 1401, 1419, 1424,
     1997, 1418, 2108, 1421, 1433, 2108, 1443, 1444, 2108, 1448,
        0,    0, 1090, 1413, 1417, 1429,    0,    0, 1449, 1407,
     1432, 1451, 1455,    0,    0, 1456, 1458, 1461, 1459, 1970,

     1454, 1960, 1970, 1980, 1968, 1968, 1958, 2005, 1983, 1988,
     2002, 1456, 1458, 1460, 1961, 1961, 1468, 1462, 1463, 1467,
     1984, 1478, 1479, 1484, 1477, 1464, 1480, 1494, 1491, 1495,
     1496, 1497, 1498, 1500, 1516, 1503, 1509, 1518, 1519, 1950,
     1971, 2108, 2004, 1944, 1979, 1993, 1952, 1953, 2108, 1964,
     1960, 1505, 1520, 1512, 1988, 1947, 1517, 1532, 1521, 1957,
     1524, 1534, 1526, 1536, 1993, 1537, 1538, 1992, 1540, 1991,
     1542, 1546, 1990, 1943,  980, 1988, 2108, 1987, 1962, 2108,
     1977, 1937, 1924, 1952, 1540, 1547, 1577, 1555, 2108, 1973,
     1551, 1563, 1581, 1582, 1950, 1560, 1583, 1587, 1595, 1575,

     1814, 2108, 1553, 1806, 1801, 2108, 1598, 1793, 2108, 1557,
     1788, 1768, 2108, 1720, 1738, 1756, 1764, 2108, 1732, 2108,
     1754, 2108, 1729, 1590, 1751, 1612, 1600, 1607, 1623, 2108,
     1592, 1750, 1619, 1625, 1629, 1726, 1605, 1748, 1630, 1635,
     1641, 1615, 1642, 1755, 1754, 2108, 1617, 1647, 1753, 1752,
     2108, 1743, 1741, 1690, 1721, 2108, 1739, 1737, 1653, 1745,
     1658, 1655, 1735, 1543, 1660, 2108, 1661, 1663, 1735, 1733,
     1618, 1665, 2108, 1666, 1676, 1678, 1637, 1740, 2108, 1680,
     1648, 1739, 2108, 2108, 1678, 2108, 1726, 1699, 1682, 1684,
     1729, 1640, 1686, 1692, 1694, 2108, 1697, 1682, 1659, 1702,

     1704, 1705, 2108, 1710, 1673, 1709, 1679, 1708, 2108, 1664,
     1657, 1715, 1721, 1722, 1625, 1726, 1727, 1567, 1565, 1695,
     1550, 1372, 1241, 1243, 1071, 1001,  968,  831, 2108,  827,
      716, 2108, 2108, 2108, 2108, 1768, 1774, 1780, 1782, 1788,
     1793, 1795, 1801, 1806, 1808, 1814, 1820, 1826, 1832, 1838,
     1844, 1850, 1856, 1862, 1868, 1874, 1880, 1886, 1892, 1898,
     1904, 1910, 1916, 1922, 1928, 1934, 1940, 1946, 1952, 1958,
     1964, 1970, 1976
    } ;

static yyconst flex_int16_t yy_def[674] =
    {   0,
      635,    1,  635,    3,  635,    5,  635,    7,  635,    9,
      635,   11,    1,    1,  635,   15,  635,   17,  635,   19,
      635,  635,  635,  635,  635,  636,  636,  636,  635,  635,
      635,  635,  635,  637,  635,  635,  638,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  639,  639,  639,  635,  635,  635,  635,  635,
      635,  635,  640,  640,  640,  635,   66,   66,  640,  640,
      635,  635,  635,  641,  635,  641,  642,  642,  642,  635,
      635,  643,  643,  643,  635,   85,   85,  643,  643,  635,
      635,  635,  644,  635,  644,  645,  645,  645,  635,  635,

      635,  646,  646,  646,  646,  646,  635,  107,  107,  646,
      646,  647,  647,  635,  647,  635,  116,  116,  647,  647,
      648,  648,  635,  648,  635,  125,  125,  648,  648,  635,
      635,  636,  636,  636,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  637,  635,  635,
      638,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  639,  639,
      639,  635,  635,  635,  640,  640,  640,  640,   66,   66,
       66,  640,  640,  640,  640,  635,  635,  641,  641,  642,
      642,  642,  635,  635,  635,  635,  643,  643,  643,  643,

       85,   85,   85,  643,  643,  643,  643,  635,  644,  644,
      645,  645,  645,  635,  646,  646,  646,  646,  649,  646,
      646,  646,  646,  646,  646,  107,  107,  107,  646,  646,
      646,  646,  647,  635,  647,  647,  116,  116,  116,  647,
      647,  647,  647,  647,  648,  635,  648,  648,  125,  125,
      125,  648,  648,  648,  648,  648,  635,  636,  636,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  639,  639,  635,  640,  640,
      640,   66,   66,  640,  640,  640,  642,  642,  635,  635,
      650,  643,   85,   85,  643,  643,  643,  645,  645,  635,

      651,  646,  649,  635,  649,  652,  646,  646,  653,  646,
      646,  107,  107,  646,  646,  646,  647,  647,  116,  116,
      647,  647,  647,  647,  648,  648,  125,  125,  648,  648,
      648,  648,  636,  636,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  639,  639,  635,  635,   66,
       66,  640,  640,  640,  642,  642,  635,  635,  635,  635,
      650,  635,  650,   85,   85,  643,  643,  643,  645,  645,
      635,  651,  635,  651,  652,  635,  652,  653,  635,  653,
      107,  107,  646,  646,  646,  647,  116,  116,  647,  647,
      647,  647,  648,  125,  125,  648,  648,  648,  648,  635,

      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  640,  640,  640,  635,  635,  650,  643,  643,  643,
      635,  651,  652,  653,  646,  646,  646,  647,  647,  647,
      647,  647,  647,  648,  648,  648,  648,  648,  648,  635,
      635,  635,  654,  635,  635,  635,  635,  635,  635,  635,
      635,  640,  655,  640,  635,  635,  643,  656,  643,  635,
      646,  657,  646,  647,  658,  647,  647,  659,  648,  660,
      648,  648,  661,  635,  635,  654,  635,  662,  635,  635,
      635,  635,  635,  635,  640,  655,  655,  663,  635,  635,
      643,  656,  656,  664,  635,  646,  657,  657,  665,  647,

      658,  635,  647,  666,  659,  635,  648,  660,  635,  648,
      667,  661,  635,  635,  635,  635,  662,  635,  635,  635,
      635,  635,  635,  640,  640,  655,  655,  663,  663,  635,
      643,  643,  668,  664,  664,  635,  646,  646,  669,  665,
      665,  647,  647,  670,  666,  635,  648,  648,  671,  667,
      635,  635,  635,  635,  635,  635,  635,  640,  640,  635,
      663,  663,  643,  643,  668,  635,  668,  672,  635,  646,
      646,  669,  635,  669,  673,  647,  647,  670,  635,  648,
      648,  671,  635,  635,  635,  635,  635,  635,  640,  640,
      635,  643,  650,  668,  672,  635,  672,  635,  646,  651,

      669,  673,  635,  673,  647,  647,  648,  648,  635,  635,
      635,  640,  650,  672,  635,  651,  673,  647,  648,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,    0,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635
    } ;

static yyconst flex_int16_t yy_nxt[2172] =
    {   0,
       22,   23,   24,   23,   22,   22,   25,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   26,   26,   26,   26,   27,
       26,   26,   26,   26,   26,   26,   26,   28,   26,   26,
       26,   26,   26,   22,   29,   22,   22,   26,   26,   27,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   30,
       22,   22,   22,   22,   31,   32,   31,   33,   34,   25,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       45,   46,   47,   48,   49,   50,   51,   52,   53,   53,
       53,   53,   54,   53,   53,   53,   53,   53,   53,   53,

       55,   53,   53,   53,   53,   53,   56,   29,   57,   58,
       53,   53,   54,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   59,   60,   61,   62,   63,   64,   24,   64,
       63,   63,   65,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   66,   66,   66,   66,   67,   66,   66,   66,   66,
       66,   66,   66,   68,   66,   66,   66,   66,   66,   63,
       69,   63,   63,   66,   66,   67,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   70,   63,   63,   63,   71,
       72,   73,   74,   71,   71,   75,   71,   71,   71,   71,

       71,   71,   71,   71,   71,   71,   71,   76,   71,   71,
       71,   71,   71,   71,   77,   77,   77,   77,   78,   77,
       77,   77,   77,   77,   77,   77,   79,   77,   77,   77,
       77,   77,   71,   80,   71,   71,   77,   77,   78,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   81,   71,
       71,   71,   82,   83,   24,   83,   82,   82,   84,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   85,   85,   85,
       85,   86,   85,   85,   85,   85,   85,   85,   85,   87,
       85,   85,   85,   85,   85,   82,   88,   82,   82,   85,

       85,   86,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   89,   82,   82,   82,   90,   91,   92,   93,   90,
       90,   94,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   95,   90,   90,   90,   90,   90,   90,
       96,   96,   96,   96,   97,   96,   96,   96,   96,   96,
       96,   96,   98,   96,   96,   96,   96,   96,   90,   99,
       90,   90,   96,   96,   97,   96,   96,   96,   96,   96,
       96,   96,   96,   96,  100,   90,   90,   90,  101,  101,
      101,  101,  134,  135,  149,  136,  153,  149,  155,  161,
      159,  157,  171,  163,  162,  164,  154,  156,  158,  173,

      134,  160,  181,  193,  203,  194,  165,  189,  173,  210,
      171,  195,  135,  228,  136,  173,  239,  262,  263,  143,
      181,  160,  203,  132,  349,  132,  165,  214,  143,  265,
      196,  228,  266,  176,  239,  143,   59,   59,  102,  103,
       24,  103,  102,  102,  104,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  105,  102,  106,  102,  102,  102,
      102,  102,  102,  107,  107,  107,  107,  108,  107,  107,
      107,  107,  107,  107,  107,  109,  107,  107,  107,  107,
      107,  102,  110,  102,  102,  107,  107,  108,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  111,  102,  102,

      102,  112,  113,  114,  113,  112,  112,  115,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  116,  116,  116,  116,
      117,  116,  116,  116,  116,  116,  116,  116,  118,  116,
      116,  116,  116,  116,  112,  119,  112,  112,  116,  116,
      117,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      120,  112,  112,  112,  121,  122,  123,  122,  121,  121,
      124,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  125,
      125,  125,  125,  126,  125,  125,  125,  125,  125,  125,

      125,  127,  125,  125,  125,  125,  125,  121,  128,  121,
      121,  125,  125,  126,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  129,  121,  121,  121,  130,  176,  130,
      176,  145,  177,  145,  177,  186,  189,  186,  186,  635,
      188,  258,  176,  189,  199,  198,  199,  208,  184,  208,
      189,  198,  132,  251,  198,  259,  208,  210,  209,  132,
      258,  149,  340,  206,  149,  210,  132,  341,  185,  216,
      176,  251,  176,  132,  259,  191,  182,  272,  183,  272,
      192,  132,  273,  207,  276,  131,  137,  231,  138,  146,
      178,  139,  140,  187,  141,  412,  187,  635,  192,  204,

      142,  205,  200,  276,  212,  146,  137,  232,  143,  354,
      144,  140,  175,  175,  146,  175,  175,  175,  175,  175,
      175,  175,  175,  176,  175,  175,  175,  175,  175,  175,
      179,  179,  175,  175,  175,  175,  175,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  175,  175,  175,  175,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  175,  175,  175,  175,  197,  197,  634,  197,  197,
      197,  197,  197,  197,  197,  197,  198,  197,  197,  197,
      197,  197,  197,  201,  201,  197,  197,  197,  197,  197,

      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  197,  197,
      197,  197,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  197,  197,  197,  197,  635,  210,
      208,  217,  208,  217,  130,  219,  130,  216,  261,  222,
      159,  216,  220,  264,  223,  132,  224,  176,  176,  159,
      137,  160,  257,  221,  234,  139,  140,  225,  141,  265,
      160,  198,  266,  262,  263,  281,  213,  274,  352,  274,
      137,  160,  275,  221,  144,  140,  357,  225,  633,  292,
      160,  358,  632,  389,  213,  229,  635,  230,  146,  218,

      215,  215,  131,  215,  215,  215,  215,  215,  215,  215,
      215,  216,  215,  215,  215,  215,  215,  215,  226,  226,
      215,  215,  215,  215,  215,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  215,  215,  215,  215,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  215,
      215,  215,  215,  235,  234,  235,  234,  246,  163,  277,
      164,  282,  283,  270,  278,  176,  195,  176,  216,  631,
      246,  165,  198,  293,  294,  216,  312,  307,  277,  307,
      282,  283,  308,  242,  254,  196,  302,  243,  255,  262,

      263,  165,  293,  294,  216,  312,  310,  418,  310,  396,
      515,  311,  630,  244,  256,  516,  243,  255,  285,  286,
      353,  236,  233,  233,  234,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      237,  237,  233,  233,  233,  233,  233,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  233,  233,  233,  233,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  233,  233,  233,  233,  234,  176,  247,  246,  247,
      189,  189,  198,  198,  198,  313,  319,  320,  327,  328,

      198,  216,  284,  219,  333,  334,  132,  132,  295,  176,
      220,  346,  347,  350,  313,  319,  320,  327,  328,  287,
      288,  221,  333,  334,  198,  284,  425,  285,  286,  346,
      347,  350,  629,  296,  297,  296,  297,  368,  287,  288,
      295,  221,  240,  291,  241,  248,  245,  245,  246,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  249,  249,  245,  245,  245,  245,
      245,  249,  249,  249,  249,  249,  249,  249,  249,  249,
      249,  249,  249,  249,  249,  249,  249,  249,  249,  245,
      245,  245,  245,  249,  249,  249,  249,  249,  249,  249,

      249,  249,  249,  249,  249,  245,  245,  245,  245,  246,
      279,  145,  279,  145,  177,  186,  177,  186,  635,  186,
      176,  188,  635,  199,  176,  199,  208,  208,  208,  209,
      210,  210,  216,  198,  217,  351,  217,  216,  234,  304,
      216,  235,  234,  235,  216,  219,  132,  132,  305,  216,
      234,  246,  220,  351,  628,  216,  314,  222,  362,  298,
      299,  234,  223,  221,  224,  314,  252,  363,  253,  146,
      280,  627,  178,  187,  234,  225,  635,  187,  298,  299,
      635,  200,  301,  221,  146,  146,  321,  309,  322,  323,
      315,  316,  218,  246,  189,  225,  315,  316,  306,  236,

      246,  317,  324,  332,  246,  243,  247,  246,  247,  189,
      132,  322,  323,  279,  364,  279,  365,  198,  329,  373,
      359,  318,  359,  176,  243,  132,  198,  325,  374,  360,
      355,  255,  364,  210,  365,  216,  234,  366,  234,  216,
      210,  381,  304,  330,  331,  356,  308,  326,  355,  132,
      255,  305,  304,  376,  330,  331,  132,  379,  219,  381,
      382,  305,  377,  356,  248,  308,  380,  357,  216,  369,
      222,  367,  358,  280,  387,  311,  370,  311,  382,  216,
      384,  216,  234,  388,  234,  234,  394,  369,  246,  386,
      390,  246,  387,  246,  370,  246,  395,  246,  176,  383,

      176,  388,  626,  189,  394,  189,  359,  321,  359,  234,
      198,  306,  198,  329,  395,  360,  362,  362,  385,  132,
      373,  132,  210,  373,  216,  363,  363,  210,  216,  374,
      391,  234,  374,  386,  234,  376,  413,  392,  132,  393,
      414,  398,  393,  132,  377,  376,  379,  397,  419,  399,
      379,  234,  420,  234,  377,  380,  430,  246,  246,  380,
      246,  246,  426,  246,  441,  431,  452,  176,  427,  176,
      362,  176,  457,  198,  198,  216,  417,  428,  198,  363,
      373,  376,  422,  432,  431,  429,  379,  461,  216,  374,
      377,  216,  435,  234,  437,  380,  234,  234,  234,  234,

      234,  464,  246,  434,  423,  246,  433,  436,  468,  424,
      454,  246,  438,  437,  439,  442,  176,  459,  246,  453,
      246,  246,  477,  176,  458,  462,  469,  431,  198,  473,
      463,  487,  198,  437,  477,  216,  477,  216,  234,  234,
      234,  485,  246,  493,  246,  498,  431,  467,  246,  477,
      466,  176,  437,  491,  198,  234,  465,  518,  487,  246,
      496,  625,  198,  471,  470,  477,  529,  246,  472,  234,
      524,  216,  500,  488,  493,  525,  507,  234,  526,  477,
      526,  531,  494,  477,  518,  477,  532,  499,  487,  477,
      537,  503,  493,  535,  498,  538,  510,  518,  498,  504,

      246,  176,  560,  198,  593,  542,  541,  511,  544,  518,
      543,  487,  549,  526,  477,  526,  216,  234,  529,  246,
      558,  566,  563,  487,  561,  518,  561,  518,  547,  216,
      567,  518,  573,  548,  529,  570,  535,  518,  527,  234,
      535,  574,  533,  518,  234,  576,  541,  580,  539,  246,
      246,  198,  541,  577,  279,  622,  279,  591,  581,  561,
      518,  561,  566,  566,  176,  596,  529,  573,  573,  529,
      216,  567,  567,  527,  597,  234,  574,  574,  603,  600,
      234,  246,  246,  279,  562,  279,  349,  604,  362,  605,
      568,  607,  621,  176,  566,  176,  596,  363,  606,  596,

      620,  613,  575,  567,  373,  597,  573,  603,  597,  608,
      246,  234,  603,  374,  590,  574,  604,  349,  615,  562,
      616,  604,  594,  362,  596,  623,  176,  601,  373,  603,
      624,  349,  363,  597,  618,  611,  610,  374,  604,  609,
      619,  583,  579,  612,  599,  598,  592,  349,  589,  588,
      587,  586,  585,  584,  551,  583,  546,  579,  614,  571,
      569,  564,  559,  557,  556,  555,  518,  554,  553,  552,
      513,  617,  132,  132,  148,  148,  148,  148,  148,  148,
      151,  151,  151,  151,  151,  151,  169,  169,  175,  175,
      551,  175,  175,  175,  189,  509,  189,  189,  190,  190,

      190,  197,  197,  506,  197,  197,  197,  210,  546,  210,
      210,  211,  211,  211,  215,  215,  502,  215,  215,  215,
      233,  233,  233,  233,  233,  233,  245,  245,  245,  245,
      245,  245,  303,  303,  303,  303,  303,  303,  361,  361,
      361,  361,  361,  361,  372,  372,  372,  372,  372,  372,
      375,  375,  375,  375,  375,  375,  378,  378,  378,  378,
      378,  378,  476,  476,  476,  476,  476,  476,  486,  486,
      486,  486,  486,  486,  492,  492,  492,  492,  492,  492,
      497,  497,  497,  497,  497,  497,  501,  501,  501,  501,
      501,  501,  505,  505,  505,  505,  505,  505,  508,  508,

      508,  508,  508,  508,  512,  512,  512,  512,  512,  512,
      517,  517,  517,  517,  517,  517,  528,  528,  528,  528,
      528,  528,  534,  534,  534,  534,  534,  534,  540,  540,
      540,  540,  540,  540,  545,  545,  545,  545,  545,  545,
      550,  550,  550,  550,  550,  550,  565,  565,  565,  565,
      565,  565,  572,  572,  572,  572,  572,  572,  578,  578,
      578,  578,  578,  578,  582,  582,  582,  582,  582,  582,
      595,  595,  595,  595,  595,  595,  602,  602,  602,  602,
      602,  602,  536,  530,  523,  522,  521,  520,  519,  518,
      477,  514,  513,  509,  506,  502,  495,  490,  489,  484,

      483,  482,  481,  480,  479,  478,  477,  475,  474,  460,
      456,  455,  441,  451,  450,  449,  448,  447,  446,  445,
      444,  443,  440,  421,  416,  415,  349,  411,  410,  409,
      408,  407,  406,  405,  404,  403,  402,  401,  400,  371,
      348,  275,  275,  273,  273,  278,  345,  344,  343,  342,
      339,  338,  337,  336,  335,  261,  246,  246,  246,  234,
      234,  234,  216,  216,  216,  300,  198,  198,  198,  290,
      289,  176,  176,  176,  271,  152,  270,  269,  268,  267,
      260,  250,  246,  246,  238,  234,  234,  227,  216,  216,
      202,  198,  198,  180,  176,  176,  174,  172,  170,  168,

      167,  166,  152,  150,  147,  133,  635,   21,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635
    } ;

static yyconst flex_int16_t yy_chk[2172] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   13,   14,
       13,   14,   28,   29,   34,   29,   40,   34,   41,   45,
       44,   43,   55,   46,   45,   46,   40,   41,   43,   59,

       28,   44,   68,   80,   87,   80,   46,   77,   81,   96,
       55,   81,   99,  109,   99,  100,  118,  143,  143,   59,
       68,   44,   87,   77,  280,   96,   46,  100,   81,  144,
       81,  109,  144,  280,  118,  100,   13,   14,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

       15,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   23,   69,   23,
       70,   31,   64,   31,   64,   72,   78,   72,   74,   76,
       74,  133,   64,   79,   83,   89,   83,   91,   70,   91,
      190,   88,   78,  127,   83,  134,   93,  211,   93,   79,
      133,  148,  265,   89,  148,   97,  190,  265,   70,  111,
      352,  127,  286,  211,  134,   78,   69,  160,   69,  160,
       79,   97,  160,   89,  170,   23,   30,  111,   30,   31,
       64,   30,   30,   72,   30,  352,   74,   76,   79,   88,

       30,   88,   83,  170,   97,   91,   30,  111,   30,  286,
       30,   30,   66,   66,   93,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   85,   85,  631,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,

       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   95,   98,
      101,  103,  101,  103,  130,  105,  130,  110,  138,  106,
      159,  103,  105,  139,  106,   98,  106,  178,  284,  163,
      131,  159,  131,  105,  321,  131,  131,  106,  131,  139,
      163,  200,  139,  138,  138,  178,   98,  165,  284,  165,
      131,  159,  165,  105,  131,  131,  289,  106,  630,  200,
      163,  289,  628,  321,   98,  110,   95,  110,  101,  103,

      107,  107,  130,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  113,  113,  113,  120,  129,  164,  171,
      164,  180,  181,  187,  173,  285,  187,  185,  218,  627,
      329,  164,  366,  202,  203,  221,  227,  221,  171,  221,
      180,  181,  221,  120,  129,  187,  218,  120,  129,  173,

      173,  164,  202,  203,  225,  227,  225,  366,  225,  329,
      475,  225,  626,  120,  129,  475,  120,  129,  185,  185,
      285,  113,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  119,  184,  122,  122,  122,
      191,  192,  206,  198,  207,  228,  238,  239,  250,  251,

      297,  383,  184,  220,  258,  259,  191,  192,  206,  281,
      220,  276,  277,  282,  228,  238,  239,  250,  251,  191,
      192,  220,  258,  259,  292,  281,  383,  184,  184,  276,
      277,  282,  625,  206,  206,  207,  207,  297,  191,  192,
      292,  220,  119,  198,  119,  122,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,

      125,  125,  125,  125,  125,  125,  125,  125,  125,  128,
      176,  145,  176,  145,  177,  186,  177,  186,  189,  188,
      176,  188,  210,  199,  177,  199,  208,  209,  208,  209,
      212,  213,  216,  199,  217,  283,  217,  222,  244,  219,
      302,  235,  235,  235,  217,  223,  212,  213,  219,  231,
      243,  255,  223,  283,  624,  232,  302,  224,  291,  212,
      213,  242,  224,  223,  224,  231,  128,  291,  128,  145,
      176,  623,  177,  186,  236,  224,  189,  188,  212,  213,
      210,  199,  216,  223,  208,  209,  242,  222,  244,  244,
      231,  231,  217,  254,  287,  224,  232,  232,  219,  235,

      248,  236,  243,  255,  256,  236,  247,  247,  247,  288,
      287,  242,  242,  279,  293,  279,  294,  295,  254,  301,
      290,  236,  290,  279,  236,  288,  296,  248,  301,  290,
      287,  248,  293,  298,  294,  315,  322,  295,  318,  307,
      299,  312,  303,  254,  254,  288,  307,  248,  287,  298,
      248,  303,  305,  306,  256,  256,  299,  309,  308,  312,
      313,  305,  306,  288,  247,  308,  309,  290,  310,  298,
      311,  296,  290,  279,  319,  310,  299,  311,  313,  314,
      315,  316,  317,  320,  323,  324,  327,  298,  325,  318,
      322,  326,  319,  330,  299,  331,  328,  332,  353,  314,

      354,  320,  622,  355,  327,  356,  359,  317,  359,  390,
      367,  305,  368,  325,  328,  359,  361,  363,  316,  355,
      372,  356,  369,  374,  384,  361,  363,  370,  385,  372,
      323,  386,  374,  317,  391,  375,  353,  324,  369,  325,
      354,  331,  326,  370,  375,  377,  378,  330,  367,  332,
      380,  389,  368,  392,  377,  378,  390,  393,  396,  380,
      397,  399,  384,  398,  401,  391,  412,  412,  385,  413,
      417,  414,  418,  418,  419,  426,  363,  386,  420,  417,
      422,  423,  374,  391,  391,  389,  424,  425,  425,  422,
      423,  427,  396,  429,  398,  424,  428,  430,  431,  432,

      433,  429,  434,  393,  377,  436,  392,  397,  433,  380,
      414,  437,  398,  398,  399,  401,  452,  420,  435,  413,
      438,  439,  453,  454,  419,  426,  435,  428,  457,  439,
      427,  453,  459,  434,  458,  461,  462,  463,  464,  466,
      467,  452,  469,  458,  471,  462,  428,  432,  472,  486,
      431,  485,  434,  457,  564,  503,  430,  488,  486,  510,
      461,  621,  491,  437,  436,  492,  488,  619,  438,  618,
      485,  496,  464,  454,  492,  485,  469,  500,  487,  487,
      487,  491,  459,  493,  494,  497,  491,  463,  487,  498,
      496,  466,  493,  494,  497,  496,  471,  499,  498,  467,

      507,  524,  527,  531,  564,  500,  499,  472,  503,  528,
      500,  527,  510,  526,  526,  526,  537,  542,  528,  547,
      524,  533,  531,  526,  529,  529,  529,  534,  507,  571,
      533,  535,  539,  507,  529,  537,  534,  540,  487,  577,
      535,  539,  493,  541,  543,  542,  540,  547,  498,  548,
      581,  592,  541,  543,  559,  615,  559,  562,  548,  561,
      561,  561,  565,  567,  559,  568,  562,  572,  574,  561,
      599,  565,  567,  526,  568,  605,  572,  574,  575,  571,
      576,  607,  580,  589,  529,  589,  590,  575,  593,  576,
      535,  580,  611,  589,  594,  590,  595,  593,  577,  597,

      610,  592,  541,  594,  600,  595,  601,  602,  597,  581,
      608,  606,  604,  600,  559,  601,  602,  612,  598,  561,
      599,  604,  567,  613,  614,  620,  612,  574,  616,  617,
      620,  591,  613,  614,  605,  588,  587,  616,  617,  585,
      607,  582,  578,  589,  570,  569,  563,  560,  558,  557,
      555,  554,  553,  552,  550,  549,  545,  544,  597,  538,
      536,  532,  525,  523,  521,  519,  517,  516,  515,  514,
      512,  604,  636,  636,  637,  637,  637,  637,  637,  637,
      638,  638,  638,  638,  638,  638,  639,  639,  640,  640,
      511,  640,  640,  640,  641,  508,  641,  641,  642,  642,

      642,  643,  643,  505,  643,  643,  643,  644,  504,  644,
      644,  645,  645,  645,  646,  646,  501,  646,  646,  646,
      647,  647,  647,  647,  647,  647,  648,  648,  648,  648,
      648,  648,  649,  649,  649,  649,  649,  649,  650,  650,
      650,  650,  650,  650,  651,  651,  651,  651,  651,  651,
      652,  652,  652,  652,  652,  652,  653,  653,  653,  653,
      653,  653,  654,  654,  654,  654,  654,  654,  655,  655,
      655,  655,  655,  655,  656,  656,  656,  656,  656,  656,
      657,  657,  657,  657,  657,  657,  658,  658,  658,  658,
      658,  658,  659,  659,  659,  659,  659,  659,  660,  660,

      660,  660,  660,  660,  661,  661,  661,  661,  661,  661,
      662,  662,  662,  662,  662,  662,  663,  663,  663,  663,
      663,  663,  664,  664,  664,  664,  664,  664,  665,  665,
      665,  665,  665,  665,  666,  666,  666,  666,  666,  666,
      667,  667,  667,  667,  667,  667,  668,  668,  668,  668,
      668,  668,  669,  669,  669,  669,  669,  669,  670,  670,
      670,  670,  670,  670,  671,  671,  671,  671,  671,  671,
      672,  672,  672,  672,  672,  672,  673,  673,  673,  673,
      673,  673,  495,  490,  484,  483,  482,  481,  479,  478,
      476,  474,  473,  470,  468,  465,  460,  456,  455,  451,

      450,  448,  447,  446,  445,  444,  443,  441,  440,  421,
      416,  415,  411,  410,  409,  408,  407,  406,  405,  404,
      403,  402,  400,  371,  358,  357,  349,  348,  345,  344,
      343,  342,  341,  340,  339,  338,  337,  336,  335,  300,
      278,  275,  274,  273,  272,  270,  269,  268,  267,  266,
      264,  263,  262,  261,  260,  257,  253,  252,  245,  241,
      240,  233,  230,  229,  215,  214,  205,  204,  197,  196,
      195,  183,  182,  175,  153,  151,  146,  142,  141,  140,
      137,  126,  124,  121,  117,  115,  112,  108,  104,  102,
       86,   84,   82,   67,   65,   63,   60,   58,   54,   51,

       50,   49,   37,   36,   33,   27,   21,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635
    } ;

static yyconst flex_int16_t yy_rule_linenum[90] =
    {   0,
       78,   79,   80,   81,   82,   84,   85,   86,   87,   89,
       90,   92,   99,  100,  124,  149,  162,  166,  171,  175,
      178,  180,  187,  194,  201,  208,  216,  245,  260,  274,
      275,  276,  277,  278,  280,  282,  284,  341,  342,  345,
      347,  354,  355,  356,  357,  358,  359,  360,  361,  362,
      363,  364,  365,  366,  367,  368,  369,  370,  371,  372,
      373,  374,  375,  376,  377,  378,  379,  380,  381,  382,
      383,  384,  385,  386,  387,  388,  389,  390,  395,  400,
      402,  404,  406,  408,  409,  419,  422,  423,  425
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "aprepro.ll"
/* -*- Mode: c++ -*- */
#line 3 "aprepro.ll"

#include <fstream>
#include <iostream>
#include <sstream>
#include <stack>
#include <stdio.h>
#include <string.h>
#include <fcntl.h> 

#include "apr_scanner.h"
#include "aprepro.h"
#include "apr_util.h"

#define YY_NO_UNISTD_H
/* import the parser's token type into a local typedef */
typedef SEAMS::Parser::token token;
typedef SEAMS::Parser::token_type token_type;

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::END

#define show(x)   printf("<%s>", x);
 namespace SEAMS {
   extern int echo;
   extern char *get_temp_filename(void);
   extern char *pathopen(const char *file);
   extern void  conv_string(const char *string);
   void yyerror(const char *s);
 }
 
int ifdef;
int file_must_exist = 0; /* Global used by include/conditional include */

/* Global variables used by the looping mechanism */
int loop_lvl = 0;
std::fstream *tmp_file;
char  *temp_f;

#define MAX_IF_NESTING 64

 int if_state[MAX_IF_NESTING] = {0}; // INITIAL
int if_lvl = 0;
bool suppress_nl = false;
 
/*** Flex Declarations and Options ***/
/* enable c++ scanner class generation */
/* change the name of the scanner class. results in "SEAMSFlexLexer" */
/* enable scanner to generate debug output. disable this for release
 * versions. */
/* enables the use of start condition stacks */

#line 1244 "apr_scanner.cc"

#define INITIAL 0
#define PARSING 1
#define GET_FILENAME 2
#define IF_SKIP 3
#define GET_VAR 4
#define VERBATIM 5
#define IF_WHILE_SKIP 6
#define GET_LOOP_VAR 7
#define LOOP 8
#define LOOP_SKIP 9

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 77 "aprepro.ll"

#line 1412 "apr_scanner.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 636 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2108 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 90 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 90 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 91 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 78 "aprepro.ll"
{ BEGIN(VERBATIM);  }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 79 "aprepro.ll"
{ BEGIN(INITIAL);   }
	YY_BREAK
case 3:
#line 81 "aprepro.ll"
case 4:
YY_RULE_SETUP
#line 81 "aprepro.ll"
{ if (echo) ECHO; }
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 82 "aprepro.ll"
{ if (echo) ECHO; aprepro.ap_file_list.top().lineno++;   }
	YY_BREAK
case 6:
#line 85 "aprepro.ll"
case 7:
YY_RULE_SETUP
#line 85 "aprepro.ll"
{ echo = true;	}
	YY_BREAK
case 8:
#line 87 "aprepro.ll"
case 9:
YY_RULE_SETUP
#line 87 "aprepro.ll"
{ echo = false;	}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 89 "aprepro.ll"
{ aprepro.stateImmutable = true;	}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 90 "aprepro.ll"
{ aprepro.stateImmutable = aprepro.ap_options.immutable; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 92 "aprepro.ll"
{ BEGIN(GET_LOOP_VAR);
			      if (aprepro.ap_options.debugging) 
				std::cerr << "DEBUG LOOP - Found loop begin test " << yytext << " in file "
					  << aprepro.ap_file_list.top().name << "\n";

                           }
	YY_BREAK
case 13:
/* rule 13 can match eol */
#line 100 "aprepro.ll"
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 100 "aprepro.ll"
{/* Loop control defined by integer */
                              char *pt = strchr(yytext, ')');
			      *pt = '\0';
			      sscanf (yytext, "%lf", &yylval->val);

			      if (yylval->val <= 0) {
				BEGIN(LOOP_SKIP);
			      }
			      else {/* Value defined and != 0. */
				temp_f = get_temp_filename();
				SEAMS::file_rec new_file(temp_f, 0, true, (int)yylval->val);
				aprepro.ap_file_list.push(new_file);

				if (aprepro.ap_options.debugging) 
				  std::cerr << "DEBUG LOOP VAR = " << aprepro.ap_file_list.top().loop_count
					    << " in file " << aprepro.ap_file_list.top().name
					    << " at line " << aprepro.ap_file_list.top().lineno << "\n";

				tmp_file = new std::fstream(temp_f, std::ios::out);
				loop_lvl++;
				BEGIN(LOOP);
			      }
			      aprepro.ap_file_list.top().lineno++;
                            }
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 124 "aprepro.ll"
{ /* Loop control defined by variable */
                              symrec *s;
			      char *pt = strchr(yytext, ')');
			      *pt = '\0';
			      s = aprepro.getsym(yytext);

			      if (s == 0 || (s->type != token::SVAR && s->type != token::IMMSVAR && s->value.var == 0.)) {
				BEGIN(LOOP_SKIP);
			      }
			      else { /* Value defined and != 0. */
				temp_f = get_temp_filename();
				SEAMS::file_rec new_file(temp_f, 0, true, (int)s->value.var);
				aprepro.ap_file_list.push(new_file);
				
				if (aprepro.ap_options.debugging) 
				  std::cerr << "DEBUG LOOP VAR = " << aprepro.ap_file_list.top().loop_count
					    << " in file " << aprepro.ap_file_list.top().name
					    << " at line " << aprepro.ap_file_list.top().lineno << "\n";

				tmp_file = new std::fstream(temp_f, std::ios::out);
				loop_lvl++;
				BEGIN(LOOP);
			      }
			      aprepro.ap_file_list.top().lineno++;
                             }
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 149 "aprepro.ll"
{ aprepro.ap_file_list.top().lineno++;
				   if (--loop_lvl == 0) {
				     BEGIN(INITIAL);
				     tmp_file->close();
				     delete tmp_file;
				     
				     yyin = aprepro.open_file(aprepro.ap_file_list.top().name, "r");
				     yyFlexLexer::yypush_buffer_state (yyFlexLexer::yy_create_buffer( yyin, YY_BUF_SIZE));
				   }
				   else {
				     (*tmp_file) << yytext;
				   }
				 }
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 162 "aprepro.ll"
{ loop_lvl++; /* Nested Loop */
	                         (*tmp_file) << yytext;
			         aprepro.ap_file_list.top().lineno++;
			        }
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 166 "aprepro.ll"
{ (*tmp_file) << yytext;
 			          aprepro.ap_file_list.top().lineno++;
			        }
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 171 "aprepro.ll"
{ aprepro.ap_file_list.top().lineno++;
					if (--loop_lvl == 0)
					  BEGIN(INITIAL);
				      }
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 175 "aprepro.ll"
{ loop_lvl++; /* Nested Loop */
					aprepro.ap_file_list.top().lineno++;
				      }
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 178 "aprepro.ll"
{ aprepro.ap_file_list.top().lineno++; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 180 "aprepro.ll"
{ if_lvl++; 
    if (aprepro.ap_options.debugging) 
	fprintf (stderr, "DEBUG IF: 'ifdef'  at level = %d at line %d\n",
		 if_lvl, aprepro.ap_file_list.top().lineno);
			   if (if_lvl >= MAX_IF_NESTING)
			     yyerror("Too many nested if statements");
			   if_state[if_lvl] = IF_WHILE_SKIP; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 187 "aprepro.ll"
{ if_lvl++; 
    if (aprepro.ap_options.debugging) 
	fprintf (stderr, "DEBUG IF: 'if (skipped)'  at level = %d at line %d\n",
		 if_lvl, aprepro.ap_file_list.top().lineno);
			   if (if_lvl >= MAX_IF_NESTING)
			     yyerror("Too many nested if statements");
			   if_state[if_lvl] = IF_WHILE_SKIP; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 194 "aprepro.ll"
{ if_lvl++; 
    if (aprepro.ap_options.debugging) 
	fprintf (stderr, "DEBUG IF: 'ifndef' at level = %d at line %d\n",
		 if_lvl, aprepro.ap_file_list.top().lineno);
			   if (if_lvl >= MAX_IF_NESTING)
			     yyerror("Too many nested if statements");
			   if_state[if_lvl] = IF_WHILE_SKIP; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 201 "aprepro.ll"
{ if_lvl++; 
    if (aprepro.ap_options.debugging) 
	fprintf (stderr, "DEBUG IF: 'ifdef'  at level = %d at line %d\n",
		 if_lvl, aprepro.ap_file_list.top().lineno);
			   if (if_lvl >= MAX_IF_NESTING)
			     yyerror("Too many nested if statements");
			   ifdef = 1; BEGIN(GET_VAR); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 208 "aprepro.ll"
{ if_lvl++; 
    if (aprepro.ap_options.debugging)
	fprintf (stderr, "DEBUG IF: 'ifndef' at level = %d at line %d\n",
		 if_lvl, aprepro.ap_file_list.top().lineno);
			   if (if_lvl >= MAX_IF_NESTING)
			     yyerror("Too many nested if statements");
			   ifdef = 0; BEGIN(GET_VAR); }
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 216 "aprepro.ll"
{ symrec *s;
			      char *pt = strchr(yytext, ')');
			      *pt = '\0';
			      s = aprepro.getsym(yytext);
			      if (s == 0 || (s->type != token::SVAR && s->type != token::IMMSVAR && s->value.var == 0.))
				{
				  if (ifdef == 1) {
				    BEGIN(IF_SKIP);
				    if_state[if_lvl] = IF_SKIP;
				  }
				  else {
				    BEGIN(INITIAL);
				    if_state[if_lvl] = INITIAL;
				  }
				}
			      else /* Value defined and != 0. */
				{
				  if (ifdef == 1) {
				    BEGIN(INITIAL);
				    if_state[if_lvl] = INITIAL;
				  }
				  else {
				    BEGIN(IF_SKIP);
				    if_state[if_lvl] = IF_SKIP;
				  }
				}
			      aprepro.ap_file_list.top().lineno++;
			    }
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 245 "aprepro.ll"
{ aprepro.ap_file_list.top().lineno++; 
    if (aprepro.ap_options.debugging) 
	fprintf (stderr, "DEBUG IF: 'else'   at level = %d at line %d\n",
		 if_lvl, aprepro.ap_file_list.top().lineno);
    if (if_state[if_lvl] == IF_SKIP) {
      if_state[if_lvl] = INITIAL;
      BEGIN(INITIAL);
    }
    else if (if_state[if_lvl] == INITIAL) {
      if_state[if_lvl] = IF_SKIP;
      BEGIN(IF_SKIP);
    }
    /* If neither is true, this is a nested 
       if that should be skipped */
}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 260 "aprepro.ll"
{ if (if_state[if_lvl] == IF_SKIP ||
			       if_state[if_lvl] == INITIAL)
			     BEGIN(INITIAL);
			   /* If neither is true, this is a nested 
			      if that should be skipped */
    if (aprepro.ap_options.debugging) 
	printf ("DEBUG IF: 'endif'  at level = %d at line %d\n",
		if_lvl, aprepro.ap_file_list.top().lineno);
			   if (--if_lvl < 0) {
			     if_lvl = 0;
			     yyerror("Improperly Nested ifdef/ifndef statements");
			   }
			   aprepro.ap_file_list.top().lineno++;  
			   /* Ignore endif if not skipping */ }
	YY_BREAK
case 30:
#line 275 "aprepro.ll"
case 31:
#line 276 "aprepro.ll"
case 32:
#line 277 "aprepro.ll"
case 33:
YY_RULE_SETUP
#line 277 "aprepro.ll"
{ ; }
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 278 "aprepro.ll"
{ aprepro.ap_file_list.top().lineno++; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 280 "aprepro.ll"
{ BEGIN(GET_FILENAME); 
                             file_must_exist = true; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 282 "aprepro.ll"
{ BEGIN(GET_FILENAME);
                             file_must_exist = !true; }
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 284 "aprepro.ll"
{ BEGIN(INITIAL); 
			     {
			       symrec *s;
			       int quoted = false;
			       std::fstream *yytmp;
			       char *pt = strchr(yytext, ')');
			       *pt = '\0';
			       /* Check to see if surrounded by double quote */ 
			       if ((pt = strchr(yytext, '"')) != NULL) {
				 yytext++;
				 quoted = true;
			       }
			       if ((pt = strrchr(yytext, '"')) != NULL) {
				 *pt = '\0';
				 quoted = true;
			       }

			       if (quoted == false) {
				 /* See if this is an aprepro variable referring to a name */
				 s = aprepro.getsym(yytext);
				 if (s == 0 || (s->type != token::SVAR && s->type != token::IMMSVAR)) {
				   pt = yytext;
				 } else {
				   pt = (char*)s->value.svar;
				 }
			       } else {
				 pt = yytext;
			       }
			       
			       if (file_must_exist)
				 yytmp = aprepro.open_file(pt, "r");
			       else
				 yytmp = aprepro.check_open_file(pt, "r");
			       if (yytmp != NULL) {
				 yyin = yytmp;
				 if (aprepro.ap_options.info_msg == true) {
				   std::cerr << "Aprepro: INFO: Included File: '"
					     << pt << "' (" << aprepro.ap_file_list.top().name
					     << ", line " << aprepro.ap_file_list.top().lineno
					     << ")\n";
				 }
				 SEAMS::file_rec new_file(pt, 0, false, 0);
				 aprepro.ap_file_list.push(new_file);

				 yyFlexLexer::yypush_buffer_state (
				    yyFlexLexer::yy_create_buffer( yyin, YY_BUF_SIZE));
			       } else {
				 if (aprepro.ap_options.warning_msg == true) {
				   std::cerr << "Aprepro: WARN: Can't open '"
					     << yytext << "'\n";
				 }
			       }
			       aprepro.ap_file_list.top().lineno++;
			     }
			   }
	YY_BREAK
case 38:
#line 342 "aprepro.ll"
case 39:
YY_RULE_SETUP
#line 342 "aprepro.ll"
{ sscanf (yytext, "%lf", &yylval->val);
                             return(token::NUM); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 345 "aprepro.ll"
; /* Empty Rule */
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 347 "aprepro.ll"
{ symrec *s;
			     s = aprepro.getsym(yytext);
			     if (s == 0)
			       s = aprepro.putsym (yytext, SEAMS::Aprepro::UNDEFINED_VARIABLE, 0);
			     yylval->tptr = s;
			     return((token::yytokentype)s->type);
			   }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 354 "aprepro.ll"
return(token::EQUAL);
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 355 "aprepro.ll"
return(token::EQ_PLUS);
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 356 "aprepro.ll"
return(token::EQ_MINUS);
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 357 "aprepro.ll"
return(token::EQ_TIME);
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 358 "aprepro.ll"
return(token::EQ_DIV);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 359 "aprepro.ll"
return(token::EQ_POW);
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 360 "aprepro.ll"
return(token::EQ_POW);
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 361 "aprepro.ll"
return(token::INC);
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 362 "aprepro.ll"
return(token::DEC);
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 363 "aprepro.ll"
return(token::PLU);
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 364 "aprepro.ll"
return(token::SUB);
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 365 "aprepro.ll"
return(token::TIM);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 366 "aprepro.ll"
return(token::TIM);		/* ~ is same as multiply */
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 367 "aprepro.ll"
return(token::CONCAT);	/* String concatenation */
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 368 "aprepro.ll"
return(token::DIV);
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 369 "aprepro.ll"
return(token::MOD);
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 370 "aprepro.ll"
return(token::POW);
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 371 "aprepro.ll"
return(token::POW);
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 372 "aprepro.ll"
aprepro.ap_file_list.top().lineno++;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 373 "aprepro.ll"
return(token::LPAR);
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 374 "aprepro.ll"
return(token::RPAR);
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 375 "aprepro.ll"
return(token::COMMA);
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 376 "aprepro.ll"
return(token::SEMI);
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 377 "aprepro.ll"
return(token::COLON);
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 378 "aprepro.ll"
return(token::QUEST);
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 379 "aprepro.ll"
return(token::LT);
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 380 "aprepro.ll"
return(token::GT);
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 381 "aprepro.ll"
return(token::LE);
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 382 "aprepro.ll"
return(token::GE);
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 383 "aprepro.ll"
return(token::EQ);
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 384 "aprepro.ll"
return(token::NE);
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 385 "aprepro.ll"
return(token::LAND);
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 386 "aprepro.ll"
return(token::LOR);
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 387 "aprepro.ll"
return(token::NOT);
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 388 "aprepro.ll"
return(token::LBRACK);
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 389 "aprepro.ll"
return(token::RBRACK);
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 390 "aprepro.ll"
{ char *pt = strrchr(yytext, '"');
			     *pt = '\0';
                             new_string(yytext+1, &yylval->string);
			     return token::QSTRING; }
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 395 "aprepro.ll"
{ char *pt = strrchr(yytext, '\'');
			     *pt = '\0';
                             new_string(yytext+1, &yylval->string);
			     return token::QSTRING; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 400 "aprepro.ll"
{ BEGIN(if_state[if_lvl]); return(token::RBRACE); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 402 "aprepro.ll"
{ if (echo) LexerOutput("{", 1); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 404 "aprepro.ll"
{ if (echo) LexerOutput("}", 1); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 406 "aprepro.ll"
{ BEGIN(PARSING); return(token::LBRACE);  }
	YY_BREAK
case 84:
#line 409 "aprepro.ll"
case 85:
YY_RULE_SETUP
#line 409 "aprepro.ll"
{ if (aprepro.ap_options.end_on_exit)
			       {
				 if (echo) ECHO;
				 return((token::yytokentype)-1);  
			       }
                              else 
                               if (echo) ECHO;
			   }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 419 "aprepro.ll"
{ if (echo) ECHO; }
	YY_BREAK
case 87:
#line 423 "aprepro.ll"
case 88:
YY_RULE_SETUP
#line 423 "aprepro.ll"
{ if (echo) ECHO; }
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 425 "aprepro.ll"
{ if (echo && !suppress_nl) ECHO; suppress_nl = false; 
                             aprepro.ap_file_list.top().lineno++; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 428 "aprepro.ll"
ECHO;
	YY_BREAK
#line 2199 "apr_scanner.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(PARSING):
case YY_STATE_EOF(GET_FILENAME):
case YY_STATE_EOF(IF_SKIP):
case YY_STATE_EOF(GET_VAR):
case YY_STATE_EOF(VERBATIM):
case YY_STATE_EOF(IF_WHILE_SKIP):
case YY_STATE_EOF(GET_LOOP_VAR):
case YY_STATE_EOF(LOOP):
case YY_STATE_EOF(LOOP_SKIP):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	SEAMSfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	SEAMSfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					SEAMSrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) SEAMSrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 636 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 636 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 635);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) SEAMSalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) SEAMSalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		SEAMSfree((void *) b->yy_ch_buf  );

	SEAMSfree((void *) b  );
}

/* %if-c-only */
/* %endif */

/* %if-c++-only */

extern "C" int isatty (int );

/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)SEAMSalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)SEAMSrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) SEAMSalloc(new_size  );

		else
			(yy_start_stack) = (int *) SEAMSrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *SEAMSalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *SEAMSrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void SEAMSfree (void * ptr )
{
	free( (char *) ptr );	/* see SEAMSrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 428 "aprepro.ll"



/* When the scanner receives an end-of-file indication from YY_INPUT, it then
 * checks the yywrap() function. If yywrap() returns false (zero), then it is
 * assumed that the function has gone ahead and set up `yyin' to point to
 * another input file, and scanning continues. If it returns true (non-zero),
 * then the scanner terminates, returning 0 to its caller. */

namespace SEAMS {

  Scanner::Scanner(Aprepro& aprepro_yyarg,
		   std::istream* in,
		   std::ostream* out)
    : SEAMSFlexLexer(in, out), aprepro(aprepro_yyarg)
  {
    aprepro.outputStream.push(out);
  }

  Scanner::~Scanner()
  { }

  void Scanner::LexerOutput(const char* buf, int size )
  {
    aprepro.outputStream.top()->write( buf, size );
    if (aprepro.ap_options.interactive && aprepro.outputStream.size() == 1) {
      // In interactive mode, output to stdout in addition to the
      // output stream, unless user has redirected output...
      std::cout << buf;
    }
  }

  int Scanner::yywrap()
  {
    if (aprepro.ap_file_list.size() <= 1) {		/* End of main file, not in nested include */
      return (1);
    }
    else {
      /* We are in an included or looping file */
      if (aprepro.ap_file_list.top().tmp_file) {
	if (aprepro.ap_options.debugging)
	  std::cerr << "DEBUG LOOP: Loop count = " << aprepro.ap_file_list.top().loop_count << "\n";
	if (--aprepro.ap_file_list.top().loop_count <= 0)  {
	  if (strcmp("_string_", aprepro.ap_file_list.top().name.c_str()) != 0) {
	    if (!aprepro.ap_options.debugging)
	      remove(aprepro.ap_file_list.top().name.c_str());	/* Delete file if temporary */
	  }
	  delete yyin;
	  aprepro.ap_file_list.pop(); 
	  yyFlexLexer::yypop_buffer_state();
	}
	else {
	  // Do not pop ap_file_list; we are rereading that file...
	  delete yyin;
	  yyFlexLexer::yypop_buffer_state();
	  yyin = aprepro.open_file(aprepro.ap_file_list.top().name, "r");
	  yyFlexLexer::yypush_buffer_state (yyFlexLexer::yy_create_buffer(yyin, YY_BUF_SIZE));
	  aprepro.ap_file_list.top().lineno = 0;
	}
      }
      else {
	delete yyin;
	yyFlexLexer::yypop_buffer_state();
	aprepro.ap_file_list.pop();
	/* Turn echoing back on at end of included files. */
	echo = true;
	/* Set immutable mode back to global immutable 
	 * state at end of included file
	 */
	aprepro.stateImmutable = aprepro.ap_options.immutable;	
      }
      return (0);
    }
  }

  /* Print error message to standard error and return.  Note: internally
   *   'lineno' starts at zero.  To avoid confusion, we add 1 to value
   *   when it is output.
   */

  void Scanner::yyerror (const char *s)
  {
    std::cerr << "Aprepro: ERROR:  " << s << " ("
	      << aprepro.ap_file_list.top().name<< ", line "
	      << aprepro.ap_file_list.top().lineno + 1 << ")\n";
  }

  char *Scanner::execute (char string[])
  {
    /* Push the contents of 'string' onto the stack to be reread.
     * 'string' will be surrounded by {} so it must be a valid expression.
     */

    /*
     * NOTE: The closing } has not yet been scanned in the call to execute();
     *       therefore, we read it ourselves using input(), then we push:
     *       '}{' + our string + '}' 
     */
    int i;
    while ((i = yyFlexLexer::yyinput ()) != '}' && i != EOF)
      ;				/* eat up values */

    /* Allocate space for string + '}' + '{' + end_of_string */
    std::string new_string;
    new_string += "}{";
    new_string += string;
    new_string += "}";

    aprepro.ap_file_list.push(SEAMS::file_rec("_string_", 0, true, -1));
  
    std::istringstream *ins = new std::istringstream(new_string); // Declare an input string stream.
    yyFlexLexer::yypush_buffer_state(yyFlexLexer::yy_create_buffer(ins, new_string.size()));
    return (NULL);
  }

  /* Push the contents of 'string' onto the stack to be reread.
   * 'string' will not be surrounded by {}.
   */

  char *Scanner::rescan (char *string)
  {
    int i;
    /*
     * NOTE: The closing } has not yet been scanned in the call to rescan();
     *       therefore, we read it ourselves using input(), then we push our
     *       string and then put the closing } back on the stack last
     *       (to be read first),
     */
    while ((i = yyFlexLexer::yyinput ()) != '}' && i != EOF)
      ;				/* eat up values */
    {
      aprepro.ap_file_list.push(SEAMS::file_rec("_string_", 0, true, -1));
      std::string new_string("}");
      new_string += string;

      std::istringstream *ins = new std::istringstream(new_string); // Declare an input string stream.
      yyFlexLexer::yypush_buffer_state(yyFlexLexer::yy_create_buffer(ins, new_string.size()));
    }
    return (NULL);
  }

  char *Scanner::if_handler(double x)
  {
    if_lvl++;
    if (if_lvl >= MAX_IF_NESTING)
      yyerror("Too many nested if statements");

    if (x == 0) {
      if_state[if_lvl] = IF_SKIP;
    } else {
      suppress_nl = true;
      if_state[if_lvl] = INITIAL;
    }
    if (aprepro.ap_options.debugging) 
      std::cerr << "DEBUG IF: If level " << if_lvl << " " << if_state[if_lvl] << "\n"; 
    return(NULL);
  }

}

/* This implementation of ExampleFlexLexer::yylex() is required to fill the
 * vtable of the class ExampleFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the Scanner class instead. */

#ifdef yylex
#undef yylex
#endif
int SEAMSFlexLexer::yylex()
{
    std::cerr << "in ExampleFlexLexer::yylex() !" << std::endl;
    return 0;
}

/* When the scanner receives an end-of-file indication from YY_INPUT, it then
 * checks the yywrap() function. If yywrap() returns false (zero), then it is
 * assumed that the function has gone ahead and set up `yyin' to point to
 * another input file, and scanning continues. If it returns true (non-zero),
 * then the scanner terminates, returning 0 to its caller. */

int SEAMSFlexLexer::yywrap()
{
    return 1;
}




