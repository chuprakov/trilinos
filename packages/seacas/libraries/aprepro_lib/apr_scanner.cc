#line 2 "apr_scanner.cc"

#line 4 "apr_scanner.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer SEAMSFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *SEAMSalloc (yy_size_t  );
void *SEAMSrealloc (void *,yy_size_t  );
void SEAMSfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 94
#define YY_END_OF_BUFFER 95
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[738] =
    {   0,
        0,    0,   44,   44,    0,    0,   34,   34,    0,    0,
        3,    3,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   95,   92,   92,   93,   90,   91,   91,   91,
       92,   87,   44,   64,   79,   92,   61,   92,   92,   65,
       66,   57,   55,   67,   56,   43,   60,   42,   69,   68,
       71,   46,   72,   70,   45,   45,   45,   80,   81,   62,
       87,   92,   84,   58,   92,   92,   90,   91,   91,   91,
       92,   87,   37,   37,   38,   34,   37,   34,   34,   34,
       34,   37,   37,   92,   92,   90,   91,   91,   91,   92,
       87,    4,    4,    5,    3,    4,    3,    3,    3,    3,

        4,    4,   92,   92,   92,   90,   92,   92,   91,   91,
       91,   92,   87,   92,   92,   18,   90,   91,   91,   91,
       92,   87,   92,   92,   21,   90,   91,   91,   91,   92,
       87,   92,   92,   24,   90,   91,   91,   91,   92,   87,
        0,    0,   91,   91,   91,   85,   86,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   44,    0,   76,    0,
       82,   77,    0,   83,   63,   49,   53,   47,   54,   48,
       43,    0,   59,   50,   43,   42,    0,   73,   75,   74,
       45,   45,   45,   51,    0,    0,   78,    0,    0,    0,
        0,   91,   91,   91,   85,   86,    0,    0,    0,    0,

       34,   34,   34,   34,   34,   35,   36,    0,    0,    0,
        0,    0,    0,   91,   91,   91,   85,   86,    0,    0,
        0,    3,    3,    3,    3,    3,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   91,   91,
       91,   85,   86,    0,    0,    0,   18,    0,    0,   91,
       91,   91,   85,   86,    0,    0,    0,    0,   21,    0,
        0,   91,   91,   91,   85,   86,    0,    0,    0,    0,
       24,    0,    0,   91,   91,   91,   85,   86,    0,    0,
        0,    0,    0,    0,   91,   91,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   52,

        0,   43,    0,   42,   45,   45,    0,    0,   41,    0,
       91,   91,    0,    0,    0,   34,   34,    0,    0,    0,
        0,   91,   91,    0,    0,    0,    3,    3,    0,    0,
        0,    0,   13,    0,    0,    0,    0,    0,    0,    0,
       91,   91,    0,    0,    0,    0,    0,   91,   91,    0,
        0,    0,    0,    0,    0,   91,   91,    0,    0,    0,
        0,    0,   91,   91,    0,    0,    0,    0,    0,    0,
       88,   89,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   45,   45,    0,   41,   88,
       89,    0,    0,    0,   34,   34,    0,    0,    0,   27,

        0,   31,    0,   88,   89,    0,    0,    0,    3,    3,
        0,    0,   15,    0,    0,   13,    0,    0,   14,    0,
       88,   89,    0,    0,    0,    0,   88,   89,    0,    0,
        0,    0,    0,   88,   89,    0,    0,    0,    0,   88,
       89,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    6,    0,    0,    0,

        0,    0,    0,    0,   12,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   22,    0,    0,
        0,    0,   32,    0,    0,    0,   29,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   26,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   18,    0,    0,    0,   17,    0,    0,   21,    0,
        0,    0,   20,    0,    0,   24,    0,    0,    0,    0,
        0,    0,   33,    0,    0,   30,    0,    8,    0,    0,

        0,    0,    0,    0,   41,    0,    0,    0,   28,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   18,    0,    0,    0,    0,   21,
        0,    0,    0,   24,    0,    0,    0,    0,    0,    0,
       39,    0,    0,    0,    0,    0,   32,    0,   41,    0,
        0,    0,   31,    0,    0,    0,    0,    0,    0,   15,
        0,    0,    0,    0,    0,   16,    0,    0,    0,   19,
        0,    0,    0,    0,   40,    0,    7,    0,    0,    0,
       23,    0,    0,    7,   33,    0,    7,    0,    0,   31,
        0,    0,    0,    7,    0,    0,   15,    0,    0,    7,

        0,    7,    0,    7,    0,   23,    9,    0,    0,    0,
        9,    9,    0,    0,    9,    0,    9,    9,    9,    0,
        0,    0,   25,    0,    0,    0,    0,    0,    0,    0,
        1,    0,    0,   10,    2,   11,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    1,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
       23,   24,   25,    1,   26,   27,   28,   29,   30,   31,
       29,   32,   33,   29,   29,   34,   35,   36,   37,   29,
       38,   39,   29,   40,   41,   42,   29,   43,   29,   29,
       44,   45,   46,   47,   29,    1,   48,   29,   49,   50,

       51,   52,   29,   53,   54,   29,   29,   55,   29,   56,
       57,   58,   38,   29,   59,   60,   61,   29,   62,   43,
       29,   29,   63,   64,   65,   66,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[67] =
    {   0,
        1,    2,    3,    4,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    5,    6,
        1,    1,    1,    1,    1,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    1,    1,    1,    1,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    2,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[785] =
    {   0,
        0,    0,   66,    0,  132,    0,  198,    0,  264,    0,
      330,    0,  395,  396,  459,    0,  525,    0,  591,    0,
      657,    0, 2517, 2518,  722, 2518, 2518,    0, 2473,  360,
      339,  758,  726, 2518, 2492,  400, 2518, 2505, 2503, 2518,
     2518,  392,  393, 2518,  394,  389,  391,  394, 2518, 2518,
     2489, 2488, 2487, 2518,    0, 2466,  371, 2518, 2518, 2485,
      388, 2443, 2518, 2518, 2494,  727, 2493,  813, 2461,  381,
      713,  715, 2518,  730, 2518,  733, 2518,  734,  416,  729,
      734,  360,  396, 2491,  738, 2490,  879, 2458,  387,  739,
      729, 2518,  742, 2518,  753, 2518,  944,  423,  744,  943,

      368,  404,  946, 2488,  947, 2487,  941,  945, 1010, 2455,
      396,  940,  731, 2494, 1075, 2518, 2493, 1138, 2452,  706,
     1202,  951, 2491, 1205, 2518, 2490, 1268, 2449,  712, 1332,
     1077, 2488, 1335, 2518, 2487, 1398, 2446,  722, 1462, 1080,
     1465,  940,    0,  397,  402, 2518, 2518, 2434,  743,  725,
     2430, 2449, 2455, 2433,  397,  700, 1466, 2453, 2518,  435,
     2518, 2518, 2472, 2518, 2458, 2518, 2518, 2518, 2518, 2518,
      936,  942, 2518, 2518,  948, 1065,  963, 2518, 2518, 2518,
        0,  725,  932, 2518, 1053,  713, 2518, 2468, 1469, 1470,
      960,    0,  947, 1052, 2467, 2466, 1194, 1078, 1473, 1058,

     1474, 1477,  993, 1082, 1206, 2518, 2518, 2425, 2424, 2463,
     1199, 1481, 1075,    0, 1059, 1060, 2462, 2461, 1200, 1202,
     1482, 1485, 1478, 1097, 1209, 1212, 2442, 2459, 1324, 1486,
     1088, 1488, 1208, 1107, 1328, 1211, 1329, 1108,    0, 1071,
     1182, 2458, 2457, 1330, 1332, 2465, 2518, 1492, 1496,    0,
     1186, 1192, 2464, 2463, 1503, 1463, 1501, 2462, 2518, 1499,
     1509,    0, 1198, 1200, 2461, 2460, 1510, 1489, 1512, 2459,
     2518, 1506,  781,    0, 1310, 1312, 2458, 2457, 1547,  762,
     1086, 1515, 2431, 2402,  948, 1177, 2401, 2424, 2396, 2404,
     2418, 1047, 2403, 2394, 2420, 2410, 2396, 2397, 2418, 2518,

     2426, 2425, 2424, 2423, 1184, 1307, 2409, 1512, 1231, 1223,
     1309, 1310, 1339, 1493, 1340, 1559, 1568, 1197, 1574, 1350,
     1344, 1314, 1315, 1345, 1495, 1485, 1569, 1576, 2401, 1370,
     1348, 1380, 2518, 1578, 1520,  981, 1349, 1571, 1372, 1572,
     1482, 1546, 1575, 1580, 1570, 1590, 1558, 1555, 1557,  771,
     1591, 1595, 1597, 1607, 1601, 1561, 1565,  966, 1608, 1609,
     1619, 1610, 1587, 1591, 1362, 1620, 1623, 1629, 1630, 2389,
        0,    0, 2389, 2400, 2385, 2381, 2393, 2382, 2382, 2376,
     2372, 2401, 2401, 2379,  390,    0,    0, 2389, 2422,    0,
        0, 1625, 1084, 1629, 1359, 1636, 2373, 2373, 1664, 2518,

     1641, 2518, 1646,    0,    0, 1640, 1630, 1636, 1651, 1660,
     2395, 1657, 2518, 1658, 1662, 2518, 1675, 1681, 2518, 1682,
        0,    0, 1660, 1674, 1677, 1688,    0,    0, 1689, 1692,
     1695, 1693, 1696,    0,    0, 1697, 1701, 1699, 1698,    0,
        0, 1700, 1704, 1703, 1707, 1711, 2362, 2365, 1697, 2354,
     2366, 2377, 2364, 2364, 2353, 1711, 2381, 2386, 2350, 2348,
     2398, 1087, 1700, 1209, 2356, 2356, 1706, 1705, 1707, 1693,
     2380, 1718, 1724, 1729, 1749, 1708, 1712, 1732,  759, 1725,
     1736, 1739, 1765, 1741, 1508, 1745, 1760, 1767, 1775, 1771,
     1768, 1777, 2402, 1778, 2343, 2366, 2518, 2399, 2336, 2374,

     1781, 2347, 2348, 1793, 2518, 2360, 2356, 2340, 2340, 1772,
     1786, 1776, 1797, 2341, 1788, 1791, 1790, 2352, 1793, 1803,
     1795, 1808, 2388, 1809, 1810, 1820, 2387, 1811, 2386, 1813,
     1815, 1824, 2385, 1817, 2384, 1818, 2383, 2518, 1829, 2335,
     1806, 2381, 2518, 2380, 2355, 1832, 2518, 1836, 2330, 2315,
     2346, 2318, 2317, 1832, 1846, 1849, 1847, 1860, 2518, 1863,
     1845, 1866, 1870, 1874, 2343, 1860, 1876, 1882, 1886, 1884,
     2372, 2518, 1843, 2371, 2370, 2518, 1887, 2369, 2518, 1853,
     2368, 2367, 2518, 1890, 2366, 2518, 2365, 1889, 2097, 2109,
     2123, 2124, 2518, 2088, 1893, 2518, 1898, 2518, 2067, 2036,

     2051, 1891, 2087, 1904, 1907, 1921, 1925, 1928, 2518, 1900,
     2086, 1922, 1933, 1938, 2062, 1926, 2084, 1939, 1940, 1941,
     1937, 1943, 2092, 2091, 2518, 1945, 1951, 2089, 2088, 2518,
     1953, 1955, 2087, 2518, 1896, 1960, 2077, 2023, 2056, 1968,
     2518, 2073, 2080, 2029, 2069, 1971, 2077, 1983, 1962, 2067,
     1901, 1977, 2518, 1979, 1985, 2067, 2064, 1947, 1989, 2518,
     1990, 1993, 1995, 1957, 2072, 2518, 1996, 1974, 2071, 2518,
     1997, 1975, 2070, 2009, 2518, 2007, 2518, 2060, 2033, 2066,
     2518, 2003, 2012, 2007, 2064, 1969, 2014, 2015, 2018, 2518,
     2020, 2028, 1982, 2025, 2026, 2030, 2518, 2038, 2001, 2061,

     2022, 2060, 2028, 2056, 2054, 2518, 2518, 2009, 1999, 2012,
     2040, 2042, 2046, 1886, 2048, 2050, 1902, 1631, 1518, 2025,
     1505, 1393, 2518, 1350, 1347, 1236, 1153, 1082,  971,  817,
     2518,  741,  389, 2518, 2518, 2518, 2518, 2099, 2105, 2111,
     2113, 2119, 2124, 2126, 2132, 2137, 2139, 2145, 2151, 2157,
     2163, 2169, 2175, 2181, 2187, 2193, 2199, 2205, 2211, 2217,
     2223, 2229, 2235, 2241, 2247, 2253, 2259, 2265, 2271, 2277,
     2283, 2289, 2295, 2301, 2307, 2313, 2319, 2325, 2331, 2337,
     2343, 2349, 2355, 2361
    } ;

static yyconst flex_int16_t yy_def[785] =
    {   0,
      737,    1,  737,    3,  737,    5,  737,    7,  737,    9,
      737,   11,    1,    1,  737,   15,  737,   17,  737,   19,
      737,   21,  737,  737,  737,  737,  737,  738,  738,  738,
      737,  737,  737,  737,  737,  739,  737,  737,  740,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  741,  741,  741,  737,  737,  737,
      737,  737,  737,  737,  742,  742,  742,  737,   68,   68,
      742,  742,  737,  737,  737,  743,  737,  743,  744,  744,
      744,  737,  737,  745,  745,  745,  737,   87,   87,  745,
      745,  737,  737,  737,  746,  737,  746,  747,  747,  747,

      737,  737,  737,  748,  748,  748,  748,  748,  737,  109,
      109,  748,  748,  749,  749,  737,  749,  737,  118,  118,
      749,  749,  750,  750,  737,  750,  737,  127,  127,  750,
      750,  751,  751,  737,  751,  737,  136,  136,  751,  751,
      737,  737,  738,  738,  738,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  739,
      737,  737,  740,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      741,  741,  741,  737,  737,  737,  737,  742,  742,  742,
      742,   68,   68,   68,  742,  742,  742,  742,  737,  737,

      743,  743,  744,  744,  744,  737,  737,  737,  737,  745,
      745,  745,  745,   87,   87,   87,  745,  745,  745,  745,
      737,  746,  746,  747,  747,  747,  737,  748,  748,  748,
      748,  752,  748,  748,  748,  748,  748,  748,  109,  109,
      109,  748,  748,  748,  748,  749,  737,  749,  749,  118,
      118,  118,  749,  749,  749,  749,  749,  750,  737,  750,
      750,  127,  127,  127,  750,  750,  750,  750,  750,  751,
      737,  751,  751,  136,  136,  136,  751,  751,  751,  751,
      751,  751,  737,  737,  738,  738,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,

      737,  737,  737,  737,  741,  741,  737,  742,  742,  742,
       68,   68,  742,  742,  742,  744,  744,  737,  737,  753,
      745,   87,   87,  745,  745,  745,  747,  747,  737,  754,
      748,  752,  737,  752,  755,  748,  748,  756,  748,  748,
      109,  109,  748,  748,  748,  749,  749,  118,  118,  749,
      749,  749,  749,  750,  750,  127,  127,  750,  750,  750,
      750,  751,  136,  136,  751,  751,  751,  751,  751,  737,
      738,  738,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  741,  741,  737,  737,   68,
       68,  742,  742,  742,  744,  744,  737,  737,  737,  737,

      753,  737,  753,   87,   87,  745,  745,  745,  747,  747,
      737,  754,  737,  754,  755,  737,  755,  756,  737,  756,
      109,  109,  748,  748,  748,  749,  118,  118,  749,  749,
      749,  749,  750,  127,  127,  750,  750,  750,  750,  136,
      136,  751,  751,  751,  751,  751,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  742,  742,  742,  737,  737,  753,  745,  745,  745,
      737,  754,  755,  756,  748,  748,  748,  749,  749,  749,
      749,  749,  749,  750,  750,  750,  750,  750,  750,  751,
      751,  751,  757,  751,  737,  737,  737,  758,  737,  737,

      737,  737,  737,  737,  737,  737,  737,  737,  737,  742,
      759,  742,  737,  737,  745,  760,  745,  737,  748,  761,
      748,  749,  762,  749,  749,  749,  763,  750,  764,  750,
      750,  750,  765,  751,  766,  751,  757,  737,  751,  737,
      737,  758,  737,  767,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  742,  759,  759,  768,  737,  737,  737,
      745,  760,  760,  769,  737,  748,  761,  761,  770,  749,
      762,  737,  749,  771,  763,  737,  750,  764,  737,  750,
      772,  765,  737,  751,  766,  737,  773,  751,  737,  737,
      737,  767,  737,  737,  737,  737,  737,  737,  737,  737,

      737,  742,  742,  759,  759,  768,  768,  737,  737,  745,
      745,  774,  769,  769,  737,  748,  748,  775,  770,  770,
      749,  749,  776,  771,  737,  750,  750,  777,  772,  737,
      751,  751,  773,  737,  751,  737,  737,  737,  737,  737,
      737,  737,  778,  737,  742,  742,  737,  768,  768,  745,
      745,  774,  737,  774,  779,  737,  748,  748,  775,  737,
      775,  780,  749,  749,  776,  737,  750,  750,  777,  737,
      751,  751,  781,  737,  737,  737,  737,  737,  737,  778,
      737,  737,  742,  742,  737,  745,  782,  774,  779,  737,
      779,  737,  748,  783,  775,  780,  737,  780,  749,  749,

      750,  750,  751,  751,  781,  737,  737,  737,  737,  784,
      742,  782,  779,  737,  783,  780,  749,  750,  751,  737,
      737,  784,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,    0,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737
    } ;

static yyconst flex_int16_t yy_nxt[2585] =
    {   0,
       24,   25,   26,   25,   24,   24,   27,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   28,   28,   28,   28,   29,
       28,   28,   28,   28,   28,   28,   28,   30,   28,   28,
       28,   28,   28,   24,   31,   24,   24,   28,   28,   28,
       29,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   32,   24,   24,   24,   24,   33,   34,   33,
       35,   36,   27,   37,   38,   39,   40,   41,   42,   43,
       44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
       54,   55,   55,   55,   55,   56,   55,   55,   55,   55,

       55,   55,   55,   57,   55,   55,   55,   55,   55,   58,
       31,   59,   60,   55,   55,   55,   56,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   61,   62,
       63,   64,   65,   66,   26,   66,   65,   65,   67,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   68,   68,   68,
       68,   69,   68,   68,   68,   68,   68,   68,   68,   70,
       68,   68,   68,   68,   68,   65,   71,   65,   65,   68,
       68,   68,   69,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   72,   65,   65,   65,   73,   74,

       75,   76,   73,   73,   77,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   78,   73,   73,   73,
       73,   73,   73,   79,   79,   79,   79,   80,   79,   79,
       79,   79,   79,   79,   79,   81,   79,   79,   79,   79,
       79,   73,   82,   73,   73,   79,   79,   79,   80,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       83,   73,   73,   73,   84,   85,   26,   85,   84,   84,
       86,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   87,
       87,   87,   87,   88,   87,   87,   87,   87,   87,   87,

       87,   89,   87,   87,   87,   87,   87,   84,   90,   84,
       84,   87,   87,   87,   88,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   91,   84,   84,   84,
       92,   93,   94,   95,   92,   92,   96,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   97,   92,
       92,   92,   92,   92,   92,   98,   98,   98,   98,   99,
       98,   98,   98,   98,   98,   98,   98,  100,   98,   98,
       98,   98,   98,   92,  101,   92,   92,   98,   98,   98,
       99,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,  102,   92,   92,   92,  103,  103,  103,  103,

      145,  146,  161,  147,  165,  161,  167,  171,  173,  169,
      175,  183,  176,  174,  166,  168,  170,  185,  172,  202,
      145,  194,  206,  177,  207,  185,  223,  216,  208,  285,
      146,  183,  147,  185,  286,  143,  241,  161,  186,  172,
      161,  194,  143,  451,  177,  227,  186,  216,  460,  209,
      285,  289,  298,  736,  186,  286,  241,   61,   61,  104,
      105,   26,  105,  104,  104,  106,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  107,  104,  108,  104,  104,
      104,  104,  104,  104,  109,  109,  109,  109,  110,  109,
      109,  109,  109,  109,  109,  109,  111,  109,  109,  109,

      109,  109,  104,  112,  104,  104,  109,  109,  109,  110,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  113,  104,  104,  104,  114,  115,  116,  115,  114,
      114,  117,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      118,  118,  118,  118,  119,  118,  118,  118,  118,  118,
      118,  118,  120,  118,  118,  118,  118,  118,  114,  121,
      114,  114,  118,  118,  118,  119,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  122,  114,  114,
      114,  123,  124,  125,  124,  123,  123,  126,  123,  123,

      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  127,  127,  127,  127,
      128,  127,  127,  127,  127,  127,  127,  127,  129,  127,
      127,  127,  127,  127,  123,  130,  123,  123,  127,  127,
      127,  128,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  131,  123,  123,  123,  132,  133,  134,
      133,  132,  132,  135,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  136,  136,  136,  136,  137,  136,  136,  136,
      136,  136,  136,  136,  138,  136,  136,  136,  136,  136,

      132,  139,  132,  132,  136,  136,  136,  137,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  140,
      132,  132,  132,  141,  189,  141,  189,  157,  190,  157,
      190,  199,  202,  199,  199,  737,  201,  202,  189,  212,
      211,  212,  229,  221,  197,  221,  252,  223,  143,  211,
      211,  292,  264,  143,  221,  293,  222,  305,  219,  291,
      244,  247,  276,  143,  271,  198,  252,  289,  290,  522,
      288,  204,  264,  247,  205,  195,  292,  196,  305,  220,
      293,  245,  276,  271,  142,  148,  225,  149,  158,  191,
      150,  151,  200,  152,  205,  200,  737,  289,  290,  153,

      213,  217,  429,  218,  158,  735,  148,  154,  155,  368,
      362,  156,  151,  188,  188,  158,  188,  188,  188,  188,
      188,  188,  188,  188,  189,  188,  188,  188,  188,  188,
      188,  192,  192,  188,  188,  188,  188,  188,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  188,  188,  188,  188,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  188,  188,  188,  188,  210,
      210,  734,  210,  210,  210,  210,  210,  210,  210,  210,
      211,  210,  210,  210,  210,  210,  210,  214,  214,  210,

      210,  210,  210,  210,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  210,  210,  210,  210,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  210,  210,  210,  210,  737,  223,  221,  230,  221,
      230,  229,  232,  247,  171,  301,  235,  301,  229,  233,
      302,  236,  143,  237,  306,  172,  171,  148,  259,  283,
      234,  189,  150,  151,  238,  152,  303,  172,  303,  311,
      255,  304,  733,  226,  256,  306,  172,  371,  148,  310,
      284,  234,  229,  156,  151,  238,  202,  436,  172,  337,

      311,  257,  242,  226,  243,  256,  737,  371,  158,  231,
      228,  228,  143,  228,  228,  228,  228,  228,  228,  228,
      228,  229,  228,  228,  228,  228,  228,  228,  239,  239,
      228,  228,  228,  228,  228,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  239,  228,  228,  228,  228,  239,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  228,  228,  228,  228,  248,  247,  248,  259,
      307,  175,  271,  176,  312,  202,  211,  299,  271,  189,
      208,  322,  323,  732,  177,  189,  378,  510,  189,  229,

      223,  143,  379,  341,  321,  312,  267,  289,  290,  279,
      268,  209,  322,  323,  316,  177,  143,  331,  229,  229,
      336,  339,  336,  339,  341,  337,  340,  269,  280,  281,
      282,  268,  314,  315,  463,  316,  369,  249,  246,  246,
      247,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  250,  250,  246,  246,
      246,  246,  246,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  246,  246,  246,  246,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,

      246,  246,  246,  246,  247,  189,  260,  259,  260,  202,
      211,  211,  223,  211,  342,  223,  372,  731,  348,  232,
      189,  313,  232,  386,  349,  143,  233,  324,  143,  233,
      356,  143,  357,  389,  189,  342,  372,  234,  317,  348,
      234,  327,  189,  386,  328,  349,  397,  730,  314,  315,
      313,  356,  398,  357,  325,  326,  325,  326,  234,  317,
      512,  234,  327,  320,  253,  328,  254,  261,  258,  258,
      259,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  262,  262,  258,  258,
      258,  258,  258,  262,  262,  262,  262,  262,  262,  262,

      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  258,  258,  258,  258,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      258,  258,  258,  258,  259,  229,  272,  271,  272,  229,
      235,  229,  363,  229,  364,  236,  387,  237,  390,  391,
      189,  189,  402,  404,  405,  211,  211,  343,  238,  229,
      232,  403,  202,  363,  271,  364,  387,  337,  390,  391,
      392,  324,  413,  404,  405,  343,  406,  729,  143,  238,
      728,  414,  333,  229,  344,  345,  344,  345,  330,  394,
      340,  334,  338,  442,  265,  723,  266,  273,  270,  270,

      271,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  274,  274,  270,  270,
      270,  270,  270,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  270,  270,  270,  270,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      270,  270,  270,  270,  271,  247,  141,  157,  141,  157,
      308,  190,  308,  190,  199,  199,  199,  201,  737,  737,
      189,  189,  212,  221,  212,  221,  221,  230,  222,  230,
      333,  259,  211,  248,  247,  248,  211,  229,  247,  334,

      260,  259,  260,  247,  189,  247,  211,  272,  271,  272,
      259,  259,  259,  308,  259,  308,  727,  271,  528,  353,
      271,  421,  416,  189,  277,  346,  278,  142,  158,  256,
      350,  417,  191,  309,  408,  200,  200,  358,  354,  737,
      737,  421,  268,  213,  158,  361,  347,  158,  231,  271,
      256,  393,  335,  407,  249,  351,  352,  351,  352,  355,
      247,  261,  202,  268,  359,  360,  359,  360,  273,  366,
      367,  202,  223,  419,  365,  399,  309,  399,  143,  223,
      333,  229,  420,  235,  400,  422,  229,  143,  143,  334,
      340,  229,  247,  247,  427,  143,  428,  247,  395,  247,

      434,  366,  367,  259,  435,  422,  423,  396,  409,  259,
      259,  259,  271,  426,  427,  410,  428,  350,  395,  425,
      434,  259,  271,  397,  435,  271,  440,  396,  409,  398,
      441,  271,  271,  259,  358,  410,  189,  365,  424,  202,
      189,  211,  335,  402,  431,  426,  440,  211,  402,  430,
      441,  211,  403,  432,  223,  143,  433,  403,  438,  413,
      413,  462,  433,  223,  416,  399,  437,  399,  414,  414,
      143,  229,  444,  417,  400,  439,  468,  416,  443,  143,
      469,  446,  464,  419,  419,  229,  417,  445,  229,  470,
      247,  247,  420,  420,  247,  247,  475,  247,  259,  259,

      259,  259,  271,  259,  211,  271,  271,  496,  402,  271,
      467,  189,  504,  271,  504,  515,  211,  403,  211,  229,
      413,  505,  472,  229,  476,  479,  416,  247,  481,  414,
      477,  419,  487,  485,  247,  417,  490,  478,  247,  473,
      420,  247,  480,  259,  517,  484,  474,  259,  482,  481,
      483,  486,  488,  487,  491,  489,  492,  493,  494,  519,
      229,  497,  259,  521,  511,  481,  526,  247,  526,  259,
      271,  516,  520,  271,  487,  527,  532,  259,  532,  271,
      271,  534,  546,  189,  546,  533,  481,  189,  543,  523,
      525,  547,  524,  543,  504,  487,  504,  556,  558,  211,

      558,  211,  563,  505,  229,  543,  229,  559,  554,  529,
      247,  247,  247,  259,  568,  259,  530,  259,  531,  271,
      271,  526,  247,  526,  561,  532,  259,  532,  536,  566,
      527,  271,  535,  546,  533,  546,  590,  595,  539,  595,
      557,  591,  547,  189,  570,  247,  596,  577,  543,  593,
      604,  543,  604,  584,  564,  259,  211,  556,  607,  569,
      556,  558,  602,  558,  608,  573,  608,  603,  543,  580,
      559,  229,  543,  609,  574,  610,  593,  563,  543,  581,
      611,  563,  587,  588,  543,  614,  247,  568,  593,  259,
      616,  271,  271,  568,  595,  617,  595,  620,  271,  640,

      623,  640,  189,  596,  247,  604,  543,  604,  641,  647,
      628,  211,  211,  605,  621,  556,  724,  626,  556,  622,
      631,  645,  627,  593,  653,  632,  648,  593,  648,  608,
      650,  608,  607,  654,  612,  593,  607,  229,  609,  247,
      593,  660,  593,  593,  614,  247,  618,  259,  635,  614,
      661,  620,  620,  259,  664,  271,  657,  271,  229,  247,
      673,  674,  668,  674,  685,  687,  672,  663,  605,  640,
      675,  640,  308,  607,  308,  667,  259,  271,  641,  653,
      211,  653,  189,  671,  648,  593,  648,  690,  654,  649,
      654,  660,  660,  229,  607,  697,  691,  247,  259,  271,

      661,  661,  655,  247,  698,  662,  699,  701,  703,  389,
      674,  694,  674,  308,  723,  308,  402,  653,  189,  675,
      690,  700,  690,  189,  259,  403,  654,  413,  660,  691,
      271,  691,  697,  712,  721,  684,  414,  661,  702,  704,
      697,  698,  389,  688,  402,  720,  715,  649,  690,  698,
      413,  189,  697,  403,  695,  725,  706,  691,  271,  414,
      726,  698,  259,  247,  714,  717,  389,  710,  681,  709,
      708,  707,  706,  670,  666,  693,  711,  692,  686,  389,
      683,  682,  681,  679,  713,  678,  718,  677,  676,  634,
      630,  670,  719,  625,  666,  658,  656,  651,  646,  644,

      643,  642,  716,  143,  143,  160,  160,  160,  160,  160,
      160,  163,  163,  163,  163,  163,  163,  181,  181,  188,
      188,  639,  188,  188,  188,  202,  593,  202,  202,  203,
      203,  203,  210,  210,  638,  210,  210,  210,  223,  637,
      223,  223,  224,  224,  224,  228,  228,  636,  228,  228,
      228,  246,  246,  246,  246,  246,  246,  258,  258,  258,
      258,  258,  258,  270,  270,  270,  270,  270,  270,  332,
      332,  332,  332,  332,  332,  401,  401,  401,  401,  401,
      401,  412,  412,  412,  412,  412,  412,  415,  415,  415,
      415,  415,  415,  418,  418,  418,  418,  418,  418,  537,

      537,  537,  537,  537,  537,  542,  542,  542,  542,  542,
      542,  555,  555,  555,  555,  555,  555,  562,  562,  562,
      562,  562,  562,  567,  567,  567,  567,  567,  567,  571,
      571,  571,  571,  571,  571,  575,  575,  575,  575,  575,
      575,  578,  578,  578,  578,  578,  578,  582,  582,  582,
      582,  582,  582,  585,  585,  585,  585,  585,  585,  592,
      592,  592,  592,  592,  592,  606,  606,  606,  606,  606,
      606,  613,  613,  613,  613,  613,  613,  619,  619,  619,
      619,  619,  619,  624,  624,  624,  624,  624,  624,  629,
      629,  629,  629,  629,  629,  633,  633,  633,  633,  633,

      633,  652,  652,  652,  652,  652,  652,  659,  659,  659,
      659,  659,  659,  665,  665,  665,  665,  665,  665,  669,
      669,  669,  669,  669,  669,  680,  680,  680,  680,  680,
      680,  689,  689,  689,  689,  689,  689,  696,  696,  696,
      696,  696,  696,  705,  705,  705,  705,  705,  705,  401,
      401,  401,  401,  401,  401,  412,  412,  412,  412,  412,
      412,  722,  722,  722,  722,  722,  722,  634,  586,  583,
      630,  579,  576,  625,  572,  615,  601,  600,  599,  598,
      597,  594,  593,  543,  589,  538,  586,  583,  579,  576,
      572,  565,  560,  553,  552,  551,  550,  549,  548,  545,

      544,  543,  541,  540,  538,  518,  514,  513,  496,  509,
      508,  507,  506,  503,  502,  501,  500,  499,  498,  495,
      460,  471,  466,  465,  389,  461,  459,  458,  457,  456,
      455,  454,  453,  452,  451,  450,  449,  448,  447,  411,
      388,  304,  304,  302,  302,  307,  385,  384,  383,  382,
      381,  380,  377,  376,  375,  374,  373,  370,  288,  271,
      271,  271,  259,  259,  259,  247,  247,  247,  229,  229,
      229,  329,  211,  211,  211,  319,  318,  189,  189,  189,
      300,  164,  299,  297,  296,  295,  294,  287,  275,  271,
      271,  263,  259,  259,  251,  247,  247,  240,  229,  229,

      215,  211,  211,  193,  189,  189,  187,  184,  182,  180,
      179,  178,  164,  162,  159,  144,  737,   23,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737
    } ;

static yyconst flex_int16_t yy_chk[2585] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   13,   14,   13,   14,

       30,   31,   36,   31,   42,   36,   43,   46,   47,   45,
       48,   57,   48,   47,   42,   43,   45,   61,   46,   79,
       30,   70,   82,   48,   82,   83,   98,   89,   83,  144,
      101,   57,  101,  102,  145,   79,  111,  160,   61,   46,
      160,   70,   98,  385,   48,  102,   83,   89,  385,   83,
      144,  155,  155,  733,  102,  145,  111,   13,   14,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,

       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   25,   71,   25,   72,   33,   66,   33,
       66,   74,   80,   74,   76,   78,   76,   81,   66,   85,
       91,   85,  113,   93,   72,   93,  120,   99,   80,   85,
       90,  156,  129,   81,   95,  156,   95,  182,   91,  150,
      113,  479,  138,   99,  280,   72,  120,  186,  186,  479,
      149,   80,  129,  350,   81,   71,  150,   71,  182,   91,
      150,  113,  138,  273,   25,   32,   99,   32,   33,   66,
       32,   32,   74,   32,   81,   76,   78,  149,  149,   32,

       85,   90,  350,   90,   93,  732,   32,   32,   32,  280,
      273,   32,   32,   68,   68,   95,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   87,
       87,  730,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,

       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   97,  100,  103,  105,  103,
      105,  112,  107,  122,  171,  172,  108,  172,  105,  107,
      172,  108,  100,  108,  183,  171,  175,  142,  358,  142,
      107,  191,  142,  142,  108,  142,  177,  175,  177,  193,
      122,  177,  729,  100,  122,  183,  171,  285,  142,  191,
      142,  107,  336,  142,  142,  108,  203,  358,  175,  336,

      193,  122,  112,  100,  112,  122,   97,  285,  103,  105,
      109,  109,  203,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  115,  115,  115,  131,
      185,  176,  140,  176,  194,  204,  213,  200,  281,  198,
      200,  215,  216,  728,  176,  393,  292,  462,  462,  231,

      224,  204,  292,  240,  213,  194,  131,  185,  185,  140,
      131,  200,  215,  216,  204,  176,  224,  231,  234,  238,
      234,  238,  234,  238,  240,  234,  238,  131,  140,  140,
      140,  131,  198,  198,  393,  204,  281,  115,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,

      118,  118,  118,  118,  121,  197,  124,  124,  124,  205,
      211,  219,  225,  220,  241,  226,  286,  727,  251,  233,
      464,  197,  236,  305,  252,  205,  233,  219,  225,  236,
      263,  226,  264,  309,  310,  241,  286,  233,  205,  251,
      236,  225,  309,  305,  226,  252,  318,  726,  197,  197,
      310,  263,  318,  264,  219,  219,  220,  220,  233,  205,
      464,  236,  225,  211,  121,  226,  121,  124,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,

      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  130,  229,  133,  133,  133,  235,
      237,  244,  275,  245,  276,  237,  306,  237,  311,  312,
      313,  315,  320,  322,  323,  321,  324,  244,  237,  331,
      337,  320,  395,  275,  365,  276,  306,  337,  311,  312,
      313,  321,  330,  322,  323,  331,  324,  725,  395,  237,
      724,  330,  332,  339,  244,  244,  245,  245,  229,  315,
      339,  332,  235,  365,  130,  722,  130,  133,  136,  136,

      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  139,  256,  141,  157,  141,  157,
      189,  190,  189,  190,  199,  201,  199,  201,  202,  223,
      189,  190,  212,  221,  212,  221,  222,  230,  222,  230,
      232,  268,  212,  248,  248,  248,  326,  230,  249,  232,

      260,  260,  260,  257,  314,  255,  325,  272,  272,  272,
      485,  261,  267,  308,  269,  308,  721,  282,  485,  256,
      719,  341,  335,  308,  139,  249,  139,  141,  157,  249,
      255,  335,  190,  189,  326,  199,  201,  267,  261,  202,
      223,  341,  261,  212,  221,  268,  249,  222,  230,  279,
      249,  314,  232,  325,  248,  257,  257,  255,  255,  261,
      347,  260,  316,  261,  267,  267,  269,  269,  272,  282,
      282,  317,  327,  338,  279,  319,  308,  319,  316,  328,
      334,  345,  338,  340,  319,  342,  343,  317,  327,  334,
      340,  344,  346,  351,  348,  328,  349,  352,  316,  353,

      356,  279,  279,  355,  357,  342,  343,  317,  327,  354,
      359,  360,  362,  347,  348,  328,  349,  346,  316,  345,
      356,  361,  366,  319,  357,  367,  363,  317,  327,  319,
      364,  368,  369,  718,  354,  328,  392,  362,  344,  396,
      394,  407,  334,  401,  352,  346,  363,  408,  403,  351,
      364,  406,  401,  353,  409,  396,  355,  403,  360,  412,
      414,  392,  354,  410,  415,  399,  359,  399,  412,  414,
      409,  423,  367,  415,  399,  361,  406,  417,  366,  410,
      407,  369,  394,  418,  420,  424,  417,  368,  425,  408,
      426,  429,  418,  420,  430,  432,  423,  431,  433,  436,

      439,  438,  442,  437,  470,  444,  443,  449,  467,  445,
      403,  463,  456,  446,  456,  468,  468,  467,  469,  476,
      472,  456,  414,  477,  424,  429,  473,  480,  431,  472,
      425,  474,  438,  436,  478,  473,  442,  426,  481,  417,
      474,  482,  430,  484,  470,  433,  420,  486,  431,  431,
      432,  437,  438,  438,  443,  439,  444,  445,  446,  475,
      475,  449,  487,  477,  463,  478,  483,  483,  483,  488,
      491,  469,  476,  490,  484,  483,  489,  489,  489,  492,
      494,  490,  501,  510,  501,  489,  478,  512,  511,  480,
      482,  501,  481,  516,  504,  484,  504,  511,  513,  515,

      513,  517,  516,  504,  519,  520,  521,  513,  510,  486,
      522,  524,  525,  528,  520,  530,  487,  531,  488,  534,
      536,  526,  526,  526,  515,  532,  532,  532,  492,  519,
      526,  539,  491,  546,  532,  546,  541,  548,  494,  548,
      512,  541,  546,  554,  522,  573,  548,  528,  555,  557,
      556,  556,  556,  534,  517,  580,  561,  555,  557,  521,
      556,  558,  554,  558,  560,  524,  560,  554,  562,  530,
      558,  566,  563,  560,  525,  561,  564,  562,  567,  531,
      561,  563,  536,  539,  568,  564,  570,  567,  569,  577,
      566,  588,  584,  568,  595,  566,  595,  569,  635,  597,

      573,  597,  602,  595,  717,  604,  604,  604,  597,  605,
      580,  610,  651,  556,  570,  604,  714,  577,  605,  570,
      584,  602,  577,  606,  612,  584,  607,  607,  607,  608,
      610,  608,  606,  612,  563,  613,  607,  616,  608,  621,
      614,  618,  619,  620,  613,  622,  568,  626,  588,  614,
      618,  619,  620,  627,  622,  631,  616,  632,  658,  664,
      635,  636,  627,  636,  649,  651,  632,  621,  604,  640,
      636,  640,  646,  649,  646,  626,  668,  672,  640,  652,
      686,  654,  646,  631,  648,  648,  648,  655,  652,  607,
      654,  659,  661,  693,  648,  662,  655,  663,  667,  671,

      659,  661,  614,  699,  662,  620,  663,  667,  671,  684,
      674,  658,  674,  683,  710,  683,  687,  688,  684,  674,
      689,  664,  691,  683,  701,  687,  688,  694,  695,  689,
      703,  691,  696,  686,  709,  646,  694,  695,  668,  672,
      698,  696,  711,  654,  712,  708,  693,  648,  713,  698,
      715,  711,  716,  712,  661,  720,  705,  713,  704,  715,
      720,  716,  702,  700,  692,  699,  685,  682,  680,  679,
      678,  676,  673,  669,  665,  657,  683,  656,  650,  647,
      645,  644,  643,  642,  691,  639,  701,  638,  637,  633,
      629,  628,  703,  624,  623,  617,  615,  611,  603,  601,

      600,  599,  698,  738,  738,  739,  739,  739,  739,  739,
      739,  740,  740,  740,  740,  740,  740,  741,  741,  742,
      742,  594,  742,  742,  742,  743,  592,  743,  743,  744,
      744,  744,  745,  745,  591,  745,  745,  745,  746,  590,
      746,  746,  747,  747,  747,  748,  748,  589,  748,  748,
      748,  749,  749,  749,  749,  749,  749,  750,  750,  750,
      750,  750,  750,  751,  751,  751,  751,  751,  751,  752,
      752,  752,  752,  752,  752,  753,  753,  753,  753,  753,
      753,  754,  754,  754,  754,  754,  754,  755,  755,  755,
      755,  755,  755,  756,  756,  756,  756,  756,  756,  757,

      757,  757,  757,  757,  757,  758,  758,  758,  758,  758,
      758,  759,  759,  759,  759,  759,  759,  760,  760,  760,
      760,  760,  760,  761,  761,  761,  761,  761,  761,  762,
      762,  762,  762,  762,  762,  763,  763,  763,  763,  763,
      763,  764,  764,  764,  764,  764,  764,  765,  765,  765,
      765,  765,  765,  766,  766,  766,  766,  766,  766,  767,
      767,  767,  767,  767,  767,  768,  768,  768,  768,  768,
      768,  769,  769,  769,  769,  769,  769,  770,  770,  770,
      770,  770,  770,  771,  771,  771,  771,  771,  771,  772,
      772,  772,  772,  772,  772,  773,  773,  773,  773,  773,

      773,  774,  774,  774,  774,  774,  774,  775,  775,  775,
      775,  775,  775,  776,  776,  776,  776,  776,  776,  777,
      777,  777,  777,  777,  777,  778,  778,  778,  778,  778,
      778,  779,  779,  779,  779,  779,  779,  780,  780,  780,
      780,  780,  780,  781,  781,  781,  781,  781,  781,  782,
      782,  782,  782,  782,  782,  783,  783,  783,  783,  783,
      783,  784,  784,  784,  784,  784,  784,  587,  585,  582,
      581,  578,  575,  574,  571,  565,  553,  552,  551,  550,
      549,  545,  544,  542,  540,  537,  535,  533,  529,  527,
      523,  518,  514,  509,  508,  507,  506,  503,  502,  500,

      499,  498,  496,  495,  493,  471,  466,  465,  461,  460,
      459,  458,  457,  455,  454,  453,  452,  451,  450,  448,
      447,  411,  398,  397,  389,  388,  384,  383,  382,  381,
      380,  379,  378,  377,  376,  375,  374,  373,  370,  329,
      307,  304,  303,  302,  301,  299,  298,  297,  296,  295,
      294,  293,  291,  290,  289,  288,  287,  284,  283,  278,
      277,  270,  266,  265,  258,  254,  253,  246,  243,  242,
      228,  227,  218,  217,  210,  209,  208,  196,  195,  188,
      165,  163,  158,  154,  153,  152,  151,  148,  137,  135,
      132,  128,  126,  123,  119,  117,  114,  110,  106,  104,

       88,   86,   84,   69,   67,   65,   62,   60,   56,   53,
       52,   51,   39,   38,   35,   29,   23,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737
    } ;

static yyconst flex_int16_t yy_rule_linenum[94] =
    {   0,
       82,   83,   84,   85,   86,   88,   89,   90,   91,   93,
       94,   96,  103,  104,  128,  153,  166,  170,  175,  179,
      182,  184,  190,  214,  216,  224,  231,  238,  245,  252,
      260,  289,  304,  318,  319,  320,  321,  322,  324,  326,
      328,  385,  386,  389,  391,  398,  399,  400,  401,  402,
      403,  404,  405,  406,  407,  408,  409,  410,  411,  412,
      413,  414,  415,  416,  417,  418,  419,  420,  421,  422,
      423,  424,  425,  426,  427,  428,  429,  430,  431,  432,
      433,  434,  439,  444,  453,  455,  457,  459,  460,  470,
      473,  474,  476

    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "aprepro.ll"
/* -*- Mode: c++ -*- */
#line 3 "aprepro.ll"

#include <fstream>
#include <iostream>
#include <sstream>
#include <stack>
#include <stdio.h>
#include <string.h>
#include <fcntl.h> 

#include "apr_scanner.h"
#include "aprepro.h"
#include "apr_util.h"

#define YY_NO_UNISTD_H
/* import the parser's token type into a local typedef */
typedef SEAMS::Parser::token token;
typedef SEAMS::Parser::token_type token_type;

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::END

#define show(x)   printf("<%s>", x);
 namespace SEAMS {
   extern int echo;
   extern char *get_temp_filename(void);
   extern char *pathopen(const char *file);
   extern void  conv_string(const char *string);
   void yyerror(const char *s);
 }
 
int ifdef;
int file_must_exist = 0; /* Global used by include/conditional include */

/* Global variables used by the looping mechanism */
int loop_lvl = 0;
std::fstream *tmp_file;
char  *temp_f;

#define MAX_IF_NESTING 64

 int if_state[MAX_IF_NESTING] = {0}; // INITIAL
 int if_lvl = 0;
 bool suppress_nl = false;
 bool switch_active = false;   // Are we in a switch
 bool switch_case_run = false; // has there been a case which matched condition run?
 bool switch_skip_to_endcase = false;
 double switch_condition = 0.0; // Value specified in "switch(condition)"
 
/*** Flex Declarations and Options ***/
/* enable c++ scanner class generation */
/* change the name of the scanner class. results in "SEAMSFlexLexer" */
/* enable scanner to generate debug output. disable this for release
 * versions. */
/* enables the use of start condition stacks */

#line 1375 "apr_scanner.cc"

#define INITIAL 0
#define PARSING 1
#define GET_FILENAME 2
#define IF_SKIP 3
#define GET_VAR 4
#define VERBATIM 5
#define IF_WHILE_SKIP 6
#define GET_LOOP_VAR 7
#define LOOP 8
#define LOOP_SKIP 9
#define END_CASE_SKIP 10

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 81 "aprepro.ll"

#line 1544 "apr_scanner.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 738 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2518 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 94 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 94 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 95 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 82 "aprepro.ll"
{ BEGIN(VERBATIM);  }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 83 "aprepro.ll"
{ BEGIN(INITIAL);   }
	YY_BREAK
case 3:
#line 85 "aprepro.ll"
case 4:
YY_RULE_SETUP
#line 85 "aprepro.ll"
{ if (echo) ECHO; }
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 86 "aprepro.ll"
{ if (echo) ECHO; aprepro.ap_file_list.top().lineno++;   }
	YY_BREAK
case 6:
#line 89 "aprepro.ll"
case 7:
YY_RULE_SETUP
#line 89 "aprepro.ll"
{ echo = true;	}
	YY_BREAK
case 8:
#line 91 "aprepro.ll"
case 9:
YY_RULE_SETUP
#line 91 "aprepro.ll"
{ echo = false;	}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 93 "aprepro.ll"
{ aprepro.stateImmutable = true;	}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 94 "aprepro.ll"
{ aprepro.stateImmutable = aprepro.ap_options.immutable; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 96 "aprepro.ll"
{ BEGIN(GET_LOOP_VAR);
			      if (aprepro.ap_options.debugging) 
				std::cerr << "DEBUG LOOP - Found loop begin test " << yytext << " in file "
					  << aprepro.ap_file_list.top().name << "\n";

                           }
	YY_BREAK
case 13:
/* rule 13 can match eol */
#line 104 "aprepro.ll"
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 104 "aprepro.ll"
{/* Loop control defined by integer */
                              char *pt = strchr(yytext, ')');
			      *pt = '\0';
			      sscanf (yytext, "%lf", &yylval->val);

			      if (yylval->val <= 0) {
				BEGIN(LOOP_SKIP);
			      }
			      else {/* Value defined and != 0. */
				temp_f = get_temp_filename();
				SEAMS::file_rec new_file(temp_f, 0, true, (int)yylval->val);
				aprepro.ap_file_list.push(new_file);

				if (aprepro.ap_options.debugging) 
				  std::cerr << "DEBUG LOOP VAR = " << aprepro.ap_file_list.top().loop_count
					    << " in file " << aprepro.ap_file_list.top().name
					    << " at line " << aprepro.ap_file_list.top().lineno << "\n";

				tmp_file = new std::fstream(temp_f, std::ios::out);
				loop_lvl++;
				BEGIN(LOOP);
			      }
			      aprepro.ap_file_list.top().lineno++;
                            }
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 128 "aprepro.ll"
{ /* Loop control defined by variable */
                              symrec *s;
			      char *pt = strchr(yytext, ')');
			      *pt = '\0';
			      s = aprepro.getsym(yytext);

			      if (s == 0 || (s->type != token::SVAR && s->type != token::IMMSVAR && s->value.var == 0.)) {
				BEGIN(LOOP_SKIP);
			      }
			      else { /* Value defined and != 0. */
				temp_f = get_temp_filename();
				SEAMS::file_rec new_file(temp_f, 0, true, (int)s->value.var);
				aprepro.ap_file_list.push(new_file);
				
				if (aprepro.ap_options.debugging) 
				  std::cerr << "DEBUG LOOP VAR = " << aprepro.ap_file_list.top().loop_count
					    << " in file " << aprepro.ap_file_list.top().name
					    << " at line " << aprepro.ap_file_list.top().lineno << "\n";

				tmp_file = new std::fstream(temp_f, std::ios::out);
				loop_lvl++;
				BEGIN(LOOP);
			      }
			      aprepro.ap_file_list.top().lineno++;
                             }
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 153 "aprepro.ll"
{ aprepro.ap_file_list.top().lineno++;
				   if (--loop_lvl == 0) {
				     BEGIN(INITIAL);
				     tmp_file->close();
				     delete tmp_file;
				     
				     yyin = aprepro.open_file(aprepro.ap_file_list.top().name, "r");
				     yyFlexLexer::yypush_buffer_state (yyFlexLexer::yy_create_buffer( yyin, YY_BUF_SIZE));
				   }
				   else {
				     (*tmp_file) << yytext;
				   }
				 }
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 166 "aprepro.ll"
{ loop_lvl++; /* Nested Loop */
	                         (*tmp_file) << yytext;
			         aprepro.ap_file_list.top().lineno++;
			        }
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 170 "aprepro.ll"
{ (*tmp_file) << yytext;
 			          aprepro.ap_file_list.top().lineno++;
			        }
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 175 "aprepro.ll"
{ aprepro.ap_file_list.top().lineno++;
					if (--loop_lvl == 0)
					  BEGIN(INITIAL);
				      }
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 179 "aprepro.ll"
{ loop_lvl++; /* Nested Loop */
					aprepro.ap_file_list.top().lineno++;
				      }
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 182 "aprepro.ll"
{ aprepro.ap_file_list.top().lineno++; }
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 184 "aprepro.ll"
{
  yyless(0);
  BEGIN(INITIAL);
  switch_skip_to_endcase = false;
}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 190 "aprepro.ll"
{
 aprepro.ap_file_list.top().lineno++;
 if (!switch_active) {
    yyerror("default statement found outside switch statement.");
  }

  if (!switch_case_run) {
    switch_case_run = true;
    BEGIN(INITIAL);
    switch_skip_to_endcase = false;
    if (aprepro.ap_options.debugging) 
      fprintf (stderr, "DEBUG SWITCH: 'default' code executing at line %d\n",
	       aprepro.ap_file_list.top().lineno);
  } 
  else {
    if (aprepro.ap_options.debugging) 
      fprintf (stderr, "DEBUG SWITCH: 'default' not executing since a previous case already ran at line %d\n",
	       aprepro.ap_file_list.top().lineno);
    
    /* Need to skip all code until end of case */
    BEGIN(END_CASE_SKIP);
  }
}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 214 "aprepro.ll"
{  aprepro.ap_file_list.top().lineno++; }
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 216 "aprepro.ll"
{
  aprepro.ap_file_list.top().lineno++;
  if (!switch_active) {
    yyerror("endswitch statement found without matching switch.");
  }
  switch_active = false;
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 224 "aprepro.ll"
{ if_lvl++; 
    if (aprepro.ap_options.debugging) 
	fprintf (stderr, "DEBUG IF: 'ifdef'  at level = %d at line %d\n",
		 if_lvl, aprepro.ap_file_list.top().lineno);
			   if (if_lvl >= MAX_IF_NESTING)
			     yyerror("Too many nested if statements");
			   if_state[if_lvl] = IF_WHILE_SKIP; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 231 "aprepro.ll"
{ if_lvl++; 
    if (aprepro.ap_options.debugging) 
	fprintf (stderr, "DEBUG IF: 'if (skipped)'  at level = %d at line %d\n",
		 if_lvl, aprepro.ap_file_list.top().lineno);
			   if (if_lvl >= MAX_IF_NESTING)
			     yyerror("Too many nested if statements");
			   if_state[if_lvl] = IF_WHILE_SKIP; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 238 "aprepro.ll"
{ if_lvl++; 
    if (aprepro.ap_options.debugging) 
	fprintf (stderr, "DEBUG IF: 'ifndef' at level = %d at line %d\n",
		 if_lvl, aprepro.ap_file_list.top().lineno);
			   if (if_lvl >= MAX_IF_NESTING)
			     yyerror("Too many nested if statements");
			   if_state[if_lvl] = IF_WHILE_SKIP; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 245 "aprepro.ll"
{ if_lvl++; 
    if (aprepro.ap_options.debugging) 
	fprintf (stderr, "DEBUG IF: 'ifdef'  at level = %d at line %d\n",
		 if_lvl, aprepro.ap_file_list.top().lineno);
			   if (if_lvl >= MAX_IF_NESTING)
			     yyerror("Too many nested if statements");
			   ifdef = 1; BEGIN(GET_VAR); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 252 "aprepro.ll"
{ if_lvl++; 
    if (aprepro.ap_options.debugging)
	fprintf (stderr, "DEBUG IF: 'ifndef' at level = %d at line %d\n",
		 if_lvl, aprepro.ap_file_list.top().lineno);
			   if (if_lvl >= MAX_IF_NESTING)
			     yyerror("Too many nested if statements");
			   ifdef = 0; BEGIN(GET_VAR); }
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 260 "aprepro.ll"
{ symrec *s;
			      char *pt = strchr(yytext, ')');
			      *pt = '\0';
			      s = aprepro.getsym(yytext);
			      if (s == 0 || (s->type != token::SVAR && s->type != token::IMMSVAR && s->value.var == 0.))
				{
				  if (ifdef == 1) {
				    BEGIN(IF_SKIP);
				    if_state[if_lvl] = IF_SKIP;
				  }
				  else {
				    BEGIN(INITIAL);
				    if_state[if_lvl] = INITIAL;
				  }
				}
			      else /* Value defined and != 0. */
				{
				  if (ifdef == 1) {
				    BEGIN(INITIAL);
				    if_state[if_lvl] = INITIAL;
				  }
				  else {
				    BEGIN(IF_SKIP);
				    if_state[if_lvl] = IF_SKIP;
				  }
				}
			      aprepro.ap_file_list.top().lineno++;
			    }
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 289 "aprepro.ll"
{ aprepro.ap_file_list.top().lineno++; 
    if (aprepro.ap_options.debugging) 
	fprintf (stderr, "DEBUG IF: 'else'   at level = %d at line %d\n",
		 if_lvl, aprepro.ap_file_list.top().lineno);
    if (if_state[if_lvl] == IF_SKIP) {
      if_state[if_lvl] = INITIAL;
      BEGIN(INITIAL);
    }
    else if (if_state[if_lvl] == INITIAL) {
      if_state[if_lvl] = IF_SKIP;
      BEGIN(IF_SKIP);
    }
    /* If neither is true, this is a nested 
       if that should be skipped */
}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 304 "aprepro.ll"
{ if (if_state[if_lvl] == IF_SKIP ||
			       if_state[if_lvl] == INITIAL)
			     BEGIN(INITIAL);
			   /* If neither is true, this is a nested 
			      if that should be skipped */
    if (aprepro.ap_options.debugging) 
	printf ("DEBUG IF: 'endif'  at level = %d at line %d\n",
		if_lvl, aprepro.ap_file_list.top().lineno);
			   if (--if_lvl < 0) {
			     if_lvl = 0;
			     yyerror("Improperly Nested ifdef/ifndef statements");
			   }
			   aprepro.ap_file_list.top().lineno++;  
			   /* Ignore endif if not skipping */ }
	YY_BREAK
case 34:
#line 319 "aprepro.ll"
case 35:
#line 320 "aprepro.ll"
case 36:
#line 321 "aprepro.ll"
case 37:
YY_RULE_SETUP
#line 321 "aprepro.ll"
{ ; }
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 322 "aprepro.ll"
{ aprepro.ap_file_list.top().lineno++; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 324 "aprepro.ll"
{ BEGIN(GET_FILENAME); 
                             file_must_exist = true; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 326 "aprepro.ll"
{ BEGIN(GET_FILENAME);
                             file_must_exist = !true; }
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 328 "aprepro.ll"
{ BEGIN(INITIAL); 
			     {
			       symrec *s;
			       int quoted = false;
			       std::fstream *yytmp;
			       char *pt = strchr(yytext, ')');
			       *pt = '\0';
			       /* Check to see if surrounded by double quote */ 
			       if ((pt = strchr(yytext, '"')) != NULL) {
				 yytext++;
				 quoted = true;
			       }
			       if ((pt = strrchr(yytext, '"')) != NULL) {
				 *pt = '\0';
				 quoted = true;
			       }

			       if (quoted == false) {
				 /* See if this is an aprepro variable referring to a name */
				 s = aprepro.getsym(yytext);
				 if (s == 0 || (s->type != token::SVAR && s->type != token::IMMSVAR)) {
				   pt = yytext;
				 } else {
				   pt = (char*)s->value.svar;
				 }
			       } else {
				 pt = yytext;
			       }
			       
			       if (file_must_exist)
				 yytmp = aprepro.open_file(pt, "r");
			       else
				 yytmp = aprepro.check_open_file(pt, "r");
			       if (yytmp != NULL) {
				 yyin = yytmp;
				 if (aprepro.ap_options.info_msg == true) {
				   std::cerr << "Aprepro: INFO: Included File: '"
					     << pt << "' (" << aprepro.ap_file_list.top().name
					     << ", line " << aprepro.ap_file_list.top().lineno
					     << ")\n";
				 }
				 SEAMS::file_rec new_file(pt, 0, false, 0);
				 aprepro.ap_file_list.push(new_file);

				 yyFlexLexer::yypush_buffer_state (
				    yyFlexLexer::yy_create_buffer( yyin, YY_BUF_SIZE));
			       } else {
				 if (aprepro.ap_options.warning_msg == true) {
				   std::cerr << "Aprepro: WARN: Can't open '"
					     << yytext << "'\n";
				 }
			       }
			       aprepro.ap_file_list.top().lineno++;
			     }
			   }
	YY_BREAK
case 42:
#line 386 "aprepro.ll"
case 43:
YY_RULE_SETUP
#line 386 "aprepro.ll"
{ sscanf (yytext, "%lf", &yylval->val);
                             return(token::NUM); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 389 "aprepro.ll"
; /* Empty Rule */
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 391 "aprepro.ll"
{ symrec *s;
			     s = aprepro.getsym(yytext);
			     if (s == 0)
			       s = aprepro.putsym (yytext, SEAMS::Aprepro::UNDEFINED_VARIABLE, 0);
			     yylval->tptr = s;
			     return((token::yytokentype)s->type);
			   }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 398 "aprepro.ll"
return(token::EQUAL);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 399 "aprepro.ll"
return(token::EQ_PLUS);
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 400 "aprepro.ll"
return(token::EQ_MINUS);
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 401 "aprepro.ll"
return(token::EQ_TIME);
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 402 "aprepro.ll"
return(token::EQ_DIV);
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 403 "aprepro.ll"
return(token::EQ_POW);
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 404 "aprepro.ll"
return(token::EQ_POW);
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 405 "aprepro.ll"
return(token::INC);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 406 "aprepro.ll"
return(token::DEC);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 407 "aprepro.ll"
return(token::PLU);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 408 "aprepro.ll"
return(token::SUB);
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 409 "aprepro.ll"
return(token::TIM);
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 410 "aprepro.ll"
return(token::TIM);		/* ~ is same as multiply */
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 411 "aprepro.ll"
return(token::CONCAT);	/* String concatenation */
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 412 "aprepro.ll"
return(token::DIV);
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 413 "aprepro.ll"
return(token::MOD);
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 414 "aprepro.ll"
return(token::POW);
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 415 "aprepro.ll"
return(token::POW);
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 416 "aprepro.ll"
aprepro.ap_file_list.top().lineno++;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 417 "aprepro.ll"
return(token::LPAR);
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 418 "aprepro.ll"
return(token::RPAR);
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 419 "aprepro.ll"
return(token::COMMA);
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 420 "aprepro.ll"
return(token::SEMI);
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 421 "aprepro.ll"
return(token::COLON);
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 422 "aprepro.ll"
return(token::QUEST);
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 423 "aprepro.ll"
return(token::LT);
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 424 "aprepro.ll"
return(token::GT);
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 425 "aprepro.ll"
return(token::LE);
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 426 "aprepro.ll"
return(token::GE);
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 427 "aprepro.ll"
return(token::EQ);
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 428 "aprepro.ll"
return(token::NE);
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 429 "aprepro.ll"
return(token::LAND);
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 430 "aprepro.ll"
return(token::LOR);
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 431 "aprepro.ll"
return(token::NOT);
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 432 "aprepro.ll"
return(token::LBRACK);
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 433 "aprepro.ll"
return(token::RBRACK);
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 434 "aprepro.ll"
{ char *pt = strrchr(yytext, '"');
			     *pt = '\0';
                             new_string(yytext+1, &yylval->string);
			     return token::QSTRING; }
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 439 "aprepro.ll"
{ char *pt = strrchr(yytext, '\'');
			     *pt = '\0';
                             new_string(yytext+1, &yylval->string);
			     return token::QSTRING; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 444 "aprepro.ll"
{
  if (switch_skip_to_endcase)
    BEGIN(END_CASE_SKIP);
  else
    BEGIN(if_state[if_lvl]);
  return(token::RBRACE);
}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 453 "aprepro.ll"
{ if (echo) LexerOutput("{", 1); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 455 "aprepro.ll"
{ if (echo) LexerOutput("}", 1); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 457 "aprepro.ll"
{ BEGIN(PARSING); return(token::LBRACE);  }
	YY_BREAK
case 88:
#line 460 "aprepro.ll"
case 89:
YY_RULE_SETUP
#line 460 "aprepro.ll"
{ if (aprepro.ap_options.end_on_exit)
			       {
				 if (echo) ECHO;
				 return((token::yytokentype)-1);  
			       }
                              else 
                               if (echo) ECHO;
			   }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 470 "aprepro.ll"
{ if (echo) ECHO; }
	YY_BREAK
case 91:
#line 474 "aprepro.ll"
case 92:
YY_RULE_SETUP
#line 474 "aprepro.ll"
{ if (echo) ECHO; }
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 476 "aprepro.ll"
{ if (echo && !suppress_nl) ECHO; suppress_nl = false; 
                             aprepro.ap_file_list.top().lineno++; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 479 "aprepro.ll"
ECHO;
	YY_BREAK
#line 2393 "apr_scanner.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(PARSING):
case YY_STATE_EOF(GET_FILENAME):
case YY_STATE_EOF(IF_SKIP):
case YY_STATE_EOF(GET_VAR):
case YY_STATE_EOF(VERBATIM):
case YY_STATE_EOF(IF_WHILE_SKIP):
case YY_STATE_EOF(GET_LOOP_VAR):
case YY_STATE_EOF(LOOP):
case YY_STATE_EOF(LOOP_SKIP):
case YY_STATE_EOF(END_CASE_SKIP):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	SEAMSfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	SEAMSfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					SEAMSrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) SEAMSrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 738 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 738 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 737);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) SEAMSalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) SEAMSalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		SEAMSfree((void *) b->yy_ch_buf  );

	SEAMSfree((void *) b  );
}

/* %if-c-only */
/* %endif */

/* %if-c++-only */

extern "C" int isatty (int );

/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)SEAMSalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)SEAMSrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) SEAMSalloc(new_size  );

		else
			(yy_start_stack) = (int *) SEAMSrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *SEAMSalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *SEAMSrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void SEAMSfree (void * ptr )
{
	free( (char *) ptr );	/* see SEAMSrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 479 "aprepro.ll"



/* When the scanner receives an end-of-file indication from YY_INPUT, it then
 * checks the yywrap() function. If yywrap() returns false (zero), then it is
 * assumed that the function has gone ahead and set up `yyin' to point to
 * another input file, and scanning continues. If it returns true (non-zero),
 * then the scanner terminates, returning 0 to its caller. */

namespace SEAMS {

  Scanner::Scanner(Aprepro& aprepro_yyarg,
		   std::istream* in,
		   std::ostream* out)
    : SEAMSFlexLexer(in, out), aprepro(aprepro_yyarg)
  {
    aprepro.outputStream.push(out);
  }

  Scanner::~Scanner()
  { }

  void Scanner::LexerOutput(const char* buf, int size )
  {
    aprepro.outputStream.top()->write( buf, size );
    if (aprepro.ap_options.interactive && aprepro.outputStream.size() == 1) {
      // In interactive mode, output to stdout in addition to the
      // output stream, unless user has redirected output...
      std::cout << buf;
    }
  }

  int Scanner::yywrap()
  {
    if (aprepro.ap_file_list.size() <= 1) {		/* End of main file, not in nested include */
      return (1);
    }
    else {
      /* We are in an included or looping file */
      if (aprepro.ap_file_list.top().tmp_file) {
	if (aprepro.ap_options.debugging)
	  std::cerr << "DEBUG LOOP: Loop count = " << aprepro.ap_file_list.top().loop_count << "\n";
	if (--aprepro.ap_file_list.top().loop_count <= 0)  {
	  if (strcmp("_string_", aprepro.ap_file_list.top().name.c_str()) != 0) {
	    if (!aprepro.ap_options.debugging)
	      remove(aprepro.ap_file_list.top().name.c_str());	/* Delete file if temporary */
	  }
	  delete yyin;
	  aprepro.ap_file_list.pop(); 
	  yyFlexLexer::yypop_buffer_state();
	}
	else {
	  // Do not pop ap_file_list; we are rereading that file...
	  delete yyin;
	  yyFlexLexer::yypop_buffer_state();
	  yyin = aprepro.open_file(aprepro.ap_file_list.top().name, "r");
	  yyFlexLexer::yypush_buffer_state (yyFlexLexer::yy_create_buffer(yyin, YY_BUF_SIZE));
	  aprepro.ap_file_list.top().lineno = 0;
	}
      }
      else {
	delete yyin;
	yyFlexLexer::yypop_buffer_state();
	aprepro.ap_file_list.pop();
	/* Turn echoing back on at end of included files. */
	echo = true;
	/* Set immutable mode back to global immutable 
	 * state at end of included file
	 */
	aprepro.stateImmutable = aprepro.ap_options.immutable;	
      }
      return (0);
    }
  }

  /* Print error message to standard error and return.  Note: internally
   *   'lineno' starts at zero.  To avoid confusion, we add 1 to value
   *   when it is output.
   */

  void Scanner::yyerror (const char *s)
  {
    std::cerr << "Aprepro: ERROR:  " << s << " ("
	      << aprepro.ap_file_list.top().name<< ", line "
	      << aprepro.ap_file_list.top().lineno + 1 << ")\n";
  }

  char *Scanner::execute (char string[])
  {
    /* Push the contents of 'string' onto the stack to be reread.
     * 'string' will be surrounded by {} so it must be a valid expression.
     */

    /*
     * NOTE: The closing } has not yet been scanned in the call to execute();
     *       therefore, we read it ourselves using input(), then we push:
     *       '}{' + our string + '}' 
     */
    int i;
    while ((i = yyFlexLexer::yyinput ()) != '}' && i != EOF)
      ;				/* eat up values */

    /* Allocate space for string + '}' + '{' + end_of_string */
    std::string new_string;
    new_string += "}{";
    new_string += string;
    new_string += "}";

    aprepro.ap_file_list.push(SEAMS::file_rec("_string_", 0, true, -1));
  
    std::istringstream *ins = new std::istringstream(new_string); // Declare an input string stream.
    yyFlexLexer::yypush_buffer_state(yyFlexLexer::yy_create_buffer(ins, new_string.size()));
    return (NULL);
  }

  /* Push the contents of 'string' onto the stack to be reread.
   * 'string' will not be surrounded by {}.
   */

  char *Scanner::rescan (char *string)
  {
    int i;
    /*
     * NOTE: The closing } has not yet been scanned in the call to rescan();
     *       therefore, we read it ourselves using input(), then we push our
     *       string and then put the closing } back on the stack last
     *       (to be read first),
     */
    while ((i = yyFlexLexer::yyinput ()) != '}' && i != EOF)
      ;				/* eat up values */
    {
      aprepro.ap_file_list.push(SEAMS::file_rec("_string_", 0, true, -1));
      std::string new_string("}");
      new_string += string;

      std::istringstream *ins = new std::istringstream(new_string); // Declare an input string stream.
      yyFlexLexer::yypush_buffer_state(yyFlexLexer::yy_create_buffer(ins, new_string.size()));
    }
    return (NULL);
  }

  char *Scanner::if_handler(double x)
  {
    if_lvl++;
    if (if_lvl >= MAX_IF_NESTING)
      yyerror("Too many nested if statements");

    if (x == 0) {
      if_state[if_lvl] = IF_SKIP;
    } else {
      suppress_nl = true;
      if_state[if_lvl] = INITIAL;
    }
    if (aprepro.ap_options.debugging) 
      std::cerr << "DEBUG IF: If level " << if_lvl << " " << if_state[if_lvl] << "\n"; 
    return(NULL);
  }

  char *Scanner::switch_handler(double x)
  {
    // save that we are in a switch statement
    // save the value of 'x' for use in deciding which case to execute
    if (switch_active) {
      yyerror("switch statement found while switch already active. Nested switch not supported.");
    }

    switch_active = true;
    switch_case_run = false;
    switch_condition = x;
    switch_skip_to_endcase = true; /* Skip everything until first case */
    suppress_nl = true;

    if (aprepro.ap_options.debugging) {
      std::cerr << "DEBUG SWITCH: 'switch' with condition = " << switch_condition
		<< " at line " << aprepro.ap_file_list.top().lineno << "\n";
    }
    return(NULL);
  }

  char *Scanner::case_handler(double x)
  {
    // make sure we are in a switch statement 
    // if 'x' matches the value saved in the switch statement 
    // and no other case has been executed, then
    // execute the code in the case and set a flag indicating
    // the switch has run;
    // if 'x' does not match the value saved, then skip to endcase
    suppress_nl = true;

    if (!switch_active) {
      yyerror("case statement found outside switch statement.");
    }

    if (!switch_case_run && x == switch_condition) {
      switch_case_run = true;
      if (aprepro.ap_options.debugging) 
	fprintf (stderr, "DEBUG SWITCH: 'case' condition = %g matches switch condition = %g at line %d\n",
		 x, switch_condition, aprepro.ap_file_list.top().lineno);
    } 
    else {
      if (aprepro.ap_options.debugging) 
	fprintf (stderr, "DEBUG SWITCH: 'case' condition = %g does not match switch condition = %g (or case already matched) at line %d\n",
		 x, switch_condition, aprepro.ap_file_list.top().lineno);

      // Need to skip all code until end of case
      switch_skip_to_endcase = true;
    }
    return(NULL);
  }
}

/* This implementation of ExampleFlexLexer::yylex() is required to fill the
 * vtable of the class ExampleFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the Scanner class instead. */

#ifdef yylex
#undef yylex
#endif
int SEAMSFlexLexer::yylex()
{
    std::cerr << "in ExampleFlexLexer::yylex() !" << std::endl;
    return 0;
}

/* When the scanner receives an end-of-file indication from YY_INPUT, it then
 * checks the yywrap() function. If yywrap() returns false (zero), then it is
 * assumed that the function has gone ahead and set up `yyin' to point to
 * another input file, and scanning continues. If it returns true (non-zero),
 * then the scanner terminates, returning 0 to its caller. */

int SEAMSFlexLexer::yywrap()
{
    return 1;
}




