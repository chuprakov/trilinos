'plantUML input file
'Class diagram for Problem
'

@startuml

class "Problem<Scalar, LNO, GNO, AppGID>" as Problem
class "OrderingProblem<>" as OrderingProblem
class "PartitioningProblem<>" as PartitioningProblem
class "ColoringProblem<>" as ColoringProblem

class Problem{
InputAdapter &input
Teuchos::ParameterList &params
Teuchos::ParameterList &legacyZoltanParams
Objective &object

virtual void setParameters()
virtual void setInput()
virtual void setObjective()

virtual void solve()
virtual void evaluate()
virtual void getMapping()
}

class ColoringProblem{
void solve()
void doColoring() { solve(); }
void evaluate()
void getMapping()
void getColors() { getMapping(); }
void getNumberOfColors()
}

note bottom of PartitioningProblem
In addition to getParts(), getExportList(),
and getImportList(), another 
solution type has been proposed: 
an iterator over IDs in a partition
end note

class PartitioningProblem{
void solve()
void doPartitioning() { solve(); }
void evaluate()
void getMapping()
void getParts() { getMapping(); }
void getExportList()
void getImportList()
void pointAssign()
void boxAssign()
void getRcbBox()
void getRcbTree()
}


' NEW FUNCTIONALITY  getRcbTree

note bottom of OrderingProblem
In addition to getOrder(), another
solution type has been proposed: 
an iterator over the graph vertices
end note

class OrderingProblem{
void solve()
void doOrdering() { solve(); }
void evaluate()
void getMapping()
void getOrder() { getMapping(); }
void getNumberOfBlocks()
void getBlockBounds()
void getBlockSize()
void getBlockParent()
void getNumberOfLeaves()
void getBlockLeaves()
}

Problem <|-- ColoringProblem
Problem <|-- OrderingProblem 
Problem <|-- PartitioningProblem

@enduml

