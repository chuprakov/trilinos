// @HEADER
// ***********************************************************************
//
//                Copyright message goes here.   TODO
//
// ***********************************************************************
// @HEADER

/*! \file Zoltan2_Standards.hpp

    \brief Gathering definitions used in software development.
*/

#ifndef _ZOLTAN2_STANDARDS_HPP_
#define _ZOLTAN2_STANDARDS_HPP_

//////////////////////////////////////////
// Generated by CMake
#include <Zoltan2_config.h>

//////////////////////////////////////////
// For int*_t, INT*_MAX, INT*_MIN
//
// TODO: If the application includes stdint.h
//   before including the Zoltan2 header file,
//   then it is likely that __STD_LIMIT_MACROS
//   was not defined, and the INT*_MAX/MIN will
//   also not be defined.

#define __STDC_LIMIT_MACROS
#include <stdint.h>

//////////////////////////////////////////
// Frequently used Trilinos symbols

#include <Tpetra_ConfigDefs.hpp>

namespace Zoltan2{
using Tpetra::global_size_t;
}

#include <Teuchos_RCP.hpp>
#include <Teuchos_Array.hpp>
#include <Teuchos_ArrayRCP.hpp>
#include <Teuchos_ArrayView.hpp>
#include <Teuchos_ParameterList.hpp>
#include <Teuchos_ParameterEntry.hpp>
#include <Teuchos_DefaultComm.hpp>
#include <Teuchos_Comm.hpp>
#include <Teuchos_CommHelpers.hpp>

namespace Zoltan2{
using Teuchos::RCP;
using Teuchos::rcp;
using Teuchos::rcp_const_cast;
using Teuchos::rcp_implicit_cast;
using Teuchos::rcp_dynamic_cast;
using Teuchos::Array;
using Teuchos::ArrayRCP;
using Teuchos::arcp_const_cast;
using Teuchos::arcp_reinterpret_cast;
using Teuchos::arcp;
using Teuchos::ArrayView;
using Teuchos::av_const_cast;
#ifdef HAVE_MPI
using Teuchos::MpiComm;
#endif
using Teuchos::Comm;
using Teuchos::SerialComm;
using Teuchos::DefaultComm;
using Teuchos::CommRequest;
using Teuchos::ParameterList;
using Teuchos::ParameterEntry;
using Teuchos::reduceAll;
}

//////////////////////////////////////////////////////
// Internal macros and methods
//////////////////////////////////////////////////////

// Exception handling macros
#include <Zoltan2_Exceptions.hpp>

// Templating macros
#include <Zoltan2_TemplateMacros.hpp>

// Memory allocation macros
#include <Zoltan2_Memory.hpp>

//////////////////////////////////////////////////////
// Until Kokkos node types are supported, use default
//////////////////////////////////////////////////////

#include <Kokkos_DefaultNode.hpp>

namespace Zoltan2{
typedef Kokkos::DefaultNode::DefaultNodeType default_node_t;
}

#endif
