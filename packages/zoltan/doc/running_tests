Using the Framework for Agile Software Testing (FAST)
for testing Zoltan interactively.

----------------------------------------------------
Part 0: Installing FAST
----------------------------------------------------

Get FAST, putting the test harness into ~/zoltan-th
	$ cd $HOME
	$ svn checkout https://software.sandia.gov/
		svn/public/exact/zoltan-th/trunk zoltan-th

    If svn hangs, it probably needs the proxy settings fixed in
    $HOME/.subversion/servers.  Break out of svn, and fix this at the
    bottom of the file in the [global] section and try again.
	[global]
	http-proxy-host = wwwproxy.sandia.gov
	http-proxy-port = 80

    Some machines don't have svn installed -- see your system admin
    to get it set up.

    The program you need for interactive testing is "exact", a python
    script located at $HOME/zoltan-th/fast/exact/src/exact/exact.
    The easiest way is to set an alias for this.
	$ alias exact=~/zoltan-th/fast/exact/src/exact/exact
    (or in csh)
	% alias exact ~/zoltan-th/fast/exact/src/exact/exact
    
    You also might need to specify the location of mpirun.
    (seamus and paunchy use
    "/Net/local/mpi/build/solaris/ch_p4/bin/mpirun -np")

	$ export EXACT_DRIVER="/usr/local/mpirun -np"
    (or in csh)
	% setenv EXACT_DRIVER "/usr/local/mpirun -np"

----------------------------------------------------
Part 1: Running interactively
----------------------------------------------------

    make and compile zoltan normally.  Assuming ZOLTAN_ARCH=gcc
	$ cd Zoltan
	$ gmake ZOLTAN_ARCH=gcc zdrive
	...

    create the basic teststudy files with the following command:
	$ cd test
	$ csh -f mktests

    mktests looks to see what zdrives have been compiled (Obj_ZARCH),
    then searches each subdirectory in Zoltan/test for zdrive.inp files,
    and makes a "study" file for each zdrive found.  In this case, it
    will create test.gcc.nightly.study.xml and test.gcc.smoke.study.xml
    in each subdirectory, if they don't already exist.  It also creates
    a checksum for the answers found.  This command needs to be run
    only once unless the answer files change or new ones are added.

    You can modify zoltan.tests or zoltan.tests.smoke to make your own
    zdrive.inp sets.  zoltan.tests.smoke contains only one test (usually
    the first input file found) to run a single test instead of the
    entire suite.

    You can also modify or copy test.gcc.smoke.study.xml to point to a
    different zoltan.tests file.

    Run a simple test (smoke test) to see if things are working:
	$ cd hg_simple
	$ exact hg_simple.gcc.smoke.study.xml

    or run the full test, similar to test_zoltan
	$ cd hg_simple
	$ exact -f hg_simple.gcc.nightly.study.xml

    (Use -f to overwrite previous test runs.)

    Output for the nightly run should look similar to this:
Experiment: gcc.nightly.exp1 ..........................................................
Analysis:   checksums.exp1 ........................F.................................
ID=25 Comb= numproc np=4 zdrive gcc zinput phg.initial_distribution.serial 
  Bad boolean statistic

    ('.' means pass, 'F' means failed)

    You can see phg.initial_distribution.serial failed the expected
    answers.  "Bad boolean statistic" in this case means simply that
    the checksum of the answers did not match.

    The experimental output is in a subdirectory of the experiment name,
    in this case "hg_simple.gcc.nightly/exp1".  
    Note ID=25 in the failure message,
    and you can examine the output with appropriate substitutions in
    hg_simple.gcc.nightly/exp1/gcc.nightly.exp1_25.0.out to see why it failed
    or the full program output in gcc.nightly.exp1_25.0.log.xml.

KDD:  Actually, the name of the output directory differed significantly
KDD:  on two platforms.  On seamus, it was hg_simple.gcc.nightly.  On my
KDD:  mac, it was hg_simple.  Why is there a difference?

SYC: I don't know... I need to see what OSX is doing.

KDD:  The stdout and stderr are in the xml file -- Good!  
KDD:  The numbering scheme is a little clumsy, but we can probably get used
KDD:  to it.
KDD:  I don't understand the contents of the out file.

    The checksum could fail because the answer file doesn't exist, or
    that the answers are different.  Specifically, it looks at the
    parser output of "AllPass" to see whether all output files passed
    the checksum test.  If AllPass is 0, it will fail, but "exit_comment"
    will have extra information on failures.  The parser can also crash,
    in which case the output files will have the reasons why.

KDD:  Can I run all the test subdirectories with one command, without
KDD:  having to into each subdirectory separately?  Should I just do
KDD:  Part 2 below without the cron job?  Or will that archive data to the
KDD:  CVS repository?

SYC: It's possible to run multiple tests at once, but they need to be run
SYC: from the same subdirectory.  (long story cut, I'll have to explain with
SYC: example)


----------------------------------------------------
Part 2: running regression tests
----------------------------------------------------

    Nightly regression tests can be installed on different platforms.
    A full writeup on FAST for generic systems is forthcoming, but in
    short, you simply edit the zoltan-th/config and have a cron job
    run zoltan-th/run_fast in that directory.

    Mostly it involves checking out (via svn) zoltan-th, updating
    config.fast, then creating a cron line to invoke run_fast
    (via crontab -e).

    The file zoltan.build will checkout the current repository, build,
    and run the system.  The system will summarize the tests in the
    next email at 8am through a cron script installed on software.
    run_fast can also be started manually, and the results will be
    added to the next email.  The config file (test/th/config.fast) must
    have the current hostname and the tests to run checked into the
    repository.  The list of hosts in config.fast are comma-separated,
    so if you use the same config, you should add the host to the line
    instead of creating a whole new entry.  Different ZOLTAN_ARCH should
    have different entries.

    The cron line used on seamus is (all one line):
    5 0 * * * (cd $HOME/zoltan-th; EXACT_DRIVER="/usr/local/bin/mpirun -np";
	export EXACT_DRIVER; ./run_fast) > $HOME/zoltan-th/cron.out 2>&1


----------------------------------------------------
Part 3: details details details
----------------------------------------------------

Special files of note:
----------------------------------------------------

zoltan.tests
zoltan.tests.smoke
  These files are referenced by *.study.xml and created by mktests.
  A sample zoltan.tests is:
      zinp=../hg_simple/zdrive.inp.phg _level_name=phg
      zinp=../hg_simple/zdrive.inp.phg.addobjwgt _level_name=phg.addobjwgt

  This means it will run two experiments (one per line), using zinput files
  of ../hg_simple/zdrive.inp.phg and ../hg_simple/zdrive.inp.phg.addobjwgt.
  The _level_name=xxx is so that the analysis output states what input
  failed, instead of just a cryptic ID=25.

  These input files are initially created by Zoltan/tests/mktests.  If you
  want to recreate, simply delete the zoltan.tests* and rerun mktests from
  the Zoltan/test directory.  You can also make up your own list of zinput
  files by modifying this file.  mktests should not overwrite an existing
  zoltan.test file.

[subdirectory_name].gcc.nightly.study.xml
[subdirectory_name].gcc.smoke.study.xml
  These are also created by mktests, by making substitutions in
  Zoltan/test/test.study.xml file.  These define the test study, and
  can be changed as needed.  Be careful running mktests, as it can
  overwrite changes.

NUMPROC
  This is a file with the number of processors to use.  If this file
  is missing from a test directory, it assumes 4 processors.  It's
  also possible to add the number of processors to the zoltan.tests
  file, by adding np=N on a particular line in the zoltan.tests file
  (e.g. np=6).  This will probably fail the checksum tests, unless the
  answerfiles for that many processors existed when you ran mktests.

checksums
  This is a list of the checksums of all the files in the answers
  directory, created by mktests.  Currently, the output isn't saved and
  merely compared to the checksum, but this behavior might change so
  that you can see the output when something failed.

KDD:  Does the checksum test respect the fact that, for some test problems,
KDD:  we have different answer files for different architectures?
KDD:  (These differences normally arise due to different random number
KDD:  generators on different architectures.)
KDD:  See, for example, Zoltan/test/ch_ewgt/answers/*linux.

SYC: Not at this time, unfortunately.  I should add a "suffix" variable
SYC: like I did with test_zoltan a while back.

Environment variables:
----------------------------------------------------

EXACT_DRIVER
  This is the mpirun command.  It defaults to "mpirun -np" and should
  be set to the appropriate command in the cron script, or your own
  environment.

ZOLTAN_ARCH
  gcc,sun,solaris,linux,linux64,etc

ZOLTAN_ZDRIVE
  If you set ZOLTAN_ARCH, generally don't set this.  It is set based on
  ZOLTAN_ARCH to the default zdrive.  Set this if you need to run a specific
  zdrive in a nonstandard location.  It looks like "../../Obj_gcc/zdrive"
  or a full pathname.


Other files:
----------------------------------------------------

test/th/config.fast	- for nightly regression tests (machine/study pairs)
test/th/zoltan.build	- for nightly regression tests (list of test dirs)
test/th/codechecks.cfg	- for nightly regression tests (bugzilla password)

test/EXPNAME/*.study.xml	- describes the tests to run, executable, etc
test/bin/exp.zoltan.pl		- launcher and parser for zoltan output

test/EXPNAME/EXPNAME/*	- output from testing

test/test.study.xml	- skeleton study file used by mktests
test/mktests		- creates test/*/zoltan.tests *.study.xml checksums
----------------------------------------------------
