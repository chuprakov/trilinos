Using the Framework for Agile Software Testing (FAST)
for testing Zoltan interactively.


----------------------------------------------------
Part 0: Installing FAST
----------------------------------------------------

See other file 'running_tests' for standard testing.
This file substitutes Part 1, which sets up your environment for
running the big tests.


----------------------------------------------------
Part 1: Running interactively
----------------------------------------------------

    make and compile zoltan normally.  Assuming ZOLTAN_ARCH=gcc
	$ cd Zoltan
	$ gmake ZOLTAN_ARCH=gcc zdrive
	...


    set up the Zoltan_Tests directory, which should be checked
    out of the repository.  Assuming ~/Zoltan_Tests:
	$ cd
    	$ cvs checkout -P Zoltan_Tests

    cvs checkouts take a while due to the size.

    You will also need to uncompress the data files.
    Using xyce as an example:
	$ cd Zoltan_Tests/xyce
	$ gunzip *.gz

    create the basic teststudy files with the following command:
	$ cd ~/Zoltan_Tests
	$ csh -f mktests

    Whoa!  mktests might have given an error saying you must set the
    environment variable where Zoltan was compiled.  This is because
    Zoltan_Tests could be anywhere, without relation to where Zoltan
    was compiled or which branch you want to use.  Set this directory,
    substituting in the appropriate location of Zoltan:
    	$ export ZOLTAN_DIR="~/Zoltan"
    or in csh
    	% setenv ZOLTAN_DIR "~/Zoltan"

    Rerun mktests.

    mktests looks to see what zdrives have been compiled (Obj_ZARCH),
    then searches each subdirectory in Zoltan_Tests/* for zdrive.inp files,
    and makes a "study" file for each zdrive found.  In this case, it
    will create test.gcc.nightly.study.xml and test.gcc.smoke.study.xml
    in each subdirectory, if they don't already exist.  It also creates
    a baselines.study.xml file, to create a set of baselines for the tests.

    Baselines are, essentially, the answers you want and future tests will
    report major differences from these baselines.  These include variables
    such as Cutl and Cutn averages, and others.  Look in the analysis
    section of the *study.xml file to see what values are being examined.

    Now we need to create baselines, if they don't yet exist.  Using xyce
    as an example,
    	$ cd ~/Zoltan_Tests/xyce
	$ exact -f baselines.study.xml
    The -f argument to exact specifies to overwrite any existing data files.

    Output will be similar to:
      Experiment: baselines.gcc ....
    
    This creates a directory, baselines/gcc, or whatever architecture that
    mktests found in the ZOLTAN_DIR directory.  In that you'll find files like:
    baselines.gcc_1.0.log.xml  baselines.gcc_1.0.out  baselines.gcc_2.0.log.xml
    baselines.gcc_2.0.out  baselines.gcc.results.xml

    The baselines that will be used are in baselines.gcc.results.xml.  It will
    look in the test directory for this, so move it there.

        $ mv baselines/gcc/baselines.gcc.results.xml .

    Baselines need to be created only once for each architecture, unless new
    tests are added, or perhaps the baselines change.  The results file (but
    not the log or output files) may be stored in the repository, and the
    appropriate architecture will be used.

    You can modify zoltan.tests or zoltan.tests.smoke to make your own
    zdrive.inp sets, but you will need to make baselines for any new input
    files.  zoltan.tests.smoke contains only one test (usually the first
    input file found) to run a single test instead of the entire suite.

    You can also modify or copy gcc-xyce-nightly.study.xml to point to a
    different zoltan.tests file.

    Now that we have baselines, we can run a simple test.
	$ exact -f gcc-xyce-smoke.study.xml

    or run the full test, similar to test_zoltan
	$ exact -f gcc-xyce-smoke.study.xml

    ----------------------------------------------------
    At this point, you should consult the running_tests document.
    Your Zoltan_Tests environment should now behave similarly.
    ----------------------------------------------------

