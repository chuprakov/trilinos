!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.6	//
-with-ZoltanArch	makefile	/^	cd ZoltanComponent ; .\/configure --with-ZoltanArch=$(ZOLTAN_ARCH) ; make ; cd ..$/;"	m
10	fdriver/mmio.f	/^ 10         continue$/;"	l	subroutine:mmwrite	file:
10	fdriver/mmio.f	/^ 10   call getwd(tmp2,string,1024,next,next,wordlength)$/;"	l	subroutine:countwd	file:
10	fdriver/mmio.f	/^ 10   continue$/;"	l	subroutine:lowerc	file:
10	fdriver/mmio.f	/^ 10   continue$/;"	l	subroutine:mminfo	file:
10	fdriver/mmio.f	/^ 10   continue$/;"	l	subroutine:mmread	file:
10	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/symmlq.f	/^   10 eps    = eps \/ two$/;"	l	subroutine:symmlq	file:
10	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/symmlqblas.f	/^   10 assign 30 to next$/;"	l	function:dnrm2	file:
10	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/symmlqblas.f	/^   10 continue$/;"	l	function:ddot	file:
10	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/symmlqblas.f	/^   10 continue$/;"	l	subroutine:daxpy	file:
10	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/symmlqblas.f	/^   10 continue$/;"	l	subroutine:dcopy	file:
10	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/epslon.f	/^   10 b = a - 1.0d0$/;"	l	function:epslon	file:
10	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/pythag.f	/^   10 continue$/;"	l	function:pythag	file:
100	fdriver/mmio.f	/^ 100  continue$/;"	l	subroutine:getwd	file:
100	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/symmlq.f	/^  100 continue$/;"	l	subroutine:symmlq	file:
100	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/symmlqblas.f	/^  100 i = j$/;"	l	function:dnrm2	file:
100	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/tinvit.f	/^  100 p = q + 1$/;"	l	subroutine:tinvit	file:
1000	fdriver/mmio.f	/^ 1000 print *,'''',rep,''' representation not recognized.'$/;"	l	subroutine:mmwrite	file:
1000	fdriver/mmio.f	/^ 1000 print *,'Premature end-of-file.'$/;"	l	subroutine:mminfo	file:
1000	fdriver/mmio.f	/^ 1000 print *,'Premature end-of-file.'$/;"	l	subroutine:mmread	file:
1001	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/tinvit.f	/^ 1001 return$/;"	l	subroutine:tinvit	file:
105	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/symmlqblas.f	/^  105 xmax = dabs(dx(i))$/;"	l	function:dnrm2	file:
110	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/symmlqblas.f	/^  110 if( dabs(dx(i)) .le. xmax ) go to 115$/;"	l	function:dnrm2	file:
115	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/symmlqblas.f	/^  115 sum = sum + (dx(i)\/xmax)**2$/;"	l	function:dnrm2	file:
120	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/tinvit.f	/^  120 continue$/;"	l	subroutine:tinvit	file:
140	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/tinvit.f	/^  140 tag = tag + 1$/;"	l	subroutine:tinvit	file:
20	fdriver/mmio.f	/^ 20         continue$/;"	l	subroutine:mmwrite	file:
20	fdriver/mmio.f	/^ 20   continue$/;"	l	subroutine:mminfo	file:
20	fdriver/mmio.f	/^ 20   continue$/;"	l	subroutine:mmread	file:
20	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/symmlqblas.f	/^   20    go to next,(30, 50, 70, 110)$/;"	l	function:dnrm2	file:
20	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/symmlqblas.f	/^   20 m = mod(n,4)$/;"	l	subroutine:daxpy	file:
20	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/symmlqblas.f	/^   20 m = mod(n,5)$/;"	l	function:ddot	file:
20	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/symmlqblas.f	/^   20 m = mod(n,7)$/;"	l	subroutine:dcopy	file:
20	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/pythag.f	/^   20 pythag = p$/;"	l	function:pythag	file:
200	fdriver/mmio.f	/^ 200  format(1a)$/;"	l	subroutine:mminfo	file:
200	fdriver/mmio.f	/^ 200  format(1a)$/;"	l	subroutine:mmread	file:
200	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/symmlq.f	/^  200    continue$/;"	l	subroutine:symmlq	file:
200	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/symmlqblas.f	/^  200 continue$/;"	l	function:dnrm2	file:
2000	fdriver/mmio.f	/^ 2000 print *,'''',field,''' field is not recognized.'$/;"	l	subroutine:mmwrite	file:
2000	fdriver/mmio.f	/^ 2000 print *,'Premature end-of-file.'$/;"	l	subroutine:mminfo	file:
2000	fdriver/mmio.f	/^ 2000 print *,'Premature end-of-file.'$/;"	l	subroutine:mmread	file:
30	fdriver/mmio.f	/^ 30         continue$/;"	l	subroutine:mmwrite	file:
30	fdriver/mmio.f	/^ 30       continue$/;"	l	subroutine:mmread	file:
30	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/symmlqblas.f	/^   30 continue$/;"	l	function:ddot	file:
30	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/symmlqblas.f	/^   30 continue$/;"	l	subroutine:daxpy	file:
30	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/symmlqblas.f	/^   30 continue$/;"	l	subroutine:dcopy	file:
30	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/symmlqblas.f	/^   30 if( dabs(dx(i)) .gt. cutlo) go to 85$/;"	l	function:dnrm2	file:
300	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/symmlq.f	/^  300 anorm  = sqrt( tnorm  )$/;"	l	subroutine:symmlq	file:
300	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/symmlqblas.f	/^  300 continue$/;"	l	function:dnrm2	file:
3000	fdriver/mmio.f	/^ 3000 print *,'''',field,''' arrays are not recognized.'$/;"	l	subroutine:mmwrite	file:
3000	fdriver/mmio.f	/^ 3000 print *,'Size info inconsistant with representation.'$/;"	l	subroutine:mminfo	file:
3000	fdriver/mmio.f	/^ 3000 print *,'Size info inconsistant with representation.'$/;"	l	subroutine:mmread	file:
35	fdriver/mmio.f	/^ 35       continue$/;"	l	subroutine:mmread	file:
3500	fdriver/mmio.f	/^ 3500 print *,'Size info inconsistant with representation.'$/;"	l	subroutine:mminfo	file:
3500	fdriver/mmio.f	/^ 3500 print *,'Size info inconsistant with representation.'$/;"	l	subroutine:mmread	file:
40	fdriver/mmio.f	/^ 40         continue$/;"	l	subroutine:mmwrite	file:
40	fdriver/mmio.f	/^ 40       continue$/;"	l	subroutine:mmread	file:
40	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/symmlqblas.f	/^   40 mp1 = m + 1$/;"	l	function:ddot	file:
40	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/symmlqblas.f	/^   40 mp1 = m + 1$/;"	l	subroutine:daxpy	file:
40	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/symmlqblas.f	/^   40 mp1 = m + 1$/;"	l	subroutine:dcopy	file:
400	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/symmlq.f	/^  400 zbar   = rhs1 \/ diag$/;"	l	subroutine:symmlq	file:
4000	fdriver/mmio.f	/^ 4000 print *,'''',symm,''' symmetry is not recognized.'$/;"	l	subroutine:mmwrite	file:
4000	fdriver/mmio.f	/^ 4000 print *,'Premature end-of-file.'$/;"	l	subroutine:mmread	file:
490	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/tinvit.f	/^  490    norm = dabs(d(p))$/;"	l	subroutine:tinvit	file:
5	fdriver/mmio.f	/^ 5    continue$/;"	l	subroutine:getwd	file:
5	fdriver/mmio.f	/^ 5    format('%%MatrixMarket matrix ',11A,1A,8A,1A,20A)$/;"	l	subroutine:mmwrite	file:
5	fdriver/mmio.f	/^ 5    format(1024A)$/;"	l	subroutine:mminfo	file:
5	fdriver/mmio.f	/^ 5    format(1024A)$/;"	l	subroutine:mmread	file:
50	fdriver/mmio.f	/^ 50         continue$/;"	l	subroutine:mmwrite	file:
50	fdriver/mmio.f	/^ 50       continue $/;"	l	subroutine:mmread	file:
50	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/symmlq.f	/^   50 continue$/;"	l	subroutine:symmlq	file:
50	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/symmlqblas.f	/^   50 continue$/;"	l	function:ddot	file:
50	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/symmlqblas.f	/^   50 continue$/;"	l	subroutine:daxpy	file:
50	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/symmlqblas.f	/^   50 continue$/;"	l	subroutine:dcopy	file:
50	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/symmlqblas.f	/^   50 if( dx(i) .eq. zero) go to 200$/;"	l	function:dnrm2	file:
500	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/tinvit.f	/^  500    norm = dmax1(norm, dabs(d(i))+dabs(e(i)))$/;"	l	subroutine:tinvit	file:
5000	fdriver/mmio.f	/^ 5000 print *,'Invalid matrix header: ',tmp1$/;"	l	subroutine:mminfo	file:
5000	fdriver/mmio.f	/^ 5000 print *,'Invalid matrix header: ',tmp1$/;"	l	subroutine:mmread	file:
505	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/tinvit.f	/^  505    group = 0$/;"	l	subroutine:tinvit	file:
510	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/tinvit.f	/^  510    if (dabs(x1-x0) .ge. eps2) go to 505$/;"	l	subroutine:tinvit	file:
520	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/tinvit.f	/^  520    v = 0.0d0$/;"	l	subroutine:tinvit	file:
540	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/tinvit.f	/^  540       xu = e(i) \/ u$/;"	l	subroutine:tinvit	file:
560	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/tinvit.f	/^  560       u = d(i) - x1 - xu * v$/;"	l	subroutine:tinvit	file:
580	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/tinvit.f	/^  580    continue$/;"	l	subroutine:tinvit	file:
60	fdriver/mmio.f	/^ 60         continue$/;"	l	subroutine:mmwrite	file:
60	fdriver/mmio.f	/^ 60      continue$/;"	l	subroutine:mmread	file:
60	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/symmlqblas.f	/^   60 ddot = dtemp$/;"	l	function:ddot	file:
600	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/symmlq.f	/^  600 if (istop .ne. 0) go to 800$/;"	l	subroutine:symmlq	file:
600	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/tinvit.f	/^  600    do 620 ii = p, q$/;"	l	subroutine:tinvit	file:
6000	fdriver/mmio.f	/^ 6000 print *,'''',rep,''' representation not recognized.'$/;"	l	subroutine:mminfo	file:
6000	fdriver/mmio.f	/^ 6000 print *,'''',rep,''' representation not recognized.'$/;"	l	subroutine:mmread	file:
620	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/symmlq.f	/^  620 continue$/;"	l	subroutine:symmlq	file:
620	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/tinvit.f	/^  620    continue$/;"	l	subroutine:tinvit	file:
630	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/tinvit.f	/^  630       j = j - 1$/;"	l	subroutine:tinvit	file:
640	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/tinvit.f	/^  640       xu = xu + rv6(i) * z(i,j)$/;"	l	subroutine:tinvit	file:
65	fdriver/mmio.f	/^ 65      continue$/;"	l	subroutine:mmread	file:
660	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/tinvit.f	/^  660       rv6(i) = rv6(i) - xu * z(i,j)$/;"	l	subroutine:tinvit	file:
680	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/tinvit.f	/^  680    continue$/;"	l	subroutine:tinvit	file:
70	fdriver/mmio.f	/^ 70         continue$/;"	l	subroutine:mmwrite	file:
70	fdriver/mmio.f	/^ 70      continue$/;"	l	subroutine:mmread	file:
70	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/symmlqblas.f	/^   70 if( dabs(dx(i)) .gt. cutlo ) go to 75$/;"	l	function:dnrm2	file:
700	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/symmlq.f	/^  700 continue$/;"	l	subroutine:symmlq	file:
700	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/tinvit.f	/^  700    norm = 0.0d0$/;"	l	subroutine:tinvit	file:
7000	fdriver/mmio.f	/^ 7000 print *,'''',field,''' field is not recognized.'$/;"	l	subroutine:mminfo	file:
7000	fdriver/mmio.f	/^ 7000 print *,'''',field,''' field is not recognized.'$/;"	l	subroutine:mmread	file:
720	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/tinvit.f	/^  720    norm = norm + dabs(rv6(i))$/;"	l	subroutine:tinvit	file:
740	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/tinvit.f	/^  740    xu = eps4 \/ norm$/;"	l	subroutine:tinvit	file:
75	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/symmlqblas.f	/^   75 sum = (sum * xmax) * xmax$/;"	l	function:dnrm2	file:
760	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/tinvit.f	/^  760    rv6(i) = rv6(i) * xu$/;"	l	subroutine:tinvit	file:
780	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/tinvit.f	/^  780    do 820 i = ip, q$/;"	l	subroutine:tinvit	file:
800	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/symmlq.f	/^  800 if (cgnorm .le. lqnorm) then$/;"	l	subroutine:symmlq	file:
800	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/tinvit.f	/^  800       rv6(i) = u - rv4(i) * rv6(i-1)$/;"	l	subroutine:tinvit	file:
8000	fdriver/mmio.f	/^ 8000 print *,'''',field,''' arrays are not recognized.'$/;"	l	subroutine:mminfo	file:
8000	fdriver/mmio.f	/^ 8000 print *,'''',field,''' arrays are not recognized.'$/;"	l	subroutine:mmread	file:
820	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/tinvit.f	/^  820    continue$/;"	l	subroutine:tinvit	file:
830	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/tinvit.f	/^  830    ierr = -r$/;"	l	subroutine:tinvit	file:
840	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/tinvit.f	/^  840    u = 0.0d0$/;"	l	subroutine:tinvit	file:
85	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/symmlqblas.f	/^   85 hitest = cuthi\/float( n )$/;"	l	function:dnrm2	file:
860	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/tinvit.f	/^  860    u = pythag(u,rv6(i))$/;"	l	subroutine:tinvit	file:
870	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/tinvit.f	/^  870    do 880 i = 1, n$/;"	l	subroutine:tinvit	file:
880	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/tinvit.f	/^  880    z(i,r) = 0.0d0$/;"	l	subroutine:tinvit	file:
900	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/symmlq.f	/^  900 continue$/;"	l	subroutine:symmlq	file:
900	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/tinvit.f	/^  900    z(i,r) = rv6(i) * xu$/;"	l	subroutine:tinvit	file:
9000	fdriver/mmio.f	/^ 9000 print *,'''',symm,''' symmetry is not recognized.'$/;"	l	subroutine:mminfo	file:
9000	fdriver/mmio.f	/^ 9000 print *,'''',symm,''' symmetry is not recognized.'$/;"	l	subroutine:mmread	file:
920	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/tinvit.f	/^  920 continue$/;"	l	subroutine:tinvit	file:
95	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/symmlqblas.f	/^   95    sum = sum + dx(j)**2$/;"	l	function:dnrm2	file:
9994	fdriver/fdr_loadbal.f90	/^9994 continue$/;"	l	function:run_zoltan	file:
9996	fdriver/fdr_loadbal.f90	/^9996 continue$/;"	l	function:run_zoltan	file:
9998	fdriver/fdr_loadbal.f90	/^9998 continue$/;"	l	function:run_zoltan	file:
9999	fdriver/fdr_loadbal.f90	/^9999 continue$/;"	l	function:run_zoltan	file:
9999	fdriver/fdr_main.f90	/^9999 continue$/;"	l	program:fdriver	file:
ABS	par/par_median_randomized.c	31;"	d	file:
ADDR_TO_LB	fort/cwrap.c	25;"	d	file:
ADD_WEIGHT	matrix/matrix.h	/^typedef enum {ADD_WEIGHT=0, MAX_WEIGHT, CMP_WEIGHT} WgtOp;$/;"	e	enum:__anon7
ADJ_ALLOC	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	48;"	d
AFFECT_NOT_NULL	graph/graph.c	38;"	d	file:
AGG_INNER_PRODUCT1	phg/phg_match.c	545;"	d	file:
AGG_MATCH_OK	phg/phg_match.c	70;"	d	file:
ALL_CSRC	makefile	/^ALL_CSRC	= all_allo.c $/;"	m
ALL_INC	makefile	/^ALL_INC		= all_const.h all_allo_const.h$/;"	m
ALL_OBJ_DIRS	Utilities/makefile	/^ALL_OBJ_DIRS := $(wildcard Obj_*)$/;"	m
ALL_OBJ_DIRS	makefile	/^ALL_OBJ_DIRS := $(wildcard Obj_*)$/;"	m
ALMOST_ONE	par/par_bisect.c	35;"	d	file:
APPLIB	ZoltanComponent/CCA_Wrapper/Makefile	/^APPLIB = -L$(DCCAFE_LIB)\/ -Wl,-rpath,$(DCCAFE_LIB) -l$(DCCAFE_LIBNAME) \\$/;"	m
APPLIB	ZoltanComponent/TestComponents/Makefile	/^APPLIB = -L. -lextras -L$(ZOLTAN_HOME)\/Obj_$(ZOLTAN_ARCH) -lzoltan  \\$/;"	m
ARCHITECTURE	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       ARCHITECTURE = 0;	\/* 0=> hypercube, d=> d-dimensional mesh (0..3)*\/$/;"	v
AppObjSizes	phg/phg_hypergraph.h	/^  int *AppObjSizes;         \/* Object sizes for on-processor objects *\/$/;"	m	struct:Zoltan_HGraph
Approach	lb/lb_const.h	/^  char Approach[MAX_PARAM_STRING_LEN+1];              $/;"	m	struct:Zoltan_LB_Struct
Assign_In_File_Name	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/submain/submain.c	/^char     *Assign_In_File_Name = NULL;	\/* Input assignment file name *\/$/;"	v
Auto_Migrate	lb/lb_const.h	/^  int Auto_Migrate;                   \/*  Flag indicating whether the load$/;"	m	struct:Zoltan_Migrate_Struct
Axis_Order	zz/zz_const.h	/^  int Axis_Order[3];  \/* saved axis alignment information *\/$/;"	m	struct:Zoltan_Transform_Struct
BADBALANCE	phg/phg_refinement.c	25;"	d	file:
BALANCE_STATS	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_loadbal.c	/^static void BALANCE_STATS($/;"	f	file:
BAR1	driver/dr_elem_const.h	/^typedef enum {E_TYPE_ERROR=-1, SPHERE, BAR1, BAR2, QUAD1, S_QUAD2, QUAD2,$/;"	e	enum:__anon40
BAR1	driver_old/dr_elem_const.h	/^typedef enum {E_TYPE_ERROR=-1, SPHERE, BAR1, BAR2, QUAD1, S_QUAD2, QUAD2,$/;"	e	enum:__anon5
BAR2	driver/dr_elem_const.h	/^typedef enum {E_TYPE_ERROR=-1, SPHERE, BAR1, BAR2, QUAD1, S_QUAD2, QUAD2,$/;"	e	enum:__anon40
BAR2	driver_old/dr_elem_const.h	/^typedef enum {E_TYPE_ERROR=-1, SPHERE, BAR1, BAR2, QUAD1, S_QUAD2, QUAD2,$/;"	e	enum:__anon5
BAR2	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_elem_const.h	/^typedef enum {SPHERE, BAR2, BAR3, QUAD4, QUAD8, QUAD9,$/;"	e	enum:__anon26
BAR3	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_elem_const.h	/^typedef enum {SPHERE, BAR2, BAR3, QUAD4, QUAD8, QUAD9,$/;"	e	enum:__anon26
BDY_COST	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/input/read_params.c	/^double    BDY_COST = 0.0;       \/* Cost associated with boundary vertices.  *\/$/;"	v
BDY_HOP_COST	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/input/read_params.c	/^double    BDY_HOP_COST = 0.0;   \/* Cost associated with boundary hops. *\/$/;"	v
BIGSKIP	driver/dr_input.c	37;"	d	file:
BISECTION_SAFETY	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^double    BISECTION_SAFETY = 10;	\/* Divides Lanczos bisection tol *\/$/;"	v
BITCHECK	phg/phg_coarse.c	38;"	d	file:
BITSET	phg/phg_coarse.c	37;"	d	file:
BLOCK	lb/lb_const.h	/^  BLOCK, $/;"	e	enum:Zoltan_LB_Method
BMP_FORMAT	util/vtk_view.cpp	152;"	d	file:
BRICK	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	254;"	d
BRICK_assign	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_loadbal.c	/^static int BRICK_assign($/;"	f	file:
BRICK_slices	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_loadbal.c	/^static void BRICK_slices($/;"	f	file:
BRICK_which_slice	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_loadbal.c	/^int BRICK_which_slice($/;"	f
BUFF_SIZE	driver/dr_compress.c	29;"	d	file:
BUF_LEN	driver/dr_hg_readfile.c	28;"	d	file:
BZIP2	driver/dr_compress_const.h	/^  BZIP2 = 2,$/;"	e	enum:ZOLTAN_FILETYPE_
BaseLB	ZoltanComponent/CCA_Wrapper/BaseLB.h	/^    BaseLB(PartitionerFactory_JR *q, int index, MPI_Comm *A)$/;"	f	class:ZoltanSpace::BaseLB
BaseLB	ZoltanComponent/CCA_Wrapper/BaseLB.h	/^  class BaseLB : public virtual ::LoadPartitionerSpace::LoadBalancer$/;"	c	namespace:ZoltanSpace
BaseLBHSeen	ZoltanComponent/CCA_Wrapper/BaseLB.h	8;"	d
Box	rcb/rcb.h	/^  struct rcb_box *Box;$/;"	m	struct:RCB_Struct	typeref:struct:RCB_Struct::rcb_box
Box_Assign	lb/lb_const.h	/^  ZOLTAN_LB_BOX_ASSIGN_FN *Box_Assign;$/;"	m	struct:Zoltan_LB_Struct
Box_Assign	rcb/box_assign.c	/^static void Box_Assign($/;"	f	file:
Box_Assign1	rcb/box_assign.c	/^static void Box_Assign1($/;"	f	file:
Box_Assign2	rcb/box_assign.c	/^static void Box_Assign2($/;"	f	file:
Box_Assign3	rcb/box_assign.c	/^static void Box_Assign3($/;"	f	file:
CCOMP	Utilities/makefile	/^CCOMP		= $(CC) $(INC_PATH) $(CFLAGS) $/;"	m
CCOMP	makefile	/^CCOMP		= $(CC) $(ZOLTAN_INC_PATH) $(CFLAGS) $(F90CFLAGS)$/;"	m
CEDRIC_PRINT	phg/phg_build_calls.c	27;"	d	file:
CEDRIC_PRINT	phg/phg_two_ways.c	26;"	d	file:
CHACO_FILE	driver/dr_input_const.h	33;"	d
CHACO_FILE	driver_old/dr_input_const.h	26;"	d
CHACO_FILE	fdriver/fdr_input.f90	/^integer(Zoltan_INT), parameter :: NEMESIS_FILE = 0, &$/;"	v	module:dr_input
CHACO_FILE	fdriver_old/fdr_input.f90	/^integer(LB_INT), parameter :: NEMESIS_FILE = 0, &$/;"	v	module:dr_input
CHAR_BIT	matrix/common_sort.c	41;"	d	file:
CHECK_FOR_MPI_ERROR	zz/zz_const.h	612;"	d
CHECK_IERR	zz/zz_const.h	623;"	d
CHECK_INPUT	fdriver/fdr_chaco_io.f90	/^logical, parameter :: CHECK_INPUT /;"	v	module:dr_chaco_io
CHECK_INPUT	fdriver_old/fdr_chaco_io.f90	/^logical, parameter :: CHECK_INPUT /;"	v	module:dr_chaco_io
CHECK_INPUT	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       CHECK_INPUT = TRUE;	 \/* Check input for consistency? (TRUE\/FALSE) *\/$/;"	v
CHECK_ZOLTAN_FREE	order/order_tools.c	19;"	d	file:
CHUNKSIZE	parmetis/third_library_tools.h	28;"	d
CH_CSRC	makefile	/^CH_CSRC		= ch_dist_graph.c ch_input_assign.c ch_input_geom.c \\$/;"	m
CH_INC	makefile	/^CH_INC		= ch_input_const.h ch_init_dist_const.h$/;"	m
CH_INIT_DIST_CONST_H	ch/ch_init_dist_const.h	16;"	d
CH_OBJ	ZoltanComponent/TestComponents/Makefile	/^CH_OBJ = $(ZOLTAN_BIN_DIR)\/ch_dist_graph.o \\$/;"	m
CITESEER	driver/dr_main.c	/^int CITESEER[200]; \/* Hack for Citeseer Vtx_Inc experiments *\/$/;"	v
CLOCKS_PER_SEC	Utilities/Timer/timer.h	22;"	d
CLUSTER	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	264;"	d
CM	zz/zz_const.h	/^  double CM[3];       \/* saved center of mass *\/$/;"	m	struct:Zoltan_Transform_Struct
CMP_WEIGHT	matrix/matrix.h	/^typedef enum {ADD_WEIGHT=0, MAX_WEIGHT, CMP_WEIGHT} WgtOp;$/;"	e	enum:__anon7
CNCT_DOM	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	251;"	d
COARSEN_EWGTS	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       COARSEN_EWGTS = TRUE;	   \/* Sum edge weights in coarsening? (TRUE\/FALSE) *\/$/;"	v
COARSEN_FRACTION_LIMIT	phg/phg_Vcycle.c	246;"	d	file:
COARSEN_RATIO_MIN	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^double    COARSEN_RATIO_MIN = .7;  \/* Min vtx reduction each coarsen stage *\/$/;"	v
COARSEN_VWGTS	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       COARSEN_VWGTS = TRUE;	   \/* Sum vtx weights in coarsening? (TRUE\/FALSE) *\/$/;"	v
COARSE_BPM	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klvspiff/coarsen_klv.c	/^int       COARSE_BPM = FALSE;	\/* Use vertex cover as ML refinement? *\/$/;"	v
COARSE_KLV	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klvspiff/coarsen_klv.c	/^int       COARSE_KLV = TRUE;	\/* Use KLV as multilevel refinement? *\/$/;"	v
COARSE_KL_BOTTOM	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       COARSE_KL_BOTTOM = TRUE; \/* Force KL at lowest level (TRUE\/FALSE) *\/$/;"	v
COARSE_NLEVEL_KL	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       COARSE_NLEVEL_KL = 2;	   \/* # levels between KL calls in uncoarsening *\/$/;"	v
COARSE_NLEVEL_RQI	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       COARSE_NLEVEL_RQI = 2;\/* # levels between RQI calls in uncoarsening *\/$/;"	v
COLORTAG	coloring/coloring.c	37;"	d	file:
COLOR_CSRC	makefile	/^COLOR_CSRC      = coloring.c g2l_hash.c color_test.c$/;"	m
COLOR_INC	makefile	/^COLOR_INC       = coloring.h g2l_hash.h color_test.c$/;"	m
COLUMNS	driver/dr_input_const.h	40;"	d
COMM_CSRC	Utilities/makefile	/^COMM_CSRC	= comm_create.c comm_do.c comm_do_reverse.c comm_destroy.c \\$/;"	m
COMM_DRIVER	Utilities/makefile	/^COMM_DRIVER	= zdrive_comm$/;"	m
COMM_DRIVER_CPP	Utilities/makefile	/^COMM_DRIVER_CPP     = zCPPdrive_comm$/;"	m
COMM_DRIVER_CPP_CSRC	Utilities/makefile	/^COMM_DRIVER_CPP_CSRC= comm_main_2.cpp$/;"	m
COMM_DRIVER_CSRC	Utilities/makefile	/^COMM_DRIVER_CSRC= comm_main.c$/;"	m
COMM_DRIVER_DEP	Utilities/makefile	/^COMM_DRIVER_DEP = $(COMM_LIB) $(MEM_LIB)$/;"	m
COMM_DRIVER_LIBS	Utilities/makefile	/^COMM_DRIVER_LIBS= -L. -l$(COMM_TARGET) -l$(MEM_TARGET) $(MPI_LIBPATH) $(MPI_LIB) $/;"	m
COMM_INC	Utilities/makefile	/^COMM_INC	= comm.h zoltan_comm.h$/;"	m
COMM_LIB	Utilities/makefile	/^COMM_LIB	= libzoltan_comm.a$/;"	m
COMM_TAG	phg/phg_Vcycle.c	33;"	d	file:
COMM_TARGET	Utilities/makefile	/^COMM_TARGET     = zoltan_comm$/;"	m
COMPILE	fdriver/makefile	/^COMPILE = $(F90) -g$/;"	m
COMPILE_LIB	fdriver/makefile	/^COMPILE_LIB = -lm$/;"	m
CONFLICT_TAG	phg/phg_match.c	515;"	d	file:
CONNECTED_DOMAINS	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       CONNECTED_DOMAINS = FALSE;	\/* ... to force connectivity? (T\/F) *\/$/;"	v
CONV_NS	ZoltanComponent/ZoltanPorts/CONV_NS.h	15;"	d
CONV_NS	ZoltanComponent/ZoltanPorts/CONV_NS.h	19;"	d
CONV_NS_HSeen	ZoltanComponent/ZoltanPorts/CONV_NS.h	2;"	d
COORD	oct/octant_const.h	/^typedef double COORD[3];$/;"	t
COPY_BUFFER	Utilities/Communication/comm_create.c	320;"	d	file:
COPY_BUFFER	lb/lb_copy.c	20;"	d	file:
COPY_BUFFER	rcb/rcb_util.c	125;"	d	file:
COPY_BUFFER	rcb/rib_util.c	115;"	d	file:
COUPLED	parmetis/parmetis_interface.h	68;"	d
CPPCOMP	Utilities/makefile	/^CPPCOMP		= $(CC) $(INC_PATH) $(CFLAGS) $/;"	m
CPPCOMP	Utilities/makefile	/^CPPCOMP		= $(CPPC) $(INC_PATH) $(CFLAGS) $/;"	m
CPPCOMP	makefile	/^CPPCOMP		= $(CC) $(CFLAGS) $/;"	m
CPPCOMP	makefile	/^CPPCOMP		= $(CPPC) $(CFLAGS) $(CPPFLAGS)$/;"	m
CUT_COST	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/input/read_params.c	/^double    CUT_COST = 0.0;       \/* Communication cost of a cut-edge. *\/$/;"	v
CUT_TO_HOP_COST	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^double    CUT_TO_HOP_COST = 1;	\/* ..if so, relative importance of cuts\/hops *\/$/;"	v
CWRAPFMANGLEH_	fort/cwrap_fmangle.h	14;"	d
CYCLIC	lb/lb_const.h	/^  CYCLIC, $/;"	e	enum:Zoltan_LB_Method
C_FILEARGNBR	postprocessing/ordering/order_eval.h	56;"	d
C_FILENBR	postprocessing/ordering/order_eval.h	55;"	d
C_FactorNode	postprocessing/ordering/order_eval.h	/^} C_FactorNode;$/;"	t	typeref:struct:C_FactorNode_
C_FactorNode_	postprocessing/ordering/order_eval.h	/^typedef struct C_FactorNode_ {$/;"	s
C_f	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^typedef VOID C_f;	\/* complex function *\/$/;"	t
C_f	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^typedef VOID C_f;	\/* complex function *\/$/;"	t
C_fileNum	postprocessing/ordering/order_eval.c	/^static int                  C_fileNum    = 0;     \/* Number of file in arg list  *\/$/;"	v	file:
C_fileTab	postprocessing/ordering/order_eval.c	/^static File                 C_fileTab[3] = {      \/* File array                  *\/$/;"	v	file:
C_filenamedatout	postprocessing/ordering/order_eval.h	60;"	d
C_filenamegrfinp	postprocessing/ordering/order_eval.h	58;"	d
C_filenamesrcout	postprocessing/ordering/order_eval.h	59;"	d
C_filepntrdatout	postprocessing/ordering/order_eval.h	64;"	d
C_filepntrgrfinp	postprocessing/ordering/order_eval.h	62;"	d
C_filepntrordinp	postprocessing/ordering/order_eval.h	63;"	d
C_fp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^typedef \/* Complex *\/ VOID (*C_fp)();$/;"	t
C_fp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^typedef \/* Complex *\/ VOID (*C_fp)(...);$/;"	t
C_fp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^typedef \/* Complex *\/ VOID (*C_fp)();$/;"	t
C_fp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^typedef \/* Complex *\/ VOID (*C_fp)(...);$/;"	t
C_usageList	postprocessing/ordering/order_eval.c	/^static const char *         C_usageList[] = {$/;"	v	file:
Chaco_In_Assign_Inv	ZoltanComponent/TestComponents/Driver.cpp	/^  int Chaco_In_Assign_Inv = 0 ;$/;"	v
Chaco_In_Assign_Inv	ZoltanComponent/TestComponents/Mesh.cpp	/^  int Chaco_In_Assign_Inv = 0 ;$/;"	v
Chaco_In_Assign_Inv	driver/dr_main.c	/^int Chaco_In_Assign_Inv = 0;$/;"	v
Chaco_In_Assign_Inv	driver/dr_mainCPP.cpp	/^int Chaco_In_Assign_Inv = 0;$/;"	v
Chaco_In_Assign_Inv	driver_old/dr_main.c	/^int Chaco_In_Assign_Inv = 0;$/;"	v
Chaco_In_Assign_Inv	util/vtk_view.cpp	/^int Chaco_In_Assign_Inv = 0;$/;"	v
Cleanup	ZoltanComponent/CCA_Wrapper/PartitionerFactory_DataMig.cpp	/^void ZoltanSpace::PartitionerFactory_JR::Cleanup( ::LoadPartitionerSpace::LoadBalancer *A )$/;"	f	class:ZoltanSpace::PartitionerFactory_JR
CoarsePartition	phg/phg.h	/^  ZOLTAN_PHG_COARSEPARTITION_FN *CoarsePartition;$/;"	m	struct:PHGPartParamsStruct
CoarsePartitionFns	phg/phg_serialpartition.c	/^static ZOLTAN_PHG_COARSEPARTITION_FN* CoarsePartitionFns[] = $/;"	v	file:
Color	include/zoltan_cpp.h	/^  int Color (int &num_gid_entries,$/;"	f	class:Zoltan
Color_Test	include/zoltan_cpp.h	/^  int Color_Test (int &num_gid_entries,$/;"	f	class:Zoltan
Color_params	coloring/color_test.c	/^static PARAM_VARS Color_params[] = {$/;"	v	file:
Color_params	coloring/coloring.c	/^static PARAM_VARS Color_params[] = {$/;"	v	file:
Comm	util/vtk_view.cpp	/^vtkMPICommunicator *Comm;$/;"	v
Comm_Obj	include/lbi_const.h	249;"	d
Communicator	phg/phg_comm.h	/^  MPI_Comm Communicator;  \/* MPI Communicator for all procs partitioning$/;"	m	struct:PHGCommStruct
Communicator	zz/zz_const.h	/^  MPI_Comm Communicator;          \/*  The MPI Communicator.                  *\/$/;"	m	struct:Zoltan_Struct
ComputeDestinations	ZoltanComponent/CCA_Wrapper/PartitionerFactory_DataMig.cpp	/^int ZoltanSpace::PartitionerFactory_JR::ComputeDestinations($/;"	f	class:ZoltanSpace::PartitionerFactory_JR
ComputeSources	ZoltanComponent/CCA_Wrapper/PartitionerFactory_DataMig.cpp	/^int ZoltanSpace::PartitionerFactory_JR::ComputeSources($/;"	f	class:ZoltanSpace::PartitionerFactory_JR
Compute_Adjpart	parmetis/postprocessing.c	/^static int Compute_Adjpart($/;"	f	file:
Compute_Bal	parmetis/postprocessing.c	/^static int Compute_Bal($/;"	f	file:
Compute_ConCut	parmetis/postprocessing.c	/^static float Compute_ConCut($/;"	f	file:
Compute_EdgeCut	parmetis/postprocessing.c	/^static int Compute_EdgeCut($/;"	f	file:
Compute_NetCut	parmetis/postprocessing.c	/^static float Compute_NetCut($/;"	f	file:
Controller	util/vtk_view.cpp	/^vtkMPIController *Controller;$/;"	v
Convert_To_CSR	phg/phg_build_calls.c	/^static int Convert_To_CSR($/;"	f	file:
Coord	oct/octant_const.h	/^  COORD  Coord;                       \/* centroid location of region        *\/$/;"	m	struct:Region_Node
Copy_Structure	lb/lb_const.h	/^  ZOLTAN_LB_COPY_DATA_FN *Copy_Structure;$/;"	m	struct:Zoltan_LB_Struct
Create	include/zoltan_comm_cpp.h	/^  int Create(const int &nvals, int *assign, const MPI_Comm &comm, $/;"	f	class:Zoltan_Comm
Create	include/zoltan_dd_cpp.h	/^  int Create(const MPI_Comm &comm, const int &num_gid, const int &num_lid, $/;"	f	class:Zoltan_DD
CreateBalancedPartition	ZoltanComponent/CCA_Wrapper/BaseLB.cpp	/^int ZoltanSpace::BaseLB::CreateBalancedPartition(bool *did_it_change, $/;"	f	class:ZoltanSpace::BaseLB
CreateLB_VM_pair	ZoltanComponent/CCA_Wrapper/PartitonerFactory.cpp	/^ZoltanSpace::PartitionerFactory_JR::CreateLB_VM_pair(MPI_Comm *A, char *name)$/;"	f	class:ZoltanSpace::PartitionerFactory_JR
D1DetectConflicts	coloring/coloring.c	/^static int D1DetectConflicts($/;"	f	file:
D1ParallelColoring	coloring/coloring.c	/^static int D1ParallelColoring (ZZ *zz, int nvtx, int *visit, int *xadj, int *adj,$/;"	f	file:
D1coloring	coloring/coloring.c	/^static int D1coloring($/;"	f	file:
D2DetectConflicts	coloring/coloring.c	/^static int D2DetectConflicts(ZZ *zz, char coloring_problem, G2LHash *hash, int nlvtx, int *wset, int wsize, int *xadj, int *adj, int *adjproc, int *nColor, int *color, int *conflicts, int *rand_key, int *vmark, int *seen, int *where, int *pwhere, int **rcsendbuf, int **rcrecbuf, int *rcsendsize, int *rcrecsize, int **srp, MPI_Request *sreqsC, MPI_Request *rreqsC, int *rreqfromC, MPI_Status *stats, int *nconflict)$/;"	f	file:
D2ParallelColoring	coloring/coloring.c	/^static int D2ParallelColoring ($/;"	f	file:
D2coloring	coloring/coloring.c	/^static int D2coloring($/;"	f	file:
DATA_TYPE	driver/dr_const.h	/^enum DATA_TYPE {$/;"	g
DD	include/zoltan_dd_cpp.h	/^  Zoltan_DD_Directory *DD;$/;"	m	class:Zoltan_DD
DD_CSRC	Utilities/makefile	/^DD_CSRC		= DD_Create.c DD_Destroy.c DD_Find.c DD_Remove.c DD_Update.c \\$/;"	m
DD_Cleanup_fn	Utilities/DDirectory/DD.h	/^typedef void DD_Cleanup_fn (void*);$/;"	t
DD_DRIVER	Utilities/makefile	/^DD_DRIVER	= zdrive_dd$/;"	m
DD_DRIVER_CPP	Utilities/makefile	/^DD_DRIVER_CPP	= zCPPdrive_dd$/;"	m
DD_DRIVER_CPP_CSRC	Utilities/makefile	/^DD_DRIVER_CPP_CSRC = DD_Main_2.cpp$/;"	m
DD_DRIVER_CSRC	Utilities/makefile	/^DD_DRIVER_CSRC	= DD_Main.c$/;"	m
DD_DRIVER_DEP	Utilities/makefile	/^DD_DRIVER_DEP  	= $(DD_LIB) $(COMM_LIB) $(MEM_LIB) $(ID_OBJ)$/;"	m
DD_DRIVER_LIBS	Utilities/makefile	/^DD_DRIVER_LIBS 	= -L. -l$(DD_TARGET) -l$(COMM_TARGET) -l$(MEM_TARGET) \\$/;"	m
DD_Find_Local	Utilities/DDirectory/DD_Find.c	/^static int DD_Find_Local (Zoltan_DD_Directory *dd,$/;"	f	file:
DD_Find_Msg	Utilities/DDirectory/DD.h	/^} DD_Find_Msg;$/;"	t	typeref:struct:__anon3
DD_Hash_fn	Utilities/DDirectory/DD.h	/^typedef unsigned int DD_Hash_fn (ZOLTAN_ID_PTR, int, unsigned int, void *);$/;"	t
DD_INC	Utilities/makefile	/^DD_INC		= zoltan_dd.h$/;"	m
DD_LIB	Utilities/makefile	/^DD_LIB		= libzoltan_dd.a$/;"	m
DD_Node	Utilities/DDirectory/DD.h	/^typedef struct DD_Node  {$/;"	s
DD_Node	Utilities/DDirectory/DD.h	/^} DD_Node;$/;"	t	typeref:struct:DD_Node
DD_Remove_Local	Utilities/DDirectory/DD_Remove.c	/^static int DD_Remove_Local (Zoltan_DD_Directory *dd,$/;"	f	file:
DD_Remove_Msg	Utilities/DDirectory/DD.h	/^}  DD_Remove_Msg;$/;"	t	typeref:struct:__anon4
DD_TARGET	Utilities/makefile	/^DD_TARGET	= zoltan_dd$/;"	m
DD_Update_Local	Utilities/DDirectory/DD_Update.c	/^static int DD_Update_Local (Zoltan_DD_Directory *dd,$/;"	f	file:
DD_Update_Msg	Utilities/DDirectory/DD.h	/^} DD_Update_Msg;$/;"	t	typeref:struct:__anon2
DDirectory	driver/dr_const.h	/^  int DDirectory;           \/* Exercises data directories *\/$/;"	m	struct:Test_Flags
DDirectory_Test	driver_old/dr_main.c	/^int DDirectory_Test = 1;  \/* Flag indicating whether to exercise DDirectory *\/$/;"	v
DEBUG	fdriver/fdr_param_file.f90	/^logical, parameter :: DEBUG /;"	v	module:dr_param_file
DEBUG_ASSIGN	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       DEBUG_ASSIGN = 0;	\/* Debug flag for assignment to sets (0..1) *\/$/;"	v
DEBUG_BPMATCH	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       DEBUG_BPMATCH = 0;	\/* Debug flag for bipartite matching code (0..2) *\/$/;"	v
DEBUG_COARSEN	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       DEBUG_COARSEN = 0;	\/* Debug flag for coarsening\/uncoarsening (0..1) *\/$/;"	v
DEBUG_CONNECTED	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       DEBUG_CONNECTED = 0;	\/* Debug flag for connected components (0..1) *\/$/;"	v
DEBUG_COVER	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klvspiff/coarsen_klv.c	/^int       DEBUG_COVER = 0;	\/* Debug output in min vtx cover routines? *\/$/;"	v
DEBUG_EVECS	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       DEBUG_EVECS = 0;	\/* Debug flag for eigenvector generation (0..5) *\/$/;"	v
DEBUG_INERTIAL	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       DEBUG_INERTIAL = 0;	\/* Debug flag for inertial method (0..1) *\/$/;"	v
DEBUG_INPUT	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       DEBUG_INPUT = 0;	\/* Debug flag for having read input files (0..1) *\/$/;"	v
DEBUG_INTERNAL	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       DEBUG_INTERNAL = 0;	\/* Debug flag for internal vertices (0..2) *\/$/;"	v
DEBUG_KL	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       DEBUG_KL = 0;		\/* Debug flag for Kernighan-Lin (0..3) *\/$/;"	v
DEBUG_MACH_PARAMS	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       DEBUG_MACH_PARAMS = 0;\/* Print computed machine params? (0..1) *\/$/;"	v
DEBUG_MEMORY	Utilities/Memory/mem.c	/^static int DEBUG_MEMORY = 0;	\/* Flag for detecting memory leaks *\/$/;"	v	file:
DEBUG_MEMORY	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       DEBUG_MEMORY = 0;	\/* Debug flag for smalloc\/sfree (0..3) *\/$/;"	v
DEBUG_OPTIMIZE	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       DEBUG_OPTIMIZE = 0;	\/* Debug flag for optimization\/rotation (0..2) *\/$/;"	v
DEBUG_PARAMS	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       DEBUG_PARAMS = 2;	\/* Debug flag for reading parameter file (0..2) *\/$/;"	v
DEBUG_PERTURB	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       DEBUG_PERTURB = 0;	\/* Debug flag for matrix perturbation (0..1) *\/$/;"	v
DEBUG_PRINT	driver/order_test.c	21;"	d	file:
DEBUG_REFINE_MAP	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       DEBUG_REFINE_MAP = 0;	\/* Debug flag for refining mapping (0..1) *\/$/;"	v
DEBUG_REFINE_PART	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       DEBUG_REFINE_PART = 0;\/* Debug flag for refine partition (0..1) *\/$/;"	v
DEBUG_SIMULATOR	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       DEBUG_SIMULATOR = 0;	\/* Debug flag for comm simulator (0..2) *\/$/;"	v
DEBUG_TRACE	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       DEBUG_TRACE = 0;	\/* Trace main execution path (0..2) *\/$/;"	v
DEBUG_TRACE_DETAIL	driver/dr_const.h	351;"	d
DEBUG_TRACE_DETAIL	driver_old/dr_const.h	154;"	d
DEBUG_TRACE_END	driver/dr_const.h	348;"	d
DEBUG_TRACE_END	driver_old/dr_const.h	151;"	d
DEBUG_TRACE_START	driver/dr_const.h	345;"	d
DEBUG_TRACE_START	driver_old/dr_const.h	148;"	d
DEFAULT_BIN_MAX	hsfc/hsfc.h	/^static const double  DEFAULT_BIN_MAX = -2.0;$/;"	v
DEFAULT_BIN_MIN	hsfc/hsfc.h	/^static const double  DEFAULT_BIN_MIN =  2.0;$/;"	v
DEFAULT_CHECK_GEOM	rcb/shared.h	25;"	d
DEFAULT_HASH_TABLE_SIZE	reftree/reftree.h	27;"	d
DEFAULT_INITPATH	reftree/reftree.h	28;"	d
DEFAULT_WEIGHT	hsfc/hsfc.h	/^static const double  DEFAULT_WEIGHT = 1.0;$/;"	v
DEPTHMAX	par/par_median_randomized.c	1062;"	d	file:
DFS_Part_Count	oct/dfs.c	/^static int DFS_Part_Count;      \/* count of number of times Zoltan_Oct_dfs_partition$/;"	v	file:
DIRS	ZoltanComponent/Makefile	/^DIRS = CCA_Wrapper TestComponents$/;"	m
DISCOUPLED	parmetis/parmetis_interface.h	69;"	d
DOUBLE_EPSILON	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/submain/submain.c	/^double    DOUBLE_EPSILON;	\/* machine precision *\/$/;"	v
DOUBLE_MAX	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/submain/submain.c	/^double    DOUBLE_MAX;		\/* largest double precision value *\/$/;"	v
DRIVER_NAME	driver/dr_const.h	112;"	d
DRIVER_NAME	driver_old/dr_const.h	32;"	d
DRIVER_NAME	fdriver/fdr_const.f90	/^character(len=7), parameter :: DRIVER_NAME /;"	v	module:dr_const
DRIVER_NAME	fdriver_old/fdr_const.f90	/^character(len=7), parameter :: DRIVER_NAME /;"	v	module:dr_const
DR_BOTH_INC	makefile	/^DR_BOTH_INC	= dr_const.h dr_input_const.h dr_util_const.h \\$/;"	m
DR_BOTH_SRC	makefile	/^DR_BOTH_SRC	= dr_err.c dr_input.c dr_par_util.c \\$/;"	m
DR_CPP_INC	makefile	/^DR_CPP_INC	= zoltan_cpp.h zoltan_comm_cpp.h zoltan_dd_cpp.h \\$/;"	m
DR_CPP_SRC	makefile	/^DR_CPP_SRC	= dr_mainCPP.cpp dr_exoII_ioCPP.cpp dr_loadbalCPP.cpp \\$/;"	m
DR_C_SRC	makefile	/^DR_C_SRC	= dr_main.c dr_exoII_io.c dr_loadbal.c \\$/;"	m
DR_OBJ	ZoltanComponent/TestComponents/Makefile	/^DR_OBJ = $(ZOLTAN_BIN_DIR)\/dr_err.o \\$/;"	m
D_fp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^typedef doublereal (*D_fp)(), (*E_fp)();$/;"	t
D_fp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^typedef doublereal (*D_fp)(...), (*E_fp)(...);$/;"	t
D_fp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^typedef doublereal (*D_fp)(), (*E_fp)();$/;"	t
D_fp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^typedef doublereal (*D_fp)(...), (*E_fp)(...);$/;"	t
DataBufferForThisEntity	ZoltanComponent/TestComponents/Mesh_DataMig.cpp	/^int ZoltanTestSpace::Mesh::DataBufferForThisEntity(int num_gid_entries, $/;"	f	class:ZoltanTestSpace::Mesh
DataLocationPort	ZoltanComponent/ZoltanPorts/DataLocationPort.h	/^    DataLocationPort() : CONV_NS(Port)()  {}$/;"	f	class:LoadPartitionerSpace::DataLocationPort
DataLocationPort	ZoltanComponent/ZoltanPorts/DataLocationPort.h	/^  class DataLocationPort : public virtual CONV_NS(Port)$/;"	c	namespace:LoadPartitionerSpace
DataLocationPortSeen	ZoltanComponent/ZoltanPorts/DataLocationPort.h	10;"	d
DataMigrationPort	ZoltanComponent/ZoltanPorts/DataMigrationPort.h	/^    DataMigrationPort()  : CONV_NS(Port)() {} $/;"	f	class:LoadPartitionerSpace::DataMigrationPort
DataMigrationPort	ZoltanComponent/ZoltanPorts/DataMigrationPort.h	/^  class DataMigrationPort  : public virtual CONV_NS(Port)$/;"	c	namespace:LoadPartitionerSpace
DataMigrationPortHSeen	ZoltanComponent/ZoltanPorts/DataMigrationPort.h	11;"	d
Data_Structure	lb/lb_const.h	/^  void *Data_Structure;           \/*  Data structure used by the load$/;"	m	struct:Zoltan_LB_Struct
Debug_Chaco_Input	ZoltanComponent/TestComponents/Driver.cpp	/^  int Debug_Chaco_Input = 0 ;$/;"	v
Debug_Chaco_Input	ZoltanComponent/TestComponents/Mesh.cpp	/^  int Debug_Chaco_Input = 0 ;$/;"	v
Debug_Chaco_Input	driver/dr_main.c	/^int Debug_Chaco_Input = 0;$/;"	v
Debug_Chaco_Input	driver/dr_mainCPP.cpp	/^int Debug_Chaco_Input = 0;$/;"	v
Debug_Chaco_Input	driver_old/dr_main.c	/^int Debug_Chaco_Input = 0;$/;"	v
Debug_Driver	ZoltanComponent/TestComponents/Driver.cpp	/^  int Debug_Driver = 1 ;$/;"	v
Debug_Driver	ZoltanComponent/TestComponents/Mesh.cpp	/^  int Debug_Driver = 1 ;$/;"	v
Debug_Driver	driver/dr_main.c	/^int Debug_Driver = 1;$/;"	v
Debug_Driver	driver/dr_mainCPP.cpp	/^int Debug_Driver = 1;$/;"	v
Debug_Driver	driver_old/dr_main.c	/^int Debug_Driver = 1;$/;"	v
Debug_Driver	util/vtk_view.cpp	/^int Debug_Driver = 1;$/;"	v
Debug_Level	zz/zz_const.h	/^  int Debug_Level;                \/*  Debug level for this instance of$/;"	m	struct:Zoltan_Struct
Debug_Proc	zz/zz_const.h	/^  int Debug_Proc;                 \/*  Print from this processor any debugging $/;"	m	struct:Zoltan_Struct
DeleteAllAndRestart	ZoltanComponent/TestComponents/Mesh.cpp	/^int ZoltanTestSpace::Mesh::DeleteAllAndRestart()$/;"	f	class:ZoltanTestSpace::Mesh
Destroy_LB_VM_pair	ZoltanComponent/CCA_Wrapper/PartitonerFactory.cpp	/^void ZoltanSpace::PartitionerFactory_JR::Destroy_LB_VM_pair( $/;"	f	class:ZoltanSpace::PartitionerFactory_JR
Deterministic	zz/zz_const.h	/^  int Deterministic;              \/*  Flag indicating whether algorithms used$/;"	m	struct:Zoltan_Struct
DistDataDirHSeen	ZoltanComponent/ZoltanPorts/DistDataDirectoryPort.h	10;"	d
DistDataDirectoryPort	ZoltanComponent/ZoltanPorts/DistDataDirectoryPort.h	/^    DistDataDirectoryPort() : CONV_NS(Port)() {}$/;"	f	class:LoadPartitionerSpace::DistDataDirectoryPort
DistDataDirectoryPort	ZoltanComponent/ZoltanPorts/DistDataDirectoryPort.h	/^  class DistDataDirectoryPort : public virtual CONV_NS(Port)$/;"	c	namespace:LoadPartitionerSpace
Do	include/zoltan_comm_cpp.h	/^  int Do(const int &tag, char *send_data, const int &nbytes, char *recv_data)$/;"	f	class:Zoltan_Comm
Do_Post	include/zoltan_comm_cpp.h	/^  int Do_Post( const int &tag, char *send_data, const int &nbytes, char *recv_data)$/;"	f	class:Zoltan_Comm
Do_Reverse	include/zoltan_comm_cpp.h	/^  int Do_Reverse(const int &tag, char *send_data, const int &nbytes, int *sizes, char *recv_data)$/;"	f	class:Zoltan_Comm
Do_Reverse_Post	include/zoltan_comm_cpp.h	/^  int Do_Reverse_Post(const int &tag, char *send_data, const int &nbytes, int *sizes, $/;"	f	class:Zoltan_Comm
Do_Reverse_Wait	include/zoltan_comm_cpp.h	/^  int Do_Reverse_Wait(const int &tag, char *send_data, const int &nbytes, int *sizes, $/;"	f	class:Zoltan_Comm
Do_Wait	include/zoltan_comm_cpp.h	/^  int Do_Wait(const int &tag, char *send_data, const int &nbytes, char *recv_data)$/;"	f	class:Zoltan_Comm
Dot_Struct	rcb/shared.h	/^struct Dot_Struct {	        \/* dot = point in 3-space *\/$/;"	s
Dots	hsfc/hsfc.h	/^   } Dots;              \/* represents objects being load-balanced *\/$/;"	t	typeref:struct:Dots
Dots	hsfc/hsfc.h	/^typedef struct Dots {$/;"	s
Dots	rcb/rcb.h	/^  struct Dot_Struct *Dots;     $/;"	m	struct:RCB_Struct	typeref:struct:RCB_Struct::Dot_Struct
Dots	rcb/rib.h	/^    struct Dot_Struct *Dots;$/;"	m	struct:RIB_Struct	typeref:struct:RIB_Struct::Dot_Struct
Driver	ZoltanComponent/TestComponents/Driver.cpp	/^ZoltanTestSpace::Driver::Driver()$/;"	f	class:ZoltanTestSpace::Driver
Driver	ZoltanComponent/TestComponents/Driver.h	/^  class Driver : public virtual CONV_NS(Component), $/;"	c	namespace:ZoltanTestSpace
DriverHSeen	ZoltanComponent/TestComponents/Driver.h	8;"	d
Driver_Action	ZoltanComponent/TestComponents/Driver.cpp	/^  int Driver_Action = 1 ;$/;"	v
Driver_Action	ZoltanComponent/TestComponents/Mesh.cpp	/^  int Driver_Action = 1 ;$/;"	v
Driver_Action	driver/dr_main.c	/^int Driver_Action = 1;	\/* Flag indicating coloring, load-balancing or ordering. *\/$/;"	v
Driver_Action	driver/dr_mainCPP.cpp	/^int Driver_Action = 1;	\/* Flag indicating coloring, load-balancing or ordering. *\/$/;"	v
Driver_Action	fdriver/fdr_const.f90	/^integer(Zoltan_INT) :: Driver_Action /;"	v	module:dr_const
Driver_Action	util/vtk_view.cpp	/^int Driver_Action = 1;  $/;"	v
Drops	driver/dr_const.h	/^  int Drops;                \/* Exercises point- and box-assign. *\/$/;"	m	struct:Test_Flags
Drum	zz/zz_const.h	/^  struct Zoltan_Drum_Struct Drum;      \/* Struct with info for DRUM interface *\/$/;"	m	struct:Zoltan_Struct	typeref:struct:Zoltan_Struct::Zoltan_Drum_Struct
Drum_params	ha/ha_drum.c	/^static PARAM_VARS Drum_params[] = {$/;"	v	file:
Dynamic_Graph	driver/dr_const.h	/^  float Dynamic_Graph;      \/* Graph pertubation between iterations. *\/$/;"	m	struct:Test_Flags
Dynamic_Weights	driver/dr_const.h	/^  float Dynamic_Weights;    \/* Perturb weights between iterations. *\/$/;"	m	struct:Test_Flags
ECHO	ZoltanComponent/CCA_Wrapper/Makefile	/^ECHO = echo$/;"	m
ECHO	ZoltanComponent/TestComponents/Makefile	/^ECHO = echo$/;"	m
ECHO	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       ECHO = 2;		 \/* Print input\/param options? to file? (-2..2) *\/$/;"	v
EDGE_GNO_TO_LNO	phg/phg_hypergraph.h	111;"	d
EDGE_LNO_TO_GNO	phg/phg_hypergraph.h	122;"	d
EDGE_TO_PROC_Y	phg/phg_hypergraph.h	129;"	d
EDGE_WGT	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	289;"	d
EIGEN_TOLERANCE	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^double    EIGEN_TOLERANCE = 1e-3;	\/* Numerical eigen-tolerance *\/$/;"	v
ELB_FALSE	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	34;"	d
ELB_TRUE	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	35;"	d
ELB_VERSION	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	32;"	d
ELEMENTAL	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	236;"	d
ELEM_INFO	driver/dr_const.h	/^typedef struct Element_Description ELEM_INFO;$/;"	t	typeref:struct:Element_Description
ELEM_INFO	driver_old/dr_const.h	/^typedef struct Element_Description ELEM_INFO;$/;"	t	typeref:struct:Element_Description
ELEM_INFO	fdriver/fdr_const.f90	/^type ELEM_INFO$/;"	t	module:dr_const
ELEM_INFO	fdriver_old/lb_user_const.f90	/^type ELEM_INFO$/;"	t	module:lb_user_const
ELEM_INFO_PTR	driver/dr_const.h	/^typedef struct Element_Description *ELEM_INFO_PTR;$/;"	t	typeref:struct:Element_Description
ELEM_INFO_PTR	driver_old/dr_const.h	/^typedef struct Element_Description *ELEM_INFO_PTR;$/;"	t	typeref:struct:Element_Description
EL_BLK	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	287;"	d
ERROR	driver/dr_hg_readfile.c	29;"	d	file:
ERROR_MSG	driver/dr_err_const.h	/^typedef struct error_message ERROR_MSG;$/;"	t	typeref:struct:error_message
ERROR_MSG	driver_old/dr_err_const.h	/^typedef struct error_message ERROR_MSG;$/;"	t	typeref:struct:error_message
ERROR_MSG	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_err_const.h	/^typedef struct error_message ERROR_MSG;$/;"	t	typeref:struct:error_message
ERROR_MSG_PTR	driver/dr_err_const.h	/^typedef struct error_message *ERROR_MSG_PTR;$/;"	t	typeref:struct:error_message
ERROR_MSG_PTR	driver_old/dr_err_const.h	/^typedef struct error_message *ERROR_MSG_PTR;$/;"	t	typeref:struct:error_message
ERROR_MSG_PTR	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_err_const.h	/^typedef struct error_message *ERROR_MSG_PTR;$/;"	t	typeref:struct:error_message
EVAL_GLOBAL_AVG	include/zoltan_eval.h	30;"	d
EVAL_GLOBAL_MAX	include/zoltan_eval.h	29;"	d
EVAL_GLOBAL_MIN	include/zoltan_eval.h	28;"	d
EVAL_GLOBAL_SUM	include/zoltan_eval.h	27;"	d
EVAL_LOCAL_SUM	include/zoltan_eval.h	26;"	d
EVAL_MAX_XTRA_EWGTS	include/zoltan_eval.h	34;"	d
EVAL_MAX_XTRA_VWGTS	include/zoltan_eval.h	33;"	d
EVAL_SIZE	include/zoltan_eval.h	31;"	d
EWGT_RATIO_MAX	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klspiff/coarsen_kl.c	/^double EWGT_RATIO_MAX = .25;	\/* if so, max allowed ewgt\/nvtxs *\/$/;"	v
EXPERT	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/submain/submain.c	/^int	  EXPERT = 0;		\/* user mode *\/$/;"	v
EXPORT_LISTS	driver/dr_const.h	/^  EXPORT_LISTS$/;"	e	enum:LISTS
EXTENSION_SIZE	driver/dr_compress.c	31;"	d	file:
E_TYPE_ERROR	driver/dr_elem_const.h	/^typedef enum {E_TYPE_ERROR=-1, SPHERE, BAR1, BAR2, QUAD1, S_QUAD2, QUAD2,$/;"	e	enum:__anon40
E_TYPE_ERROR	driver_old/dr_elem_const.h	/^typedef enum {E_TYPE_ERROR=-1, SPHERE, BAR1, BAR2, QUAD1, S_QUAD2, QUAD2,$/;"	e	enum:__anon5
E_Type	driver/dr_elem_const.h	/^              HEXSHELL, NULL_EL} E_Type;$/;"	t	typeref:enum:__anon40
E_Type	driver_old/dr_elem_const.h	/^              HEXSHELL, NULL_EL} E_Type;$/;"	t	typeref:enum:__anon5
E_Type	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_elem_const.h	/^              WEDGE16, PYRAMID5, PYRAMID13, SHELL2, NULL_EL} E_Type;$/;"	t	typeref:enum:__anon26
E_f	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^typedef doublereal E_f;	\/* real function with -R not specified *\/$/;"	t
E_f	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^typedef doublereal E_f;	\/* real function with -R not specified *\/$/;"	t
E_fp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^typedef doublereal (*D_fp)(), (*E_fp)();$/;"	t
E_fp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^typedef doublereal (*D_fp)(...), (*E_fp)(...);$/;"	t
E_fp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^typedef doublereal (*D_fp)(), (*E_fp)();$/;"	t
E_fp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^typedef doublereal (*D_fp)(...), (*E_fp)(...);$/;"	t
EdgeInfo	ZoltanComponent/ZoltanPorts/EdgeInfoPort.h	/^    EdgeInfo() : CONV_NS(Port)() {} $/;"	f	class:LoadPartitionerSpace::EdgeInfo
EdgeInfo	ZoltanComponent/ZoltanPorts/EdgeInfoPort.h	/^  class EdgeInfo : public virtual CONV_NS(Port)$/;"	c	namespace:LoadPartitionerSpace
EdgeInfoPortHSeen	ZoltanComponent/ZoltanPorts/EdgeInfoPort.h	8;"	d
EdgeSizeThreshold	phg/phg.h	/^  float EdgeSizeThreshold;  \/* % of global vtxs beyond which an edge is $/;"	m	struct:PHGPartParamsStruct
EdgeWeightDim	phg/phg_hypergraph.h	/^  int EdgeWeightDim;    \/* number of weight dimensions for a hyperedge *\/$/;"	m	struct:__anon38
Edge_Info	parmetis/third_library_tools.h	/^struct Edge_Info {$/;"	s
Edge_Weight_Dim	zz/zz_const.h	/^  int Edge_Weight_Dim;            \/*  Dimension of the edge weights, $/;"	m	struct:Zoltan_Struct
EdgesListForThisEntity	ZoltanComponent/TestComponents/Mesh_info.cpp	/^int ZoltanTestSpace::Mesh::EdgesListForThisEntity(int num_gid_entries, $/;"	f	class:ZoltanTestSpace::Mesh
Element_Description	driver/dr_const.h	/^struct Element_Description$/;"	s
Element_Description	driver_old/dr_const.h	/^struct Element_Description$/;"	s
EntitiesOnThisProc	ZoltanComponent/TestComponents/Mesh_info.cpp	/^int ZoltanTestSpace::Mesh::EntitiesOnThisProc(int num_gid_entries, $/;"	f	class:ZoltanTestSpace::Mesh
EntityInfo	ZoltanComponent/ZoltanPorts/EntityInfoPort.h	/^    EntityInfo() : CONV_NS(Port)() {} $/;"	f	class:LoadPartitionerSpace::EntityInfo
EntityInfo	ZoltanComponent/ZoltanPorts/EntityInfoPort.h	/^  class EntityInfo : public virtual CONV_NS(Port)$/;"	c	namespace:LoadPartitionerSpace
EntityInfoPortHSeen	ZoltanComponent/ZoltanPorts/EntityInfoPort.h	8;"	d
EntityList	ZoltanComponent/ZoltanPorts/EntityList.h	/^    EntityList() {}$/;"	f	class:LoadPartitionerSpace::EntityList
EntityList	ZoltanComponent/ZoltanPorts/EntityList.h	/^  class EntityList$/;"	c	namespace:LoadPartitionerSpace
EntityListHSeen	ZoltanComponent/ZoltanPorts/EntityList.h	8;"	d
EntityListImpl	ZoltanComponent/CCA_Wrapper/EntityListImpl.h	/^    EntityListImpl(int a) : ::LoadPartitionerSpace::EntityList()$/;"	f	class:ZoltanSpace::EntityListImpl
EntityListImpl	ZoltanComponent/CCA_Wrapper/EntityListImpl.h	/^  class EntityListImpl : public virtual ::LoadPartitionerSpace::EntityList$/;"	c	namespace:ZoltanSpace
EntityListImplHSeen	ZoltanComponent/CCA_Wrapper/EntityListImpl.h	8;"	d
Esize	phg/phg_hypergraph.h	/^  int *Esize;               \/* number of vertices in hyperedge *\/$/;"	m	struct:Zoltan_HGraph
EvaluateDecomposition	ZoltanComponent/CCA_Wrapper/BaseLB.cpp	/^int ZoltanSpace::BaseLB::EvaluateDecomposition(bool print_stats, int *nobjs_on_proc,$/;"	f	class:ZoltanSpace::BaseLB
Evecs	zz/zz_const.h	/^  double Evecs[3][3]; \/* saved eigenvectors *\/$/;"	m	struct:Zoltan_Transform_Struct
Ewgt	phg/phg_hypergraph.h	/^  float *Ewgt;              \/* Edge weights for each hyperedge *\/$/;"	m	struct:Zoltan_HGraph
Exchange_Sizes	include/zoltan_comm_cpp.h	/^  static int Exchange_Sizes( int *sizes_to, int *procs_to, $/;"	f	class:Zoltan_Comm
Export_Lists_Special	driver/dr_loadbal.c	/^static int Export_Lists_Special = 0;$/;"	v	file:
Extern	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	25;"	d
Extern	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	25;"	d
F2C_INCLUDE	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	8;"	d
F2C_INCLUDE	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	8;"	d
F2C_proc_par_types	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	155;"	d
F2C_proc_par_types	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	155;"	d
F90COMP	makefile	/^F90COMP		= $(F90) $(CFLAGS) $(FFLAGS)$/;"	m
F90LB_TEMP	fort/cwrap.c	1319;"	d	file:
F90LB_TEMP	fort/cwrap.c	1327;"	d	file:
F90LB_TEMP	fort/cwrap.c	1461;"	d	file:
F90LB_TEMP	fort/cwrap.c	1469;"	d	file:
F90LB_TEMP	fort/cwrap.c	1522;"	d	file:
F90LB_TEMP	fort/cwrap.c	1529;"	d	file:
FALSE	Utilities/Communication/comm.h	33;"	d
FALSE	Utilities/DDirectory/DD.h	39;"	d
FALSE	ch/ch_input_const.h	45;"	d
FALSE	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klvspiff/matching.c	12;"	d	file:
FALSE	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/defs.h	6;"	d
FALSE	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	9;"	d	file:
FALSE	zz/zz_const.h	67;"	d
FALSE_	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	21;"	d
FALSE_	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	21;"	d
FATALERROR	Utilities/Timer/zoltan_timer.c	56;"	d	file:
FATAL_ERROR	zz/zz_const.h	606;"	d
FILENAME_MAX	driver/dr_const.h	118;"	d
FILENAME_MAX	driver_old/dr_const.h	38;"	d
FILENAME_MAX	fdriver/fdr_const.f90	/^integer(Zoltan_INT), parameter :: FILENAME_MAX /;"	v	module:dr_const
FILENAME_MAX	fdriver_old/fdr_const.f90	/^integer(LB_INT), parameter :: FILENAME_MAX /;"	v	module:dr_const
FILE_NAME_SIZE	driver/dr_compress.c	30;"	d	file:
FILLMIGRATEMSG	oct/migoct.c	77;"	d	file:
FILLUPDATEMSG	oct/migoct.c	53;"	d	file:
FLATTEN	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klvspiff/coarsen_klv.c	/^int       FLATTEN = FALSE;	\/* Merge indistinguishable vtxs first? *\/$/;"	v
FOBJ_FILES	makefile	/^FOBJ_FILES	= zoltan_user_data.o lb_user_const.o ztypes.o fwrap.o cwrap.o$/;"	m
FOMAXDIM	parmetis/postprocessing.c	317;"	d	file:
FOMAXDIM	parmetis/postprocessing.c	466;"	d	file:
FORBIDTAG	coloring/coloring.c	40;"	d	file:
FORCE_FAST	parmetis/third_library_const.h	96;"	d
FRACTION_SMALL	par/par_bisect.c	33;"	d	file:
FREE_GRAPH	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       FREE_GRAPH = TRUE;	\/* Free input graph data? (TRUE\/FALSE) *\/$/;"	v
FactorStat	postprocessing/ordering/order_eval.h	/^} FactorStat;$/;"	t	typeref:struct:FactorStat_
FactorStat_	postprocessing/ordering/order_eval.h	/^typedef struct FactorStat_ {$/;"	s
Find	include/zoltan_dd_cpp.h	/^  int Find (ZOLTAN_ID_PTR gid, ZOLTAN_ID_PTR lid, ZOLTAN_ID_PTR data, $/;"	f	class:Zoltan_DD
FirstRepart	phg/phg_build.c	30;"	d	file:
Fixed_Objects	driver/dr_const.h	/^  int Fixed_Objects;        \/* Registers functions for assigning fixed$/;"	m	struct:Test_Flags
Fortran	zz/zz_const.h	/^  int Fortran;                    \/*  1 if created from Fortran, 0 otherwise *\/$/;"	m	struct:Zoltan_Struct
Free_Structure	lb/lb_const.h	/^  ZOLTAN_LB_FREE_DATA_FN *Free_Structure;$/;"	m	struct:Zoltan_LB_Struct
G2LHash	coloring/g2l_hash.h	/^typedef struct G2L_Hash G2LHash;$/;"	t	typeref:struct:G2L_Hash
G2LHashNode	coloring/g2l_hash.h	/^typedef struct G2L_Hash_Node G2LHashNode;$/;"	t	typeref:struct:G2L_Hash_Node
G2L_Hash	coloring/g2l_hash.h	/^struct G2L_Hash {$/;"	s
G2L_Hash_Node	coloring/g2l_hash.h	/^struct G2L_Hash_Node {$/;"	s
GDEFINES	makefile	/^GDEFINES	= -DTRILINOS_NO_CONFIG_H -DHAVE_MPI$/;"	m
GEN_CHACO	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	258;"	d
GET_RANK	Utilities/Memory/mem.c	44;"	d	file:
GET_RANK	Utilities/Memory/mem.c	47;"	d	file:
GLOBAL_DBGLVL	parmetis/parmetis_interface.h	66;"	d
GLOBAL_ISSUES	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	274;"	d
GLOBAL_SEED	parmetis/parmetis_interface.h	67;"	d
GNO_TO_LNO	phg/phg_hypergraph.h	107;"	d
GRAPH	lb/lb_const.h	/^  GRAPH,$/;"	e	enum:Zoltan_LB_Method
GRAPH_CSRC	makefile	/^GRAPH_CSRC	= graph.c build_graph.c verify_graph.c scatter_graph.c$/;"	m
GRAPH_INC	makefile	/^GRAPH_INC	= graph.h graph_const.h$/;"	m
GRAPH_INFO	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^typedef struct Graph_Description  GRAPH_INFO;$/;"	t	typeref:struct:Graph_Description
GRAPH_INFO_PTR	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^typedef struct Graph_Description *GRAPH_INFO_PTR;$/;"	t	typeref:struct:Graph_Description
GRAPH_PARTITIONING	driver/dr_const.h	/^  GRAPH_PARTITIONING,$/;"	e	enum:PARTITIONING_TYPE
GRAY	oct/octree_const.h	/^  int GRAY;$/;"	m	struct:__anon32
GZIP	driver/dr_compress_const.h	/^  GZIP = 1,$/;"	e	enum:ZOLTAN_FILETYPE_
Gen_Error	driver/dr_err_const.h	40;"	d
Gen_Error	driver_old/dr_err_const.h	40;"	d
Gen_Error	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_err_const.h	42;"	d
Gen_Files	driver/dr_const.h	/^  int Gen_Files;            \/* Exercise output file generation. *\/$/;"	m	struct:Test_Flags
Generate_Files	include/zoltan_cpp.h	/^  int Generate_Files( std::string & fname,$/;"	f	class:Zoltan
GeomInfo	ZoltanComponent/ZoltanPorts/GeomInfoPort.h	/^    GeomInfo() : CONV_NS(Port)() {} $/;"	f	class:LoadPartitionerSpace::GeomInfo
GeomInfo	ZoltanComponent/ZoltanPorts/GeomInfoPort.h	/^  class GeomInfo : public virtual CONV_NS(Port)$/;"	c	namespace:LoadPartitionerSpace
GeomInfoPortHSeen	ZoltanComponent/ZoltanPorts/GeomInfoPort.h	8;"	d
Geometry_File_Name	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/submain/submain.c	/^char     *Geometry_File_Name = NULL;	\/* Input coordinate file name *\/$/;"	v
GetAllGIDs	ZoltanComponent/CCA_Wrapper/EntityListImpl.h	/^    virtual unsigned int *GetAllGIDs() { return(gid_list) ; }$/;"	f	class:ZoltanSpace::EntityListImpl
GetAllLIDs	ZoltanComponent/CCA_Wrapper/EntityListImpl.h	/^    virtual unsigned int *GetAllLIDs() { return(lid_list) ; } $/;"	f	class:ZoltanSpace::EntityListImpl
GetCommonParameter	ZoltanComponent/CCA_Wrapper/BaseLB_prop.cpp	/^int ZoltanSpace::BaseLB::GetCommonParameter(char *key, bool *b)$/;"	f	class:ZoltanSpace::BaseLB
GetCommonParameter	ZoltanComponent/CCA_Wrapper/BaseLB_prop.cpp	/^int ZoltanSpace::BaseLB::GetCommonParameter(char *key, char **val)$/;"	f	class:ZoltanSpace::BaseLB
GetCommonParameter	ZoltanComponent/CCA_Wrapper/BaseLB_prop.cpp	/^int ZoltanSpace::BaseLB::GetCommonParameter(char *key, double *d) $/;"	f	class:ZoltanSpace::BaseLB
GetCommonParameter	ZoltanComponent/CCA_Wrapper/BaseLB_prop.cpp	/^int ZoltanSpace::BaseLB::GetCommonParameter(char *key, int *i)$/;"	f	class:ZoltanSpace::BaseLB
GetExtraData	ZoltanComponent/CCA_Wrapper/EntityListImpl.h	/^    virtual unsigned int *GetExtraData() { return(user_def_list) ; } $/;"	f	class:ZoltanSpace::EntityListImpl
GetExtraDataSize	ZoltanComponent/CCA_Wrapper/EntityListImpl.h	/^    virtual int GetExtraDataSize() { return(user_def_size) ; } $/;"	f	class:ZoltanSpace::EntityListImpl
GetFirstEntity	ZoltanComponent/TestComponents/Mesh_info.cpp	/^int ZoltanTestSpace::Mesh::GetFirstEntity(int num_gid_entries, $/;"	f	class:ZoltanTestSpace::Mesh
GetGIDListLength	ZoltanComponent/CCA_Wrapper/EntityListImpl.h	/^    virtual int GetGIDListLength() { return(gid_size) ; }$/;"	f	class:ZoltanSpace::EntityListImpl
GetGeomDescription	ZoltanComponent/TestComponents/Mesh_info.cpp	/^int ZoltanTestSpace::Mesh::GetGeomDescription(int num_gid_entries, $/;"	f	class:ZoltanTestSpace::Mesh
GetIndex	ZoltanComponent/CCA_Wrapper/BaseLB.h	/^    virtual int GetIndex() { return (my_index) ; }$/;"	f	class:ZoltanSpace::BaseLB
GetLBInfo	ZoltanComponent/CCA_Wrapper/HSFC.h	/^    virtual int GetLBInfo( char **name, int *index)$/;"	f	class:ZoltanSpace::HSFC_LB
GetLBInfo	ZoltanComponent/CCA_Wrapper/OctTree.h	/^    virtual int GetLBInfo( char **name, int *index)$/;"	f	class:ZoltanSpace::OctTree_LB
GetLBInfo	ZoltanComponent/CCA_Wrapper/ParMetis.h	/^    virtual int GetLBInfo( char **name, int *index)$/;"	f	class:ZoltanSpace::ParMetis_LB
GetLBInfo	ZoltanComponent/CCA_Wrapper/RCB.h	/^    virtual int GetLBInfo( char **name, int *index)$/;"	f	class:ZoltanSpace::RCB_LB
GetLBInfo	ZoltanComponent/CCA_Wrapper/RIB.h	/^    virtual int GetLBInfo( char **name, int *index)$/;"	f	class:ZoltanSpace::RIB_LB
GetLIDListLength	ZoltanComponent/CCA_Wrapper/EntityListImpl.h	/^    virtual int GetLIDListLength() { return(lid_size) ; }$/;"	f	class:ZoltanSpace::EntityListImpl
GetListLength	ZoltanComponent/CCA_Wrapper/EntityListImpl.h	/^    virtual unsigned int GetListLength() { return(proc_size) ; } $/;"	f	class:ZoltanSpace::EntityListImpl
GetNextEntity	ZoltanComponent/TestComponents/Mesh_info.cpp	/^int ZoltanTestSpace::Mesh::GetNextEntity(int num_gid_entries, $/;"	f	class:ZoltanTestSpace::Mesh
GetNumberOfDims	ZoltanComponent/TestComponents/Mesh_info.cpp	/^int ZoltanTestSpace::Mesh::GetNumberOfDims()$/;"	f	class:ZoltanTestSpace::Mesh
GetNumberOfEdges	ZoltanComponent/TestComponents/Mesh_info.cpp	/^int ZoltanTestSpace::Mesh::GetNumberOfEdges(int num_gid_entries, $/;"	f	class:ZoltanTestSpace::Mesh
GetNumberOfEntities	ZoltanComponent/TestComponents/Mesh_info.cpp	/^int  ZoltanTestSpace::Mesh::GetNumberOfEntities()$/;"	f	class:ZoltanTestSpace::Mesh
GetParameter	ZoltanComponent/CCA_Wrapper/HSFC_prop.cpp	/^int ZoltanSpace::HSFC_LB::GetParameter(char *key, bool *b)$/;"	f	class:ZoltanSpace::HSFC_LB
GetParameter	ZoltanComponent/CCA_Wrapper/HSFC_prop.cpp	/^int ZoltanSpace::HSFC_LB::GetParameter(char *key, char **val)$/;"	f	class:ZoltanSpace::HSFC_LB
GetParameter	ZoltanComponent/CCA_Wrapper/HSFC_prop.cpp	/^int ZoltanSpace::HSFC_LB::GetParameter(char *key, double *d)$/;"	f	class:ZoltanSpace::HSFC_LB
GetParameter	ZoltanComponent/CCA_Wrapper/HSFC_prop.cpp	/^int ZoltanSpace::HSFC_LB::GetParameter(char *key, int *i)$/;"	f	class:ZoltanSpace::HSFC_LB
GetParameter	ZoltanComponent/CCA_Wrapper/OctTree_prop.cpp	/^int ZoltanSpace::OctTree_LB::GetParameter(char *key, bool *b)$/;"	f	class:ZoltanSpace::OctTree_LB
GetParameter	ZoltanComponent/CCA_Wrapper/OctTree_prop.cpp	/^int ZoltanSpace::OctTree_LB::GetParameter(char *key, char **val)$/;"	f	class:ZoltanSpace::OctTree_LB
GetParameter	ZoltanComponent/CCA_Wrapper/OctTree_prop.cpp	/^int ZoltanSpace::OctTree_LB::GetParameter(char *key, double *d)$/;"	f	class:ZoltanSpace::OctTree_LB
GetParameter	ZoltanComponent/CCA_Wrapper/OctTree_prop.cpp	/^int ZoltanSpace::OctTree_LB::GetParameter(char *key, int *i)$/;"	f	class:ZoltanSpace::OctTree_LB
GetParameter	ZoltanComponent/CCA_Wrapper/ParMetis_prop.cpp	/^int ZoltanSpace::ParMetis_LB::GetParameter(char *key, bool *b)$/;"	f	class:ZoltanSpace::ParMetis_LB
GetParameter	ZoltanComponent/CCA_Wrapper/ParMetis_prop.cpp	/^int ZoltanSpace::ParMetis_LB::GetParameter(char *key, char **val)$/;"	f	class:ZoltanSpace::ParMetis_LB
GetParameter	ZoltanComponent/CCA_Wrapper/ParMetis_prop.cpp	/^int ZoltanSpace::ParMetis_LB::GetParameter(char *key, double *d)$/;"	f	class:ZoltanSpace::ParMetis_LB
GetParameter	ZoltanComponent/CCA_Wrapper/ParMetis_prop.cpp	/^int ZoltanSpace::ParMetis_LB::GetParameter(char *key, int *i)$/;"	f	class:ZoltanSpace::ParMetis_LB
GetParameter	ZoltanComponent/CCA_Wrapper/RCB_prop.cpp	/^int ZoltanSpace::RCB_LB::GetParameter(char *key, bool *b)$/;"	f	class:ZoltanSpace::RCB_LB
GetParameter	ZoltanComponent/CCA_Wrapper/RCB_prop.cpp	/^int ZoltanSpace::RCB_LB::GetParameter(char *key, char **val)$/;"	f	class:ZoltanSpace::RCB_LB
GetParameter	ZoltanComponent/CCA_Wrapper/RCB_prop.cpp	/^int ZoltanSpace::RCB_LB::GetParameter(char *key, double *d)$/;"	f	class:ZoltanSpace::RCB_LB
GetParameter	ZoltanComponent/CCA_Wrapper/RCB_prop.cpp	/^int ZoltanSpace::RCB_LB::GetParameter(char *key, int *i)$/;"	f	class:ZoltanSpace::RCB_LB
GetParameter	ZoltanComponent/CCA_Wrapper/RIB_prop.cpp	/^int ZoltanSpace::RIB_LB::GetParameter(char *key, bool *b)$/;"	f	class:ZoltanSpace::RIB_LB
GetParameter	ZoltanComponent/CCA_Wrapper/RIB_prop.cpp	/^int ZoltanSpace::RIB_LB::GetParameter(char *key, char **val)$/;"	f	class:ZoltanSpace::RIB_LB
GetParameter	ZoltanComponent/CCA_Wrapper/RIB_prop.cpp	/^int ZoltanSpace::RIB_LB::GetParameter(char *key, double *d)$/;"	f	class:ZoltanSpace::RIB_LB
GetParameter	ZoltanComponent/CCA_Wrapper/RIB_prop.cpp	/^int ZoltanSpace::RIB_LB::GetParameter(char *key, int *i)$/;"	f	class:ZoltanSpace::RIB_LB
GetResidentProcsList	ZoltanComponent/CCA_Wrapper/EntityListImpl.h	/^    virtual int *GetResidentProcsList() { return(proc_list) ; }$/;"	f	class:ZoltanSpace::EntityListImpl
Get_Border_Obj_List	zz/zz_const.h	/^  ZOLTAN_BORDER_OBJ_LIST_FN *Get_Border_Obj_List;  $/;"	m	struct:Zoltan_Struct
Get_Border_Obj_List_Data	zz/zz_const.h	/^  void *Get_Border_Obj_List_Data;      \/* Ptr to user defined data$/;"	m	struct:Zoltan_Struct
Get_Border_Obj_List_Fort	zz/zz_const.h	/^  ZOLTAN_BORDER_OBJ_LIST_FORT_FN *Get_Border_Obj_List_Fort; $/;"	m	struct:Zoltan_Struct
Get_C_Handle	include/zoltan_cpp.h	/^  Zoltan_Struct *Get_C_Handle(void)$/;"	f	class:Zoltan
Get_Child_List	zz/zz_const.h	/^  ZOLTAN_CHILD_LIST_FN *Get_Child_List;        $/;"	m	struct:Zoltan_Struct
Get_Child_List_Data	zz/zz_const.h	/^  void *Get_Child_List_Data;           \/* Ptr to user defined data$/;"	m	struct:Zoltan_Struct
Get_Child_List_Fort	zz/zz_const.h	/^  ZOLTAN_CHILD_LIST_FORT_FN *Get_Child_List_Fort;  $/;"	m	struct:Zoltan_Struct
Get_Child_Weight	zz/zz_const.h	/^  ZOLTAN_CHILD_WEIGHT_FN *Get_Child_Weight;    $/;"	m	struct:Zoltan_Struct
Get_Child_Weight_Data	zz/zz_const.h	/^  void *Get_Child_Weight_Data;         \/* Ptr to user defined data$/;"	m	struct:Zoltan_Struct
Get_Child_Weight_Fort	zz/zz_const.h	/^  ZOLTAN_CHILD_WEIGHT_FORT_FN *Get_Child_Weight_Fort; $/;"	m	struct:Zoltan_Struct
Get_Coarse_Obj_List	zz/zz_const.h	/^  ZOLTAN_COARSE_OBJ_LIST_FN *Get_Coarse_Obj_List;  $/;"	m	struct:Zoltan_Struct
Get_Coarse_Obj_List_Data	zz/zz_const.h	/^  void *Get_Coarse_Obj_List_Data;      \/* Ptr to user defined data$/;"	m	struct:Zoltan_Struct
Get_Coarse_Obj_List_Fort	zz/zz_const.h	/^  ZOLTAN_COARSE_OBJ_LIST_FORT_FN *Get_Coarse_Obj_List_Fort; $/;"	m	struct:Zoltan_Struct
Get_Edge_List	zz/zz_const.h	/^  ZOLTAN_EDGE_LIST_FN *Get_Edge_List;  \/* Fn ptr to get an object's edge list.*\/$/;"	m	struct:Zoltan_Struct
Get_Edge_List_Data	zz/zz_const.h	/^  void *Get_Edge_List_Data;            \/* Ptr to user defined data$/;"	m	struct:Zoltan_Struct
Get_Edge_List_Fort	zz/zz_const.h	/^  ZOLTAN_EDGE_LIST_FORT_FN *Get_Edge_List_Fort;$/;"	m	struct:Zoltan_Struct
Get_Edge_List_Multi	zz/zz_const.h	/^  ZOLTAN_EDGE_LIST_MULTI_FN *Get_Edge_List_Multi;  $/;"	m	struct:Zoltan_Struct
Get_Edge_List_Multi_Data	zz/zz_const.h	/^  void *Get_Edge_List_Multi_Data;            \/* Ptr to user defined data$/;"	m	struct:Zoltan_Struct
Get_Edge_List_Multi_Fort	zz/zz_const.h	/^  ZOLTAN_EDGE_LIST_MULTI_FORT_FN *Get_Edge_List_Multi_Fort;$/;"	m	struct:Zoltan_Struct
Get_First_Border_Obj	zz/zz_const.h	/^  ZOLTAN_FIRST_BORDER_OBJ_FN *Get_First_Border_Obj;$/;"	m	struct:Zoltan_Struct
Get_First_Border_Obj_Data	zz/zz_const.h	/^  void *Get_First_Border_Obj_Data;     \/* Ptr to user defined data$/;"	m	struct:Zoltan_Struct
Get_First_Border_Obj_Fort	zz/zz_const.h	/^  ZOLTAN_FIRST_BORDER_OBJ_FORT_FN *Get_First_Border_Obj_Fort; $/;"	m	struct:Zoltan_Struct
Get_First_Coarse_Obj	zz/zz_const.h	/^  ZOLTAN_FIRST_COARSE_OBJ_FN *Get_First_Coarse_Obj;$/;"	m	struct:Zoltan_Struct
Get_First_Coarse_Obj_Data	zz/zz_const.h	/^  void *Get_First_Coarse_Obj_Data;     \/* Ptr to user defined data$/;"	m	struct:Zoltan_Struct
Get_First_Coarse_Obj_Fort	zz/zz_const.h	/^  ZOLTAN_FIRST_COARSE_OBJ_FORT_FN *Get_First_Coarse_Obj_Fort; $/;"	m	struct:Zoltan_Struct
Get_First_Obj	zz/zz_const.h	/^  ZOLTAN_FIRST_OBJ_FN *Get_First_Obj;  \/* Fn ptr to get the first   $/;"	m	struct:Zoltan_Struct
Get_First_Obj_Data	zz/zz_const.h	/^  void *Get_First_Obj_Data;            \/* Ptr to user defined data$/;"	m	struct:Zoltan_Struct
Get_First_Obj_Fort	zz/zz_const.h	/^  ZOLTAN_FIRST_OBJ_FORT_FN *Get_First_Obj_Fort;$/;"	m	struct:Zoltan_Struct
Get_Fixed_Obj_List	zz/zz_const.h	/^  ZOLTAN_FIXED_OBJ_LIST_FN *Get_Fixed_Obj_List;$/;"	m	struct:Zoltan_Struct
Get_Fixed_Obj_List_Data	zz/zz_const.h	/^  void *Get_Fixed_Obj_List_Data;            \/* Ptr to user defined data to be$/;"	m	struct:Zoltan_Struct
Get_Fixed_Obj_List_Fort	zz/zz_const.h	/^  ZOLTAN_FIXED_OBJ_LIST_FORT_FN *Get_Fixed_Obj_List_Fort;  $/;"	m	struct:Zoltan_Struct
Get_Geom	zz/zz_const.h	/^  ZOLTAN_GEOM_FN *Get_Geom;            \/* Fn ptr to get an object's$/;"	m	struct:Zoltan_Struct
Get_Geom_Data	zz/zz_const.h	/^  void *Get_Geom_Data;                 \/* Ptr to user defined data$/;"	m	struct:Zoltan_Struct
Get_Geom_Fort	zz/zz_const.h	/^  ZOLTAN_GEOM_FORT_FN *Get_Geom_Fort;  \/* Fortran version            *\/$/;"	m	struct:Zoltan_Struct
Get_Geom_Multi	zz/zz_const.h	/^  ZOLTAN_GEOM_MULTI_FN *Get_Geom_Multi;        $/;"	m	struct:Zoltan_Struct
Get_Geom_Multi_Data	zz/zz_const.h	/^  void *Get_Geom_Multi_Data;           \/* Ptr to user defined data$/;"	m	struct:Zoltan_Struct
Get_Geom_Multi_Fort	zz/zz_const.h	/^  ZOLTAN_GEOM_MULTI_FORT_FN *Get_Geom_Multi_Fort; $/;"	m	struct:Zoltan_Struct
Get_HG_CS	zz/zz_const.h	/^  ZOLTAN_HG_CS_FN *Get_HG_CS;    $/;"	m	struct:Zoltan_Struct
Get_HG_CS_Data	zz/zz_const.h	/^  void *Get_HG_CS_Data;                \/* Ptr to user defined data$/;"	m	struct:Zoltan_Struct
Get_HG_CS_Fort	zz/zz_const.h	/^  ZOLTAN_HG_CS_FORT_FN *Get_HG_CS_Fort;$/;"	m	struct:Zoltan_Struct
Get_HG_Edge_Wts	zz/zz_const.h	/^  ZOLTAN_HG_EDGE_WTS_FN *Get_HG_Edge_Wts;    $/;"	m	struct:Zoltan_Struct
Get_HG_Edge_Wts_Data	zz/zz_const.h	/^  void *Get_HG_Edge_Wts_Data;                \/* Ptr to user defined data$/;"	m	struct:Zoltan_Struct
Get_HG_Edge_Wts_Fort	zz/zz_const.h	/^  ZOLTAN_HG_EDGE_WTS_FORT_FN *Get_HG_Edge_Wts_Fort;$/;"	m	struct:Zoltan_Struct
Get_HG_Size_CS	zz/zz_const.h	/^  ZOLTAN_HG_SIZE_CS_FN *Get_HG_Size_CS;    $/;"	m	struct:Zoltan_Struct
Get_HG_Size_CS_Data	zz/zz_const.h	/^  void *Get_HG_Size_CS_Data;         \/* Ptr to user defined data$/;"	m	struct:Zoltan_Struct
Get_HG_Size_CS_Fort	zz/zz_const.h	/^  ZOLTAN_HG_SIZE_CS_FORT_FN *Get_HG_Size_CS_Fort;$/;"	m	struct:Zoltan_Struct
Get_HG_Size_Edge_Wts	zz/zz_const.h	/^  ZOLTAN_HG_SIZE_EDGE_WTS_FN *Get_HG_Size_Edge_Wts;    $/;"	m	struct:Zoltan_Struct
Get_HG_Size_Edge_Wts_Data	zz/zz_const.h	/^  void *Get_HG_Size_Edge_Wts_Data;     \/* Ptr to user defined data to be$/;"	m	struct:Zoltan_Struct
Get_HG_Size_Edge_Wts_Fort	zz/zz_const.h	/^  ZOLTAN_HG_SIZE_EDGE_WTS_FORT_FN *Get_HG_Size_Edge_Wts_Fort;$/;"	m	struct:Zoltan_Struct
Get_Hier_Method	zz/zz_const.h	/^  ZOLTAN_HIER_METHOD_FN *Get_Hier_Method;$/;"	m	struct:Zoltan_Struct
Get_Hier_Method_Data	zz/zz_const.h	/^  void *Get_Hier_Method_Data;          \/* Ptr to user defined data to be passed$/;"	m	struct:Zoltan_Struct
Get_Hier_Method_Fort	zz/zz_const.h	/^  ZOLTAN_HIER_METHOD_FORT_FN *Get_Hier_Method_Fort;$/;"	m	struct:Zoltan_Struct
Get_Hier_Num_Levels	zz/zz_const.h	/^  ZOLTAN_HIER_NUM_LEVELS_FN *Get_Hier_Num_Levels;$/;"	m	struct:Zoltan_Struct
Get_Hier_Num_Levels_Data	zz/zz_const.h	/^  void *Get_Hier_Num_Levels_Data;      \/* Ptr to user defined data to be passed$/;"	m	struct:Zoltan_Struct
Get_Hier_Num_Levels_Fort	zz/zz_const.h	/^  ZOLTAN_HIER_NUM_LEVELS_FORT_FN *Get_Hier_Num_Levels_Fort;$/;"	m	struct:Zoltan_Struct
Get_Hier_Part	zz/zz_const.h	/^  ZOLTAN_HIER_PART_FN *Get_Hier_Part;  \/* Function that returns the part$/;"	m	struct:Zoltan_Struct
Get_Hier_Part_Data	zz/zz_const.h	/^  void *Get_Hier_Part_Data;            \/* Ptr to user defined data to be passed$/;"	m	struct:Zoltan_Struct
Get_Hier_Part_Fort	zz/zz_const.h	/^  ZOLTAN_HIER_PART_FORT_FN *Get_Hier_Part_Fort;$/;"	m	struct:Zoltan_Struct
Get_Next_Border_Obj	zz/zz_const.h	/^  ZOLTAN_NEXT_BORDER_OBJ_FN *Get_Next_Border_Obj;  $/;"	m	struct:Zoltan_Struct
Get_Next_Border_Obj_Data	zz/zz_const.h	/^  void *Get_Next_Border_Obj_Data;      \/* Ptr to user defined data$/;"	m	struct:Zoltan_Struct
Get_Next_Border_Obj_Fort	zz/zz_const.h	/^  ZOLTAN_NEXT_BORDER_OBJ_FORT_FN *Get_Next_Border_Obj_Fort; $/;"	m	struct:Zoltan_Struct
Get_Next_Coarse_Obj	zz/zz_const.h	/^  ZOLTAN_NEXT_COARSE_OBJ_FN *Get_Next_Coarse_Obj;  $/;"	m	struct:Zoltan_Struct
Get_Next_Coarse_Obj_Data	zz/zz_const.h	/^  void *Get_Next_Coarse_Obj_Data;      \/* Ptr to user defined data$/;"	m	struct:Zoltan_Struct
Get_Next_Coarse_Obj_Fort	zz/zz_const.h	/^  ZOLTAN_NEXT_COARSE_OBJ_FORT_FN *Get_Next_Coarse_Obj_Fort; $/;"	m	struct:Zoltan_Struct
Get_Next_Obj	zz/zz_const.h	/^  ZOLTAN_NEXT_OBJ_FN *Get_Next_Obj;    \/* Fn ptr to get the next   $/;"	m	struct:Zoltan_Struct
Get_Next_Obj_Data	zz/zz_const.h	/^  void *Get_Next_Obj_Data;             \/* Ptr to user defined data$/;"	m	struct:Zoltan_Struct
Get_Next_Obj_Fort	zz/zz_const.h	/^  ZOLTAN_NEXT_OBJ_FORT_FN *Get_Next_Obj_Fort;  $/;"	m	struct:Zoltan_Struct
Get_Num_Border_Obj	zz/zz_const.h	/^  ZOLTAN_NUM_BORDER_OBJ_FN *Get_Num_Border_Obj;$/;"	m	struct:Zoltan_Struct
Get_Num_Border_Obj_Data	zz/zz_const.h	/^  void *Get_Num_Border_Obj_Data;       \/* Ptr to user defined data$/;"	m	struct:Zoltan_Struct
Get_Num_Border_Obj_Fort	zz/zz_const.h	/^  ZOLTAN_NUM_BORDER_OBJ_FORT_FN *Get_Num_Border_Obj_Fort; $/;"	m	struct:Zoltan_Struct
Get_Num_Child	zz/zz_const.h	/^  ZOLTAN_NUM_CHILD_FN *Get_Num_Child;  \/* Fn ptr to get the number of$/;"	m	struct:Zoltan_Struct
Get_Num_Child_Data	zz/zz_const.h	/^  void *Get_Num_Child_Data;            \/* Ptr to user defined data$/;"	m	struct:Zoltan_Struct
Get_Num_Child_Fort	zz/zz_const.h	/^  ZOLTAN_NUM_CHILD_FORT_FN *Get_Num_Child_Fort;$/;"	m	struct:Zoltan_Struct
Get_Num_Coarse_Obj	zz/zz_const.h	/^  ZOLTAN_NUM_COARSE_OBJ_FN *Get_Num_Coarse_Obj;$/;"	m	struct:Zoltan_Struct
Get_Num_Coarse_Obj_Data	zz/zz_const.h	/^  void *Get_Num_Coarse_Obj_Data;       \/* Ptr to user defined data$/;"	m	struct:Zoltan_Struct
Get_Num_Coarse_Obj_Fort	zz/zz_const.h	/^  ZOLTAN_NUM_COARSE_OBJ_FORT_FN *Get_Num_Coarse_Obj_Fort; $/;"	m	struct:Zoltan_Struct
Get_Num_Edges	zz/zz_const.h	/^  ZOLTAN_NUM_EDGES_FN *Get_Num_Edges;  \/* Fn ptr to get an object's$/;"	m	struct:Zoltan_Struct
Get_Num_Edges_Data	zz/zz_const.h	/^  void *Get_Num_Edges_Data;            \/* Ptr to user defined data$/;"	m	struct:Zoltan_Struct
Get_Num_Edges_Fort	zz/zz_const.h	/^  ZOLTAN_NUM_EDGES_FORT_FN *Get_Num_Edges_Fort;$/;"	m	struct:Zoltan_Struct
Get_Num_Edges_Multi	zz/zz_const.h	/^  ZOLTAN_NUM_EDGES_MULTI_FN *Get_Num_Edges_Multi;  $/;"	m	struct:Zoltan_Struct
Get_Num_Edges_Multi_Data	zz/zz_const.h	/^  void *Get_Num_Edges_Multi_Data;      \/* Ptr to user defined data$/;"	m	struct:Zoltan_Struct
Get_Num_Edges_Multi_Fort	zz/zz_const.h	/^  ZOLTAN_NUM_EDGES_MULTI_FORT_FN *Get_Num_Edges_Multi_Fort;$/;"	m	struct:Zoltan_Struct
Get_Num_Fixed_Obj	zz/zz_const.h	/^  ZOLTAN_NUM_FIXED_OBJ_FN *Get_Num_Fixed_Obj;$/;"	m	struct:Zoltan_Struct
Get_Num_Fixed_Obj_Data	zz/zz_const.h	/^  void *Get_Num_Fixed_Obj_Data;             \/* Ptr to user defined data to be$/;"	m	struct:Zoltan_Struct
Get_Num_Fixed_Obj_Fort	zz/zz_const.h	/^  ZOLTAN_NUM_FIXED_OBJ_FORT_FN *Get_Num_Fixed_Obj_Fort;  $/;"	m	struct:Zoltan_Struct
Get_Num_Geom	zz/zz_const.h	/^  ZOLTAN_NUM_GEOM_FN *Get_Num_Geom;    \/* Fn ptr to get an object's$/;"	m	struct:Zoltan_Struct
Get_Num_Geom_Data	zz/zz_const.h	/^  void *Get_Num_Geom_Data;             \/* Ptr to user defined data$/;"	m	struct:Zoltan_Struct
Get_Num_Geom_Fort	zz/zz_const.h	/^  ZOLTAN_NUM_GEOM_FORT_FN *Get_Num_Geom_Fort;  $/;"	m	struct:Zoltan_Struct
Get_Num_Obj	zz/zz_const.h	/^  ZOLTAN_NUM_OBJ_FN *Get_Num_Obj;      \/* Fn ptr to get a proc's  $/;"	m	struct:Zoltan_Struct
Get_Num_Obj_Data	zz/zz_const.h	/^  void *Get_Num_Obj_Data;              \/* Ptr to user defined data$/;"	m	struct:Zoltan_Struct
Get_Num_Obj_Fort	zz/zz_const.h	/^  ZOLTAN_NUM_OBJ_FORT_FN *Get_Num_Obj_Fort;    $/;"	m	struct:Zoltan_Struct
Get_Obj_List	zz/zz_const.h	/^  ZOLTAN_OBJ_LIST_FN *Get_Obj_List;    \/* Fn ptr to get all local$/;"	m	struct:Zoltan_Struct
Get_Obj_List_Data	zz/zz_const.h	/^  void *Get_Obj_List_Data;             \/* Ptr to user defined data$/;"	m	struct:Zoltan_Struct
Get_Obj_List_Fort	zz/zz_const.h	/^  ZOLTAN_OBJ_LIST_FORT_FN *Get_Obj_List_Fort;  $/;"	m	struct:Zoltan_Struct
Get_Obj_Size	zz/zz_const.h	/^  ZOLTAN_OBJ_SIZE_FN *Get_Obj_Size;    \/* Function that returns the size of$/;"	m	struct:Zoltan_Struct
Get_Obj_Size_Data	zz/zz_const.h	/^  void *Get_Obj_Size_Data;             \/* Ptr to user defined data to be$/;"	m	struct:Zoltan_Struct
Get_Obj_Size_Fort	zz/zz_const.h	/^  ZOLTAN_OBJ_SIZE_FORT_FN *Get_Obj_Size_Fort;$/;"	m	struct:Zoltan_Struct
Get_Obj_Size_Multi	zz/zz_const.h	/^  ZOLTAN_OBJ_SIZE_MULTI_FN *Get_Obj_Size_Multi;$/;"	m	struct:Zoltan_Struct
Get_Obj_Size_Multi_Data	zz/zz_const.h	/^  void *Get_Obj_Size_Multi_Data;       \/* Ptr to user defined data to be$/;"	m	struct:Zoltan_Struct
Get_Obj_Size_Multi_Fort	zz/zz_const.h	/^  ZOLTAN_OBJ_SIZE_MULTI_FORT_FN *Get_Obj_Size_Multi_Fort;$/;"	m	struct:Zoltan_Struct
Get_Part	zz/zz_const.h	/^  ZOLTAN_PART_FN *Get_Part;            \/* Fn ptr to get an object's$/;"	m	struct:Zoltan_Struct
Get_Part_Data	zz/zz_const.h	/^  void *Get_Part_Data;                 \/* Ptr to user defined data$/;"	m	struct:Zoltan_Struct
Get_Part_Fort	zz/zz_const.h	/^  ZOLTAN_PART_FORT_FN *Get_Part_Fort;  \/* Fortran version            *\/$/;"	m	struct:Zoltan_Struct
Get_Part_Multi	zz/zz_const.h	/^  ZOLTAN_PART_MULTI_FN *Get_Part_Multi;\/* Fn ptr to get objects'$/;"	m	struct:Zoltan_Struct
Get_Part_Multi_Data	zz/zz_const.h	/^  void *Get_Part_Multi_Data;           \/* Ptr to user defined data to be $/;"	m	struct:Zoltan_Struct
Get_Part_Multi_Fort	zz/zz_const.h	/^  ZOLTAN_PART_MULTI_FORT_FN *Get_Part_Multi_Fort;$/;"	m	struct:Zoltan_Struct
Get_Processor_Name	zz/zz_const.h	/^  ZOLTAN_PROC_NAME_FN *Get_Processor_Name; $/;"	m	struct:Zoltan_Struct
Get_Processor_Name_Data	zz/zz_const.h	/^  void *Get_Processor_Name_Data;       \/* Ptr to user defined data   *\/$/;"	m	struct:Zoltan_Struct
Global_ID	oct/octant_const.h	/^  ZOLTAN_ID_PTR Global_ID;            \/* Global ID for the object.          *\/$/;"	m	struct:Region_Node
Global_IDs	rcb/rcb.h	/^  ZOLTAN_ID_PTR Global_IDs;  \/* Pointer to array of global IDs; global ID of $/;"	m	struct:RCB_Struct
Global_IDs	rcb/rib.h	/^    ZOLTAN_ID_PTR Global_IDs;       \/* This array is NOT used if Zoltan_RB_Use_IDs returns$/;"	m	struct:RIB_Struct
Global_num	lb/lb_const.h	/^  int Global_num;      \/*  Global partition numbers? *\/$/;"	m	struct:Zoltan_part_info
Globals	ZoltanComponent/CCA_Wrapper/ZoltanApplQueryFunc.cpp	/^  namespace Globals$/;"	n	namespace:ZoltanSpace	file:
GnRepartEdge	phg/phg_hypergraph.h	/^  int GnRepartEdge;         \/* Global number of repartition edges added for$/;"	m	struct:Zoltan_HGraph
GnRepartVtx	phg/phg_hypergraph.h	/^  int GnRepartVtx;          \/* Global number of repartition vtxs added for$/;"	m	struct:Zoltan_HGraph
Gnuplot	driver/dr_const.h	/^  int Gnuplot;$/;"	m	struct:Output_Flags
Gnuplot_Output	driver_old/dr_main.c	/^int Gnuplot_Output = 0;$/;"	v
Gnvtxs	ch/ch_init_dist.c	/^static int Gnvtxs;          \/* Global number of vertices (across all procs)  *\/$/;"	v	file:
GraphEdge	postprocessing/ordering/mm_input.h	/^} GraphEdge;$/;"	t	typeref:struct:GraphEdge_
GraphEdge_	postprocessing/ordering/mm_input.h	/^typedef struct GraphEdge_ {$/;"	s
Graph_Callbacks	driver/dr_const.h	/^  int Graph_Callbacks;      \/* Register and test graph callbacks *\/$/;"	m	struct:Test_Flags
Graph_Description	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^struct Graph_Description$/;"	s
Graph_File_Name	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/submain/submain.c	/^char     *Graph_File_Name = NULL;	\/* Input graph file name *\/$/;"	v
Graph_Package_params	parmetis/third_library.c	/^static PARAM_VARS Graph_Package_params[] = {$/;"	v	file:
Graph_params	parmetis/preprocessing.c	/^static PARAM_VARS Graph_params[] = {$/;"	v	file:
Gray2dIndexFromMap	oct/SFC.h	/^static int Gray2dIndexFromMap[2][4] = {$/;"	v
Gray2dIndexToMap	oct/SFC.h	/^static int Gray2dIndexToMap[2][4] = {$/;"	v
Gray2dRuleMap	oct/SFC.h	/^static int Gray2dRuleMap[2][4] = {$/;"	v
Gray3dIndexFromMap	oct/SFC.h	/^static int Gray3dIndexFromMap[4][8] = {$/;"	v
Gray3dIndexToMap	oct/SFC.h	/^static int Gray3dIndexToMap[4][8] = {$/;"	v
Gray3dRuleMap	oct/SFC.h	/^static int Gray3dRuleMap[4][8] = {$/;"	v
Grouping	phg/phg_hypergraph.h	/^typedef int *Grouping;  \/* length |V|, grouping information of vertices *\/$/;"	t
HALFPI	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/defs.h	11;"	d
HANDLE_ISOLATED_VERTICES	phg/phg_refinement.c	26;"	d	file:
HAVE_PROTOTYPES	include/zoltan_mem.h	29;"	d
HAVE_PROTOTYPES	params/params_const.h	26;"	d
HA_CSRC	makefile	/^HA_CSRC         = divide_machine.c get_processor_name.c \\$/;"	m
HA_INC	makefile	/^HA_INC          = ha_const.h ha_drum.h$/;"	m
HCUBE	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	262;"	d
HEADER_SIZE	phg/phg_match.c	2003;"	d	file:
HEADER_SIZE	phg/phg_match.c	516;"	d	file:
HEAP	zz/zz_heap.h	/^   } HEAP;$/;"	t	typeref:struct:__anon36
HEAVY_MATCH	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       HEAVY_MATCH = FALSE;	   \/* Encourage heavy match edges? (TRUE\/FALSE) *\/$/;"	v
HEINFO_ENTRIES	lb/lb_remap.c	32;"	d	file:
HEX1	driver/dr_elem_const.h	/^              SHELL1, SHELL2, TRI1, TRI2, TSHELL1, TSHELL2, HEX1,$/;"	e	enum:__anon40
HEX1	driver_old/dr_elem_const.h	/^              SHELL1, SHELL2, TRI1, TRI2, TSHELL1, TSHELL2, HEX1,$/;"	e	enum:__anon5
HEX2	driver/dr_elem_const.h	/^              S_HEX2, HEX2, TET1, TET2, WEDGE1, WEDGE2,$/;"	e	enum:__anon40
HEX2	driver_old/dr_elem_const.h	/^              S_HEX2, HEX2, TET1, TET2, WEDGE1, WEDGE2,$/;"	e	enum:__anon5
HEX20	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_elem_const.h	/^              HEX20, HEX27, HEXSHELL, TET4, TET10, TET8, WEDGE6, WEDGE15,$/;"	e	enum:__anon26
HEX27	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_elem_const.h	/^              HEX20, HEX27, HEXSHELL, TET4, TET10, TET8, WEDGE6, WEDGE15,$/;"	e	enum:__anon26
HEX8	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_elem_const.h	/^              SHELL4, SHELL8, TRI3, TRI6, TSHELL3, TSHELL6, HEX8,$/;"	e	enum:__anon26
HEXSHELL	driver/dr_elem_const.h	/^              HEXSHELL, NULL_EL} E_Type;$/;"	e	enum:__anon40
HEXSHELL	driver_old/dr_elem_const.h	/^              HEXSHELL, NULL_EL} E_Type;$/;"	e	enum:__anon5
HEXSHELL	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_elem_const.h	/^              HEX20, HEX27, HEXSHELL, TET4, TET10, TET8, WEDGE6, WEDGE15,$/;"	e	enum:__anon26
HG	phg/phg_hypergraph.h	/^  HGraph HG;                \/* Hypergraph for initial objects.       *\/$/;"	m	struct:Zoltan_HGraph
HG_Ptr	phg/phg_match.c	/^static HGraph *HG_Ptr;$/;"	v	file:
HG_readfile	driver/dr_hg_readfile.c	/^int HG_readfile ($/;"	f
HGraph	phg/phg_hypergraph.h	/^} HGraph;$/;"	t	typeref:struct:__anon38
HIER	lb/lb_const.h	/^  HIER,$/;"	e	enum:Zoltan_LB_Method
HIER_CHECK_GID_RANGE	hier/hier.c	95;"	d	file:
HIER_CSRC	makefile	/^HIER_CSRC       = hier.c hier_free_struct.c$/;"	m
HIER_DEBUG_ALL	hier/hier.h	93;"	d
HIER_DEBUG_LIST	hier/hier.h	92;"	d
HIER_DEBUG_NONE	hier/hier.h	91;"	d
HIER_DEBUG_PRINT	hier/hier.h	94;"	d
HIER_INC	makefile	/^HIER_INC        = hier.h$/;"	m
HILBERT	oct/octree_const.h	/^  int HILBERT;$/;"	m	struct:__anon32
HIPART	par/par_median_randomized.c	33;"	d	file:
HOP_COST	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/input/read_params.c	/^double    HOP_COST = 0.0;       \/* Communication cost of a hop. *\/$/;"	v
HSFC	lb/lb_const.h	/^  HSFC,$/;"	e	enum:Zoltan_LB_Method
HSFC_CSRC	makefile	/^HSFC_CSRC 	= hsfc_hilbert.c hsfc.c hsfc_box_assign.c hsfc_point_assign.c$/;"	m
HSFC_Data	hsfc/hsfc.h	/^   } HSFC_Data;                  \/* data preserved for point & box drop later *\/$/;"	t	typeref:struct:HSFC_Data
HSFC_Data	hsfc/hsfc.h	/^typedef struct HSFC_Data {$/;"	s
HSFC_EPSILON	hsfc/hsfc.h	/^static const double HSFC_EPSILON = 1.6e-7;$/;"	v
HSFC_INC	makefile	/^HSFC_INC 	= hsfc_hilbert_const.h hsfc_const.h hsfc.h$/;"	m
HSFC_LB	ZoltanComponent/CCA_Wrapper/HSFC.h	/^    HSFC_LB(PartitionerFactory_JR *q, int index, MPI_Comm *A) : BaseLB(q, index, A)$/;"	f	class:ZoltanSpace::HSFC_LB
HSFC_LB	ZoltanComponent/CCA_Wrapper/HSFC.h	/^  class HSFC_LB : public virtual BaseLB$/;"	c	namespace:ZoltanSpace
HSFC_LBHSeen	ZoltanComponent/CCA_Wrapper/HSFC.h	8;"	d
HSFC_compare	util/converters_for_JPDC_adaptive_mesh_experiments/chaco2chaco/main.c	/^int HSFC_compare (const void *key, const void *arg)$/;"	f
HSFC_params	hsfc/hsfc.c	/^static PARAM_VARS HSFC_params[] =$/;"	v	file:
HYPERCUBE	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	263;"	d
HYPERGRAPH	driver/dr_const.h	/^  HYPERGRAPH$/;"	e	enum:DATA_TYPE
HYPERGRAPH	lb/lb_const.h	/^  HYPERGRAPH,$/;"	e	enum:Zoltan_LB_Method
HYPERGRAPH_FILE	driver/dr_input_const.h	34;"	d
HYPERGRAPH_PARTITIONING	driver/dr_const.h	/^  HYPERGRAPH_PARTITIONING= 0,$/;"	e	enum:PARTITIONING_TYPE
H_f	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^typedef VOID H_f;	\/* character function *\/$/;"	t
H_f	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^typedef VOID H_f;	\/* character function *\/$/;"	t
H_fp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^typedef \/* Character *\/ VOID (*H_fp)();$/;"	t
H_fp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^typedef \/* Character *\/ VOID (*H_fp)(...);$/;"	t
H_fp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^typedef \/* Character *\/ VOID (*H_fp)();$/;"	t
H_fp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^typedef \/* Character *\/ VOID (*H_fp)(...);$/;"	t
Hash_Node	lb/lb_balance.c	/^struct Hash_Node {$/;"	s	file:
Hash_Node	parmetis/third_library_tools.h	/^struct Hash_Node {$/;"	s
HierGIDInfo	hier/hier.c	/^struct HierGIDInfo {$/;"	s	file:
HierPartParams	hier/hier.h	/^typedef struct HierPartParamsStruct HierPartParams;$/;"	t	typeref:struct:HierPartParamsStruct
HierPartParamsStruct	hier/hier.h	/^struct HierPartParamsStruct {$/;"	s
Hier_params	hier/hier.c	/^static PARAM_VARS Hier_params[] = {$/;"	v	file:
Hilbert2dIndexFromMap	oct/SFC.h	/^static int Hilbert2dIndexFromMap[4][4] = {$/;"	v
Hilbert2dIndexToMap	oct/SFC.h	/^static int Hilbert2dIndexToMap[4][4] = {$/;"	v
Hilbert2dRuleMap	oct/SFC.h	/^static int Hilbert2dRuleMap[4][4] = {$/;"	v
Hilbert3dIndexFromMap	oct/SFC.h	/^static int Hilbert3dIndexFromMap[24][8] = {$/;"	v
Hilbert3dIndexToMap	oct/SFC.h	/^static int Hilbert3dIndexToMap[24][8] = {$/;"	v
Hilbert3dRuleMap	oct/SFC.h	/^static int Hilbert3dRuleMap[24][8] = {$/;"	v
Hypergraph_Callbacks	driver/dr_const.h	/^  int Hypergraph_Callbacks; \/* Register and test hypergraph callbacks *\/$/;"	m	struct:Test_Flags
IDX_DATATYPE	parmetis/third_library_const.h	83;"	d
IDX_DATATYPE	parmetis/third_library_const.h	87;"	d
IDcount	oct/octupdate.c	/^static int IDcount = 0;                            \/* renumbering of octs *\/$/;"	v	file:
IMAX	hsfc/hsfc_hilbert_const.h	/^static unsigned const int IMAX = ~(0U);$/;"	v
IMAX	util/converters_for_JPDC_adaptive_mesh_experiments/chaco2chaco/hsfc_hilbert_const.h	/^static unsigned const int IMAX = ~(0U);$/;"	v
IMPORT_LISTS	driver/dr_const.h	/^  IMPORT_LISTS,$/;"	e	enum:LISTS
INCLUDE	ZoltanComponent/CCA_Wrapper/Makefile	/^INCLUDE = $(INCLUDE1) $(INCLUDE2) $(INCLUDE3) $(INCLUDE4) $(INCLUDE5) $/;"	m
INCLUDE	ZoltanComponent/TestComponents/Makefile	/^INCLUDE = $(INCLUDE1) $(INCLUDE2) $(INCLUDE3) $(INCLUDE4) $(INCLUDE5) $(INCLUDE6)$/;"	m
INCLUDE1	ZoltanComponent/CCA_Wrapper/Makefile	/^INCLUDE1 = -I$(MPI_HOME)\/include$/;"	m
INCLUDE1	ZoltanComponent/TestComponents/Makefile	/^INCLUDE1 = -I$(ZOLTAN_HOME) -I$(ZOLTAN_HOME)\/include \\$/;"	m
INCLUDE2	ZoltanComponent/CCA_Wrapper/Makefile	/^INCLUDE2 = $(CCA_INC)$/;"	m
INCLUDE2	ZoltanComponent/TestComponents/Makefile	/^INCLUDE2 = -I$(ZOLTAN_HOME)\/Utilities\/DDirectory -I$(ZOLTAN_HOME)\/driver$/;"	m
INCLUDE3	ZoltanComponent/CCA_Wrapper/Makefile	/^INCLUDE3 = -I$(ZOLTAN_HOME) -I$(ZOLTAN_HOME)\/include \\$/;"	m
INCLUDE3	ZoltanComponent/TestComponents/Makefile	/^INCLUDE3 = $(CCA_INC)$/;"	m
INCLUDE4	ZoltanComponent/CCA_Wrapper/Makefile	/^INCLUDE4 = -I $(DCCAFE_INCLUDE)$/;"	m
INCLUDE4	ZoltanComponent/TestComponents/Makefile	/^INCLUDE4 = -I $(ZOLTAN_PORTS_DIR)$/;"	m
INCLUDE5	ZoltanComponent/CCA_Wrapper/Makefile	/^INCLUDE5 = -I $(ZOLTAN_PORTS_DIR)\/$/;"	m
INCLUDE5	ZoltanComponent/TestComponents/Makefile	/^INCLUDE5 = -I$(DCCAFE_INCLUDE)$/;"	m
INCLUDE6	ZoltanComponent/TestComponents/Makefile	/^INCLUDE6 = -I$(MPI_HOME)\/include $/;"	m
INC_FORTRAN	makefile	/^  INC_FORTRAN	= inc_fortran$/;"	m
INC_PATH	Utilities/makefile	/^INC_PATH	= $(SUBINCPATH) $(INCLUDE_PATH) $(MPI_INCPATH)$/;"	m
INERTIAL	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	243;"	d
INFILE	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	247;"	d
INITIAL_COL	driver/dr_input_const.h	51;"	d
INITIAL_CYCLIC	driver/dr_input_const.h	48;"	d
INITIAL_FILE	driver/dr_input_const.h	46;"	d
INITIAL_LINEAR	driver/dr_input_const.h	47;"	d
INITIAL_OWNER	driver/dr_input_const.h	49;"	d
INITIAL_ROW	driver/dr_input_const.h	50;"	d
INITIAL_ZERO	driver/dr_input_const.h	52;"	d
INITLENGTH	Utilities/Timer/zoltan_timer.c	43;"	d	file:
INNER_PRODUCT	phg/phg_match.c	1999;"	d	file:
INNER_PRODUCT1	phg/phg_match.c	532;"	d	file:
INNER_PRODUCT2	phg/phg_match.c	2000;"	d	file:
INNER_PRODUCT2	phg/phg_match.c	560;"	d	file:
INTERNAL_VERTICES	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       INTERNAL_VERTICES = FALSE;	\/* ... to up internal vtxs? (TRUE\/FALSE) *\/$/;"	v
INTSORTCMP	matrix/common_sort.c	39;"	d	file:
INTSORTNAME	matrix/common_sort.c	/^INTSORTNAME ($/;"	f
INTSORTNAME	matrix/common_sort.c	36;"	d	file:
INTSORTSIZE	matrix/common_sort.c	37;"	d	file:
INTSORTSWAP	matrix/common_sort.c	38;"	d	file:
INT_EPSILON	parmetis/third_library.h	29;"	d
INT_EPSILON	phg/phg_parkway.c	187;"	d	file:
INT_SWAP	zz/zz_heap.c	24;"	d	file:
INUSE	Utilities/Timer/zoltan_timer.c	51;"	d	file:
IN_ASSIGN_INV	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       IN_ASSIGN_INV = FALSE; \/* Input file in inverse form? (TRUE\/FALSE) *\/$/;"	v
IOPort	ZoltanComponent/TestComponents/IOPort.h	/^   IOPort() {}$/;"	f	class:ZoltanTestSpace::IOPort
IOPort	ZoltanComponent/TestComponents/IOPort.h	/^  class IOPort : public virtual CONV_NS(Port)$/;"	c	namespace:ZoltanTestSpace
IOPortHSeen	ZoltanComponent/TestComponents/IOPort.h	2;"	d
IPM_TAG	phg/phg_match.c	2002;"	d	file:
IPM_TAG	phg/phg_match.c	514;"	d	file:
IS_BLANK	driver/dr_hg_io.c	46;"	d	file:
IS_EMPTY	phg/phg_tree.c	39;"	d	file:
IS_GLOBAL_GRAPH	parmetis/third_library_const.h	105;"	d
IS_INCLUDED	phg/phg_tree.c	40;"	d	file:
IS_LOCAL_GRAPH	parmetis/third_library_const.h	106;"	d
IS_NO_GRAPH	parmetis/third_library_const.h	104;"	d
I_fp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^typedef integer (*I_fp)();$/;"	t
I_fp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^typedef integer (*I_fp)(...);$/;"	t
I_fp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^typedef integer (*I_fp)();$/;"	t
I_fp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^typedef integer (*I_fp)(...);$/;"	t
Idx	lb/lb_const.h	/^  int Idx;             \/*  Partition weight index. *\/$/;"	m	struct:Zoltan_part_info
Imb_Tol_Len	lb/lb_const.h	/^  int  Imb_Tol_Len;               \/*  Length of Imbalance_Tol array.         *\/$/;"	m	struct:Zoltan_LB_Struct
Imbalance_Tol	lb/lb_const.h	/^  float *Imbalance_Tol;           \/*  Tolerance to which to load balance;$/;"	m	struct:Zoltan_LB_Struct
IncrementalAssignBox	ZoltanComponent/CCA_Wrapper/HSFC.cpp	/^int ZoltanSpace::HSFC_LB::IncrementalAssignBox(double *lbbc, double *ubbc, int ndim, $/;"	f	class:ZoltanSpace::HSFC_LB
IncrementalAssignBox	ZoltanComponent/CCA_Wrapper/OctTree.cpp	/^int ZoltanSpace::OctTree_LB::IncrementalAssignBox(double *lbbc, double *ubbc, int ndim, $/;"	f	class:ZoltanSpace::OctTree_LB
IncrementalAssignBox	ZoltanComponent/CCA_Wrapper/ParMetis.cpp	/^int ZoltanSpace::ParMetis_LB::IncrementalAssignBox(double *lbbc, double *ubbc, int ndim, $/;"	f	class:ZoltanSpace::ParMetis_LB
IncrementalAssignBox	ZoltanComponent/CCA_Wrapper/RCB.cpp	/^int ZoltanSpace::RCB_LB::IncrementalAssignBox(double *lbbc, double *ubbc, int ndim, $/;"	f	class:ZoltanSpace::RCB_LB
IncrementalAssignBox	ZoltanComponent/CCA_Wrapper/RIB.cpp	/^int ZoltanSpace::RIB_LB::IncrementalAssignBox(double *lbbc, double *ubbc, int ndim, $/;"	f	class:ZoltanSpace::RIB_LB
IncrementalAssignPoint	ZoltanComponent/CCA_Wrapper/HSFC.cpp	/^int ZoltanSpace::HSFC_LB::IncrementalAssignPoint(double *coords, int ndims, int *proc)$/;"	f	class:ZoltanSpace::HSFC_LB
IncrementalAssignPoint	ZoltanComponent/CCA_Wrapper/OctTree.cpp	/^int ZoltanSpace::OctTree_LB::IncrementalAssignPoint(double *coords, int ndims, int *proc)$/;"	f	class:ZoltanSpace::OctTree_LB
IncrementalAssignPoint	ZoltanComponent/CCA_Wrapper/ParMetis.cpp	/^int ZoltanSpace::ParMetis_LB::IncrementalAssignPoint(double *coords, int ndims, int *proc)$/;"	f	class:ZoltanSpace::ParMetis_LB
IncrementalAssignPoint	ZoltanComponent/CCA_Wrapper/RCB.cpp	/^int ZoltanSpace::RCB_LB::IncrementalAssignPoint(double *coords, int ndims, int *proc)$/;"	f	class:ZoltanSpace::RCB_LB
IncrementalAssignPoint	ZoltanComponent/CCA_Wrapper/RIB.cpp	/^int ZoltanSpace::RIB_LB::IncrementalAssignPoint(double *coords, int ndims, int *proc)$/;"	f	class:ZoltanSpace::RIB_LB
Index	driver/dr_const.h	/^  int  Index;         \/* index for vector params *\/$/;"	m	struct:Parameter_Description
Info	include/zoltan_comm_cpp.h	/^  int Info( int *nsends, int *send_procs,$/;"	f	class:Zoltan_Comm
Init	include/zoltan_timer_cpp.h	/^  int Init(const int &use_barrier, const std::string & name) {$/;"	f	class:Zoltan_Timer_Object
Initial_Method	ch/ch_init_dist.c	/^static int Initial_Method;  \/* Flag indicating which initial decomposition$/;"	v	file:
Input_Part	rcb/shared.h	/^  int Input_Part;               \/* Partition to which the dot is assigned$/;"	m	struct:Dot_Struct
Input_Parts	phg/phg_hypergraph.h	/^  int *Input_Parts;         \/* Initial partition #s for on-processor objects *\/$/;"	m	struct:Zoltan_HGraph
InternalColoring	coloring/coloring.c	/^static int InternalColoring($/;"	f	file:
InvSierpinski2d	reftree/reftree_coarse_path.c	/^static double InvSierpinski2d(ZZ *zz, double *coord)$/;"	f	file:
Invert_Lists	include/zoltan_cpp.h	/^  int Invert_Lists             ( const int &num_known,$/;"	f	class:Zoltan
Invert_Map	include/zoltan_comm_cpp.h	/^  static int Invert_Map( int *lengths_to, int *procs_to, $/;"	f	class:Zoltan_Comm
Invert_Plan	include/zoltan_comm_cpp.h	/^  int Invert_Plan()$/;"	f	class:Zoltan_Comm
JOSTLE	lb/lb_const.h	/^  JOSTLE,$/;"	e	enum:Zoltan_LB_Method
JOSTLE_LIBS	ZoltanComponent/CCA_Wrapper/Makefile	/^JOSTLE_LIBS = -ljostle$/;"	m
JOSTLE_LIBS	ZoltanComponent/TestComponents/Makefile	/^JOSTLE_LIBS = -ljostle$/;"	m
JPEG_FORMAT	util/vtk_view.cpp	155;"	d	file:
J_fp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^typedef shortint (*J_fp)();$/;"	t
J_fp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^typedef shortint (*J_fp)(...);$/;"	t
J_fp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^typedef shortint (*J_fp)();$/;"	t
J_fp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^typedef shortint (*J_fp)(...);$/;"	t
KEY	util/converters_for_JPDC_adaptive_mesh_experiments/chaco2chaco/main.c	/^struct KEY {$/;"	s	file:
KL_BAD_MOVES	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       KL_BAD_MOVES = 20;	\/* Number of unhelpful moves in a row allowed *\/$/;"	v
KL_IMBALANCE	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^double    KL_IMBALANCE = 0.0;	\/* Fractional imbalance allowed by KL *\/$/;"	v
KL_MAX_PASS	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klspiff/nway_kl.c	/^int KL_MAX_PASS = -1;		\/* max KL passes; infinite if <= 0 *\/$/;"	v
KL_METRIC	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       KL_METRIC = 2;	\/* KL interset cost: 1=>cuts, 2=>hops *\/$/;"	v
KL_NTRIES_BAD	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       KL_NTRIES_BAD = 1;	\/* # unhelpful passes before quitting KL *\/$/;"	v
KL_ONLY_BNDY	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       KL_ONLY_BNDY = TRUE;	   \/* Start moving vtxs on boundary? (TRUE\/FALSE) *\/$/;"	v
KL_RANDOM	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       KL_RANDOM = TRUE;	\/* Use randomness in Kernighan-Lin? (TRUE\/FALSE)*\/$/;"	v
KL_REFINE	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	248;"	d
KL_UNDO_LIST	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       KL_UNDO_LIST = TRUE;	\/* Only resort changed vtxs? (TRUE\/FALSE) *\/$/;"	v
KVHash	coloring/g2l_hash.h	/^typedef struct G2L_Hash KVHash;$/;"	t	typeref:struct:G2L_Hash
K_fp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^typedef shortlogical (*K_fp)();$/;"	t
K_fp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^typedef shortlogical (*K_fp)(...);$/;"	t
K_fp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^typedef shortlogical (*K_fp)();$/;"	t
K_fp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^typedef shortlogical (*K_fp)(...);$/;"	t
Key_params	params/key_params.c	/^static PARAM_VARS Key_params[] = {$/;"	v	file:
LANCZOS_CONVERGENCE_MODE	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       LANCZOS_CONVERGENCE_MODE = 0;	\/* Lanczos convergence test type: *\/$/;"	v
LANCZOS_MAXITNS	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       LANCZOS_MAXITNS = -1;		\/* Max Lanczos its; autoset if <= 0 *\/$/;"	v
LANCZOS_SO_INTERVAL	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       LANCZOS_SO_INTERVAL = 10;	\/* Itns. between SO orthog checks; set >= 2 *\/$/;"	v
LANCZOS_SO_PRECISION	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       LANCZOS_SO_PRECISION = 2;	\/* 2 => double Lanczos, 1 => float *\/$/;"	v
LANCZOS_TIME	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       LANCZOS_TIME = FALSE;	\/* Detailed Lanczos times? (TRUE\/FALSE) *\/$/;"	v
LANCZOS_TYPE	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       LANCZOS_TYPE = 3;	\/* type of Lanczos to use *\/$/;"	v
LARGE_GRAPH_PINS	phg/phg_serialpartition.c	143;"	d	file:
LARGE_GRAPH_VTX	phg/phg_serialpartition.c	142;"	d	file:
LASTARG	driver/dr_input.c	39;"	d	file:
LB	zz/zz_const.h	/^  struct Zoltan_LB_Struct LB;          \/* Struct with info for load balancing *\/$/;"	m	struct:Zoltan_Struct	typeref:struct:Zoltan_Struct::Zoltan_LB_Struct
LB_Array_Alloc	include/lbi_const.h	238;"	d
LB_BORDER_OBJ_LIST_FN	include/lbi_const.h	175;"	d
LB_BORDER_OBJ_LIST_FN_TYPE	fort/lbif.h	/^   LB_BORDER_OBJ_LIST_FN_TYPE  = &$/;"	v
LB_BORDER_OBJ_LIST_FN_TYPE	fort/lbif.h	/^   LB_BORDER_OBJ_LIST_FN_TYPE, &$/;"	v
LB_BORDER_OBJ_LIST_FN_TYPE	include/lbi_const.h	54;"	d
LB_BORDER_OBJ_LIST_FORT_FN	include/lbi_const.h	176;"	d
LB_Balance	fort/lbif.h	/^   LB_Balance, &$/;"	v
LB_Balance	include/lbi_const.h	222;"	d
LB_Box_Assign	fort/lbif.h	/^   LB_Box_Assign, &$/;"	v
LB_Box_Assign	include/lbi_const.h	231;"	d
LB_Box_PP_Assign	include/zoltan_cpp.h	/^  int LB_Box_PP_Assign ( const double &xmin,$/;"	f	class:Zoltan
LB_CHILD_LIST_FN	include/lbi_const.h	166;"	d
LB_CHILD_LIST_FN_TYPE	fort/lbif.h	/^   LB_CHILD_LIST_FN_TYPE       = &$/;"	v
LB_CHILD_LIST_FN_TYPE	fort/lbif.h	/^   LB_CHILD_LIST_FN_TYPE, &$/;"	v
LB_CHILD_LIST_FN_TYPE	include/lbi_const.h	68;"	d
LB_CHILD_LIST_FORT_FN	include/lbi_const.h	167;"	d
LB_CHILD_WEIGHT_FN	include/lbi_const.h	169;"	d
LB_CHILD_WEIGHT_FN_TYPE	fort/lbif.h	/^   LB_CHILD_WEIGHT_FN_TYPE     = &$/;"	v
LB_CHILD_WEIGHT_FN_TYPE	include/lbi_const.h	69;"	d
LB_CHILD_WEIGHT_FORT_FN	include/lbi_const.h	170;"	d
LB_COARSE_OBJ_LIST_FN	include/lbi_const.h	154;"	d
LB_COARSE_OBJ_LIST_FN_TYPE	fort/lbif.h	/^   LB_COARSE_OBJ_LIST_FN_TYPE  = &$/;"	v
LB_COARSE_OBJ_LIST_FN_TYPE	fort/lbif.h	/^   LB_COARSE_OBJ_LIST_FN_TYPE, &$/;"	v
LB_COARSE_OBJ_LIST_FN_TYPE	include/lbi_const.h	64;"	d
LB_COARSE_OBJ_LIST_FORT_FN	include/lbi_const.h	155;"	d
LB_CSRC	makefile	/^LB_CSRC		= lb_balance.c lb_eval.c lb_free.c lb_copy.c lb_init.c \\$/;"	m
LB_Comm_Create	include/lbi_const.h	250;"	d
LB_Comm_Destroy	include/lbi_const.h	251;"	d
LB_Comm_Do	include/lbi_const.h	256;"	d
LB_Comm_Do_Reverse	include/lbi_const.h	257;"	d
LB_Comm_Exchange_Sizes	include/lbi_const.h	254;"	d
LB_Comm_Invert_Map	include/lbi_const.h	252;"	d
LB_Comm_Resize	include/lbi_const.h	255;"	d
LB_Comm_Sort_Ints	include/lbi_const.h	253;"	d
LB_Compute_Destinations	fort/lbif.h	/^   LB_Compute_Destinations, &$/;"	v
LB_Compute_Destinations	include/lbi_const.h	226;"	d
LB_Create	fort/lbif.h	/^   LB_Create, &$/;"	v
LB_Create	include/lbi_const.h	190;"	d
LB_DOUBLE	fort/lbif.h	/^   LB_DOUBLE, &$/;"	v
LB_DOUBLE	fort/ztypes.f90	/^   LB_FLOAT = Zoltan_FLOAT, &$/;"	v	module:zoltan_types
LB_Description	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^struct LB_Description$/;"	s
LB_Destroy	fort/lbif.h	/^   LB_Destroy, &$/;"	v
LB_Destroy	include/lbi_const.h	191;"	d
LB_EDGE_LIST_FN	include/lbi_const.h	110;"	d
LB_EDGE_LIST_FN_TYPE	fort/lbif.h	/^   LB_EDGE_LIST_FN_TYPE, &$/;"	v
LB_EDGE_LIST_FN_TYPE	fort/lbif.h	/^! KDD:  I'd prefer, e.g.,  LB_EDGE_LIST_FN_TYPE = ZOLTAN_EDGE_LIST_FN_TYPE,$/;"	v
LB_EDGE_LIST_FN_TYPE	include/lbi_const.h	46;"	d
LB_EDGE_LIST_FORT_FN	include/lbi_const.h	111;"	d
LB_Eval	fort/lbif.h	/^   LB_Eval, &$/;"	v
LB_Eval	include/lbi_const.h	224;"	d
LB_Eval	include/zoltan_cpp.h	/^  int LB_Eval( const int &print_stats, ZOLTAN_BALANCE_EVAL *eval, $/;"	f	class:Zoltan
LB_Eval_Balance	include/zoltan_cpp.h	/^  int LB_Eval_Balance(int print_stats, ZOLTAN_BALANCE_EVAL *eval)$/;"	f	class:Zoltan
LB_Eval_Graph	include/zoltan_cpp.h	/^  int LB_Eval_Graph(int print_stats, ZOLTAN_GRAPH_EVAL *graph)$/;"	f	class:Zoltan
LB_Eval_HG	include/zoltan_cpp.h	/^  int LB_Eval_HG(int print_stats, ZOLTAN_HG_EVAL *hg)$/;"	f	class:Zoltan
LB_FATAL	fort/lbif.h	/^   LB_FATAL  = ZOLTAN_FATAL, &$/;"	v
LB_FATAL	fort/lbif.h	/^   LB_FATAL, &$/;"	v
LB_FATAL	include/lbi_const.h	100;"	d
LB_FIRST_BORDER_OBJ_FN	include/lbi_const.h	178;"	d
LB_FIRST_BORDER_OBJ_FN_TYPE	fort/lbif.h	/^   LB_FIRST_BORDER_OBJ_FN_TYPE = &$/;"	v
LB_FIRST_BORDER_OBJ_FN_TYPE	fort/lbif.h	/^   LB_FIRST_BORDER_OBJ_FN_TYPE, &$/;"	v
LB_FIRST_BORDER_OBJ_FN_TYPE	include/lbi_const.h	55;"	d
LB_FIRST_BORDER_OBJ_FORT_FN	include/lbi_const.h	179;"	d
LB_FIRST_COARSE_OBJ_FN	include/lbi_const.h	157;"	d
LB_FIRST_COARSE_OBJ_FN_TYPE	fort/lbif.h	/^   LB_FIRST_COARSE_OBJ_FN_TYPE = &$/;"	v
LB_FIRST_COARSE_OBJ_FN_TYPE	fort/lbif.h	/^   LB_FIRST_COARSE_OBJ_FN_TYPE, &$/;"	v
LB_FIRST_COARSE_OBJ_FN_TYPE	include/lbi_const.h	65;"	d
LB_FIRST_COARSE_OBJ_FORT_FN	include/lbi_const.h	158;"	d
LB_FIRST_OBJ_FN	include/lbi_const.h	125;"	d
LB_FIRST_OBJ_FN_TYPE	fort/lbif.h	/^   LB_FIRST_OBJ_FN_TYPE        = &$/;"	v
LB_FIRST_OBJ_FN_TYPE	fort/lbif.h	/^   LB_FIRST_OBJ_FN_TYPE, &$/;"	v
LB_FIRST_OBJ_FN_TYPE	include/lbi_const.h	51;"	d
LB_FIRST_OBJ_FORT_FN	include/lbi_const.h	126;"	d
LB_FLOAT	fort/lbif.h	/^   LB_FLOAT, &$/;"	v
LB_FLOAT	fort/ztypes.f90	/^   LB_INT_PTR = Zoltan_INT_PTR, &$/;"	v	module:zoltan_types
LB_FN_TYPE	include/lbi_const.h	/^typedef enum Zoltan_Fn_Type LB_FN_TYPE;$/;"	t	typeref:enum:Zoltan_Fn_Type
LB_FREE	include/lbi_const.h	245;"	d
LB_Fn	lb/lb_const.h	/^  ZOLTAN_LB_FN *LB_Fn;            \/*  Pointer to the function that performs$/;"	m	struct:Zoltan_LB_Struct
LB_Fn_Type	include/lbi_const.h	44;"	d
LB_Free	include/lbi_const.h	239;"	d
LB_Free_Data	fort/lbif.h	/^   LB_Free_Data, &$/;"	v
LB_Free_Data	include/lbi_const.h	223;"	d
LB_Free_Part	include/zoltan_cpp.h	/^  static int LB_Free_Part( ZOLTAN_ID_PTR *global_ids,$/;"	f	class:Zoltan
LB_GEOM_FN	include/lbi_const.h	116;"	d
LB_GEOM_FN_TYPE	fort/lbif.h	/^   LB_GEOM_FN_TYPE             = &$/;"	v
LB_GEOM_FN_TYPE	fort/lbif.h	/^   LB_GEOM_FN_TYPE, &$/;"	v
LB_GEOM_FN_TYPE	include/lbi_const.h	48;"	d
LB_GEOM_FORT_FN	include/lbi_const.h	117;"	d
LB_GET_PROCESSOR_NAME_FN	include/lbi_const.h	149;"	d
LB_GET_PROCESSOR_NAME_FN_TYPE	include/lbi_const.h	70;"	d
LB_HEX3D_OCT	fort/lbif.h	/^  LB_HEX3D_OCT     = ZOLTAN_HEX3D_OCT$/;"	v
LB_HEX3D_OCT	include/lbi_const.h	84;"	d
LB_Help_Migrate	include/lbi_const.h	227;"	d
LB_ID_MPI_TYPE	include/lbi_const.h	38;"	d
LB_ID_PTR	include/lbi_const.h	/^typedef ZOLTAN_ID_TYPE *LB_ID_PTR;$/;"	t
LB_ID_TYPE	include/lbi_const.h	/^typedef ZOLTAN_ID_TYPE  LB_ID_TYPE;$/;"	t
LB_INC	makefile	/^LB_INC		= lb_const.h lb_init_const.h$/;"	m
LB_INFO	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^typedef struct LB_Description  LB_INFO;$/;"	t	typeref:struct:LB_Description
LB_INFO_PTR	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^typedef struct LB_Description *LB_INFO_PTR;$/;"	t	typeref:struct:LB_Description
LB_INT	fort/ztypes.f90	/^integer, parameter :: &$/;"	v	module:zoltan_types
LB_INT_PTR	fort/ztypes.f90	/^   LB_INT = Zoltan_INT, &$/;"	v	module:zoltan_types
LB_IN_ORDER	fort/lbif.h	/^   LB_IN_ORDER, &$/;"	v
LB_IN_ORDER	fort/lbif.h	/^  LB_IN_ORDER      = ZOLTAN_IN_ORDER, &$/;"	v
LB_IN_ORDER	include/lbi_const.h	81;"	d
LB_Initialize	fort/lbif.h	/^   LB_Initialize, &$/;"	v
LB_Initialize	include/lbi_const.h	189;"	d
LB_MALLOC	include/lbi_const.h	243;"	d
LB_MAX_FN_TYPES	include/lbi_const.h	71;"	d
LB_MEMERR	fort/lbif.h	/^   LB_MEMERR = ZOLTAN_MEMERR$/;"	v
LB_MEMERR	include/lbi_const.h	101;"	d
LB_MID_MIGRATE_FN	include/lbi_const.h	137;"	d
LB_MID_MIGRATE_FN_TYPE	fort/lbif.h	/^   LB_MID_MIGRATE_FN_TYPE      = &$/;"	v
LB_MID_MIGRATE_FN_TYPE	fort/lbif.h	/^   LB_MID_MIGRATE_FN_TYPE, &$/;"	v
LB_MID_MIGRATE_FN_TYPE	include/lbi_const.h	58;"	d
LB_MID_MIGRATE_FORT_FN	include/lbi_const.h	138;"	d
LB_Malloc	include/lbi_const.h	236;"	d
LB_Memory_Num	include/lbi_const.h	242;"	d
LB_Memory_Stats	fort/lbif.h	/^   LB_Memory_Stats, &$/;"	v
LB_Memory_Stats	include/lbi_const.h	235;"	d
LB_Multifree	include/lbi_const.h	240;"	d
LB_NEXT_BORDER_OBJ_FN	include/lbi_const.h	181;"	d
LB_NEXT_BORDER_OBJ_FN_TYPE	fort/lbif.h	/^   LB_NEXT_BORDER_OBJ_FN_TYPE  = &$/;"	v
LB_NEXT_BORDER_OBJ_FN_TYPE	fort/lbif.h	/^   LB_NEXT_BORDER_OBJ_FN_TYPE, &$/;"	v
LB_NEXT_BORDER_OBJ_FN_TYPE	include/lbi_const.h	56;"	d
LB_NEXT_BORDER_OBJ_FORT_FN	include/lbi_const.h	182;"	d
LB_NEXT_COARSE_OBJ_FN	include/lbi_const.h	160;"	d
LB_NEXT_COARSE_OBJ_FN_TYPE	fort/lbif.h	/^   LB_NEXT_COARSE_OBJ_FN_TYPE  = &$/;"	v
LB_NEXT_COARSE_OBJ_FN_TYPE	fort/lbif.h	/^   LB_NEXT_COARSE_OBJ_FN_TYPE, &$/;"	v
LB_NEXT_COARSE_OBJ_FN_TYPE	include/lbi_const.h	66;"	d
LB_NEXT_COARSE_OBJ_FORT_FN	include/lbi_const.h	161;"	d
LB_NEXT_OBJ_FN	include/lbi_const.h	128;"	d
LB_NEXT_OBJ_FN_TYPE	fort/lbif.h	/^   LB_NEXT_OBJ_FN_TYPE         = &$/;"	v
LB_NEXT_OBJ_FN_TYPE	fort/lbif.h	/^   LB_NEXT_OBJ_FN_TYPE, &$/;"	v
LB_NEXT_OBJ_FN_TYPE	include/lbi_const.h	52;"	d
LB_NEXT_OBJ_FORT_FN	include/lbi_const.h	129;"	d
LB_NUM_BORDER_OBJ_FN	include/lbi_const.h	172;"	d
LB_NUM_BORDER_OBJ_FN_TYPE	fort/lbif.h	/^   LB_NUM_BORDER_OBJ_FN_TYPE   = &$/;"	v
LB_NUM_BORDER_OBJ_FN_TYPE	fort/lbif.h	/^   LB_NUM_BORDER_OBJ_FN_TYPE, &$/;"	v
LB_NUM_BORDER_OBJ_FN_TYPE	include/lbi_const.h	53;"	d
LB_NUM_BORDER_OBJ_FORT_FN	include/lbi_const.h	173;"	d
LB_NUM_CHILD_FN	include/lbi_const.h	163;"	d
LB_NUM_CHILD_FN_TYPE	fort/lbif.h	/^   LB_NUM_CHILD_FN_TYPE        = &$/;"	v
LB_NUM_CHILD_FN_TYPE	fort/lbif.h	/^   LB_NUM_CHILD_FN_TYPE, &$/;"	v
LB_NUM_CHILD_FN_TYPE	include/lbi_const.h	67;"	d
LB_NUM_CHILD_FORT_FN	include/lbi_const.h	164;"	d
LB_NUM_COARSE_OBJ_FN	include/lbi_const.h	151;"	d
LB_NUM_COARSE_OBJ_FN_TYPE	fort/lbif.h	/^   LB_NUM_COARSE_OBJ_FN_TYPE   = &$/;"	v
LB_NUM_COARSE_OBJ_FN_TYPE	fort/lbif.h	/^   LB_NUM_COARSE_OBJ_FN_TYPE, &$/;"	v
LB_NUM_COARSE_OBJ_FN_TYPE	include/lbi_const.h	63;"	d
LB_NUM_COARSE_OBJ_FORT_FN	include/lbi_const.h	152;"	d
LB_NUM_EDGES_FN	include/lbi_const.h	107;"	d
LB_NUM_EDGES_FN_TYPE	fort/lbif.h	/^   LB_NUM_EDGES_FN_TYPE, &$/;"	v
LB_NUM_EDGES_FN_TYPE	fort/lbif.h	/^! KDD:  I'd prefer, e.g.,  LB_NUM_EDGES_FN_TYPE = ZOLTAN_NUM_EDGES_FN_TYPE,$/;"	v
LB_NUM_EDGES_FN_TYPE	include/lbi_const.h	45;"	d
LB_NUM_EDGES_FORT_FN	include/lbi_const.h	108;"	d
LB_NUM_GEOM_FN	include/lbi_const.h	113;"	d
LB_NUM_GEOM_FN_TYPE	fort/lbif.h	/^   LB_NUM_GEOM_FN_TYPE         = &$/;"	v
LB_NUM_GEOM_FN_TYPE	fort/lbif.h	/^   LB_NUM_GEOM_FN_TYPE, &$/;"	v
LB_NUM_GEOM_FN_TYPE	include/lbi_const.h	47;"	d
LB_NUM_GEOM_FORT_FN	include/lbi_const.h	114;"	d
LB_NUM_OBJ_FN	include/lbi_const.h	119;"	d
LB_NUM_OBJ_FN_TYPE	fort/lbif.h	/^   LB_NUM_OBJ_FN_TYPE          = &$/;"	v
LB_NUM_OBJ_FN_TYPE	fort/lbif.h	/^   LB_NUM_OBJ_FN_TYPE, &$/;"	v
LB_NUM_OBJ_FN_TYPE	include/lbi_const.h	49;"	d
LB_NUM_OBJ_FORT_FN	include/lbi_const.h	120;"	d
LB_OBJ_LIST_FN	include/lbi_const.h	122;"	d
LB_OBJ_LIST_FN_TYPE	fort/lbif.h	/^   LB_OBJ_LIST_FN_TYPE         = &$/;"	v
LB_OBJ_LIST_FN_TYPE	fort/lbif.h	/^   LB_OBJ_LIST_FN_TYPE, &$/;"	v
LB_OBJ_LIST_FN_TYPE	include/lbi_const.h	50;"	d
LB_OBJ_LIST_FORT_FN	include/lbi_const.h	123;"	d
LB_OBJ_SIZE_FN	include/lbi_const.h	131;"	d
LB_OBJ_SIZE_FN_TYPE	fort/lbif.h	/^   LB_OBJ_SIZE_FN_TYPE         = &$/;"	v
LB_OBJ_SIZE_FN_TYPE	fort/lbif.h	/^   LB_OBJ_SIZE_FN_TYPE, &$/;"	v
LB_OBJ_SIZE_FN_TYPE	include/lbi_const.h	60;"	d
LB_OBJ_SIZE_FORT_FN	include/lbi_const.h	132;"	d
LB_OK	fort/lbif.h	/^   LB_OK     = ZOLTAN_OK, &$/;"	m	class:parameter
LB_OK	fort/lbif.h	/^   LB_OK, &$/;"	v
LB_OK	include/lbi_const.h	98;"	d
LB_OTHER_REF	fort/lbif.h	/^   LB_OTHER_REF, &$/;"	v
LB_OTHER_REF	fort/lbif.h	/^  LB_OTHER_REF     = ZOLTAN_OTHER_REF, &$/;"	m	class:parameter
LB_OTHER_REF	include/lbi_const.h	80;"	d
LB_PACK_OBJ_FN	include/lbi_const.h	143;"	d
LB_PACK_OBJ_FN_TYPE	fort/lbif.h	/^   LB_PACK_OBJ_FN_TYPE         = &$/;"	v
LB_PACK_OBJ_FN_TYPE	fort/lbif.h	/^   LB_PACK_OBJ_FN_TYPE, &$/;"	v
LB_PACK_OBJ_FN_TYPE	include/lbi_const.h	61;"	d
LB_PACK_OBJ_FORT_FN	include/lbi_const.h	144;"	d
LB_POST_MIGRATE_FN	include/lbi_const.h	140;"	d
LB_POST_MIGRATE_FN_TYPE	fort/lbif.h	/^   LB_POST_MIGRATE_FN_TYPE     = &$/;"	v
LB_POST_MIGRATE_FN_TYPE	fort/lbif.h	/^   LB_POST_MIGRATE_FN_TYPE, &$/;"	v
LB_POST_MIGRATE_FN_TYPE	include/lbi_const.h	59;"	d
LB_POST_MIGRATE_FORT_FN	include/lbi_const.h	141;"	d
LB_PRE_MIGRATE_FN	include/lbi_const.h	134;"	d
LB_PRE_MIGRATE_FN_TYPE	fort/lbif.h	/^   LB_PRE_MIGRATE_FN_TYPE      = &$/;"	v
LB_PRE_MIGRATE_FN_TYPE	fort/lbif.h	/^   LB_PRE_MIGRATE_FN_TYPE, &$/;"	v
LB_PRE_MIGRATE_FN_TYPE	include/lbi_const.h	57;"	d
LB_PRE_MIGRATE_FORT_FN	include/lbi_const.h	135;"	d
LB_Partition	include/zoltan_cpp.h	/^  int LB_Partition ( int &changes,$/;"	f	class:Zoltan
LB_Point_Assign	fort/lbif.h	/^   LB_Point_Assign, &$/;"	v
LB_Point_Assign	include/lbi_const.h	230;"	d
LB_Point_PP_Assign	include/zoltan_cpp.h	/^  int LB_Point_PP_Assign ( double * const coords,$/;"	f	class:Zoltan
LB_QUAD_QUAD	fort/lbif.h	/^   LB_QUAD_QUAD, &$/;"	v
LB_QUAD_QUAD	fort/lbif.h	/^  LB_QUAD_QUAD     = ZOLTAN_QUAD_QUAD, &$/;"	v
LB_QUAD_QUAD	include/lbi_const.h	83;"	d
LB_REALLOC	include/lbi_const.h	244;"	d
LB_REF_TYPE	include/lbi_const.h	/^typedef enum Zoltan_Ref_Type LB_REF_TYPE;$/;"	t	typeref:enum:Zoltan_Ref_Type
LB_Realloc	include/lbi_const.h	237;"	d
LB_Ref_Type	include/lbi_const.h	79;"	d
LB_Set_Border_Obj_List_Fn	fort/lbif.h	/^   LB_Set_Num_Border_Obj_Fn, LB_Set_Border_Obj_List_Fn, &$/;"	v
LB_Set_Border_Obj_List_Fn	include/lbi_const.h	204;"	d
LB_Set_Child_List_Fn	fort/lbif.h	/^   LB_Set_Num_Child_Fn, LB_Set_Child_List_Fn, LB_Set_Child_Weight_Fn, &$/;"	v
LB_Set_Child_List_Fn	include/lbi_const.h	218;"	d
LB_Set_Child_Weight_Fn	fort/lbif.h	/^   LB_Set_Num_Child_Fn, LB_Set_Child_List_Fn, LB_Set_Child_Weight_Fn, &$/;"	v
LB_Set_Child_Weight_Fn	include/lbi_const.h	219;"	d
LB_Set_Coarse_Obj_List_Fn	fort/lbif.h	/^   LB_Set_Num_Coarse_Obj_Fn, LB_Set_Coarse_Obj_List_Fn, &$/;"	v
LB_Set_Coarse_Obj_List_Fn	include/lbi_const.h	214;"	d
LB_Set_Edge_List_Fn	fort/lbif.h	/^   LB_Set_Num_Edges_Fn, LB_Set_Edge_List_Fn, &$/;"	v
LB_Set_Edge_List_Fn	include/lbi_const.h	196;"	d
LB_Set_First_Border_Obj_Fn	fort/lbif.h	/^   LB_Set_First_Border_Obj_Fn, LB_Set_Next_Border_Obj_Fn, &$/;"	v
LB_Set_First_Border_Obj_Fn	include/lbi_const.h	205;"	d
LB_Set_First_Coarse_Obj_Fn	fort/lbif.h	/^   LB_Set_First_Coarse_Obj_Fn, LB_Set_Next_Coarse_Obj_Fn, &$/;"	v
LB_Set_First_Coarse_Obj_Fn	include/lbi_const.h	215;"	d
LB_Set_First_Obj_Fn	fort/lbif.h	/^   LB_Set_First_Obj_Fn, LB_Set_Next_Obj_Fn, &$/;"	v
LB_Set_First_Obj_Fn	include/lbi_const.h	201;"	d
LB_Set_Fn	fort/lbif.h	/^   LB_Set_Fn, &$/;"	v
LB_Set_Fn	include/lbi_const.h	194;"	d
LB_Set_Geom_Fn	fort/lbif.h	/^   LB_Set_Num_Geom_Fn, LB_Set_Geom_Fn, &$/;"	v
LB_Set_Geom_Fn	include/lbi_const.h	198;"	d
LB_Set_Memory_Debug	include/lbi_const.h	241;"	d
LB_Set_Method	fort/lbif.h	/^   LB_Set_Method, &$/;"	v
LB_Set_Method	include/lbi_const.h	221;"	d
LB_Set_Mid_Migrate_Fn	fort/lbif.h	/^   LB_Set_Pre_Migrate_Fn, LB_Set_Mid_Migrate_Fn, LB_Set_Post_Migrate_Fn, &$/;"	v
LB_Set_Mid_Migrate_Fn	include/lbi_const.h	208;"	d
LB_Set_Next_Border_Obj_Fn	fort/lbif.h	/^   LB_Set_First_Border_Obj_Fn, LB_Set_Next_Border_Obj_Fn, &$/;"	v
LB_Set_Next_Border_Obj_Fn	include/lbi_const.h	206;"	d
LB_Set_Next_Coarse_Obj_Fn	fort/lbif.h	/^   LB_Set_First_Coarse_Obj_Fn, LB_Set_Next_Coarse_Obj_Fn, &$/;"	v
LB_Set_Next_Coarse_Obj_Fn	include/lbi_const.h	216;"	d
LB_Set_Next_Obj_Fn	fort/lbif.h	/^   LB_Set_First_Obj_Fn, LB_Set_Next_Obj_Fn, &$/;"	v
LB_Set_Next_Obj_Fn	include/lbi_const.h	202;"	d
LB_Set_Num_Border_Obj_Fn	fort/lbif.h	/^   LB_Set_Num_Border_Obj_Fn, LB_Set_Border_Obj_List_Fn, &$/;"	v
LB_Set_Num_Border_Obj_Fn	include/lbi_const.h	203;"	d
LB_Set_Num_Child_Fn	fort/lbif.h	/^   LB_Set_Num_Child_Fn, LB_Set_Child_List_Fn, LB_Set_Child_Weight_Fn, &$/;"	v
LB_Set_Num_Child_Fn	include/lbi_const.h	217;"	d
LB_Set_Num_Coarse_Obj_Fn	fort/lbif.h	/^   LB_Set_Num_Coarse_Obj_Fn, LB_Set_Coarse_Obj_List_Fn, &$/;"	v
LB_Set_Num_Coarse_Obj_Fn	include/lbi_const.h	213;"	d
LB_Set_Num_Edges_Fn	fort/lbif.h	/^   LB_Set_Num_Edges_Fn, LB_Set_Edge_List_Fn, &$/;"	v
LB_Set_Num_Edges_Fn	include/lbi_const.h	195;"	d
LB_Set_Num_Geom_Fn	fort/lbif.h	/^   LB_Set_Num_Geom_Fn, LB_Set_Geom_Fn, &$/;"	v
LB_Set_Num_Geom_Fn	include/lbi_const.h	197;"	d
LB_Set_Num_Obj_Fn	include/lbi_const.h	199;"	d
LB_Set_Obj_List_Fn	fort/lbif.h	/^   LB_Set_Num_Obj_Fn, LB_Set_Obj_List_Fn, &$/;"	v
LB_Set_Obj_List_Fn	include/lbi_const.h	200;"	d
LB_Set_Obj_Size_Fn	fort/lbif.h	/^   LB_Set_Obj_Size_Fn, LB_Set_Pack_Obj_Fn, LB_Set_Unpack_Obj_Fn$/;"	v
LB_Set_Obj_Size_Fn	include/lbi_const.h	210;"	d
LB_Set_Pack_Obj_Fn	fort/lbif.h	/^   LB_Set_Obj_Size_Fn, LB_Set_Pack_Obj_Fn, LB_Set_Unpack_Obj_Fn$/;"	v
LB_Set_Pack_Obj_Fn	include/lbi_const.h	211;"	d
LB_Set_Param	fort/lbif.h	/^   LB_Set_Param, &$/;"	v
LB_Set_Param	include/lbi_const.h	192;"	d
LB_Set_Part_Sizes	include/zoltan_cpp.h	/^  int LB_Set_Part_Sizes( const int &global_num,$/;"	f	class:Zoltan
LB_Set_Post_Migrate_Fn	fort/lbif.h	/^   LB_Set_Pre_Migrate_Fn, LB_Set_Mid_Migrate_Fn, LB_Set_Post_Migrate_Fn, &$/;"	v
LB_Set_Post_Migrate_Fn	include/lbi_const.h	209;"	d
LB_Set_Pre_Migrate_Fn	fort/lbif.h	/^   LB_Set_Pre_Migrate_Fn, LB_Set_Mid_Migrate_Fn, LB_Set_Post_Migrate_Fn, &$/;"	v
LB_Set_Pre_Migrate_Fn	include/lbi_const.h	207;"	d
LB_Set_Unpack_Obj_Fn	include/lbi_const.h	212;"	d
LB_Struct	fort/lbfn.h	/^type(LB_Struct) , intent(in) :: lb$/;"	v
LB_Struct	include/lbi_const.h	92;"	d
LB_TO_ADDR	fort/cwrap.c	35;"	d	file:
LB_TRI_BISECT	fort/lbif.h	/^   LB_TRI_BISECT, &$/;"	v
LB_TRI_BISECT	fort/lbif.h	/^  LB_TRI_BISECT    = ZOLTAN_TRI_BISECT, &$/;"	v
LB_TRI_BISECT	include/lbi_const.h	82;"	d
LB_UNPACK_OBJ_FN	include/lbi_const.h	146;"	d
LB_UNPACK_OBJ_FN_TYPE	fort/lbif.h	/^   LB_UNPACK_OBJ_FN_TYPE       = &$/;"	v
LB_UNPACK_OBJ_FN_TYPE	fort/lbif.h	/^   LB_UNPACK_OBJ_FN_TYPE, &$/;"	v
LB_UNPACK_OBJ_FN_TYPE	include/lbi_const.h	62;"	d
LB_UNPACK_OBJ_FORT_FN	include/lbi_const.h	147;"	d
LB_User_Data_1	fdriver_old/lb_user_const.f90	/^type LB_User_Data_1$/;"	t	module:lb_user_const
LB_User_Data_1	fort/lb_user_const.f90	/^type LB_User_Data_1$/;"	t	module:lb_user_const
LB_User_Data_1	fort/lbif.h	/^   LB_User_Data_1, &$/;"	v
LB_User_Data_2	fdriver_old/lb_user_const.f90	/^type LB_User_Data_2$/;"	t	module:lb_user_const
LB_User_Data_2	fort/lb_user_const.f90	/^type LB_User_Data_2$/;"	t	module:lb_user_const
LB_User_Data_2	fort/lbif.h	/^   LB_User_Data_2, &$/;"	v
LB_User_Data_3	fdriver_old/lb_user_const.f90	/^type LB_User_Data_3$/;"	t	module:lb_user_const
LB_User_Data_3	fort/lb_user_const.f90	/^type LB_User_Data_3$/;"	t	module:lb_user_const
LB_User_Data_3	fort/lbif.h	/^   LB_User_Data_3, &$/;"	v
LB_User_Data_4	fdriver_old/lb_user_const.f90	/^type LB_User_Data_4$/;"	t	module:lb_user_const
LB_User_Data_4	fort/lb_user_const.f90	/^type LB_User_Data_4$/;"	t	module:lb_user_const
LB_WARN	fort/lbif.h	/^   LB_WARN   = ZOLTAN_WARN, &$/;"	v
LB_WARN	fort/lbif.h	/^   LB_WARN, &$/;"	v
LB_WARN	include/lbi_const.h	99;"	d
LDLIBS	ZoltanComponent/CCA_Wrapper/Makefile	/^LDLIBS = $/;"	m
LDLIBS	ZoltanComponent/TestComponents/Makefile	/^LDLIBS = $/;"	m
LEN	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/add_to_log.c	14;"	d	file:
LIB_DIR	Utilities/makefile	/^LIB_DIR = $(ZOLTAN_LIB_DIR)$/;"	m
LIB_DIR	Utilities/makefile	/^LIB_DIR = $(ZOLTAN_OBJ_DIR)$/;"	m
LIB_NAME	makefile	/^LIB_NAME=libzoltan.a     # if change LIB_NAME, must change ZOLTAN_LIB $/;"	m
LIB_TARGET	makefile	/^LIB_TARGET=zoltan$/;"	m
LIMIT_KL_EWGTS	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klspiff/coarsen_kl.c	/^int LIMIT_KL_EWGTS = FALSE;	\/* limit range of edge weights in multilevel-KL? *\/$/;"	v
LINEAR	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	244;"	d
LINELEN	util/vtk_view.cpp	169;"	d	file:
LINE_LENGTH	ch/ch_input_read.c	30;"	d	file:
LINE_LENGTH	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/params.h	2;"	d
LINT	Utilities/makefile	/^LINT		= lint $/;"	m
LINT	makefile	/^LINT		= lint$/;"	m
LINT_FLAGS	Utilities/makefile	/^LINT_FLAGS	= $(LINT_INC_PATH) $(GDEFINES)$/;"	m
LINT_FLAGS	makefile	/^LINT_FLAGS	= $(LINT_INC_PATH) $(GDEFINES)$/;"	m
LINT_INC_PATH	Utilities/makefile	/^LINT_INC_PATH	= -I..\/include -Ishared -IMemory -ICommunication \\$/;"	m
LINT_INC_PATH	makefile	/^LINT_INC_PATH	= -Iinclude -Idriver$(ZOLTAN_OLD) -Ich -Izz -Iall -Ilb \\$/;"	m
LISTS	driver/dr_const.h	/^enum LISTS {  \/* NULL lists to pass to Zoltan_Migrate *\/$/;"	g
LIST_ALLOC	driver/dr_exoII_io.c	40;"	d	file:
LIST_ALLOC	driver/dr_exoII_ioCPP.cpp	37;"	d	file:
LIST_ALLOC	driver_old/dr_exoII_io.c	40;"	d	file:
LNO_TO_GNO	phg/phg_hypergraph.h	118;"	d
LOCALOCT	oct/octant_const.h	/^typedef enum {LOCALOCT, REMOTEOCT} OctType;$/;"	e	enum:__anon33
LOCAL_GRAPH	parmetis/third_library_const.h	94;"	d
LOCAL_ISSUES	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	273;"	d
LOPART	par/par_median_randomized.c	32;"	d	file:
LZMA	driver/dr_compress_const.h	/^  LZMA = 3$/;"	e	enum:ZOLTAN_FILETYPE_
L_fp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^typedef logical (*L_fp)();$/;"	t
L_fp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^typedef logical (*L_fp)(...);$/;"	t
L_fp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^typedef logical (*L_fp)();$/;"	t
L_fp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^typedef logical (*L_fp)(...);$/;"	t
Length	Utilities/Timer/zoltan_timer.c	/^  int Length;             \/* # of entries allocated in Times *\/$/;"	m	struct:Zoltan_Timer	file:
LevelCnt	phg/phg_Vcycle.c	/^    int               LevelCnt;   \/* 2 * count of external vertices matched to$/;"	m	struct:tagVCycle	file:
LevelData	phg/phg_Vcycle.c	/^    int              *LevelData;  \/* buffer for external vertex information  *\/$/;"	m	struct:tagVCycle	file:
LevelMap	phg/phg_Vcycle.c	/^    int              *LevelMap;   \/* necessary to uncoarsen                  *\/$/;"	m	struct:tagVCycle	file:
LevelMap	phg/phg_hypergraph.h	/^typedef int *LevelMap;  \/* length |V|, mapping of fine vtxs onto coarse vtxs *\/$/;"	t
LevelSndCnt	phg/phg_Vcycle.c	/^    int               LevelSndCnt; \/* number of vertices being returned by$/;"	m	struct:tagVCycle	file:
LoadBalancer	ZoltanComponent/ZoltanPorts/LoadBalancer.h	/^     LoadBalancer() : CONV_NS(Port)() {}$/;"	f	class:LoadPartitionerSpace::LoadBalancer
LoadBalancer	ZoltanComponent/ZoltanPorts/LoadBalancer.h	/^  class LoadBalancer : public virtual CONV_NS(Port)$/;"	c	namespace:LoadPartitionerSpace
LoadBalancerFactory	ZoltanComponent/ZoltanPorts/LoadBalancerFactoryPort.h	/^    LoadBalancerFactory()  : CONV_NS(Port)() {} $/;"	f	class:LoadPartitionerSpace::LoadBalancerFactory
LoadBalancerFactory	ZoltanComponent/ZoltanPorts/LoadBalancerFactoryPort.h	/^  class LoadBalancerFactory : public virtual CONV_NS(Port)$/;"	c	namespace:LoadPartitionerSpace
LoadBalancerFactoryPortSeen	ZoltanComponent/ZoltanPorts/LoadBalancerFactoryPort.h	8;"	d
LoadBalancerInterfaceHeaderSeen	ZoltanComponent/ZoltanPorts/LoadBalancer.h	10;"	d
LoadPartitionerSpace	ZoltanComponent/ZoltanPorts/DataLocationPort.h	/^namespace LoadPartitionerSpace$/;"	n
LoadPartitionerSpace	ZoltanComponent/ZoltanPorts/DataMigrationPort.h	/^namespace LoadPartitionerSpace$/;"	n
LoadPartitionerSpace	ZoltanComponent/ZoltanPorts/DistDataDirectoryPort.h	/^namespace LoadPartitionerSpace $/;"	n
LoadPartitionerSpace	ZoltanComponent/ZoltanPorts/EdgeInfoPort.h	/^namespace LoadPartitionerSpace$/;"	n
LoadPartitionerSpace	ZoltanComponent/ZoltanPorts/EntityInfoPort.h	/^namespace LoadPartitionerSpace$/;"	n
LoadPartitionerSpace	ZoltanComponent/ZoltanPorts/EntityList.h	/^namespace LoadPartitionerSpace$/;"	n
LoadPartitionerSpace	ZoltanComponent/ZoltanPorts/GeomInfoPort.h	/^namespace LoadPartitionerSpace$/;"	n
LoadPartitionerSpace	ZoltanComponent/ZoltanPorts/LoadBalancer.h	/^namespace LoadPartitionerSpace $/;"	n
LoadPartitionerSpace	ZoltanComponent/ZoltanPorts/LoadBalancerFactoryPort.h	/^namespace LoadPartitionerSpace$/;"	n
LoadPartitionerSpace	ZoltanComponent/ZoltanPorts/TreeInfoPort.h	/^namespace LoadPartitionerSpace$/;"	n
LocalCoarsePartition	phg/phg.h	/^  int LocalCoarsePartition;            \/* 1 -> apply coarse partitioner locally;$/;"	m	struct:PHGPartParamsStruct
Local_ID	oct/octant_const.h	/^  ZOLTAN_ID_PTR Local_ID;             \/* Local ID for the object.           *\/$/;"	m	struct:Region_Node
Local_IDs	rcb/rcb.h	/^  ZOLTAN_ID_PTR Local_IDs;   \/* Pointer to array of local IDs; local ID of $/;"	m	struct:RCB_Struct
Local_IDs	rcb/rib.h	/^    ZOLTAN_ID_PTR Local_IDs;        \/* This array is NOT used if Zoltan_RB_Use_IDs returns$/;"	m	struct:RIB_Struct
Local_Parts	driver/dr_const.h	/^  int Local_Parts;          \/* Sets NUM_LOCAL_PARTS parameter in various$/;"	m	struct:Test_Flags
Long	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^typedef long Long;	\/* No longer used; formerly in Namelist *\/$/;"	t
Long	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^typedef long Long;	\/* No longer used; formerly in Namelist *\/$/;"	t
M	phg/phg_coarse.c	112;"	d	file:
M	phg/phg_coarse.c	49;"	d	file:
MACHINE_DESC_FILE_DEFAULT	ha/ha_const.h	40;"	d
MACHINE_PTR	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^typedef struct  Machine_Description *MACHINE_PTR;$/;"	t	typeref:struct:Machine_Description
MACHINE_TYPE	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^typedef struct  Machine_Description  MACHINE_TYPE;$/;"	t	typeref:struct:Machine_Description
MACRO_REALLOC	phg/phg_match.c	1996;"	d	file:
MACRO_REALLOC	phg/phg_match.c	591;"	d	file:
MACRO_RESIZE	phg/phg_match.c	598;"	d	file:
MACRO_TIMER_START	phg/phg_match.c	1997;"	d	file:
MACRO_TIMER_START	phg/phg_match.c	577;"	d	file:
MACRO_TIMER_STOP	phg/phg_match.c	1998;"	d	file:
MACRO_TIMER_STOP	phg/phg_match.c	585;"	d	file:
MAKE_CONNECTED	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       MAKE_CONNECTED = TRUE;\/* Connect graph if using spectral method? *\/$/;"	v
MAKE_VWGTS	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       MAKE_VWGTS = FALSE;	\/* Make vtx weights degrees+1? (TRUE\/FALSE) *\/$/;"	v
MAPPING_TYPE	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       MAPPING_TYPE = 1;	\/* How to map from eigenvectors to partition *\/$/;"	v
MAP_ALLOC	driver/dr_maps.c	25;"	d	file:
MAP_ALLOC	driver/dr_mapsCPP.cpp	26;"	d	file:
MAP_ALLOC	driver_old/dr_maps.c	27;"	d	file:
MAP_ALLOC	fdriver/fdr_chaco_io.f90	/^integer(Zoltan_INT), parameter :: MAP_ALLOC /;"	v	module:dr_chaco_io
MAP_ALLOC	fdriver_old/fdr_chaco_io.f90	/^integer(LB_INT), parameter :: MAP_ALLOC /;"	v	module:dr_chaco_io
MATCH_OK	phg/phg_match.c	58;"	d	file:
MATCH_TYPE	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       MATCH_TYPE = 1;	   \/* Type of contraction matching (1..5) *\/$/;"	v
MATRIXMARKET_FILE	driver/dr_input_const.h	35;"	d
MATRIXMARKET_PLUS_FILE	driver/dr_input_const.h	36;"	d
MATRIX_CSRC	makefile	/^MATRIX_CSRC	= matrix_build.c matrix_distribute.c matrix_operations.c \\$/;"	m
MATRIX_FAST	matrix/matrix.h	/^typedef enum {MATRIX_FULL_DD=0, MATRIX_FAST, MATRIX_NO_REDIST} SpeedOpt;$/;"	e	enum:__anon8
MATRIX_FULL_DD	matrix/matrix.h	/^typedef enum {MATRIX_FULL_DD=0, MATRIX_FAST, MATRIX_NO_REDIST} SpeedOpt;$/;"	e	enum:__anon8
MATRIX_INC	makefile	/^MATRIX_INC	= matrix.h$/;"	m
MATRIX_MARKET_MAX_LINE	driver/dr_const.h	122;"	d
MATRIX_NO_REDIST	matrix/matrix.h	/^typedef enum {MATRIX_FULL_DD=0, MATRIX_FAST, MATRIX_NO_REDIST} SpeedOpt;$/;"	e	enum:__anon8
MAX	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	39;"	d
MAX	zz/zz_const.h	64;"	d
MAXDIMS	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/params.h	4;"	d
MAXINT_DIV_PHI	zz/zz_hash.c	66;"	d	file:
MAXLENGTH	par/par_median_randomized.c	1063;"	d	file:
MAXMEMORYALLOC	phg/phg_Vcycle.c	31;"	d	file:
MAXNAMELEN	Utilities/Timer/zoltan_timer.c	48;"	d	file:
MAXOCTREGIONS	oct/octupdate.c	/^static int MAXOCTREGIONS = MAXOCTREGIONS_DEF;$/;"	v	file:
MAXOCTREGIONS_DEF	oct/octupdate.c	54;"	d	file:
MAXSETS	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/params.h	5;"	d
MAXSWAP	reftree/reftree_coarse_path.c	1331;"	d	file:
MAXVERT	reftree/reftree.h	24;"	d
MAX_BISECT_ITER	par/par_bisect.c	36;"	d	file:
MAX_BISECT_WGTS	par/par_bisect_const.h	33;"	d
MAX_CHAR_LEN	fdriver/fdr_param_file.f90	/^integer, parameter :: MAX_CHAR_LEN /;"	v	module:dr_param_file
MAX_CPU_WGTS	driver/dr_const.h	126;"	d
MAX_CPU_WGTS	driver_old/dr_const.h	43;"	d
MAX_DIM	driver/dr_const.h	125;"	d
MAX_DIM	driver_old/dr_const.h	42;"	d
MAX_DIM	fdriver/fdr_const.f90	/^integer(Zoltan_INT), parameter :: MAX_DIM /;"	v	module:dr_const
MAX_DIM	fdriver_old/fdr_const.f90	/^integer(LB_INT), parameter :: MAX_DIM /;"	v	module:dr_const
MAX_EB_NAME_LEN	fdriver/fdr_const.f90	/^integer(Zoltan_INT), parameter :: MAX_EB_NAME_LEN /;"	v	module:dr_const
MAX_EB_NAME_LEN	fdriver_old/lb_user_const.f90	/^integer(LB_INT), parameter :: MAX_EB_NAME_LEN /;"	v	module:lb_user_const
MAX_ELEM_SIDES	driver/dr_elem_const.h	88;"	d
MAX_ELEM_SIDES	driver_old/dr_elem_const.h	88;"	d
MAX_ELEM_SIDES	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_elem_const.h	103;"	d
MAX_ERR_MSG	driver/dr_err_const.h	24;"	d
MAX_ERR_MSG	driver_old/dr_err_const.h	24;"	d
MAX_ERR_MSG	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_err_const.h	24;"	d
MAX_FNL	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	30;"	d
MAX_INPUT_STR_LN	driver/dr_input_const.h	54;"	d
MAX_INPUT_STR_LN	driver_old/dr_input_const.h	27;"	d
MAX_INPUT_STR_LN	fdriver/fdr_input.f90	/^integer(Zoltan_INT), parameter :: MAX_INPUT_STR_LN /;"	v	module:dr_input
MAX_INPUT_STR_LN	fdriver_old/fdr_input.f90	/^integer(LB_INT), parameter :: MAX_INPUT_STR_LN /;"	v	module:dr_input
MAX_INP_LINE	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	52;"	d
MAX_LOOPS	hsfc/hsfc.h	/^static const int MAX_LOOPS = 16;$/;"	v
MAX_NP_ELEM	driver/dr_const.h	124;"	d
MAX_NP_ELEM	driver_old/dr_const.h	41;"	d
MAX_NP_ELEM	fdriver/fdr_const.f90	/^integer(Zoltan_INT), parameter :: MAX_NP_ELEM /;"	v	module:dr_const
MAX_NP_ELEM	fdriver_old/fdr_const.f90	/^integer(LB_INT), parameter :: MAX_NP_ELEM /;"	v	module:dr_const
MAX_OPTIONS	parmetis/parmetis_interface.h	64;"	d
MAX_PARAMETER_LEN	fdriver/fdr_const.f90	/^integer(Zoltan_INT), parameter :: MAX_PARAMETER_LEN /;"	v	module:dr_const
MAX_PARAMETER_LEN	fdriver_old/fdr_const.f90	/^integer(LB_INT), parameter :: MAX_PARAMETER_LEN /;"	v	module:dr_const
MAX_PARAM_STRING_LEN	driver/dr_param_file.c	55;"	d	file:
MAX_PARAM_STRING_LEN	params/params_const.h	50;"	d
MAX_PROCNAME_LEN	fdriver/fdr_main.f90	/^  integer, parameter :: MAX_PROCNAME_LEN /;"	v	program:fdriver
MAX_PROCNAME_LEN	fdriver_old/fdr_main.f90	/^  integer, parameter :: MAX_PROCNAME_LEN /;"	v	program:fdriver
MAX_PROC_NAME_LEN	ha/ha_const.h	39;"	d
MAX_SIDE_NODES	driver/dr_elem_const.h	83;"	d
MAX_SIDE_NODES	driver_old/dr_elem_const.h	83;"	d
MAX_SIDE_NODES	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_elem_const.h	98;"	d
MAX_STRING_LEN	Utilities/Memory/mem.c	50;"	d	file:
MAX_STR_LENGTH	driver/dr_chaco_io.c	37;"	d	file:
MAX_STR_LENGTH	driver/dr_hg_io.c	43;"	d	file:
MAX_STR_LENGTH	driver/dr_random_io.c	37;"	d	file:
MAX_STR_LENGTH	driver_old/dr_chaco_io.c	38;"	d	file:
MAX_THRESH	matrix/common_sort.c	45;"	d	file:
MAX_WEIGHT	matrix/matrix.h	/^typedef enum {ADD_WEIGHT=0, MAX_WEIGHT, CMP_WEIGHT} WgtOp;$/;"	e	enum:__anon7
MAX_WGT_SUM	parmetis/third_library_const.h	84;"	d
MAX_WGT_SUM	parmetis/third_library_const.h	88;"	d
MEDPART	par/par_median_randomized.c	34;"	d	file:
MEMFREE	parmetis/third_library.c	157;"	d	file:
MEMORY_ERROR	zz/zz_const.h	600;"	d
MEM_CHUNK_SIZE	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	49;"	d
MEM_CSRC	Utilities/makefile	/^MEM_CSRC	= mem.c$/;"	m
MEM_DRIVER	Utilities/makefile	/^MEM_DRIVER	= zdrive_mem$/;"	m
MEM_DRIVER_CSRC	Utilities/makefile	/^MEM_DRIVER_CSRC	= mem_main.c$/;"	m
MEM_DRIVER_DEP	Utilities/makefile	/^MEM_DRIVER_DEP  = $(MEM_LIB)$/;"	m
MEM_DRIVER_LIBS	Utilities/makefile	/^MEM_DRIVER_LIBS = -L. -l$(MEM_TARGET) $(MPI_LIBPATH) $(MPI_LIB) $/;"	m
MEM_GROWTH	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	50;"	d
MEM_INC	Utilities/makefile	/^MEM_INC		= zoltan_mem.h$/;"	m
MEM_LIB	Utilities/makefile	/^MEM_LIB		= libzoltan_mem.a$/;"	m
MEM_TARGET	Utilities/makefile	/^MEM_TARGET	= zoltan_mem$/;"	m
MESH	driver/dr_const.h	/^  MESH = 0,$/;"	e	enum:DATA_TYPE
MESH	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	261;"	d
MESH_INFO	driver/dr_const.h	/^typedef struct Mesh_Description  MESH_INFO;$/;"	t	typeref:struct:Mesh_Description
MESH_INFO	driver_old/dr_const.h	/^typedef struct Mesh_Description  MESH_INFO;$/;"	t	typeref:struct:Mesh_Description
MESH_INFO	fdriver/fdr_const.f90	/^type MESH_INFO$/;"	t	module:dr_const
MESH_INFO	fdriver_old/lb_user_const.f90	/^type MESH_INFO$/;"	t	module:lb_user_const
MESH_INFO	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^typedef struct Mesh_Description  MESH_INFO;$/;"	t	typeref:struct:Mesh_Description
MESH_INFO_PTR	driver/dr_const.h	/^typedef struct Mesh_Description *MESH_INFO_PTR;$/;"	t	typeref:struct:Mesh_Description
MESH_INFO_PTR	driver_old/dr_const.h	/^typedef struct Mesh_Description *MESH_INFO_PTR;$/;"	t	typeref:struct:Mesh_Description
MESH_INFO_PTR	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^typedef struct Mesh_Description *MESH_INFO_PTR;$/;"	t	typeref:struct:Mesh_Description
MIGMIGREGCommCreate	oct/migreg.c	22;"	d	file:
MIGMIGREGCommDo	oct/migreg.c	23;"	d	file:
MIN	driver/dr_const.h	21;"	d
MIN	zz/zz_const.h	63;"	d
MINOCTREGIONS	oct/octupdate.c	/^static int MINOCTREGIONS = MINOCTREGIONS_DEF;  \/* min # of regions per oct *\/$/;"	v	file:
MINOCTREGIONS_DEF	oct/octupdate.c	55;"	d	file:
MM_ARRAY_STR	driver/dr_mmio.h	107;"	d
MM_COMPLEX_STR	driver/dr_mmio.h	111;"	d
MM_COORDINATE_STR	driver/dr_mmio.h	109;"	d
MM_COULD_NOT_READ_FILE	driver/dr_mmio.h	81;"	d
MM_COULD_NOT_WRITE_FILE	driver/dr_mmio.h	87;"	d
MM_DENSE_STR	driver/dr_mmio.h	108;"	d
MM_FILE	fdriver/fdr_input.f90	/^                             CHACO_FILE   = 1, &$/;"	v	module:dr_input
MM_GENERAL_STR	driver/dr_mmio.h	114;"	d
MM_HERM_STR	driver/dr_mmio.h	116;"	d
MM_INPUT_C	postprocessing/ordering/mm_input.c	20;"	d	file:
MM_INT_STR	driver/dr_mmio.h	113;"	d
MM_IO_H	driver/dr_mmio.h	10;"	d
MM_LINE_TOO_LONG	driver/dr_mmio.h	86;"	d
MM_MAX_LINE_LENGTH	driver/dr_mmio.h	12;"	d
MM_MAX_TOKEN_LENGTH	driver/dr_mmio.h	14;"	d
MM_MTX_STR	driver/dr_mmio.h	106;"	d
MM_NOT_MTX	driver/dr_mmio.h	83;"	d
MM_NO_HEADER	driver/dr_mmio.h	84;"	d
MM_PATTERN_STR	driver/dr_mmio.h	118;"	d
MM_PREMATURE_EOF	driver/dr_mmio.h	82;"	d
MM_REAL_STR	driver/dr_mmio.h	112;"	d
MM_SKEW_STR	driver/dr_mmio.h	117;"	d
MM_SPARSE_STR	driver/dr_mmio.h	110;"	d
MM_SYMM_STR	driver/dr_mmio.h	115;"	d
MM_UNSUPPORTED_TYPE	driver/dr_mmio.h	85;"	d
MM_readfile	driver/dr_mm_readfile.c	/^int MM_readfile ($/;"	f
MM_typecode	driver/dr_mmio.h	/^typedef char MM_typecode[4];$/;"	t
MPICH_SKIP_MPICXX	util/vtk_view.cpp	139;"	d	file:
MPI_RECV_LIMIT	Utilities/Communication/comm.h	114;"	d
MULTIKL	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	241;"	d
MYDBLMAX	util/converters_for_JPDC_adaptive_mesh_experiments/chaco2chaco/main.c	9;"	d	file:
MYDBLMIN	util/converters_for_JPDC_adaptive_mesh_experiments/chaco2chaco/main.c	10;"	d	file:
M_PI	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_loadbal.c	41;"	d	file:
M_PI_2	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_loadbal.c	42;"	d	file:
Mach_params	ha/build_machine_desc.c	/^static PARAM_VARS Mach_params[] = {$/;"	v	file:
MachineType	zz/zz_const.h	/^} MachineType;$/;"	t	typeref:struct:__anon37
Machine_Desc	zz/zz_const.h	/^  MachineType *Machine_Desc;      \/*  Machine description for hetero. arch.  *\/$/;"	m	struct:Zoltan_Struct
Machine_Description	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^struct Machine_Description$/;"	s
Map	oct/octree_const.h	/^} Map;$/;"	t	typeref:struct:__anon31
MatchEdgeSizeThreshold	phg/phg.h	/^  int MatchEdgeSizeThreshold;  \/* Edges with sizes bigger than this threshold$/;"	m	struct:PHGPartParamsStruct
Matching	phg/phg_hypergraph.h	/^typedef int *Matching;  \/* length |V|, matching information of vertices *\/$/;"	t
MatrixMarketBanner	driver/dr_mmio.h	13;"	d
Mesh	ZoltanComponent/TestComponents/Mesh.cpp	/^ZoltanTestSpace::Mesh::Mesh()$/;"	f	class:ZoltanTestSpace::Mesh
Mesh	ZoltanComponent/TestComponents/Mesh.h	/^  class Mesh : public virtual CONV_NS(Component), $/;"	c	namespace:ZoltanTestSpace
Mesh	fdriver/fdr_const.f90	/^type(MESH_INFO),pointer :: Mesh$/;"	v	module:dr_const
Mesh	fdriver_old/fdr_const.f90	/^type(MESH_INFO),pointer :: Mesh$/;"	v	module:dr_const
MeshHSeen	ZoltanComponent/TestComponents/Mesh.h	8;"	d
Mesh_Description	driver/dr_const.h	/^struct Mesh_Description$/;"	s
Mesh_Description	driver_old/dr_const.h	/^struct Mesh_Description$/;"	s
Mesh_Description	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^struct Mesh_Description$/;"	s
Mesh_Info_File	driver/dr_const.h	/^  int Mesh_Info_File;$/;"	m	struct:Output_Flags
Message	oct/migreg.h	/^} Message;$/;"	t	typeref:struct:__anon34
Method	lb/lb_const.h	/^  ZOLTAN_LB_METHOD Method;        \/*  Method to be used for load balancing.  *\/ $/;"	m	struct:Zoltan_LB_Struct
Mid_Migrate	lb/lb_const.h	/^  ZOLTAN_MID_MIGRATE_FN *Mid_Migrate;  \/* Function that performs application$/;"	m	struct:Zoltan_Migrate_Struct
Mid_Migrate_Data	lb/lb_const.h	/^  void *Mid_Migrate_Data;              \/* Ptr to user defined data to be$/;"	m	struct:Zoltan_Migrate_Struct
Mid_Migrate_Fort	lb/lb_const.h	/^  ZOLTAN_MID_MIGRATE_FORT_FN *Mid_Migrate_Fort;$/;"	m	struct:Zoltan_Migrate_Struct
Mid_Migrate_PP	lb/lb_const.h	/^  ZOLTAN_MID_MIGRATE_PP_FN *Mid_Migrate_PP;$/;"	m	struct:Zoltan_Migrate_Struct
Mid_Migrate_PP_Data	lb/lb_const.h	/^  void *Mid_Migrate_PP_Data;         \/* Ptr to user defined data to be$/;"	m	struct:Zoltan_Migrate_Struct
Mid_Migrate_PP_Fort	lb/lb_const.h	/^  ZOLTAN_MID_MIGRATE_PP_FORT_FN *Mid_Migrate_PP_Fort;$/;"	m	struct:Zoltan_Migrate_Struct
MigFinCommCreate	oct/migoct.c	34;"	d	file:
MigFinCommDo	oct/migoct.c	35;"	d	file:
MigOctCommCreate	oct/migoct.c	29;"	d	file:
MigOctCommDo	oct/migoct.c	30;"	d	file:
MigOctCommReverse	oct/migoct.c	31;"	d	file:
MigUpdCommCreate	oct/migoct.c	32;"	d	file:
MigUpdCommDo	oct/migoct.c	33;"	d	file:
Migrate	include/zoltan_cpp.h	/^  int Migrate          ( const int &num_import,$/;"	f	class:Zoltan
Migrate	zz/zz_const.h	/^  struct Zoltan_Migrate_Struct Migrate;\/* Struct with info for migration.     *\/$/;"	m	struct:Zoltan_Struct	typeref:struct:Zoltan_Struct::Zoltan_Migrate_Struct
MigrateEntities	ZoltanComponent/CCA_Wrapper/PartitionerFactory_DataMig.cpp	/^int ZoltanSpace::PartitionerFactory_JR::MigrateEntities($/;"	f	class:ZoltanSpace::PartitionerFactory_JR
Migrate_msg	oct/migoct.c	/^} Migrate_msg;$/;"	t	typeref:struct:__anon30	file:
Morton2dIndexFromMap	oct/SFC.h	/^static int Morton2dIndexFromMap[1][4] = {$/;"	v
Morton2dIndexToMap	oct/SFC.h	/^static int Morton2dIndexToMap[1][4] = {$/;"	v
Morton2dRuleMap	oct/SFC.h	/^static int Morton2dRuleMap[1][8] = {$/;"	v
Morton3dIndexFromMap	oct/SFC.h	/^static int Morton3dIndexFromMap[1][8] = {$/;"	v
Morton3dIndexToMap	oct/SFC.h	/^static int Morton3dIndexToMap[1][8] = {$/;"	v
Morton3dRuleMap	oct/SFC.h	/^static int Morton3dRuleMap[1][8] = {$/;"	v
Multi_Callbacks	driver/dr_const.h	/^  int Multi_Callbacks;      \/* Exercises list-based callback functions. *\/$/;"	m	struct:Test_Flags
Multitype	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^typedef union Multitype Multitype;$/;"	t	typeref:union:Multitype
Multitype	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^union Multitype {	\/* for multiple entry points *\/$/;"	u
Multitype	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^typedef union Multitype Multitype;$/;"	t	typeref:union:Multitype
Multitype	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^union Multitype {	\/* for multiple entry points *\/$/;"	u
My_Tot_Time	Utilities/Timer/zoltan_timer.c	/^  double My_Tot_Time;     \/* Sum of stop_time-start_time over all invocations$/;"	m	struct:TimeStruct	file:
N	hsfc/hsfc.h	/^static const int N = 8;$/;"	v
NAME_LENGTH	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/params.h	1;"	d
NDIM	driver/dr_elem_const.h	77;"	d
NDIM	driver_old/dr_elem_const.h	77;"	d
NDIM	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_elem_const.h	92;"	d
NEAR_ONE	zz/zz_coord.c	64;"	d	file:
NEMESIS_FILE	driver/dr_input_const.h	32;"	d
NEMESIS_FILE	driver_old/dr_input_const.h	25;"	d
NEMESIS_FILE	fdriver/fdr_input.f90	/^integer(Zoltan_INT), parameter :: NEMESIS_FILE /;"	v	module:dr_input
NEMESIS_FILE	fdriver_old/fdr_input.f90	/^integer(LB_INT), parameter :: NEMESIS_FILE /;"	v	module:dr_input
NEMESIS_LIBS	ZoltanComponent/TestComponents/Makefile	/^NEMESIS_LIBS = -lnemIc -lexoIIv2c -lnetcdf$/;"	m
NEXTARG	driver/dr_input.c	38;"	d	file:
NEXTLIST	driver/dr_input.c	40;"	d	file:
NNODES	driver/dr_elem_const.h	75;"	d
NNODES	driver_old/dr_elem_const.h	75;"	d
NNODES	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_elem_const.h	90;"	d
NODAL	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	235;"	d
NONE	driver/dr_const.h	/^  NONE = 0,$/;"	e	enum:LISTS
NONE	lb/lb_const.h	/^  NONE = -1,$/;"	e	enum:Zoltan_LB_Method
NONE	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_inp_const.h	81;"	d
NONZEROS	driver/dr_input_const.h	41;"	d
NO_FILE_POINTS	driver/dr_input_const.h	30;"	d
NO_FILE_TRIANGLES	driver/dr_input_const.h	31;"	d
NO_GRAPH	parmetis/third_library_const.h	93;"	d
NO_REFINE	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	249;"	d
NO_TIMES	Utilities/Timer/timer.h	36;"	d
NO_WEIGHT	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	285;"	d
NPERTURB	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       NPERTURB = 2;		\/* If so, how many edges to modify? *\/$/;"	v
NQUAD	driver/dr_elem_const.h	76;"	d
NQUAD	driver_old/dr_elem_const.h	76;"	d
NQUAD	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_elem_const.h	91;"	d
NQUAD_SURF	driver/dr_elem_const.h	78;"	d
NQUAD_SURF	driver_old/dr_elem_const.h	78;"	d
NQUAD_SURF	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_elem_const.h	93;"	d
NSEND	phg/phg_build.c	1199;"	d	file:
NSEND	phg/phg_build.c	1340;"	d	file:
NSIDES	driver/dr_elem_const.h	80;"	d
NSIDES	driver_old/dr_elem_const.h	80;"	d
NSIDES	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_elem_const.h	95;"	d
NSIDE_NODES	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_elem_const.h	94;"	d
NSNODES	driver/dr_elem_const.h	79;"	d
NSNODES	driver_old/dr_elem_const.h	79;"	d
NSQRTS	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       NSQRTS = 1000;	\/* # square roots to precompute if coarsening *\/$/;"	v
NSTACK	phg/phg_coarse.c	113;"	d	file:
NSTACK	phg/phg_coarse.c	50;"	d	file:
NULL_EL	driver/dr_elem_const.h	/^              HEXSHELL, NULL_EL} E_Type;$/;"	e	enum:__anon40
NULL_EL	driver_old/dr_elem_const.h	/^              HEXSHELL, NULL_EL} E_Type;$/;"	e	enum:__anon5
NULL_EL	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_elem_const.h	/^              WEDGE16, PYRAMID5, PYRAMID13, SHELL2, NULL_EL} E_Type;$/;"	e	enum:__anon26
NUM_COARSEPARTITION_FNS	phg/phg_serialpartition.c	28;"	d	file:
NUM_ITER	util/memory_usage/commdup.c	10;"	d	file:
NUM_ITER	util/memory_usage/commsplit.c	11;"	d	file:
NUM_ITER	util/memory_usage/rcblike.c	9;"	d	file:
NUM_PART_KEEP	phg/phg_serialpartition.c	82;"	d	file:
NUM_SECTS	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	250;"	d
N_VTX_CHECKS	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/bpmatch/movevtxs.c	/^int       N_VTX_CHECKS;		\/* number of considered moves *\/$/;"	v
N_VTX_MOVES	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/bpmatch/movevtxs.c	/^int       N_VTX_MOVES;		\/* number of actual moves *\/$/;"	v
Name	Utilities/Timer/zoltan_timer.c	/^  char Name[MAXNAMELEN+1];\/* String associated (and printed) with timer info *\/$/;"	m	struct:TimeStruct	file:
Name	driver/dr_const.h	/^  char Name[128];     \/* parameter name *\/$/;"	m	struct:Parameter_Description
Namelist	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^struct Namelist {$/;"	s
Namelist	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^typedef struct Namelist Namelist;$/;"	t	typeref:struct:Namelist
Namelist	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^struct Namelist {$/;"	s
Namelist	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^typedef struct Namelist Namelist;$/;"	t	typeref:struct:Namelist
Nemesis	driver/dr_const.h	/^  int Nemesis;$/;"	m	struct:Output_Flags
New_Elem_Hash_Node	driver/dr_migrate.c	/^struct New_Elem_Hash_Node{$/;"	s	file:
New_Elem_Hash_Nodes	driver/dr_migrate.c	/^static struct New_Elem_Hash_Node *New_Elem_Hash_Nodes = NULL;$/;"	v	typeref:struct:New_Elem_Hash_Node	file:
New_Elem_Hash_Table	driver/dr_migrate.c	/^static int *New_Elem_Hash_Table = NULL;$/;"	v	file:
New_Elem_Index	driver/dr_migrate.c	/^static int *New_Elem_Index = NULL;    \/* Array containing globalIDs of $/;"	v	file:
New_Elem_Index	driver/dr_migrateCPP.cpp	/^static int *New_Elem_Index = NULL;    \/* Array containing globalIDs of $/;"	v	file:
New_Elem_Index	driver_old/dr_migrate.c	/^static int *New_Elem_Index = NULL;    \/* Array containing globalIDs of $/;"	v	file:
New_Elem_Index	fdriver/fdr_migrate.f90	/^integer(Zoltan_INT), allocatable, save :: New_Elem_Index(/;"	v	module:dr_migrate
New_Elem_Index	fdriver_old/fdr_migrate.f90	/^integer(LB_INT), allocatable, save :: New_Elem_Index(/;"	v	module:dr_migrate
New_Elem_Index_Size	driver/dr_migrate.c	/^static int New_Elem_Index_Size = 0;   \/* Number of integers allocated in$/;"	v	file:
New_Elem_Index_Size	driver/dr_migrateCPP.cpp	/^static int New_Elem_Index_Size = 0;   \/* Number of integers allocated in$/;"	v	file:
New_Elem_Index_Size	driver_old/dr_migrate.c	/^static int New_Elem_Index_Size = 0;   \/* Number of integers allocated in$/;"	v	file:
New_Elem_Index_Size	fdriver/fdr_migrate.f90	/^integer(Zoltan_INT), save :: New_Elem_Index_Size /;"	v	module:dr_migrate
New_Elem_Index_Size	fdriver_old/fdr_migrate.f90	/^integer(LB_INT), save :: New_Elem_Index_Size /;"	v	module:dr_migrate
NextTimeStruct	Utilities/Timer/zoltan_timer.c	/^  int NextTimeStruct;     \/* Index of next unused TimeStruct *\/$/;"	m	struct:Zoltan_Timer	file:
No_Global_Objects	driver/dr_const.h	/^  int No_Global_Objects;    \/* Test case where there are no objects on any process *\/$/;"	m	struct:Test_Flags
Null_Lists	driver/dr_const.h	/^  int Null_Lists;           \/* Exercises null import or export lists to$/;"	m	struct:Test_Flags
NumProcs	util/vtk_view.cpp	/^static int NumProcs, Proc;$/;"	v	file:
NumRepart	phg/phg_build.c	35;"	d	file:
Num_Dim	rcb/rcb.h	/^  int Num_Dim;    \/* Number of dimensions in the input geometry. *\/$/;"	m	struct:RCB_Struct
Num_GID	driver/dr_loadbal.c	/^static int Num_GID = 1, Num_LID = 1;$/;"	v	file:
Num_GID	driver_old/dr_loadbal.c	/^static int Num_GID = 1, Num_LID = 1;$/;"	v	file:
Num_GID	zz/zz_const.h	/^  int Num_GID;                    \/*  The number of entries in Global IDs.   *\/$/;"	m	struct:Zoltan_Struct
Num_Geom	rcb/rib.h	/^    int                Num_Geom;$/;"	m	struct:RIB_Struct
Num_Global_Parts	driver/dr_loadbal.c	/^static int Num_Global_Parts;$/;"	v	file:
Num_Global_Parts	driver/dr_loadbalCPP.cpp	/^static int Num_Global_Parts;$/;"	v	file:
Num_Global_Parts	lb/lb_const.h	/^  int Num_Global_Parts;           \/*  The total number of partitions.$/;"	m	struct:Zoltan_LB_Struct
Num_Global_Parts_Param	lb/lb_const.h	/^  int Num_Global_Parts_Param;     \/*  The number of global partitions specified.$/;"	m	struct:Zoltan_LB_Struct
Num_LID	driver/dr_loadbal.c	/^static int Num_GID = 1, Num_LID = 1;$/;"	v	file:
Num_LID	driver_old/dr_loadbal.c	/^static int Num_GID = 1, Num_LID = 1;$/;"	v	file:
Num_LID	zz/zz_const.h	/^  int Num_LID;                    \/*  The number of entries in Local IDs.    *\/$/;"	m	struct:Zoltan_Struct
Num_Local_Parts_Param	lb/lb_const.h	/^  int Num_Local_Parts_Param;      \/*  The number of local partitions specified.$/;"	m	struct:Zoltan_LB_Struct
Num_Proc	ch/ch_init_dist.c	/^static int Num_Proc;        \/* Global number of processors                   *\/$/;"	v	file:
Num_Proc	fdriver/fdr_main.f90	/^  integer(Zoltan_INT) :: Proc, Num_Proc$/;"	v	program:fdriver
Num_Proc	fdriver_old/fdr_main.f90	/^  integer(LB_INT) :: Proc, Num_Proc$/;"	v	program:fdriver
Num_Proc	zz/zz_const.h	/^  int Num_Proc;                   \/*  The number of processors in the MPI$/;"	m	struct:Zoltan_Struct
Num_Proc_Dist	ch/ch_init_dist.c	/^static int Num_Proc_Dist;   \/* Number of processors to distribute data; $/;"	v	file:
Num_Procs	ZoltanComponent/TestComponents/Driver.h	/^    int Proc, Num_Procs, num_gid_entries, num_lid_entries ;$/;"	m	class:ZoltanTestSpace::Driver
Num_Procs	ZoltanComponent/TestComponents/Mesh.h	/^    int Proc, Num_Procs ;$/;"	m	class:ZoltanTestSpace::Mesh
Number_Iterations	ZoltanComponent/TestComponents/Driver.cpp	/^  int Number_Iterations = 1 ; $/;"	v
Number_Iterations	ZoltanComponent/TestComponents/Mesh.cpp	/^  int Number_Iterations = 1 ; $/;"	v
Number_Iterations	driver/dr_main.c	/^int Number_Iterations = 1;$/;"	v
Number_Iterations	driver/dr_mainCPP.cpp	/^int Number_Iterations = 1;$/;"	v
Number_Iterations	driver_old/dr_main.c	/^int Number_Iterations = 1;$/;"	v
Number_Iterations	util/vtk_view.cpp	/^int Number_Iterations = 1;$/;"	v
OBJECT_PARTITIONING	driver/dr_const.h	/^  OBJECT_PARTITIONING$/;"	e	enum:PARTITIONING_TYPE
OCTNEW_msg	oct/migoct.c	/^} OCTNEW_msg;$/;"	t	typeref:struct:__anon28	file:
OCTPART	lb/lb_const.h	/^  OCTPART,$/;"	e	enum:Zoltan_LB_Method
OCT_CSRC	makefile	/^OCT_CSRC	= msg.c octant.c oct_util.c octupdate.c dfs.c costs.c migoct.c \\$/;"	m
OCT_CSRC	makefile	/^OCT_CSRC	=$/;"	m
OCT_Global_Info	oct/octree_const.h	/^} OCT_Global_Info;$/;"	t	typeref:struct:__anon32
OCT_INC	makefile	/^OCT_INC		= msg_const.h octant_const.h oct_util_const.h \\$/;"	m
OCT_INC	makefile	/^OCT_INC		=$/;"	m
OCT_count	oct/octant.c	/^static int OCT_count;                \/* count of all local octants           *\/$/;"	v	file:
OCT_dimension	oct/octree_const.h	/^  int OCT_dimension;$/;"	m	struct:__anon32
OCT_gmax	oct/octree_const.h	/^  COORD OCT_gmax;$/;"	m	struct:__anon32
OCT_gmin	oct/octree_const.h	/^  COORD OCT_gmin;$/;"	m	struct:__anon32
OCT_idcount	oct/octant.c	/^static int OCT_idcount;              \/* count for id's, help with uniqueness *\/$/;"	v	file:
OCT_localpid	oct/octree_const.h	/^  int OCT_localpid;             \/* the processor id                     *\/$/;"	m	struct:__anon32
OCT_params	oct/octupdate.c	/^static PARAM_VARS OCT_params[] = {$/;"	v	file:
OCT_rootlist	oct/octree_const.h	/^  pRList OCT_rootlist;          \/* list of all the local roots          *\/$/;"	m	struct:__anon32
OFFSCREEN_VIEW_LIBS	makefile	/^OFFSCREEN_VIEW_LIBS = \\$/;"	m
OPP_CSRC	makefile	/^OPP_CSRC	= mm_input.c order_eval.c$/;"	m
OPP_INC	makefile	/^OPP_INC		= mm_input.h order_eval.h$/;"	m
OPP_INCLUDEPATH	makefile	/^OPP_INCLUDEPATH = $(SCOTCH_INCPATH)$/;"	m
OPP_LIBS	makefile	/^OPP_LIBS	= $(SCOTCH_LIBPATH) -lscotch -lscotcherrcom -lcommon -lrt$/;"	m
OPP_OBJ	makefile	/^OPP_OBJ		= $(OPP_CSRC:.c=.o)$/;"	m
OPT3D_NTRIES	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       OPT3D_NTRIES = 5;	\/* # local opts to look for global min in opt3d *\/$/;"	v
OPTION_DBGLVL	parmetis/parmetis_interface.h	58;"	d
OPTION_FOLDF	parmetis/parmetis_interface.h	57;"	d
OPTION_IPART	parmetis/parmetis_interface.h	56;"	d
ORDEREVAL	postprocessing/ordering/order_eval.c	73;"	d	file:
ORDER_CSRC	makefile	/^ORDER_CSRC	= order.c order_struct.c order_tools.c perm.c$/;"	m
ORDER_INC	makefile	/^ORDER_INC	= order_const.h $/;"	m
OUTFILE	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	252;"	d
OUTPUT_ASSIGN	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       OUTPUT_ASSIGN = FALSE; \/* Write assignments to file? (TRUE\/FALSE) *\/$/;"	v
OUTPUT_FILES_MAX_NVTXS	driver/dr_random_io.c	45;"	d	file:
OUTPUT_METRICS	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       OUTPUT_METRICS = 2;	 \/* Controls displaying of results (-2..2) *\/$/;"	v
OUTPUT_TIME	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       OUTPUT_TIME = 2;	 \/* At what level to display timings (0..2) *\/$/;"	v
OUT_ASSIGN_INV	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       OUT_ASSIGN_INV = FALSE;\/* If so, use inverse form? (TRUE\/FALSE) *\/$/;"	v
Obj_Weight_Dim	zz/zz_const.h	/^  int Obj_Weight_Dim;             \/*  Dimension of the object weights, $/;"	m	struct:Zoltan_Struct
OctTree_LB	ZoltanComponent/CCA_Wrapper/OctTree.h	/^    OctTree_LB(PartitionerFactory_JR *q, int index, MPI_Comm *A) : BaseLB(q, index, A)$/;"	f	class:ZoltanSpace::OctTree_LB
OctTree_LB	ZoltanComponent/CCA_Wrapper/OctTree.h	/^  class OctTree_LB : public virtual BaseLB$/;"	c	namespace:ZoltanSpace
OctTree_LBHSeen	ZoltanComponent/CCA_Wrapper/OctTree.h	8;"	d
OctType	oct/octant_const.h	/^typedef enum {LOCALOCT, REMOTEOCT} OctType;$/;"	t	typeref:enum:__anon33
Octant	oct/octant_const.h	/^} Octant;$/;"	t	typeref:struct:_Octant
OldRemap	lb/lb_const.h	/^  int *OldRemap;                  \/*  Remapping array computed in previous$/;"	m	struct:Zoltan_LB_Struct
Only_Proc_Changes	lb/lb_const.h	/^  int Only_Proc_Changes;              \/*  Pack and unpack objects during$/;"	m	struct:Zoltan_Migrate_Struct
Order	include/zoltan_cpp.h	/^  int Order    ( int num_gid_entries,$/;"	f	class:Zoltan
Order	zz/zz_const.h	/^  struct Zoltan_Order_Struct  Order;   \/* Struct with info for ordering       *\/$/;"	m	struct:Zoltan_Struct	typeref:struct:Zoltan_Struct::Zoltan_Order_Struct
Order_Get_Block_Bounds	include/zoltan_cpp.h	/^  int Order_Get_Block_Bounds(int block_num, int &first, int &last) {$/;"	f	class:Zoltan
Order_Get_Block_Leaves	include/zoltan_cpp.h	/^  void Order_Get_Block_Leaves(int *leaves) {$/;"	f	class:Zoltan
Order_Get_Block_Parent	include/zoltan_cpp.h	/^  int Order_Get_Block_Parent(int block_num) {$/;"	f	class:Zoltan
Order_Get_Block_Size	include/zoltan_cpp.h	/^  int Order_Get_Block_Size(int block_num) {$/;"	f	class:Zoltan
Order_Get_Num_Blocks	include/zoltan_cpp.h	/^  int Order_Get_Num_Blocks() {$/;"	f	class:Zoltan
Order_Get_Num_Leaves	include/zoltan_cpp.h	/^  int Order_Get_Num_Leaves() {$/;"	f	class:Zoltan
Order_params	order/order.c	/^static PARAM_VARS Order_params[] = {$/;"	v	file:
Output	ZoltanComponent/TestComponents/Driver.cpp	/^  struct Output_Flags Output ;$/;"	v	typeref:struct:Output_Flags
Output	ZoltanComponent/TestComponents/Mesh.cpp	/^  struct Output_Flags Output ;$/;"	v	typeref:struct:Output_Flags
Output	driver/dr_main.c	/^struct Output_Flags Output;$/;"	v	typeref:struct:Output_Flags
Output	driver/dr_mainCPP.cpp	/^struct Output_Flags Output;$/;"	v	typeref:struct:Output_Flags
Output	util/vtk_view.cpp	/^struct Output_Flags Output;$/;"	v	typeref:struct:Output_Flags
Output_File	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/submain/submain.c	/^FILE     *Output_File = NULL;	\/* Pointer to output file or NULL *\/$/;"	v
Output_Flags	driver/dr_const.h	/^struct Output_Flags {$/;"	s
Output_Parts	phg/phg_hypergraph.h	/^  int *Output_Parts;        \/* Final partition #s for on-processor objects *\/$/;"	m	struct:Zoltan_HGraph
PACKAGE	Utilities/shared/zoltan_util.h	29;"	d
PACKAGE	driver/dr_const.h	41;"	d
PACKAGE_BUGREPORT	Utilities/shared/zoltan_util.h	37;"	d
PACKAGE_BUGREPORT	driver/dr_const.h	49;"	d
PACKAGE_NAME	Utilities/shared/zoltan_util.h	33;"	d
PACKAGE_NAME	driver/dr_const.h	45;"	d
PACKAGE_STRING	Utilities/shared/zoltan_util.h	41;"	d
PACKAGE_STRING	driver/dr_const.h	53;"	d
PACKAGE_TARNAME	Utilities/shared/zoltan_util.h	45;"	d
PACKAGE_TARNAME	driver/dr_const.h	57;"	d
PACKAGE_VERSION	Utilities/shared/zoltan_util.h	49;"	d
PACKAGE_VERSION	driver/dr_const.h	61;"	d
PARAMS_CSRC	makefile	/^PARAMS_CSRC	= set_param.c assign_param_vals.c check_param.c print_params.c \\$/;"	m
PARAMS_FILENAME	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^char     *PARAMS_FILENAME = "User_Params";	\/* File of parameter changes *\/$/;"	v
PARAMS_INC	makefile	/^PARAMS_INC	= params_const.h$/;"	m
PARAM_LIST	params/params_const.h	/^} PARAM_LIST;$/;"	t	typeref:struct:Param_List
PARAM_UTYPE	params/params_const.h	/^} PARAM_UTYPE;$/;"	t	typeref:struct:Param_Utype
PARAM_VARS	params/params_const.h	/^} PARAM_VARS;$/;"	t	typeref:struct:Param_Vars
PARIO_INFO	driver/dr_input_const.h	/^typedef struct Parallel_IO  PARIO_INFO;$/;"	t	typeref:struct:Parallel_IO
PARIO_INFO	driver_old/dr_input_const.h	/^typedef struct Parallel_IO  PARIO_INFO;$/;"	t	typeref:struct:Parallel_IO
PARIO_INFO	fdriver/fdr_input.f90	/^type PARIO_INFO$/;"	t	module:dr_input
PARIO_INFO	fdriver_old/fdr_input.f90	/^type PARIO_INFO$/;"	t	module:dr_input
PARIO_INFO_PTR	driver/dr_input_const.h	/^typedef struct Parallel_IO *PARIO_INFO_PTR;$/;"	t	typeref:struct:Parallel_IO
PARIO_INFO_PTR	driver_old/dr_input_const.h	/^typedef struct Parallel_IO *PARIO_INFO_PTR;$/;"	t	typeref:struct:Parallel_IO
PARMETIS	lb/lb_const.h	/^  PARMETIS,$/;"	e	enum:Zoltan_LB_Method
PARMETIS31_ALWAYS_FREES_VSIZE	parmetis/parmetis_interface.c	35;"	d	file:
PARMETIS_CSRC	makefile	/^PARMETIS_CSRC	= third_library.c preprocessing.c postprocessing.c$/;"	m
PARMETIS_INC	makefile	/^PARMETIS_INC	= third_library_const.h$/;"	m
PARMETIS_LIBS	ZoltanComponent/CCA_Wrapper/Makefile	/^PARMETIS_LIBS = -lparmetis -lmetis$/;"	m
PARMETIS_LIBS	ZoltanComponent/TestComponents/Makefile	/^PARMETIS_LIBS = -lparmetis -lmetis$/;"	m
PARMETIS_MAJOR_VERSION	parmetis/parmetis_interface.h	48;"	d
PARMETIS_MINOR_VERSION	parmetis/parmetis_interface.h	49;"	d
PARMETIS_SUBMINOR_VERSION	parmetis/parmetis_interface.c	31;"	d	file:
PARTITIONING_TYPE	driver/dr_const.h	/^enum PARTITIONING_TYPE {$/;"	g
PAR_CSRC	makefile	/^PAR_CSRC	= par_average.c par_bisect.c par_median.c par_median_randomized.c \\$/;"	m
PAR_INC	makefile	/^PAR_INC		= par_const.h par_average_const.h par_median_const.h \\$/;"	m
PERCENTAGE_OUTPUT	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/input/read_params.c	/^int       PERCENTAGE_OUTPUT = FALSE;    \/* Output in percent? (TRUE\/FALSE) *\/$/;"	v
PERTURB	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       PERTURB = TRUE;	\/* Randomly perturb matrix in spectral method? *\/$/;"	v
PERTURB_MAX	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^double    PERTURB_MAX = 3.0e-3;	\/* Largest value for perturbation *\/$/;"	v
PHGComm	phg/phg_comm.h	/^typedef struct PHGCommStruct PHGComm;$/;"	t	typeref:struct:PHGCommStruct
PHGCommStruct	phg/phg_comm.h	/^struct PHGCommStruct {$/;"	s
PHGPartParams	phg/phg.h	/^typedef struct PHGPartParamsStruct PHGPartParams;$/;"	t	typeref:struct:PHGPartParamsStruct
PHGPartParamsStruct	phg/phg.h	/^struct PHGPartParamsStruct {$/;"	s
PHG_ADD_EDGE_WEIGHTS	phg/phg_const.h	29;"	d
PHG_ADD_NO_WEIGHT	phg/phg_const.h	26;"	d
PHG_ADD_PINS_WEIGHT	phg/phg_const.h	25;"	d
PHG_ADD_UNIT_WEIGHT	phg/phg_const.h	24;"	d
PHG_CSRC	makefile	/^PHG_CSRC 	= phg.c phg_hypergraph.c phg_build.c phg_build_calls.c \\$/;"	m
PHG_DEBUG_ALL	phg/phg.h	162;"	d
PHG_DEBUG_LIST	phg/phg.h	161;"	d
PHG_DEBUG_NONE	phg/phg.h	160;"	d
PHG_DEBUG_PLOT	phg/phg.h	164;"	d
PHG_DEBUG_PRINT	phg/phg.h	163;"	d
PHG_FLAG_ERROR_EDGE_WEIGHTS	phg/phg_const.h	30;"	d
PHG_INC	makefile	/^PHG_INC 	= phg.h phg_util.h phg_hypergraph.h phg_tree.h$/;"	m
PHG_MAX_EDGE_WEIGHTS	phg/phg_const.h	28;"	d
PHG_PROC_SPLIT	phg/phg_rdivide.c	32;"	d	file:
PHG_params	phg/phg.c	/^static PARAM_VARS PHG_params[] = {$/;"	v	file:
PI	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/defs.h	9;"	d
PIVOT_CHOICE_BISECTION	rcb/rcb.c	87;"	d	file:
PIVOT_CHOICE_RANDOM	rcb/rcb.c	88;"	d	file:
PLAN_TAG	phg/phg_coarse.c	24;"	d	file:
PMV3_OPTION_DBGLVL	parmetis/parmetis_interface.h	59;"	d
PMV3_OPTION_IPART	parmetis/parmetis_interface.h	61;"	d
PMV3_OPTION_PSR	parmetis/parmetis_interface.h	62;"	d
PMV3_OPTION_SEED	parmetis/parmetis_interface.h	60;"	d
PMV3_OPT_USE_OBJ_SIZE	parmetis/parmetis_interface.h	63;"	d
PNG_FORMAT	util/vtk_view.cpp	153;"	d	file:
POP	matrix/common_sort.c	63;"	d	file:
POW	oct/octupdate.c	26;"	d	file:
PRINT_HEADERS	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       PRINT_HEADERS = TRUE;	 \/* Print pretty output headers (TRUE\/FALSE) *\/$/;"	v
PRINT_SYNC	par/par_sync.c	28;"	d	file:
PROB_INFO	driver/dr_const.h	/^typedef struct Problem_Description  PROB_INFO;$/;"	t	typeref:struct:Problem_Description
PROB_INFO	driver_old/dr_const.h	/^typedef struct Problem_Description  PROB_INFO;$/;"	t	typeref:struct:Problem_Description
PROB_INFO	fdriver/fdr_const.f90	/^type PROB_INFO$/;"	t	module:dr_const
PROB_INFO	fdriver_old/fdr_const.f90	/^type PROB_INFO$/;"	t	module:dr_const
PROB_INFO	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^typedef struct Problem_Description  PROB_INFO;$/;"	t	typeref:struct:Problem_Description
PROB_INFO_PTR	driver/dr_const.h	/^typedef struct Problem_Description *PROB_INFO_PTR;$/;"	t	typeref:struct:Problem_Description
PROB_INFO_PTR	driver_old/dr_const.h	/^typedef struct Problem_Description *PROB_INFO_PTR;$/;"	t	typeref:struct:Problem_Description
PROB_INFO_PTR	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^typedef struct Problem_Description *PROB_INFO_PTR;$/;"	t	typeref:struct:Problem_Description
PROJECTION_AXIS	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/inertial/inertial.c	/^int       PROJECTION_AXIS = 0;	\/* axis to flatten geometry *\/$/;"	v
PROMPT	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       PROMPT = TRUE;	 \/* Prompt for input? (TRUE\/FALSE) *\/$/;"	v
PROTO	include/zoltan_mem.h	33;"	d
PROTO	include/zoltan_mem.h	35;"	d
PROTO	include/zoltan_mem.h	37;"	d
PROTO	params/params_const.h	30;"	d
PROTO	params/params_const.h	32;"	d
PROTO	params/params_const.h	34;"	d
PSUM_THRESHOLD	phg/phg_match.c	2004;"	d	file:
PSUM_THRESHOLD	phg/phg_match.c	519;"	d	file:
PS_FORMAT	util/vtk_view.cpp	154;"	d	file:
PUSH	matrix/common_sort.c	62;"	d	file:
PYRAMID13	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_elem_const.h	/^              WEDGE16, PYRAMID5, PYRAMID13, SHELL2, NULL_EL} E_Type;$/;"	e	enum:__anon26
PYRAMID5	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_elem_const.h	/^              WEDGE16, PYRAMID5, PYRAMID13, SHELL2, NULL_EL} E_Type;$/;"	e	enum:__anon26
PackThisEntity	ZoltanComponent/TestComponents/Mesh_DataMig.cpp	/^int ZoltanTestSpace::Mesh::PackThisEntity(int num_gid_entries, int num_lid_entries,$/;"	f	class:ZoltanTestSpace::Mesh
Pack_Obj	zz/zz_const.h	/^  ZOLTAN_PACK_OBJ_FN *Pack_Obj;        \/* Routine that packs object data for$/;"	m	struct:Zoltan_Struct
Pack_Obj_Data	zz/zz_const.h	/^  void *Pack_Obj_Data;                 \/* Ptr to user defined data to be$/;"	m	struct:Zoltan_Struct
Pack_Obj_Fort	zz/zz_const.h	/^  ZOLTAN_PACK_OBJ_FORT_FN *Pack_Obj_Fort;$/;"	m	struct:Zoltan_Struct
Pack_Obj_Multi	zz/zz_const.h	/^  ZOLTAN_PACK_OBJ_MULTI_FN *Pack_Obj_Multi;$/;"	m	struct:Zoltan_Struct
Pack_Obj_Multi_Data	zz/zz_const.h	/^  void *Pack_Obj_Multi_Data;                 \/* Ptr to user defined data to be$/;"	m	struct:Zoltan_Struct
Pack_Obj_Multi_Fort	zz/zz_const.h	/^  ZOLTAN_PACK_OBJ_MULTI_FORT_FN *Pack_Obj_Multi_Fort;$/;"	m	struct:Zoltan_Struct
Packing	phg/phg_hypergraph.h	/^typedef int *Packing;   \/* length |V|, packing information of vertices *\/$/;"	t
ParMetis_LB	ZoltanComponent/CCA_Wrapper/ParMetis.h	/^    ParMetis_LB(PartitionerFactory_JR *q, int index, MPI_Comm *A) : BaseLB(q, index, A)$/;"	f	class:ZoltanSpace::ParMetis_LB
ParMetis_LB	ZoltanComponent/CCA_Wrapper/ParMetis.h	/^  class ParMetis_LB : public virtual BaseLB$/;"	c	namespace:ZoltanSpace
ParMetis_LBHSeen	ZoltanComponent/CCA_Wrapper/ParMetis.h	8;"	d
Parallel_IO	driver/dr_input_const.h	/^struct Parallel_IO$/;"	s
Parallel_IO	driver_old/dr_input_const.h	/^struct Parallel_IO$/;"	s
Param_List	params/params_const.h	/^typedef struct Param_List {$/;"	s
Param_Utype	params/params_const.h	/^typedef struct Param_Utype {$/;"	s
Param_Vars	params/params_const.h	/^typedef struct Param_Vars {$/;"	s
Param_func	params/set_param.c	/^static ZOLTAN_SET_PARAM_FN * Param_func[] = {$/;"	v	file:
ParameterList	driver/dr_input_const.h	/^struct ParameterList$/;"	s
Parameter_Description	driver/dr_const.h	/^struct Parameter_Description {$/;"	s
Parameter_Pair	driver/dr_const.h	/^typedef struct Parameter_Description Parameter_Pair;$/;"	t	typeref:struct:Parameter_Description
Parameter_Pair	driver_old/dr_const.h	/^typedef char Parameter_Pair[2][128]; \/* typedef for parameter strings. $/;"	t
Parameter_Pair	fdriver/fdr_const.f90	/^type Parameter_Pair$/;"	t	module:dr_const
Parameter_Pair	fdriver_old/fdr_const.f90	/^type Parameter_Pair$/;"	t	module:dr_const
Params	zz/zz_const.h	/^  struct Param_List *Params;      \/*  List of parameter names & new vals     *\/$/;"	m	struct:Zoltan_Struct	typeref:struct:Zoltan_Struct::Param_List
Parmetis_params	parmetis/parmetis_interface.c	/^static PARAM_VARS Parmetis_params[] = {$/;"	v	file:
Part	phg/phg_Vcycle.c	/^    Partition         Part;       \/* original hg and Part, don't delete them *\/  $/;"	m	struct:tagVCycle	file:
Part	rcb/shared.h	/^  int Part;                     \/* New partition to which the dot is $/;"	m	struct:Dot_Struct
PartDist	lb/lb_const.h	/^  int *PartDist;                  \/*  Array describing distribution of $/;"	m	struct:Zoltan_LB_Struct
Part_Info	lb/lb_const.h	/^  struct Zoltan_part_info *Part_Info; \/*  Array of partition size info.  *\/$/;"	m	struct:Zoltan_LB_Struct	typeref:struct:Zoltan_LB_Struct::Zoltan_part_info
Part_Info_Len	lb/lb_const.h	/^  int Part_Info_Len;              \/*  Actual length of Part_Info arrays. *\/$/;"	m	struct:Zoltan_LB_Struct
Part_Info_Max_Len	lb/lb_const.h	/^  int Part_Info_Max_Len;          \/*  Allocated length of Part_Info arrays. *\/$/;"	m	struct:Zoltan_LB_Struct
Part_id	lb/lb_const.h	/^  int Part_id;         \/*  Partition id.           *\/$/;"	m	struct:Zoltan_part_info
Partition	hsfc/hsfc.h	/^   } Partition;         \/* interval is half open, [l,r) *\/$/;"	t	typeref:struct:Partition
Partition	hsfc/hsfc.h	/^typedef struct Partition {$/;"	s
Partition	phg/phg_hypergraph.h	/^typedef int *Partition; \/* length |V|, partition ID for each vertex *\/$/;"	t
PartitionerFactoryHSeen	ZoltanComponent/CCA_Wrapper/PartitionerFactory.h	9;"	d
PartitionerFactory_JR	ZoltanComponent/CCA_Wrapper/PartitionerFactory.h	/^  class PartitionerFactory_JR : $/;"	c	namespace:ZoltanSpace
PartitionerFactory_JR	ZoltanComponent/CCA_Wrapper/PartitonerFactory.cpp	/^ZoltanSpace::PartitionerFactory_JR::PartitionerFactory_JR()$/;"	f	class:ZoltanSpace::PartitionerFactory_JR
Permutation	zz/zz_const.h	/^  int Permutation[3]; \/* if trans. is simple coord switch, use this instead *\/$/;"	m	struct:Zoltan_Transform_Struct
PickColor	coloring/coloring.c	/^static int PickColor($/;"	f	file:
Pin_Procs	phg/phg_hypergraph.h	/^  int *Pin_Procs;           \/* Process owning each pin  *\/$/;"	m	struct:Zoltan_HGraph
Plan	include/zoltan_comm_cpp.h	/^  ZOLTAN_COMM_OBJ *Plan;$/;"	m	class:Zoltan_Comm
Plot_Partition	driver/dr_const.h	/^  int Plot_Partition;$/;"	m	struct:Output_Flags
Point_Assign	lb/lb_const.h	/^  ZOLTAN_LB_POINT_ASSIGN_FN *Point_Assign;$/;"	m	struct:Zoltan_LB_Struct
PostPackingProcessing	ZoltanComponent/TestComponents/Mesh_DataMig.cpp	/^int ZoltanTestSpace::Mesh::PostPackingProcessing( $/;"	f	class:ZoltanTestSpace::Mesh
PostUnpackingProcessing	ZoltanComponent/TestComponents/Mesh_DataMig.cpp	/^int ZoltanTestSpace::Mesh::PostUnpackingProcessing( $/;"	f	class:ZoltanTestSpace::Mesh
Post_Migrate	lb/lb_const.h	/^  ZOLTAN_POST_MIGRATE_FN *Post_Migrate;\/* Function that performs application$/;"	m	struct:Zoltan_Migrate_Struct
Post_Migrate_Data	lb/lb_const.h	/^  void *Post_Migrate_Data;             \/* Ptr to user defined data to be$/;"	m	struct:Zoltan_Migrate_Struct
Post_Migrate_Fort	lb/lb_const.h	/^  ZOLTAN_POST_MIGRATE_FORT_FN *Post_Migrate_Fort;$/;"	m	struct:Zoltan_Migrate_Struct
Post_Migrate_PP	lb/lb_const.h	/^  ZOLTAN_POST_MIGRATE_PP_FN *Post_Migrate_PP;$/;"	m	struct:Zoltan_Migrate_Struct
Post_Migrate_PP_Data	lb/lb_const.h	/^  void *Post_Migrate_PP_Data;        \/* Ptr to user defined data to be$/;"	m	struct:Zoltan_Migrate_Struct
Post_Migrate_PP_Fort	lb/lb_const.h	/^  ZOLTAN_POST_MIGRATE_PP_FORT_FN *Post_Migrate_PP_Fort;$/;"	m	struct:Zoltan_Migrate_Struct
PrePackingProcessing	ZoltanComponent/TestComponents/Mesh_DataMig.cpp	/^int ZoltanTestSpace::Mesh::PrePackingProcessing( $/;"	f	class:ZoltanTestSpace::Mesh
Pre_Migrate	lb/lb_const.h	/^  ZOLTAN_PRE_MIGRATE_FN *Pre_Migrate;  \/* Function that performs application$/;"	m	struct:Zoltan_Migrate_Struct
Pre_Migrate_Data	lb/lb_const.h	/^  void *Pre_Migrate_Data;              \/* Ptr to user defined data to be$/;"	m	struct:Zoltan_Migrate_Struct
Pre_Migrate_Fort	lb/lb_const.h	/^  ZOLTAN_PRE_MIGRATE_FORT_FN *Pre_Migrate_Fort;$/;"	m	struct:Zoltan_Migrate_Struct
Pre_Migrate_PP	lb/lb_const.h	/^  ZOLTAN_PRE_MIGRATE_PP_FN *Pre_Migrate_PP;$/;"	m	struct:Zoltan_Migrate_Struct
Pre_Migrate_PP_Data	lb/lb_const.h	/^  void *Pre_Migrate_PP_Data;         \/* Ptr to user defined data to be$/;"	m	struct:Zoltan_Migrate_Struct
Pre_Migrate_PP_Fort	lb/lb_const.h	/^  ZOLTAN_PRE_MIGRATE_PP_FORT_FN *Pre_Migrate_PP_Fort;$/;"	m	struct:Zoltan_Migrate_Struct
Prev_Global_Parts_Param	lb/lb_const.h	/^  int Prev_Global_Parts_Param;    \/*  The previous values of$/;"	m	struct:Zoltan_LB_Struct
Prev_Local_Parts_Param	lb/lb_const.h	/^  int Prev_Local_Parts_Param;     \/*  The previous values of$/;"	m	struct:Zoltan_LB_Struct
Print	include/zoltan_dd_cpp.h	/^  int Print () const$/;"	f	class:Zoltan_DD
Print	include/zoltan_timer_cpp.h	/^  int Print(const int &ts_idx, const int &proc, $/;"	f	class:Zoltan_Timer_Object
PrintAll	include/zoltan_timer_cpp.h	/^  int PrintAll(const int &proc, const MPI_Comm &comm, FILE *os) const {$/;"	f	class:Zoltan_Timer_Object
PrintArr	phg/phg_distrib.c	/^static void PrintArr(PHGComm *hgc, char *st, int *ar, int n)$/;"	f	file:
PrintCommonKeywordsToScreen	ZoltanComponent/CCA_Wrapper/BaseLB_prop.cpp	/^int ZoltanSpace::BaseLB::PrintCommonKeywordsToScreen()$/;"	f	class:ZoltanSpace::BaseLB
PrintKeywordsToScreen	ZoltanComponent/CCA_Wrapper/HSFC_prop.cpp	/^int ZoltanSpace::HSFC_LB::PrintKeywordsToScreen()$/;"	f	class:ZoltanSpace::HSFC_LB
PrintKeywordsToScreen	ZoltanComponent/CCA_Wrapper/OctTree_prop.cpp	/^int ZoltanSpace::OctTree_LB::PrintKeywordsToScreen()$/;"	f	class:ZoltanSpace::OctTree_LB
PrintKeywordsToScreen	ZoltanComponent/CCA_Wrapper/ParMetis_prop.cpp	/^int ZoltanSpace::ParMetis_LB::PrintKeywordsToScreen()$/;"	f	class:ZoltanSpace::ParMetis_LB
PrintKeywordsToScreen	ZoltanComponent/CCA_Wrapper/RCB_prop.cpp	/^int ZoltanSpace::RCB_LB::PrintKeywordsToScreen()$/;"	f	class:ZoltanSpace::RCB_LB
PrintKeywordsToScreen	ZoltanComponent/CCA_Wrapper/RIB_prop.cpp	/^int ZoltanSpace::RIB_LB::PrintKeywordsToScreen()$/;"	f	class:ZoltanSpace::RIB_LB
ProRedL	phg/phg.h	/^  float ProRedL;           \/* V-cycle processor reduction limit in % of pins *\/$/;"	m	struct:PHGPartParamsStruct
Problem_Description	driver/dr_const.h	/^struct Problem_Description$/;"	s
Problem_Description	driver_old/dr_const.h	/^struct Problem_Description$/;"	s
Problem_Description	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^struct Problem_Description$/;"	s
Proc	ZoltanComponent/TestComponents/Driver.h	/^    int Proc, Num_Procs, num_gid_entries, num_lid_entries ;$/;"	m	class:ZoltanTestSpace::Driver
Proc	ZoltanComponent/TestComponents/Mesh.h	/^    int Proc, Num_Procs ;$/;"	m	class:ZoltanTestSpace::Mesh
Proc	fdriver/fdr_main.f90	/^  integer(Zoltan_INT) :: Proc,/;"	v	program:fdriver
Proc	fdriver_old/fdr_main.f90	/^  integer(LB_INT) :: Proc,/;"	v	program:fdriver
Proc	oct/octant_const.h	/^  int Proc;                           \/* Processor originally owning the obj*\/$/;"	m	struct:Region_Node
Proc	rcb/shared.h	/^  int Proc;                     \/* Processor ID for processor owning a dot.$/;"	m	struct:Dot_Struct
Proc	util/vtk_view.cpp	/^static int NumProcs, Proc;$/;"	v	file:
Proc	zz/zz_const.h	/^  int Proc;                       \/*  The processor's ID within the MPI$/;"	m	struct:Zoltan_Struct
ProcDist	lb/lb_const.h	/^  int *ProcDist;                  \/*  Array describing distribution of $/;"	m	struct:Zoltan_LB_Struct
ProcForRepart	phg/phg_build.c	41;"	d	file:
ProduceFileOutput	ZoltanComponent/TestComponents/Mesh.cpp	/^int ZoltanTestSpace::Mesh::ProduceFileOutput(char *tag)$/;"	f	class:ZoltanTestSpace::Mesh
ProduceGnuplotOutput	ZoltanComponent/TestComponents/Mesh.cpp	/^int ZoltanTestSpace::Mesh::ProduceGnuplotOutput(char *tag)$/;"	f	class:ZoltanTestSpace::Mesh
QSORT_CUTOFF	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_util.c	792;"	d	file:
QUAD1	driver/dr_elem_const.h	/^typedef enum {E_TYPE_ERROR=-1, SPHERE, BAR1, BAR2, QUAD1, S_QUAD2, QUAD2,$/;"	e	enum:__anon40
QUAD1	driver_old/dr_elem_const.h	/^typedef enum {E_TYPE_ERROR=-1, SPHERE, BAR1, BAR2, QUAD1, S_QUAD2, QUAD2,$/;"	e	enum:__anon5
QUAD2	driver/dr_elem_const.h	/^typedef enum {E_TYPE_ERROR=-1, SPHERE, BAR1, BAR2, QUAD1, S_QUAD2, QUAD2,$/;"	e	enum:__anon40
QUAD2	driver_old/dr_elem_const.h	/^typedef enum {E_TYPE_ERROR=-1, SPHERE, BAR1, BAR2, QUAD1, S_QUAD2, QUAD2,$/;"	e	enum:__anon5
QUAD4	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_elem_const.h	/^typedef enum {SPHERE, BAR2, BAR3, QUAD4, QUAD8, QUAD9,$/;"	e	enum:__anon26
QUAD8	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_elem_const.h	/^typedef enum {SPHERE, BAR2, BAR3, QUAD4, QUAD8, QUAD9,$/;"	e	enum:__anon26
QUAD9	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_elem_const.h	/^typedef enum {SPHERE, BAR2, BAR3, QUAD4, QUAD8, QUAD9,$/;"	e	enum:__anon26
RANDOM	lb/lb_const.h	/^  RANDOM, $/;"	e	enum:Zoltan_LB_Method
RANDOM	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	245;"	d
RANDOM_SEED	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^long      RANDOM_SEED = 7654321L;	\/* Seed for random number generator *\/$/;"	v
RAND_MAXIMUM	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/randomize.c	/^int       RAND_MAXIMUM;		\/* largest value returnable from rand() *\/$/;"	v
RB_MAX_WGTS	rcb/shared.h	27;"	d
RCB	lb/lb_const.h	/^  RCB,$/;"	e	enum:Zoltan_LB_Method
RCB_Box	driver/dr_const.h	/^  int RCB_Box;              \/* Exercises Zoltan_RCB_Box. *\/$/;"	m	struct:Test_Flags
RCB_Box	include/zoltan_cpp.h	/^  int RCB_Box( const int &part,$/;"	f	class:Zoltan
RCB_CSRC	makefile	/^RCB_CSRC	= rcb.c rcb_util.c rcb_box.c box_assign.c point_assign.c \\$/;"	m
RCB_DEFAULT_OUTPUT_LEVEL	rcb/rcb.c	59;"	d	file:
RCB_DEFAULT_OVERALLOC	rcb/rcb.c	60;"	d	file:
RCB_DEFAULT_REUSE	rcb/rcb.c	61;"	d	file:
RCB_INC	makefile	/^RCB_INC		= rcb_const.h create_proc_list.h rib_const.h shared_const.h$/;"	m
RCB_LB	ZoltanComponent/CCA_Wrapper/RCB.h	/^    RCB_LB(PartitionerFactory_JR *q, int index, MPI_Comm *A) : BaseLB(q, index, A)$/;"	f	class:ZoltanSpace::RCB_LB
RCB_LB	ZoltanComponent/CCA_Wrapper/RCB.h	/^  class RCB_LB : public virtual BaseLB$/;"	c	namespace:ZoltanSpace
RCB_LBHSeen	ZoltanComponent/CCA_Wrapper/RCB.h	8;"	d
RCB_STRUCT	rcb/rcb.h	/^} RCB_STRUCT;$/;"	t	typeref:struct:RCB_Struct
RCB_Struct	rcb/rcb.h	/^typedef struct RCB_Struct {$/;"	s
RCB_params	rcb/rcb.c	/^static PARAM_VARS RCB_params[] = {$/;"	v	file:
READ_EXO	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	286;"	d
REALLOC_FACTOR	parmetis/third_library_tools.h	29;"	d
RECOLORTAG	coloring/coloring.c	41;"	d	file:
REFINEMENT_LIMIT	hsfc/hsfc.h	/^static const double  REFINEMENT_LIMIT = 10.0 * DBL_EPSILON;$/;"	v
REFINE_MAP	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       REFINE_MAP = FALSE;		\/* ... to reduce hops? (T\/F) *\/$/;"	v
REFINE_PARTITION	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       REFINE_PARTITION = FALSE;	\/* Postprocess to improve cuts? *\/$/;"	v
REFTREE	lb/lb_const.h	/^  REFTREE,$/;"	e	enum:Zoltan_LB_Method
REFTREE_CSRC	makefile	/^REFTREE_CSRC    = reftree_build.c reftree_part.c reftree_hash.c \\$/;"	m
REFTREE_INC	makefile	/^REFTREE_INC     = reftree_const.h$/;"	m
REFTREE_params	reftree/reftree_build.c	/^static PARAM_VARS REFTREE_params[] = {$/;"	v	file:
RELEVANT_COLORS	coloring/coloring.c	35;"	d	file:
REMOTEOCT	oct/octant_const.h	/^typedef enum {LOCALOCT, REMOTEOCT} OctType;$/;"	e	enum:__anon33
RETURN_IPERM	order/order_const.h	115;"	d
RETURN_RANK	order/order_const.h	114;"	d
RIB	lb/lb_const.h	/^  RIB,$/;"	e	enum:Zoltan_LB_Method
RIB_DEFAULT_OUTPUT_LEVEL	rcb/rib.c	45;"	d	file:
RIB_DEFAULT_OVERALLOC	rcb/rib.c	46;"	d	file:
RIB_LB	ZoltanComponent/CCA_Wrapper/RIB.h	/^    RIB_LB(PartitionerFactory_JR *q, int index, MPI_Comm *A) : BaseLB(q, index, A)$/;"	f	class:ZoltanSpace::RIB_LB
RIB_LB	ZoltanComponent/CCA_Wrapper/RIB.h	/^  class RIB_LB : public virtual BaseLB$/;"	c	namespace:ZoltanSpace
RIB_LBHSeen	ZoltanComponent/CCA_Wrapper/RIB.h	8;"	d
RIB_STRUCT	rcb/rib.h	/^} RIB_STRUCT;$/;"	t	typeref:struct:RIB_Struct
RIB_Struct	rcb/rib.h	/^typedef struct RIB_Struct {$/;"	s
RIB_params	rcb/rib.c	/^static PARAM_VARS RIB_params[] = {$/;"	v	file:
RL_Node	oct/rootlist_const.h	/^typedef struct RL_Node {                \/* an entry in the local root list   *\/$/;"	s
RL_OctEqual	oct/rootlist.c	/^static int RL_OctEqual(pOctant oct1, pOctant oct2) {$/;"	f	file:
RL_OctGreaterThan	oct/rootlist.c	/^static int RL_OctGreaterThan(pOctant oct1, pOctant oct2) {$/;"	f	file:
RL_addRootOctant	oct/rootlist.c	/^int RL_addRootOctant(pRList rlist, pOctant oct) {$/;"	f
RL_clearRootOctants	oct/rootlist.c	/^int RL_clearRootOctants(pRList *rlist) {$/;"	f
RL_delRootOctant	oct/rootlist.c	/^int RL_delRootOctant(OCT_Global_Info *OCT_info, pRList *rootlist, pOctant oct) {$/;"	f
RL_freeList	oct/rootlist.c	/^int RL_freeList(pRList *rlist) {$/;"	f
RL_initRootList	oct/rootlist.c	/^pRList  RL_initRootList() {$/;"	f
RL_nextRootOctant	oct/rootlist.c	/^pOctant RL_nextRootOctant(pRList *rlist) {$/;"	f
RL_numRootOctants	oct/rootlist.c	/^int RL_numRootOctants(pRList rlist) {$/;"	f
RL_printRootOctants	oct/rootlist.c	/^int RL_printRootOctants(pRList rlist) {$/;"	f
RList	oct/rootlist_const.h	/^} RList;$/;"	t	typeref:struct:RL_Node
RM	ZoltanComponent/CCA_Wrapper/Makefile	/^RM = \/bin\/rm -f$/;"	m
RM	ZoltanComponent/TestComponents/Makefile	/^RM = \/bin\/rm -f$/;"	m
RNGState	phg/phg_comm.h	/^  unsigned int RNGState;  \/* State for random-number generator$/;"	m	struct:PHGCommStruct
RNGState_col	phg/phg_comm.h	/^  unsigned int RNGState_col;  \/* State for random-number generator w.r.t.$/;"	m	struct:PHGCommStruct
RNGState_row	phg/phg_comm.h	/^  unsigned int RNGState_row;  \/* State for random-number generator w.r.t.$/;"	m	struct:PHGCommStruct
ROUNDS_CONSTANT	phg/phg_match.c	2001;"	d	file:
ROUNDS_CONSTANT	phg/phg_match.c	513;"	d	file:
ROWS	driver/dr_input_const.h	39;"	d
RQI_CONVERGENCE_MODE	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       RQI_CONVERGENCE_MODE = 1;	\/* RQI convergence test type: *\/$/;"	v
RUNNING	Utilities/Timer/zoltan_timer.c	54;"	d	file:
R_fp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^typedef real (*R_fp)();$/;"	t
R_fp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^typedef real (*R_fp)(...);$/;"	t
R_fp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^typedef real (*R_fp)();$/;"	t
R_fp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^typedef real (*R_fp)(...);$/;"	t
Random_params	simple/random.c	/^static PARAM_VARS Random_params[] = {$/;"	v	file:
RandomizeInitDist	phg/phg.h	/^  int RandomizeInitDist;  \/* Flag indicating whether to randomly distribute$/;"	m	struct:PHGPartParamsStruct
Range_Info	Utilities/DDirectory/DD_Set_Neighbor_Hash_Fn2.c	/^   } Range_Info;$/;"	t	typeref:struct:__anon1	file:
Recv_GNOs	phg/phg_hypergraph.h	/^  int *Recv_GNOs;           \/* Vertex GNOs of vtxs in 2D decomposition$/;"	m	struct:Zoltan_HGraph
Reduce_Dim_Params	zz/zz_coord.c	/^static PARAM_VARS Reduce_Dim_Params[] = {$/;"	v	file:
Refinement	phg/phg.h	/^  ZOLTAN_PHG_REFINEMENT_FN *Refinement;      \/* pointer to refinement fn *\/$/;"	m	struct:PHGPartParamsStruct
Region	oct/octant_const.h	/^} Region;$/;"	t	typeref:struct:Region_Node
Region_Node	oct/octant_const.h	/^typedef struct Region_Node {          \/* region = area in 3-space           *\/$/;"	s
Remap	lb/lb_const.h	/^  int *Remap;                     \/*  Remapping array; relabels computed $/;"	m	struct:Zoltan_LB_Struct
Remap_Flag	lb/lb_const.h	/^  int Remap_Flag;                 \/*  Flag indicating whether partitions$/;"	m	struct:Zoltan_LB_Struct
Remove	include/zoltan_dd_cpp.h	/^  int Remove (ZOLTAN_ID_PTR gid, const int &count)$/;"	f	class:Zoltan_DD
ReorderGraph	coloring/coloring.c	/^static int ReorderGraph($/;"	f	file:
RepartMultiplier	phg/phg.h	/^  float RepartMultiplier;  \/* In PHG_REPART, multiply input edge weights by$/;"	m	struct:PHGPartParamsStruct
Reset	include/zoltan_timer_cpp.h	/^  int Reset(const int &ts_idx, const int &use_barrier, $/;"	f	class:Zoltan_Timer_Object
Resize	include/zoltan_comm_cpp.h	/^  int Resize(int *sizes, const int &tag, int *sum_recv_sizes)$/;"	f	class:Zoltan_Comm
Return_Lists	lb/lb_const.h	/^  int Return_Lists;               \/*  Flag indicating which lists (if any)$/;"	m	struct:Zoltan_LB_Struct
RootListCommCreate	oct/migoct.c	36;"	d	file:
RootListCommDo	oct/migoct.c	37;"	d	file:
Rootid	oct/octupdate.c	/^} Rootid;$/;"	t	typeref:struct:__anon35	file:
Run	util/vtk_view.cpp	/^static void Run(vtkMultiProcessController *c, void *arg)$/;"	f	file:
SAFE_MALLOC	driver/dr_param_file.c	45;"	d	file:
SAFE_MALLOC	driver/dr_param_fileCPP.cpp	42;"	d	file:
SAPPOBJ	ZoltanComponent/CCA_Wrapper/Makefile	/^SAPPOBJ = BaseLB.so.o PartitonerFactory.so.o RCB_prop.so.o BaseLB_prop.so.o RCB.so.o \\$/;"	m
SAPPOBJ_Driver	ZoltanComponent/TestComponents/Makefile	/^SAPPOBJ_Driver =  Driver.so.o  Driver_wrapper.so.o$/;"	m
SAPPOBJ_Mesh	ZoltanComponent/TestComponents/Makefile	/^SAPPOBJ_Mesh =  Mesh.so.o  Mesh_info.so.o  Mesh_wrapper.so.o Mesh_DataMig.so.o$/;"	m
SCATTERED	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	246;"	d
SEQUENCE	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       SEQUENCE = FALSE;	\/* Only do spectral ordering? (TRUE\/FALSE) *\/$/;"	v
SEQ_FILENAME	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^char      SEQ_FILENAME[NAME_LENGTH] = "Sequence.out";	\/* If so, file name *\/$/;"	v
SETOCTFROMMIGRATEMSG	oct/migoct.c	89;"	d	file:
SET_GLOBAL_GRAPH	parmetis/third_library_const.h	102;"	d
SET_LOCAL_GRAPH	parmetis/third_library_const.h	103;"	d
SET_MAX_NODE	phg/phg_tree.c	38;"	d	file:
SET_MAX_NODE	phg/phg_two_ways.c	29;"	d	file:
SET_MIN_NODE	phg/phg_tree.c	37;"	d	file:
SET_MIN_NODE	phg/phg_two_ways.c	28;"	d	file:
SET_NO_GRAPH	parmetis/third_library_const.h	101;"	d
SET_PARAM_VAL	params/assign_param_vals.c	38;"	d	file:
SHELL1	driver/dr_elem_const.h	/^              SHELL1, SHELL2, TRI1, TRI2, TSHELL1, TSHELL2, HEX1,$/;"	e	enum:__anon40
SHELL1	driver_old/dr_elem_const.h	/^              SHELL1, SHELL2, TRI1, TRI2, TSHELL1, TSHELL2, HEX1,$/;"	e	enum:__anon5
SHELL2	driver/dr_elem_const.h	/^              SHELL1, SHELL2, TRI1, TRI2, TSHELL1, TSHELL2, HEX1,$/;"	e	enum:__anon40
SHELL2	driver_old/dr_elem_const.h	/^              SHELL1, SHELL2, TRI1, TRI2, TSHELL1, TSHELL2, HEX1,$/;"	e	enum:__anon5
SHELL2	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_elem_const.h	/^              WEDGE16, PYRAMID5, PYRAMID13, SHELL2, NULL_EL} E_Type;$/;"	e	enum:__anon26
SHELL4	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_elem_const.h	/^              SHELL4, SHELL8, TRI3, TRI6, TSHELL3, TSHELL6, HEX8,$/;"	e	enum:__anon26
SHELL8	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_elem_const.h	/^              SHELL4, SHELL8, TRI3, TRI6, TSHELL3, TSHELL6, HEX8,$/;"	e	enum:__anon26
SHOW_DISTMATRIX	phg/phg_util.c	25;"	d	file:
SHOW_MINMAXP	phg/phg_util.c	30;"	d	file:
SIGN	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/eigen/ql.c	13;"	d	file:
SIGN	zz/zz_coord.c	810;"	d	file:
SIMPLE_CSRC	makefile	/^SIMPLE_CSRC	= cyclic.c block.c random.c$/;"	m
SIMPLE_INC	makefile	/^SIMPLE_INC	= $/;"	m
SIMULATION_ITNS	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/input/read_params.c	/^int       SIMULATION_ITNS = 1;  \/* # iterations simulator is to imitate. *\/$/;"	v
SIMULATOR	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/input/read_params.c	/^int       SIMULATOR = 0;        \/* Run simulator? In what mode? *\/$/;"	v
SKIPEQ	driver/dr_input.c	36;"	d	file:
SKIPW	driver/dr_input.c	35;"	d	file:
SMALL_PRIME	phg/phg_comm.h	30;"	d
SNTAG	coloring/coloring.c	38;"	d	file:
SOLVE_INFO	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^typedef struct Solver_Description  SOLVE_INFO;$/;"	t	typeref:struct:Solver_Description
SOLVE_INFO_PTR	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^typedef struct Solver_Description *SOLVE_INFO_PTR;$/;"	t	typeref:struct:Solver_Description
SPECTRAL	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	242;"	d
SPHERE	driver/dr_elem_const.h	/^typedef enum {E_TYPE_ERROR=-1, SPHERE, BAR1, BAR2, QUAD1, S_QUAD2, QUAD2,$/;"	e	enum:__anon40
SPHERE	driver_old/dr_elem_const.h	/^typedef enum {E_TYPE_ERROR=-1, SPHERE, BAR1, BAR2, QUAD1, S_QUAD2, QUAD2,$/;"	e	enum:__anon5
SPHERE	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_elem_const.h	/^typedef enum {SPHERE, BAR2, BAR3, QUAD4, QUAD8, QUAD9,$/;"	e	enum:__anon26
SPHERE_INFO	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^typedef struct Sphere_Info  SPHERE_INFO;$/;"	t	typeref:struct:Sphere_Info
SPHERE_INFO_PTR	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^typedef struct Sphere_Info *SPHERE_INFO_PTR;$/;"	t	typeref:struct:Sphere_Info
SQRTS	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/submain/submain.c	/^double   *SQRTS;		\/* precomputed square roots for efficiency *\/$/;"	v
SQUARE	util/converters_for_JPDC_adaptive_mesh_experiments/chaco2chaco/prepartition.c	32;"	d	file:
SQUAREDDISTANCE	util/converters_for_JPDC_adaptive_mesh_experiments/chaco2chaco/prepartition.c	35;"	d	file:
SRESTOL	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^double    SRESTOL = -1.;		\/* Rel resid tol on T evec; autoset if <= 0 *\/$/;"	v
SRES_SWITCHES	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/eigen/Tevec.c	/^int SRES_SWITCHES = 0;	\/* # switchs to backup routine for computing evec of T *\/$/;"	v
STACK_NOT_EMPTY	matrix/common_sort.c	64;"	d	file:
STACK_SIZE	matrix/common_sort.c	61;"	d	file:
STANDARD	driver/dr_compress_const.h	/^  STANDARD = 0,$/;"	e	enum:ZOLTAN_FILETYPE_
STARTUP_COST	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/input/read_params.c	/^double    STARTUP_COST = 0.0;   \/* Communication cost of a message startup. *\/$/;"	v
START_CALLBACK_TIMER	driver/dr_loadbal.c	20;"	d	file:
START_CALLBACK_TIMER	driver/dr_loadbal.c	23;"	d	file:
START_CALLBACK_TIMER	driver/dr_loadbalCPP.cpp	20;"	d	file:
START_CALLBACK_TIMER	driver/dr_loadbalCPP.cpp	23;"	d	file:
STOP_CALLBACK_TIMER	driver/dr_loadbal.c	21;"	d	file:
STOP_CALLBACK_TIMER	driver/dr_loadbal.c	24;"	d	file:
STOP_CALLBACK_TIMER	driver/dr_loadbalCPP.cpp	21;"	d	file:
STOP_CALLBACK_TIMER	driver/dr_loadbalCPP.cpp	24;"	d	file:
SUBDIRS	Utilities/makefile	/^SUBDIRS		= Memory Communication DDirectory Timer shared$/;"	m
SUBDIRS	makefile	/^SUBDIRS		= driver$(ZOLTAN_OLD) ch zz all lb order par rcb \\$/;"	m
SUBINCPATH	Utilities/makefile	/^SUBINCPATH	= -I..\/..\/include -I..\/shared \\$/;"	m
SUBINCPATH	makefile	/^SUBINCPATH	= -I..\/include -I..\/Utilities\/shared \\$/;"	m
SUB_VPATH	Utilities/makefile	/^SUB_VPATH	= ..\/..\/include ..\/shared \\$/;"	m
SUB_VPATH	makefile	/^SUB_VPATH	= ..\/include ..\/Utilities\/shared \\$/;"	m
SURND_ALLOC	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	47;"	d
SWAP	coloring/coloring.h	29;"	d
SWAP	coloring/coloring.h	32;"	d
SWAP	phg/phg_coarse.c	114;"	d	file:
SWAP	phg/phg_coarse.c	47;"	d	file:
SWAP	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_util.c	793;"	d	file:
SYMMETRIZE	parmetis/third_library_const.h	99;"	d
S_HEX2	driver/dr_elem_const.h	/^              S_HEX2, HEX2, TET1, TET2, WEDGE1, WEDGE2,$/;"	e	enum:__anon40
S_HEX2	driver_old/dr_elem_const.h	/^              S_HEX2, HEX2, TET1, TET2, WEDGE1, WEDGE2,$/;"	e	enum:__anon5
S_QUAD2	driver/dr_elem_const.h	/^typedef enum {E_TYPE_ERROR=-1, SPHERE, BAR1, BAR2, QUAD1, S_QUAD2, QUAD2,$/;"	e	enum:__anon40
S_QUAD2	driver_old/dr_elem_const.h	/^typedef enum {E_TYPE_ERROR=-1, SPHERE, BAR1, BAR2, QUAD1, S_QUAD2, QUAD2,$/;"	e	enum:__anon5
S_fp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^typedef \/* Subroutine *\/ int (*S_fp)();$/;"	t
S_fp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^typedef \/* Subroutine *\/ int (*S_fp)(...);$/;"	t
S_fp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^typedef \/* Subroutine *\/ int (*S_fp)();$/;"	t
S_fp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^typedef \/* Subroutine *\/ int (*S_fp)(...);$/;"	t
SameStructure	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klvspiff/flatten.c	/^int       SameStructure(node1, node2, graph, scatter)$/;"	f
Scotch_Dgraph	parmetis/scotch_interface.c	32;"	d	file:
Scotch_params	parmetis/scotch_interface.c	/^static PARAM_VARS Scotch_params[] = {$/;"	v	file:
Seed	zz/zz_const.h	/^  unsigned int Seed;              \/*  Zoltan_Rand seed: default or provided $/;"	m	struct:Zoltan_Struct
SetCmdFilename	ZoltanComponent/TestComponents/Mesh.cpp	/^int ZoltanTestSpace::Mesh::SetCmdFilename(char *c)$/;"	f	class:ZoltanTestSpace::Mesh
SetCommonParameter	ZoltanComponent/CCA_Wrapper/BaseLB_prop.cpp	/^int ZoltanSpace::BaseLB::SetCommonParameter(char *key, bool b)$/;"	f	class:ZoltanSpace::BaseLB
SetCommonParameter	ZoltanComponent/CCA_Wrapper/BaseLB_prop.cpp	/^int ZoltanSpace::BaseLB::SetCommonParameter(char *key, char *val)$/;"	f	class:ZoltanSpace::BaseLB
SetCommonParameter	ZoltanComponent/CCA_Wrapper/BaseLB_prop.cpp	/^int ZoltanSpace::BaseLB::SetCommonParameter(char *key, double d) $/;"	f	class:ZoltanSpace::BaseLB
SetCommonParameter	ZoltanComponent/CCA_Wrapper/BaseLB_prop.cpp	/^int ZoltanSpace::BaseLB::SetCommonParameter(char *key, int i)$/;"	f	class:ZoltanSpace::BaseLB
SetParameter	ZoltanComponent/CCA_Wrapper/HSFC_prop.cpp	/^int ZoltanSpace::HSFC_LB::SetParameter(char *key, bool b)$/;"	f	class:ZoltanSpace::HSFC_LB
SetParameter	ZoltanComponent/CCA_Wrapper/HSFC_prop.cpp	/^int ZoltanSpace::HSFC_LB::SetParameter(char *key, char *val)$/;"	f	class:ZoltanSpace::HSFC_LB
SetParameter	ZoltanComponent/CCA_Wrapper/HSFC_prop.cpp	/^int ZoltanSpace::HSFC_LB::SetParameter(char *key, double d)$/;"	f	class:ZoltanSpace::HSFC_LB
SetParameter	ZoltanComponent/CCA_Wrapper/HSFC_prop.cpp	/^int ZoltanSpace::HSFC_LB::SetParameter(char *key, int i)$/;"	f	class:ZoltanSpace::HSFC_LB
SetParameter	ZoltanComponent/CCA_Wrapper/OctTree_prop.cpp	/^int ZoltanSpace::OctTree_LB::SetParameter(char *key, bool b)$/;"	f	class:ZoltanSpace::OctTree_LB
SetParameter	ZoltanComponent/CCA_Wrapper/OctTree_prop.cpp	/^int ZoltanSpace::OctTree_LB::SetParameter(char *key, char *val)$/;"	f	class:ZoltanSpace::OctTree_LB
SetParameter	ZoltanComponent/CCA_Wrapper/OctTree_prop.cpp	/^int ZoltanSpace::OctTree_LB::SetParameter(char *key, double d)$/;"	f	class:ZoltanSpace::OctTree_LB
SetParameter	ZoltanComponent/CCA_Wrapper/OctTree_prop.cpp	/^int ZoltanSpace::OctTree_LB::SetParameter(char *key, int i)$/;"	f	class:ZoltanSpace::OctTree_LB
SetParameter	ZoltanComponent/CCA_Wrapper/ParMetis_prop.cpp	/^int ZoltanSpace::ParMetis_LB::SetParameter(char *key, bool b)$/;"	f	class:ZoltanSpace::ParMetis_LB
SetParameter	ZoltanComponent/CCA_Wrapper/ParMetis_prop.cpp	/^int ZoltanSpace::ParMetis_LB::SetParameter(char *key, char *val)$/;"	f	class:ZoltanSpace::ParMetis_LB
SetParameter	ZoltanComponent/CCA_Wrapper/ParMetis_prop.cpp	/^int ZoltanSpace::ParMetis_LB::SetParameter(char *key, double d)$/;"	f	class:ZoltanSpace::ParMetis_LB
SetParameter	ZoltanComponent/CCA_Wrapper/ParMetis_prop.cpp	/^int ZoltanSpace::ParMetis_LB::SetParameter(char *key, int i)$/;"	f	class:ZoltanSpace::ParMetis_LB
SetParameter	ZoltanComponent/CCA_Wrapper/RCB_prop.cpp	/^int ZoltanSpace::RCB_LB::SetParameter(char *key, bool b)$/;"	f	class:ZoltanSpace::RCB_LB
SetParameter	ZoltanComponent/CCA_Wrapper/RCB_prop.cpp	/^int ZoltanSpace::RCB_LB::SetParameter(char *key, char *val)$/;"	f	class:ZoltanSpace::RCB_LB
SetParameter	ZoltanComponent/CCA_Wrapper/RCB_prop.cpp	/^int ZoltanSpace::RCB_LB::SetParameter(char *key, double d)$/;"	f	class:ZoltanSpace::RCB_LB
SetParameter	ZoltanComponent/CCA_Wrapper/RCB_prop.cpp	/^int ZoltanSpace::RCB_LB::SetParameter(char *key, int i)$/;"	f	class:ZoltanSpace::RCB_LB
SetParameter	ZoltanComponent/CCA_Wrapper/RIB_prop.cpp	/^int ZoltanSpace::RIB_LB::SetParameter(char *key, bool b)$/;"	f	class:ZoltanSpace::RIB_LB
SetParameter	ZoltanComponent/CCA_Wrapper/RIB_prop.cpp	/^int ZoltanSpace::RIB_LB::SetParameter(char *key, char *val)$/;"	f	class:ZoltanSpace::RIB_LB
SetParameter	ZoltanComponent/CCA_Wrapper/RIB_prop.cpp	/^int ZoltanSpace::RIB_LB::SetParameter(char *key, double d)$/;"	f	class:ZoltanSpace::RIB_LB
SetParameter	ZoltanComponent/CCA_Wrapper/RIB_prop.cpp	/^int ZoltanSpace::RIB_LB::SetParameter(char *key, int i)$/;"	f	class:ZoltanSpace::RIB_LB
SetParams	ZoltanComponent/TestComponents/Driver.cpp	/^int ZoltanTestSpace::Driver::SetParams( ::LoadPartitionerSpace::LoadBalancer *pLB)$/;"	f	class:ZoltanTestSpace::Driver
SetTypeOfEdge	ZoltanComponent/TestComponents/Mesh_info.cpp	/^int ZoltanTestSpace::Mesh::SetTypeOfEdge(char *name)$/;"	f	class:ZoltanTestSpace::Mesh
SetTypeOfEntity	ZoltanComponent/TestComponents/Mesh_info.cpp	/^int ZoltanTestSpace::Mesh::SetTypeOfEntity(char *name) $/;"	f	class:ZoltanTestSpace::Mesh
SetTypeOfGeom	ZoltanComponent/TestComponents/Mesh_info.cpp	/^int ZoltanTestSpace::Mesh::SetTypeOfGeom(char *name)$/;"	f	class:ZoltanTestSpace::Mesh
SetZoltanQueriesDataMigrationPort	ZoltanComponent/CCA_Wrapper/ZoltanApplQueryFunc.cpp	/^int ZoltanSpace::PartitionerFactory_JR::SetZoltanQueriesDataMigrationPort($/;"	f	class:ZoltanSpace::PartitionerFactory_JR
SetZoltanQueriesEdgeInfoPort	ZoltanComponent/CCA_Wrapper/ZoltanApplQueryFunc.cpp	/^int ZoltanSpace::PartitionerFactory_JR::SetZoltanQueriesEdgeInfoPort($/;"	f	class:ZoltanSpace::PartitionerFactory_JR
SetZoltanQueriesEntityInfoPort	ZoltanComponent/CCA_Wrapper/ZoltanApplQueryFunc.cpp	/^int ZoltanSpace::PartitionerFactory_JR::SetZoltanQueriesEntityInfoPort($/;"	f	class:ZoltanSpace::PartitionerFactory_JR
SetZoltanQueriesGeomInfoPort	ZoltanComponent/CCA_Wrapper/ZoltanApplQueryFunc.cpp	/^int ZoltanSpace::PartitionerFactory_JR::SetZoltanQueriesGeomInfoPort($/;"	f	class:ZoltanSpace::PartitionerFactory_JR
SetZoltanQueriesTreeInfoPort	ZoltanComponent/CCA_Wrapper/ZoltanApplQueryFunc.cpp	/^int ZoltanSpace::PartitionerFactory_JR::SetZoltanQueriesTreeInfoPort($/;"	f	class:ZoltanSpace::PartitionerFactory_JR
Set_Child_List_Fn	include/zoltan_cpp.h	/^  int Set_Child_List_Fn      ( ZOLTAN_CHILD_LIST_FN * fn_ptr,$/;"	f	class:Zoltan
Set_Child_Weight_Fn	include/zoltan_cpp.h	/^  int Set_Child_Weight_Fn    ( ZOLTAN_CHILD_WEIGHT_FN * fn_ptr,$/;"	f	class:Zoltan
Set_Coarse_Obj_List_Fn	include/zoltan_cpp.h	/^  int Set_Coarse_Obj_List_Fn ( ZOLTAN_COARSE_OBJ_LIST_FN * fn_ptr,$/;"	f	class:Zoltan
Set_Edge_List_Fn	include/zoltan_cpp.h	/^  int Set_Edge_List_Fn       ( ZOLTAN_EDGE_LIST_FN * fn_ptr,$/;"	f	class:Zoltan
Set_Edge_List_Multi_Fn	include/zoltan_cpp.h	/^  int Set_Edge_List_Multi_Fn ( ZOLTAN_EDGE_LIST_MULTI_FN * fn_ptr,$/;"	f	class:Zoltan
Set_First_Coarse_Obj_Fn	include/zoltan_cpp.h	/^  int Set_First_Coarse_Obj_Fn( ZOLTAN_FIRST_COARSE_OBJ_FN * fn_ptr,$/;"	f	class:Zoltan
Set_First_Obj_Fn	include/zoltan_cpp.h	/^  int Set_First_Obj_Fn       ( ZOLTAN_FIRST_OBJ_FN * fn_ptr,$/;"	f	class:Zoltan
Set_Fixed_Obj_List_Fn	include/zoltan_cpp.h	/^  int Set_Fixed_Obj_List_Fn    ( ZOLTAN_FIXED_OBJ_LIST_FN * fn_ptr,$/;"	f	class:Zoltan
Set_Fn	include/zoltan_cpp.h	/^  int Set_Fn  ( const ZOLTAN_FN_TYPE &fn_type,$/;"	f	class:Zoltan
Set_Geom_Fn	include/zoltan_cpp.h	/^  int Set_Geom_Fn            ( ZOLTAN_GEOM_FN * fn_ptr,$/;"	f	class:Zoltan
Set_Geom_Multi_Fn	include/zoltan_cpp.h	/^  int Set_Geom_Multi_Fn      ( ZOLTAN_GEOM_MULTI_FN * fn_ptr,$/;"	f	class:Zoltan
Set_HG_CS_Fn	include/zoltan_cpp.h	/^  int Set_HG_CS_Fn    ( ZOLTAN_HG_CS_FN * fn_ptr,$/;"	f	class:Zoltan
Set_HG_Edge_Weights_Fn	include/zoltan_cpp.h	32;"	d
Set_HG_Edge_Wts_Fn	include/zoltan_cpp.h	/^  int Set_HG_Edge_Wts_Fn    ( ZOLTAN_HG_EDGE_WTS_FN * fn_ptr,$/;"	f	class:Zoltan
Set_HG_Size_CS_Fn	include/zoltan_cpp.h	/^  int Set_HG_Size_CS_Fn    ( ZOLTAN_HG_SIZE_CS_FN * fn_ptr,$/;"	f	class:Zoltan
Set_HG_Size_Edge_Weights_Fn	include/zoltan_cpp.h	31;"	d
Set_HG_Size_Edge_Wts_Fn	include/zoltan_cpp.h	/^  int Set_HG_Size_Edge_Wts_Fn    ( ZOLTAN_HG_SIZE_EDGE_WTS_FN * fn_ptr,$/;"	f	class:Zoltan
Set_Hash_Fn	include/zoltan_dd_cpp.h	/^  int Set_Hash_Fn (unsigned int (*hash) (ZOLTAN_ID_PTR, int, unsigned int))$/;"	f	class:Zoltan_DD
Set_Hier_Method_Fn	include/zoltan_cpp.h	/^  int Set_Hier_Method_Fn( ZOLTAN_HIER_METHOD_FN * fn_ptr,$/;"	f	class:Zoltan
Set_Hier_Num_Levels_Fn	include/zoltan_cpp.h	/^  int Set_Hier_Num_Levels_Fn( ZOLTAN_HIER_NUM_LEVELS_FN * fn_ptr,$/;"	f	class:Zoltan
Set_Hier_Part_Fn	include/zoltan_cpp.h	/^  int Set_Hier_Part_Fn( ZOLTAN_HIER_PART_FN * fn_ptr,$/;"	f	class:Zoltan
Set_Hier_Partition_Fn	include/zoltan_cpp.h	/^  int Set_Hier_Partition_Fn( ZOLTAN_HIER_PART_FN * fn_ptr,$/;"	f	class:Zoltan
Set_Mid_Migrate_PP_Fn	include/zoltan_cpp.h	/^  int Set_Mid_Migrate_PP_Fn  ( ZOLTAN_MID_MIGRATE_PP_FN * fn_ptr,$/;"	f	class:Zoltan
Set_Next_Coarse_Obj_Fn	include/zoltan_cpp.h	/^  int Set_Next_Coarse_Obj_Fn ( ZOLTAN_NEXT_COARSE_OBJ_FN * fn_ptr,$/;"	f	class:Zoltan
Set_Next_Obj_Fn	include/zoltan_cpp.h	/^  int Set_Next_Obj_Fn        ( ZOLTAN_NEXT_OBJ_FN * fn_ptr,$/;"	f	class:Zoltan
Set_Num_Child_Fn	include/zoltan_cpp.h	/^  int Set_Num_Child_Fn       ( ZOLTAN_NUM_CHILD_FN * fn_ptr,$/;"	f	class:Zoltan
Set_Num_Coarse_Obj_Fn	include/zoltan_cpp.h	/^  int Set_Num_Coarse_Obj_Fn  ( ZOLTAN_NUM_COARSE_OBJ_FN * fn_ptr,$/;"	f	class:Zoltan
Set_Num_Edges_Fn	include/zoltan_cpp.h	/^  int Set_Num_Edges_Fn       ( ZOLTAN_NUM_EDGES_FN * fn_ptr,$/;"	f	class:Zoltan
Set_Num_Edges_Multi_Fn	include/zoltan_cpp.h	/^  int Set_Num_Edges_Multi_Fn ( ZOLTAN_NUM_EDGES_MULTI_FN * fn_ptr,$/;"	f	class:Zoltan
Set_Num_Fixed_Obj_Fn	include/zoltan_cpp.h	/^  int Set_Num_Fixed_Obj_Fn    ( ZOLTAN_NUM_FIXED_OBJ_FN * fn_ptr,$/;"	f	class:Zoltan
Set_Num_Geom_Fn	include/zoltan_cpp.h	/^  int Set_Num_Geom_Fn        ( ZOLTAN_NUM_GEOM_FN * fn_ptr,$/;"	f	class:Zoltan
Set_Num_Obj_Fn	include/zoltan_cpp.h	/^  int Set_Num_Obj_Fn         ( ZOLTAN_NUM_OBJ_FN * fn_ptr,$/;"	f	class:Zoltan
Set_Obj_List_Fn	include/zoltan_cpp.h	/^  int Set_Obj_List_Fn        ( ZOLTAN_OBJ_LIST_FN * fn_ptr,$/;"	f	class:Zoltan
Set_Obj_Size_Fn	include/zoltan_cpp.h	/^  int Set_Obj_Size_Fn        ( ZOLTAN_OBJ_SIZE_FN * fn_ptr,$/;"	f	class:Zoltan
Set_Obj_Size_Multi_Fn	include/zoltan_cpp.h	/^  int Set_Obj_Size_Multi_Fn  ( ZOLTAN_OBJ_SIZE_MULTI_FN * fn_ptr,$/;"	f	class:Zoltan
Set_Pack_Obj_Fn	include/zoltan_cpp.h	/^  int Set_Pack_Obj_Fn        ( ZOLTAN_PACK_OBJ_FN * fn_ptr,$/;"	f	class:Zoltan
Set_Pack_Obj_Multi_Fn	include/zoltan_cpp.h	/^  int Set_Pack_Obj_Multi_Fn  ( ZOLTAN_PACK_OBJ_MULTI_FN * fn_ptr,$/;"	f	class:Zoltan
Set_Param	include/zoltan_cpp.h	/^  int Set_Param( const std::string & param, const std::string & value )$/;"	f	class:Zoltan
Set_Param_Vec	include/zoltan_cpp.h	/^  int Set_Param_Vec( const std::string & param, const std::string & value, $/;"	f	class:Zoltan
Set_Part_Fn	include/zoltan_cpp.h	/^  int Set_Part_Fn        ( ZOLTAN_PART_FN * fn_ptr,$/;"	f	class:Zoltan
Set_Part_Multi_Fn	include/zoltan_cpp.h	/^  int Set_Part_Multi_Fn  ( ZOLTAN_PART_MULTI_FN * fn_ptr,$/;"	f	class:Zoltan
Set_Partition_Fn	include/zoltan_cpp.h	/^  int Set_Partition_Fn        ( ZOLTAN_PART_FN * fn_ptr,$/;"	f	class:Zoltan
Set_Partition_Multi_Fn	include/zoltan_cpp.h	/^  int Set_Partition_Multi_Fn  ( ZOLTAN_PART_MULTI_FN * fn_ptr,$/;"	f	class:Zoltan
Set_Post_Migrate_PP_Fn	include/zoltan_cpp.h	/^  int Set_Post_Migrate_PP_Fn ( ZOLTAN_POST_MIGRATE_PP_FN * fn_ptr,$/;"	f	class:Zoltan
Set_Pre_Migrate_PP_Fn	include/zoltan_cpp.h	/^  int Set_Pre_Migrate_PP_Fn  ( ZOLTAN_PRE_MIGRATE_PP_FN * fn_ptr,$/;"	f	class:Zoltan
Set_Unpack_Obj_Fn	include/zoltan_cpp.h	/^  int Set_Unpack_Obj_Fn      ( ZOLTAN_UNPACK_OBJ_FN * fn_ptr,$/;"	f	class:Zoltan
Set_Unpack_Obj_Multi_Fn	include/zoltan_cpp.h	/^  int Set_Unpack_Obj_Multi_Fn( ZOLTAN_UNPACK_OBJ_MULTI_FN * fn_ptr,$/;"	f	class:Zoltan
Single_Proc_Per_Part	lb/lb_const.h	/^  int Single_Proc_Per_Part;       \/*  Flag indicating whether a partition can$/;"	m	struct:Zoltan_LB_Struct
Size	lb/lb_const.h	/^  float Size;          \/*  Desired partition size. *\/$/;"	m	struct:Zoltan_part_info
Size	rcb/shared.h	/^  int Size;                     \/* Migration size *\/$/;"	m	struct:Dot_Struct
Solver_Description	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^struct Solver_Description$/;"	s
SpeedOpt	matrix/matrix.h	/^typedef enum {MATRIX_FULL_DD=0, MATRIX_FAST, MATRIX_NO_REDIST} SpeedOpt;$/;"	t	typeref:enum:__anon8
Sphere_Info	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^struct Sphere_Info$/;"	s
Start	include/zoltan_timer_cpp.h	/^  int Start(const int &ts_idx, const MPI_Comm &comm) {$/;"	f	class:Zoltan_Timer_Object
Start_File	Utilities/Timer/zoltan_timer.c	/^  char Start_File[MAXNAMELEN+1];  \/* Filename for most recent Start *\/$/;"	m	struct:TimeStruct	file:
Start_Line	Utilities/Timer/zoltan_timer.c	/^  int Start_Line;         \/* Line # in Start_File for most recent Start *\/$/;"	m	struct:TimeStruct	file:
Start_Time	Utilities/Timer/zoltan_timer.c	/^  double Start_Time;      \/* Most recent start time; $/;"	m	struct:TimeStruct	file:
Stats	include/zoltan_dd_cpp.h	/^  void Stats () const$/;"	f	class:Zoltan_DD
Status	Utilities/Timer/zoltan_timer.c	/^  int Status;             \/* Flag indicating status of TimeStruct:$/;"	m	struct:TimeStruct	file:
Stop	include/zoltan_timer_cpp.h	/^  int Stop(const int &ts_idx, const MPI_Comm &comm) {$/;"	f	class:Zoltan_Timer_Object
Stop_File	Utilities/Timer/zoltan_timer.c	/^  char Stop_File[MAXNAMELEN+1];   \/* Filename for most recent Stop *\/$/;"	m	struct:TimeStruct	file:
Stop_Line	Utilities/Timer/zoltan_timer.c	/^  int Stop_Line;          \/* Line # in Stop_File for most recent Stop *\/$/;"	m	struct:TimeStruct	file:
Stop_Time	Utilities/Timer/zoltan_timer.c	/^  double Stop_Time;       \/* Most recent end time;$/;"	m	struct:TimeStruct	file:
TAG1	order/perm.c	26;"	d	file:
TAG1	parmetis/third_library_const.h	110;"	d
TAG2	order/perm.c	27;"	d	file:
TAG2	parmetis/third_library_const.h	111;"	d
TAG3	parmetis/third_library_const.h	112;"	d
TAG4	parmetis/third_library_const.h	113;"	d
TAG5	parmetis/third_library_const.h	114;"	d
TAG6	parmetis/third_library_const.h	115;"	d
TAG7	parmetis/third_library_const.h	116;"	d
TERM_PROP	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       TERM_PROP = FALSE;	\/* Invoke terminal propagation? (TRUE\/FALSE) *\/$/;"	v
TESTINDEX	Utilities/Timer/zoltan_timer.c	70;"	d	file:
TESTTIMER	Utilities/Timer/zoltan_timer.c	66;"	d	file:
TEST_DD_ERROR	lb/lb_eval.c	1260;"	d	file:
TET1	driver/dr_elem_const.h	/^              S_HEX2, HEX2, TET1, TET2, WEDGE1, WEDGE2,$/;"	e	enum:__anon40
TET1	driver_old/dr_elem_const.h	/^              S_HEX2, HEX2, TET1, TET2, WEDGE1, WEDGE2,$/;"	e	enum:__anon5
TET10	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_elem_const.h	/^              HEX20, HEX27, HEXSHELL, TET4, TET10, TET8, WEDGE6, WEDGE15,$/;"	e	enum:__anon26
TET2	driver/dr_elem_const.h	/^              S_HEX2, HEX2, TET1, TET2, WEDGE1, WEDGE2,$/;"	e	enum:__anon40
TET2	driver_old/dr_elem_const.h	/^              S_HEX2, HEX2, TET1, TET2, WEDGE1, WEDGE2,$/;"	e	enum:__anon5
TET4	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_elem_const.h	/^              HEX20, HEX27, HEXSHELL, TET4, TET10, TET8, WEDGE6, WEDGE15,$/;"	e	enum:__anon26
TET8	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_elem_const.h	/^              HEX20, HEX27, HEXSHELL, TET4, TET10, TET8, WEDGE6, WEDGE15,$/;"	e	enum:__anon26
THIRD_PARTY_CSRC	makefile	/^THIRD_PARTY_CSRC =$/;"	m
THIRD_PARTY_INCPATH	makefile	/^THIRD_PARTY_INCPATH =$/;"	m
THIRD_PARTY_LIBPATH	makefile	/^THIRD_PARTY_LIBPATH = $/;"	m
THIRD_PARTY_LIBS	makefile	/^THIRD_PARTY_LIBS =$/;"	m
THIRD_PARTY_VPATH	makefile	/^THIRD_PARTY_VPATH =$/;"	m
TIFF_FORMAT	util/vtk_view.cpp	151;"	d	file:
TIMER_CSRC	makefile	/^TIMER_CSRC	= timer_params.c$/;"	m
TIMER_INC	makefile	/^TIMER_INC	= timer_const.h$/;"	m
TIME_INDX	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	290;"	d
TIME_KERNELS	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       TIME_KERNELS = FALSE;	\/* Time numerical kernels? (TRUE\/FALSE) *\/$/;"	v
TINY	par/par_average.c	26;"	d	file:
TINY	par/par_median.c	31;"	d	file:
TINY	par/par_median_randomized.c	30;"	d	file:
TINY	rcb/shared.h	26;"	d
TLIST_CNT	driver_old/dr_input.c	39;"	d	file:
TOLER	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	267;"	d
TRI1	driver/dr_elem_const.h	/^              SHELL1, SHELL2, TRI1, TRI2, TSHELL1, TSHELL2, HEX1,$/;"	e	enum:__anon40
TRI1	driver_old/dr_elem_const.h	/^              SHELL1, SHELL2, TRI1, TRI2, TSHELL1, TSHELL2, HEX1,$/;"	e	enum:__anon5
TRI2	driver/dr_elem_const.h	/^              SHELL1, SHELL2, TRI1, TRI2, TSHELL1, TSHELL2, HEX1,$/;"	e	enum:__anon40
TRI2	driver_old/dr_elem_const.h	/^              SHELL1, SHELL2, TRI1, TRI2, TSHELL1, TSHELL2, HEX1,$/;"	e	enum:__anon5
TRI3	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_elem_const.h	/^              SHELL4, SHELL8, TRI3, TRI6, TSHELL3, TSHELL6, HEX8,$/;"	e	enum:__anon26
TRI6	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_elem_const.h	/^              SHELL4, SHELL8, TRI3, TRI6, TSHELL3, TSHELL6, HEX8,$/;"	e	enum:__anon26
TRUE	Utilities/Communication/comm.h	34;"	d
TRUE	Utilities/DDirectory/DD.h	40;"	d
TRUE	ch/ch_input_const.h	46;"	d
TRUE	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klvspiff/matching.c	11;"	d	file:
TRUE	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/defs.h	5;"	d
TRUE	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	8;"	d	file:
TRUE	zz/zz_const.h	68;"	d
TRUE_	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	20;"	d
TRUE_	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	20;"	d
TRY_FAST	parmetis/third_library_const.h	95;"	d
TSHELL1	driver/dr_elem_const.h	/^              SHELL1, SHELL2, TRI1, TRI2, TSHELL1, TSHELL2, HEX1,$/;"	e	enum:__anon40
TSHELL1	driver_old/dr_elem_const.h	/^              SHELL1, SHELL2, TRI1, TRI2, TSHELL1, TSHELL2, HEX1,$/;"	e	enum:__anon5
TSHELL2	driver/dr_elem_const.h	/^              SHELL1, SHELL2, TRI1, TRI2, TSHELL1, TSHELL2, HEX1,$/;"	e	enum:__anon40
TSHELL2	driver_old/dr_elem_const.h	/^              SHELL1, SHELL2, TRI1, TRI2, TSHELL1, TSHELL2, HEX1,$/;"	e	enum:__anon5
TSHELL3	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_elem_const.h	/^              SHELL4, SHELL8, TRI3, TRI6, TSHELL3, TSHELL6, HEX8,$/;"	e	enum:__anon26
TSHELL6	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_elem_const.h	/^              SHELL4, SHELL8, TRI3, TRI6, TSHELL3, TSHELL6, HEX8,$/;"	e	enum:__anon26
TSUM_THRESHOLD	phg/phg_match.c	2005;"	d	file:
TSUM_THRESHOLD	phg/phg_match.c	520;"	d	file:
TWOPI	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/defs.h	10;"	d
Target_Dim	zz/zz_const.h	/^  int Target_Dim; \/* Number of dimensions in transformed geometry:$/;"	m	struct:Zoltan_Transform_Struct
Test	ZoltanComponent/TestComponents/Driver.cpp	/^  struct Test_Flags Test ;$/;"	v	typeref:struct:Test_Flags
Test	ZoltanComponent/TestComponents/Mesh.cpp	/^  struct Test_Flags Test ;$/;"	v	typeref:struct:Test_Flags
Test	driver/dr_main.c	/^struct Test_Flags Test;$/;"	v	typeref:struct:Test_Flags
Test	driver/dr_mainCPP.cpp	/^struct Test_Flags Test;$/;"	v	typeref:struct:Test_Flags
Test	util/vtk_view.cpp	/^struct Test_Flags Test;$/;"	v	typeref:struct:Test_Flags
Test_Drops	fdriver/fdr_const.f90	/^integer(Zoltan_INT) :: Test_Drops /;"	v	module:dr_const
Test_Flags	driver/dr_const.h	/^struct Test_Flags {$/;"	s
Test_Gen_Files	fdriver/fdr_const.f90	/^integer(Zoltan_INT) :: Test_Gen_Files /;"	v	module:dr_const
Test_Graph_Callbacks	fdriver/fdr_const.f90	/^integer(Zoltan_INT) :: Test_Graph_Callbacks /;"	v	module:dr_const
Test_Hypergraph_Callbacks	fdriver/fdr_const.f90	/^integer(Zoltan_INT) :: Test_Hypergraph_Callbacks /;"	v	module:dr_const
Test_Local_Partitions	fdriver/fdr_const.f90	/^integer(Zoltan_INT) :: Test_Local_Partitions /;"	v	module:dr_const
Test_Multi_Callbacks	fdriver/fdr_const.f90	/^integer(Zoltan_INT) :: Test_Multi_Callbacks /;"	v	module:dr_const
Tevec	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/eigen/Tevec.c	/^double    Tevec(alpha, beta, j, ritz, s)$/;"	f
Text	driver/dr_const.h	/^  int Text;$/;"	m	struct:Output_Flags
Tflops_Special	par/par_median_randomized.c	/^  int Tflops_Special;$/;"	m	struct:_commStruct	file:
Tflops_Special	zz/zz_const.h	/^  int Tflops_Special;             \/*  Flag to indicate if we should use some$/;"	m	struct:Zoltan_Struct
TimeStruct	Utilities/Timer/zoltan_timer.c	/^typedef struct TimeStruct {$/;"	s	file:
Timer	zz/zz_const.h	/^  int Timer;                      \/*  Timer type that is currently active *\/$/;"	m	struct:Zoltan_Struct
Timer_Callback_Time	driver/dr_loadbal.c	/^double Timer_Callback_Time, Timer_Global_Callback_Time;$/;"	v
Timer_Callback_Time	driver/dr_loadbalCPP.cpp	/^double Timer_Callback_Time, Timer_Global_Callback_Time;$/;"	v
Timer_Flag	Utilities/Timer/zoltan_timer.c	/^  int Timer_Flag;         \/* Zoltan Timer_Flag flag passed to Zoltan_Time *\/$/;"	m	struct:Zoltan_Timer	file:
Timer_Global_Callback_Time	driver/dr_loadbal.c	/^double Timer_Callback_Time, Timer_Global_Callback_Time;$/;"	v
Timer_Global_Callback_Time	driver/dr_loadbalCPP.cpp	/^double Timer_Callback_Time, Timer_Global_Callback_Time;$/;"	v
Times	Utilities/Timer/zoltan_timer.c	/^  ZTIMER_TS *Times;       \/* Array of actual timing data -- individual timers *\/$/;"	m	struct:Zoltan_Timer	file:
Total_Partition_Time	ZoltanComponent/TestComponents/Mesh.cpp	/^  double Total_Partition_Time = 0.0 ;$/;"	v
Total_Partition_Time	driver/dr_main.c	/^double Total_Partition_Time = 0.0;  \/* Total over Number_Iterations *\/$/;"	v
Total_Partition_Time	driver/dr_mainCPP.cpp	/^double Total_Partition_Time = 0.0;  \/* Total over Number_Iterations *\/$/;"	v
Tran	rcb/rcb.h	/^  ZZ_Transform Tran;        \/* transformation for degenerate geometry *\/$/;"	m	struct:RCB_Struct
Tran	rcb/rib.h	/^    ZZ_Transform       Tran;     \/* transformation for degenerate geometry *\/$/;"	m	struct:RIB_Struct
Transformation	zz/zz_const.h	/^  double Transformation[3][3]; \/* transforms degenerate geometry to 2D or 1D *\/$/;"	m	struct:Zoltan_Transform_Struct
Transformed_Box_Assign	rcb/box_assign.c	/^static void Transformed_Box_Assign($/;"	f	file:
TreeInfo	ZoltanComponent/ZoltanPorts/TreeInfoPort.h	/^    TreeInfo() : CONV_NS(Port)() {} $/;"	f	class:LoadPartitionerSpace::TreeInfo
TreeInfo	ZoltanComponent/ZoltanPorts/TreeInfoPort.h	/^  class TreeInfo : public virtual CONV_NS(Port)$/;"	c	namespace:LoadPartitionerSpace
TreeInfoPortHSeen	ZoltanComponent/ZoltanPorts/TreeInfoPort.h	9;"	d
Tree_Ptr	rcb/rcb.h	/^  struct rcb_tree *Tree_Ptr;$/;"	m	struct:RCB_Struct	typeref:struct:RCB_Struct::rcb_tree
Tree_Ptr	rcb/rib.h	/^    struct rib_tree   *Tree_Ptr;$/;"	m	struct:RIB_Struct	typeref:struct:RIB_Struct::rib_tree
Triplet	phg/phg_match.c	/^} Triplet;$/;"	t	typeref:struct:triplet	file:
UNDEFINED_INFO	driver/dr_input_const.h	/^typedef struct ParameterList UNDEFINED_INFO;$/;"	t	typeref:struct:ParameterList
UNDEFINED_INFO_PTR	driver/dr_input_const.h	/^typedef struct ParameterList *UNDEFINED_INFO_PTR;$/;"	t	typeref:struct:ParameterList
UNDEFINED_LENGTH_MAX	driver/dr_input_const.h	112;"	d
UNDEFINED_LIST_MAX	driver/dr_input_const.h	111;"	d
UNSYMMETRIC	parmetis/third_library_const.h	97;"	d
USE_RQI	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	268;"	d
USE_SERIAL_REFINEMENT_ON_ONE_PROC	phg/phg_refinement.c	27;"	d	file:
UTIL_CSRC	Utilities/makefile	/^UTIL_CSRC		= zoltan_id.c zoltan_align.c$/;"	m
UTIL_INC	Utilities/makefile	/^UTIL_INC		= zoltan_id.h$/;"	m
UTIL_NAME	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	238;"	d
UTIL_NAME	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	33;"	d
UTIL_NAME	zz/zz_const.h	56;"	d
UTIL_SUBDIRS	makefile	/^UTIL_SUBDIRS	= Utilities\/shared Utilities\/Communication \\$/;"	m
U_fp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^typedef int \/* Unknown procedure type *\/ (*U_fp)();$/;"	t
U_fp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^typedef int \/* Unknown procedure type *\/ (*U_fp)(...);$/;"	t
U_fp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^typedef int \/* Unknown procedure type *\/ (*U_fp)();$/;"	t
U_fp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^typedef int \/* Unknown procedure type *\/ (*U_fp)(...);$/;"	t
Uniform_Parts	lb/lb_const.h	/^  int Uniform_Parts;              \/*  Flag indicating whether partitions are$/;"	m	struct:Zoltan_LB_Struct
UnpackThisEntity	ZoltanComponent/TestComponents/Mesh_DataMig.cpp	/^int ZoltanTestSpace::Mesh::UnpackThisEntity(int num_gid_entries, $/;"	f	class:ZoltanTestSpace::Mesh
Unpack_Obj	zz/zz_const.h	/^  ZOLTAN_UNPACK_OBJ_FN *Unpack_Obj;    \/* Routine that unpacks object data for$/;"	m	struct:Zoltan_Struct
Unpack_Obj_Data	zz/zz_const.h	/^  void *Unpack_Obj_Data;               \/* Ptr to user defined data to be$/;"	m	struct:Zoltan_Struct
Unpack_Obj_Fort	zz/zz_const.h	/^  ZOLTAN_UNPACK_OBJ_FORT_FN *Unpack_Obj_Fort;$/;"	m	struct:Zoltan_Struct
Unpack_Obj_Multi	zz/zz_const.h	/^  ZOLTAN_UNPACK_OBJ_MULTI_FN *Unpack_Obj_Multi;$/;"	m	struct:Zoltan_Struct
Unpack_Obj_Multi_Data	zz/zz_const.h	/^  void *Unpack_Obj_Multi_Data;         \/* Ptr to user defined data to be$/;"	m	struct:Zoltan_Struct
Unpack_Obj_Multi_Fort	zz/zz_const.h	/^  ZOLTAN_UNPACK_OBJ_MULTI_FORT_FN *Unpack_Obj_Multi_Fort;$/;"	m	struct:Zoltan_Struct
Update	include/zoltan_dd_cpp.h	/^  int Update (ZOLTAN_ID_PTR gid, ZOLTAN_ID_PTR lid, $/;"	f	class:Zoltan_DD
Update_msg	oct/migoct.c	/^} Update_msg;$/;"	t	typeref:struct:__anon29	file:
UseFixedVtx	phg/phg.h	/^  int UseFixedVtx;               \/* Flag indicating whether any vertices of$/;"	m	struct:PHGPartParamsStruct
UsePrefPart	phg/phg.h	/^  int UsePrefPart;               \/* Flag indicating that the coarsening$/;"	m	struct:PHGPartParamsStruct
Use_Barrier	Utilities/Timer/zoltan_timer.c	/^  int Use_Barrier;        \/* Flag indicating whether to perform a barrier$/;"	m	struct:TimeStruct	file:
Use_Edge_Wgts	driver/dr_migrate.c	/^static int Use_Edge_Wgts = 0;         \/* Flag indicating whether elements$/;"	v	file:
Use_Edge_Wgts	driver/dr_migrateCPP.cpp	/^static int Use_Edge_Wgts = 0;         \/* Flag indicating whether elements$/;"	v	file:
Use_Edge_Wgts	driver_old/dr_migrate.c	/^static int Use_Edge_Wgts = 0;         \/* Flag indicating whether elements$/;"	v	file:
Use_Edge_Wgts	fdriver/fdr_migrate.f90	/^logical, save :: Use_Edge_Wgts /;"	v	module:dr_migrate
Use_Edge_Wgts	fdriver_old/fdr_migrate.f90	/^logical, save :: Use_Edge_Wgts /;"	v	module:dr_migrate
Using_Main	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/interface.c	/^int       Using_Main = FALSE;	\/* Is main routine being called? *\/$/;"	v
VAR_INDX	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	288;"	d
VAR_NAME	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	291;"	d
VCycle	phg/phg_Vcycle.c	/^} VCycle; $/;"	t	typeref:struct:tagVCycle	file:
VERSION	Utilities/shared/zoltan_util.h	53;"	d
VERSION	driver/dr_const.h	65;"	d
VERTEX_COVER	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klvspiff/coarsen_klv.c	/^int       VERTEX_COVER = 0;	\/* Do vertex cover to refine separator? *\/$/;"	v
VERTEX_SEPARATOR	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klvspiff/klvspiff.c	/^int       VERTEX_SEPARATOR = FALSE;$/;"	v
VER_STR	driver/dr_const.h	113;"	d
VER_STR	driver_old/dr_const.h	33;"	d
VER_STR	fdriver/fdr_const.f90	/^character(len=3), parameter :: VER_STR /;"	v	module:dr_const
VER_STR	fdriver_old/fdr_const.f90	/^character(len=3), parameter :: VER_STR /;"	v	module:dr_const
VIEW_INC	makefile	/^VIEW_INC        = dr_input_const.h$/;"	m
VIEW_LIBS	makefile	/^VIEW_LIBS       = -L. $(VTK_LIBPATH) $(MPI_LIBPATH) $(X_LIBPATH) $(GL_LIBPATH) \\$/;"	m
VIEW_OBJ	makefile	/^VIEW_OBJ        = vtk_view.o dr_input.o  dr_err.o$/;"	m
VIEW_SRC	makefile	/^VIEW_SRC        = vtk_view.cpp dr_input.c dr_err.c$/;"	m
VMAX	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	269;"	d
VOID	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	116;"	d
VOID	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	116;"	d
VPATH	Utilities/makefile	/^VPATH		= $(SUBDIRS) $/;"	m
VPATH	makefile	/^VPATH		= $(SUBDIRS) $(UTIL_SUBDIRS) $(THIRD_PARTY_VPATH)$/;"	m
VTX_GNO_TO_LNO	phg/phg_hypergraph.h	109;"	d
VTX_LNO_TO_GNO	phg/phg_hypergraph.h	120;"	d
VTX_TO_PROC_X	phg/phg_hypergraph.h	132;"	d
Val	driver/dr_const.h	/^  char Val[128];      \/* parameter value *\/$/;"	m	struct:Parameter_Description
Vardesc	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^struct Vardesc {	\/* for Namelist *\/$/;"	s
Vardesc	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^typedef struct Vardesc Vardesc;$/;"	t	typeref:struct:Vardesc
Vardesc	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^struct Vardesc {	\/* for Namelist *\/$/;"	s
Vardesc	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^typedef struct Vardesc Vardesc;$/;"	t	typeref:struct:Vardesc
VtxPlan	phg/phg_hypergraph.h	/^  ZOLTAN_COMM_OBJ *VtxPlan; \/* Communication plan mapping GIDs to GNOs $/;"	m	struct:Zoltan_HGraph
VtxWeightDim	phg/phg_hypergraph.h	/^  int VtxWeightDim;     \/* number of weight dimensions for a vertex *\/$/;"	m	struct:__anon38
Vtx_Inc	driver/dr_const.h	/^  int Vtx_Inc;              \/* Increment #vertices for each iteration. *\/$/;"	m	struct:Test_Flags
Vtxdist	ch/ch_init_dist.c	/^static int *Vtxdist;        \/* Array of size Num_Proc+1 indicating range of$/;"	v	file:
WARNING_EVECS	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^int       WARNING_EVECS = 2;	\/* Warnings in eigenvector generation (0..3) *\/$/;"	v
WARNING_MISTOL	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^double    WARNING_MISTOL = 100;	\/* Warning if Ares and bjitol have this ratio *\/$/;"	v
WARNING_ORTHTOL	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/user_params.c	/^double    WARNING_ORTHTOL = 2;	\/* Warning if Ares and bjitol have this ratio *\/$/;"	v
WEDGE1	driver/dr_elem_const.h	/^              S_HEX2, HEX2, TET1, TET2, WEDGE1, WEDGE2,$/;"	e	enum:__anon40
WEDGE1	driver_old/dr_elem_const.h	/^              S_HEX2, HEX2, TET1, TET2, WEDGE1, WEDGE2,$/;"	e	enum:__anon5
WEDGE15	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_elem_const.h	/^              HEX20, HEX27, HEXSHELL, TET4, TET10, TET8, WEDGE6, WEDGE15,$/;"	e	enum:__anon26
WEDGE16	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_elem_const.h	/^              WEDGE16, PYRAMID5, PYRAMID13, SHELL2, NULL_EL} E_Type;$/;"	e	enum:__anon26
WEDGE2	driver/dr_elem_const.h	/^              S_HEX2, HEX2, TET1, TET2, WEDGE1, WEDGE2,$/;"	e	enum:__anon40
WEDGE2	driver_old/dr_elem_const.h	/^              S_HEX2, HEX2, TET1, TET2, WEDGE1, WEDGE2,$/;"	e	enum:__anon5
WEDGE6	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_elem_const.h	/^              HEX20, HEX27, HEXSHELL, TET4, TET10, TET8, WEDGE6, WEDGE15,$/;"	e	enum:__anon26
WEIGHT_INFO	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^typedef struct Weight_Description  WEIGHT_INFO;$/;"	t	typeref:struct:Weight_Description
WEIGHT_INFO_PTR	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^typedef struct Weight_Description *WEIGHT_INFO_PTR;$/;"	t	typeref:struct:Weight_Description
WRITE_OBJ	makefile	/^WRITE_OBJ        = vtk_write.o dr_input.o  dr_err.o$/;"	m
Weight	oct/octant_const.h	/^  double Weight;                      \/* weight of Region - default is 1    *\/$/;"	m	struct:Region_Node
Weight	rcb/shared.h	/^  double  Weight[RB_MAX_WGTS];  \/* weight of dot - if used must be >= 0 *\/$/;"	m	struct:Dot_Struct
Weight_Description	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^struct Weight_Description$/;"	s
WgtFctPtr	matrix/matrix_operations.c	/^typedef int(*WgtFctPtr)(float*, float*, int);$/;"	t	file:
WgtOp	matrix/matrix.h	/^typedef enum {ADD_WEIGHT=0, MAX_WEIGHT, CMP_WEIGHT} WgtOp;$/;"	t	typeref:enum:__anon7
X	rcb/shared.h	/^  double  X[3];			\/* location of dot *\/$/;"	m	struct:Dot_Struct
XFORBIDTAG	coloring/coloring.c	39;"	d	file:
ZCPPDRIVE_CSRC	makefile	/^ZCPPDRIVE_CSRC 	= $(DR_CPP_SRC) $(DR_BOTH_SRC) $(CH_CSRC)$/;"	m
ZCPPDRIVE_DEPS	makefile	/^ZCPPDRIVE_DEPS	= $(ZDRIVE_DEPS)$/;"	m
ZCPPDRIVE_LIBS	makefile	/^ZCPPDRIVE_LIBS	= -L. -l$(LIB_TARGET) \\$/;"	m
ZCPPDRIVE_OBJ	makefile	/^ZCPPDRIVE_OBJ	= $(DR_BOTH_SRC:.c=.O) $(CH_CSRC:.c=.O) $(DR_CPP_SRC:.cpp=.o)$/;"	m
ZC_JR_Child_List_Fn	ZoltanComponent/CCA_Wrapper/ZoltanApplQueryFunc.cpp	/^void ZC_JR_Child_List_Fn(void *data, int num_gid, int num_lid, ZOLTAN_ID_PTR gid,$/;"	f
ZC_JR_Child_Weight_Fn	ZoltanComponent/CCA_Wrapper/ZoltanApplQueryFunc.cpp	/^void ZC_JR_Child_Weight_Fn(void *data, int num_gid, int num_lid, ZOLTAN_ID_PTR gid,$/;"	f
ZC_JR_Coarse_Obj_List_Fn	ZoltanComponent/CCA_Wrapper/ZoltanApplQueryFunc.cpp	/^void ZC_JR_Coarse_Obj_List_Fn(void *data, int num_gid, int num_lid, ZOLTAN_ID_PTR gid,$/;"	f
ZC_JR_Coords_Fn	ZoltanComponent/CCA_Wrapper/ZoltanApplQueryFunc.cpp	/^void ZC_JR_Coords_Fn(void *data, int num_gid, int num_lid, ZOLTAN_ID_PTR gid,$/;"	f
ZC_JR_Edge_List_Fn	ZoltanComponent/CCA_Wrapper/ZoltanApplQueryFunc.cpp	/^void ZC_JR_Edge_List_Fn(void *data, int num_gid, int num_lid, ZOLTAN_ID_PTR gid,$/;"	f
ZC_JR_First_Coarse_Obj_Fn	ZoltanComponent/CCA_Wrapper/ZoltanApplQueryFunc.cpp	/^int ZC_JR_First_Coarse_Obj_Fn(void *data, int num_gid, int num_lid, ZOLTAN_ID_PTR gid,$/;"	f
ZC_JR_First_Obj_Fn	ZoltanComponent/CCA_Wrapper/ZoltanApplQueryFunc.cpp	/^int ZC_JR_First_Obj_Fn(void *data, int num_gid, int num_lid, ZOLTAN_ID_PTR first_gid,$/;"	f
ZC_JR_Mid_Migrate_Fn	ZoltanComponent/CCA_Wrapper/ZoltanApplQueryFunc.cpp	/^void ZC_JR_Mid_Migrate_Fn(void *data, int num_gid_entries, int num_lid_entries,$/;"	f
ZC_JR_Next_Coarse_Obj_Fn	ZoltanComponent/CCA_Wrapper/ZoltanApplQueryFunc.cpp	/^int ZC_JR_Next_Coarse_Obj_Fn(void *data, int num_gid, int num_lid, $/;"	f
ZC_JR_Next_Obj_Fn	ZoltanComponent/CCA_Wrapper/ZoltanApplQueryFunc.cpp	/^int ZC_JR_Next_Obj_Fn(void *data, int num_gid, int num_lid, ZOLTAN_ID_PTR prev_gid,$/;"	f
ZC_JR_Num_Child_Fn	ZoltanComponent/CCA_Wrapper/ZoltanApplQueryFunc.cpp	/^int ZC_JR_Num_Child_Fn(void *data, int num_gid, int num_lid, ZOLTAN_ID_PTR gid,$/;"	f
ZC_JR_Num_Coarse_Elem_Fn	ZoltanComponent/CCA_Wrapper/ZoltanApplQueryFunc.cpp	/^int ZC_JR_Num_Coarse_Elem_Fn(void *data, int *ierr)$/;"	f
ZC_JR_Num_Dimension_Fn	ZoltanComponent/CCA_Wrapper/ZoltanApplQueryFunc.cpp	/^int ZC_JR_Num_Dimension_Fn(void *data, int *ierr)$/;"	f
ZC_JR_Num_Edges_Fn	ZoltanComponent/CCA_Wrapper/ZoltanApplQueryFunc.cpp	/^int ZC_JR_Num_Edges_Fn(void *data, int num_gid, int num_lid, ZOLTAN_ID_PTR gid,$/;"	f
ZC_JR_Num_Obj_Fn	ZoltanComponent/CCA_Wrapper/ZoltanApplQueryFunc.cpp	/^int ZC_JR_Num_Obj_Fn(void *data, int *ierr)$/;"	f
ZC_JR_Obj_List_Fn	ZoltanComponent/CCA_Wrapper/ZoltanApplQueryFunc.cpp	/^void ZC_JR_Obj_List_Fn(void *data, int num_gid_entries, int num_lid_entries,$/;"	f
ZC_JR_Obj_Size_Fn	ZoltanComponent/CCA_Wrapper/ZoltanApplQueryFunc.cpp	/^int ZC_JR_Obj_Size_Fn(void *data, int num_gid_entries, int num_lid_entries,$/;"	f
ZC_JR_Pack_Obj_Fn	ZoltanComponent/CCA_Wrapper/ZoltanApplQueryFunc.cpp	/^void ZC_JR_Pack_Obj_Fn(void *data, int num_gid_entries, int num_lid_entries,$/;"	f
ZC_JR_Post_Migrate_Fn	ZoltanComponent/CCA_Wrapper/ZoltanApplQueryFunc.cpp	/^void ZC_JR_Post_Migrate_Fn(void *data, int num_gid_entries, int num_lid_entries,$/;"	f
ZC_JR_Pre_Migrate_Fn	ZoltanComponent/CCA_Wrapper/ZoltanApplQueryFunc.cpp	/^void ZC_JR_Pre_Migrate_Fn(void *data, int num_gid_entries, int num_lid_entries,$/;"	f
ZC_JR_Unpack_Obj_Fn	ZoltanComponent/CCA_Wrapper/ZoltanApplQueryFunc.cpp	/^void ZC_JR_Unpack_Obj_Fn(void *data, int num_gid_entries, ZOLTAN_ID_PTR global_id, $/;"	f
ZDRIVE_CSRC	makefile	/^ZDRIVE_CSRC 	= $(DR_C_SRC) $(DR_BOTH_SRC) $(CH_CSRC)$/;"	m
ZDRIVE_DEPS	makefile	/^ZDRIVE_DEPS	= libzoltan_comm.a libzoltan_mem.a libzoltan_dd.a$/;"	m
ZDRIVE_LIBS	makefile	/^ZDRIVE_LIBS	= -L. -l$(LIB_TARGET) \\$/;"	m
ZDRIVE_OBJ	makefile	/^ZDRIVE_OBJ	= $(ZDRIVE_CSRC:.c=.o)$/;"	m
ZG	graph/graph.h	/^} ZG;$/;"	t	typeref:struct:ZG_
ZG_	graph/graph.h	/^typedef struct ZG_ {$/;"	s
ZG_params	graph/graph.c	/^static PARAM_VARS ZG_params[] = {$/;"	v	file:
ZHG	phg/phg_hypergraph.h	/^typedef struct Zoltan_HGraph ZHG;$/;"	t	typeref:struct:Zoltan_HGraph
ZMAXPATH	util/vtk_view.cpp	84;"	d	file:
ZOD	fdriver/makefile	/^ZOD = ..\/$(ZOLTAN_OBJ_DIR)$/;"	m
ZOD	fdriver_old/makefile	/^ZOD = ..\/$(ZOLTAN_OBJ_DIR)$/;"	m
ZOD	fort/makefile	/^ZOD = ..\/$(ZOLTAN_OBJ_DIR)$/;"	m
ZOLTAN_ALIGN_VAL	include/zoltan_align.h	31;"	d
ZOLTAN_ARCH	Utilities/makefile	/^ZOLTAN_ARCH	= generic$/;"	m
ZOLTAN_ARCH	makefile	/^ZOLTAN_ARCH	= generic$/;"	m
ZOLTAN_AUTO_MIGRATE_DEF	lb/lb_const.h	93;"	d
ZOLTAN_BALANCE_EVAL	include/zoltan_eval.h	/^typedef struct _eval_balance_struct ZOLTAN_BALANCE_EVAL;$/;"	t	typeref:struct:_eval_balance_struct
ZOLTAN_BIN_DIR	ZoltanComponent/TestComponents/Makefile	/^ZOLTAN_BIN_DIR = $(ZOLTAN_HOME)\/Obj_$(ZOLTAN_ARCH)$/;"	m
ZOLTAN_BORDER_OBJ_LIST_FN	include/zoltan.h	/^typedef void ZOLTAN_BORDER_OBJ_LIST_FN($/;"	t
ZOLTAN_BORDER_OBJ_LIST_FN_TYPE	fort/fwrap.f90	/^   ZOLTAN_OBJ_LIST_FN_TYPE         = ZOLTAN_FN_TYPES(8_Zoltan_INT), &$/;"	v	module:zoltan
ZOLTAN_BORDER_OBJ_LIST_FN_TYPE	include/zoltan.h	/^  ZOLTAN_BORDER_OBJ_LIST_FN_TYPE,$/;"	e	enum:Zoltan_Fn_Type
ZOLTAN_BORDER_OBJ_LIST_FORT_FN	include/zoltan.h	/^typedef void ZOLTAN_BORDER_OBJ_LIST_FORT_FN($/;"	t
ZOLTAN_CALLOC	include/zoltan_mem.h	41;"	d
ZOLTAN_CHILD_LIST_FN	include/zoltan.h	/^typedef void ZOLTAN_CHILD_LIST_FN($/;"	t
ZOLTAN_CHILD_LIST_FN_TYPE	fort/fwrap.f90	/^   ZOLTAN_COARSE_OBJ_LIST_FN_TYPE  = ZOLTAN_FN_TYPES(25_Zoltan_INT), &$/;"	v	module:zoltan
ZOLTAN_CHILD_LIST_FN_TYPE	include/zoltan.h	/^  ZOLTAN_CHILD_LIST_FN_TYPE,$/;"	e	enum:Zoltan_Fn_Type
ZOLTAN_CHILD_LIST_FORT_FN	include/zoltan.h	/^typedef void ZOLTAN_CHILD_LIST_FORT_FN($/;"	t
ZOLTAN_CHILD_WEIGHT_FN	include/zoltan.h	/^typedef void ZOLTAN_CHILD_WEIGHT_FN($/;"	t
ZOLTAN_CHILD_WEIGHT_FN_TYPE	fort/fwrap.f90	/^   ZOLTAN_CHILD_LIST_FN_TYPE       = ZOLTAN_FN_TYPES(29_Zoltan_INT), &$/;"	v	module:zoltan
ZOLTAN_CHILD_WEIGHT_FN_TYPE	include/zoltan.h	/^  ZOLTAN_CHILD_WEIGHT_FN_TYPE,$/;"	e	enum:Zoltan_Fn_Type
ZOLTAN_CHILD_WEIGHT_FORT_FN	include/zoltan.h	/^typedef void ZOLTAN_CHILD_WEIGHT_FORT_FN($/;"	t
ZOLTAN_COARSE_OBJ_LIST_FN	include/zoltan.h	/^typedef void ZOLTAN_COARSE_OBJ_LIST_FN($/;"	t
ZOLTAN_COARSE_OBJ_LIST_FN_TYPE	fort/fwrap.f90	/^   ZOLTAN_UNPACK_OBJ_FN_TYPE       = ZOLTAN_FN_TYPES(23_Zoltan_INT), &$/;"	v	module:zoltan
ZOLTAN_COARSE_OBJ_LIST_FN_TYPE	include/zoltan.h	/^  ZOLTAN_COARSE_OBJ_LIST_FN_TYPE,$/;"	e	enum:Zoltan_Fn_Type
ZOLTAN_COARSE_OBJ_LIST_FORT_FN	include/zoltan.h	/^typedef void ZOLTAN_COARSE_OBJ_LIST_FORT_FN($/;"	t
ZOLTAN_COLOR_ERROR	coloring/coloring.h	35;"	d
ZOLTAN_COMM_CPP_H_	include/zoltan_comm_cpp.h	29;"	d
ZOLTAN_COMM_ERROR	Utilities/Communication/comm.h	37;"	d
ZOLTAN_COMM_OBJ	include/zoltan_comm.h	/^typedef struct Zoltan_Comm_Obj ZOLTAN_COMM_OBJ;$/;"	t	typeref:struct:Zoltan_Comm_Obj
ZOLTAN_COMM_WARNING	Utilities/Communication/comm.h	40;"	d
ZOLTAN_COMPRESS	driver/dr_compress_const.h	24;"	d
ZOLTAN_COMPRESSED_EDGE	include/zoltan_types.h	55;"	d
ZOLTAN_COMPRESSED_VERTEX	include/zoltan_types.h	56;"	d
ZOLTAN_CONFIG	Utilities/makefile	/^ZOLTAN_CONFIG = Config\/Config.$(ZOLTAN_ARCH)$/;"	m
ZOLTAN_CONFIG	makefile	/^ZOLTAN_CONFIG = Utilities\/Config\/Config.$(ZOLTAN_ARCH)$/;"	m
ZOLTAN_COPY_GID_ARRAY	zz/zz_id_const.h	60;"	d
ZOLTAN_COPY_LID_ARRAY	zz/zz_id_const.h	63;"	d
ZOLTAN_CPP_H_	include/zoltan_cpp.h	23;"	d
ZOLTAN_DD_CPP_H_	include/zoltan_dd_cpp.h	29;"	d
ZOLTAN_DD_DDIRECTORY_H	include/zoltan_dd.h	16;"	d
ZOLTAN_DD_FIND_MSG_TAG	Utilities/DDirectory/DD.h	34;"	d
ZOLTAN_DD_H	Utilities/DDirectory/DD.h	16;"	d
ZOLTAN_DD_HASH_CONSTANT	Utilities/DDirectory/DD_Hash2.c	60;"	d	file:
ZOLTAN_DD_HASH_TABLE_COUNT	Utilities/DDirectory/DD.h	30;"	d
ZOLTAN_DD_NO_PROC	Utilities/DDirectory/DD.h	31;"	d
ZOLTAN_DD_REMOVE_MSG_TAG	Utilities/DDirectory/DD.h	36;"	d
ZOLTAN_DD_UPDATE_MSG_TAG	Utilities/DDirectory/DD.h	35;"	d
ZOLTAN_DEBUG_ALL	zz/zz_const.h	93;"	d
ZOLTAN_DEBUG_ATIME	zz/zz_const.h	88;"	d
ZOLTAN_DEBUG_LEVEL_DEF	zz/zz_const.h	101;"	d
ZOLTAN_DEBUG_LIST	zz/zz_const.h	92;"	d
ZOLTAN_DEBUG_NONE	zz/zz_const.h	85;"	d
ZOLTAN_DEBUG_PARAMS	zz/zz_const.h	86;"	d
ZOLTAN_DEBUG_PROC_DEF	zz/zz_const.h	102;"	d
ZOLTAN_DEBUG_TRACE_ALL	zz/zz_const.h	90;"	d
ZOLTAN_DEBUG_TRACE_DETAIL	zz/zz_const.h	91;"	d
ZOLTAN_DEBUG_TRACE_SINGLE	zz/zz_const.h	89;"	d
ZOLTAN_DEBUG_ZTIME	zz/zz_const.h	87;"	d
ZOLTAN_DETERMINISTIC_DEF	zz/zz_const.h	105;"	d
ZOLTAN_DRUM	Utilities/shared/zoltan_util.h	79;"	d
ZOLTAN_DRUM	driver/dr_const.h	92;"	d
ZOLTAN_EDGE_LIST_FN	include/zoltan.h	/^typedef void ZOLTAN_EDGE_LIST_FN($/;"	t
ZOLTAN_EDGE_LIST_FN_TYPE	fort/fwrap.f90	/^   ZOLTAN_NUM_EDGES_MULTI_FN_TYPE  = ZOLTAN_FN_TYPES(1_Zoltan_INT), &$/;"	v	module:zoltan
ZOLTAN_EDGE_LIST_FN_TYPE	include/zoltan.h	/^  ZOLTAN_EDGE_LIST_FN_TYPE,$/;"	e	enum:Zoltan_Fn_Type
ZOLTAN_EDGE_LIST_FORT_FN	include/zoltan.h	/^typedef void ZOLTAN_EDGE_LIST_FORT_FN($/;"	t
ZOLTAN_EDGE_LIST_MULTI_FN	include/zoltan.h	/^typedef void ZOLTAN_EDGE_LIST_MULTI_FN($/;"	t
ZOLTAN_EDGE_LIST_MULTI_FN_TYPE	fort/fwrap.f90	/^   ZOLTAN_EDGE_LIST_FN_TYPE        = ZOLTAN_FN_TYPES(2_Zoltan_INT), &$/;"	v	module:zoltan
ZOLTAN_EDGE_LIST_MULTI_FN_TYPE	include/zoltan.h	/^  ZOLTAN_EDGE_LIST_MULTI_FN_TYPE,$/;"	e	enum:Zoltan_Fn_Type
ZOLTAN_EDGE_LIST_MULTI_FORT_FN	include/zoltan.h	/^typedef void ZOLTAN_EDGE_LIST_MULTI_FORT_FN($/;"	t
ZOLTAN_EDGE_WEIGHT_DEF	zz/zz_const.h	104;"	d
ZOLTAN_ENTRY	zz/zz_map.c	/^typedef struct Zoltan_Map_Entry ZOLTAN_ENTRY;$/;"	t	typeref:struct:Zoltan_Map_Entry	file:
ZOLTAN_EQ_GID	zz/zz_id_const.h	102;"	d
ZOLTAN_EQ_ID	Utilities/shared/zoltan_id.c	/^int ZOLTAN_EQ_ID(int n, ZOLTAN_ID_PTR a, ZOLTAN_ID_PTR b)$/;"	f
ZOLTAN_FATAL	fort/fwrap.f90	/^   ZOLTAN_WARN   =  1_Zoltan_INT, &$/;"	v	module:zoltan
ZOLTAN_FATAL	include/zoltan_types.h	48;"	d
ZOLTAN_FILE	driver/dr_compress_const.h	/^  typedef FILE ZOLTAN_FILE;$/;"	t
ZOLTAN_FILE	driver/dr_compress_const.h	/^} ZOLTAN_FILE;$/;"	t	typeref:struct:ZOLTAN_FILE_
ZOLTAN_FILETYPE	driver/dr_compress_const.h	/^} ZOLTAN_FILETYPE;$/;"	t	typeref:enum:ZOLTAN_FILETYPE_
ZOLTAN_FILETYPE_	driver/dr_compress_const.h	/^typedef enum ZOLTAN_FILETYPE_ {$/;"	g
ZOLTAN_FILE_	driver/dr_compress_const.h	/^typedef struct ZOLTAN_FILE_ {$/;"	s
ZOLTAN_FILE_close	driver/dr_compress.c	/^int ZOLTAN_FILE_close(ZOLTAN_FILE* file)$/;"	f
ZOLTAN_FILE_close	driver/dr_compress_const.h	99;"	d
ZOLTAN_FILE_flush	driver/dr_compress.c	/^int ZOLTAN_FILE_flush(ZOLTAN_FILE* file)$/;"	f
ZOLTAN_FILE_flush	driver/dr_compress_const.h	98;"	d
ZOLTAN_FILE_getc	driver/dr_compress.c	/^int ZOLTAN_FILE_getc(ZOLTAN_FILE* file)$/;"	f
ZOLTAN_FILE_getc	driver/dr_compress_const.h	96;"	d
ZOLTAN_FILE_gets	driver/dr_compress.c	/^char* ZOLTAN_FILE_gets(char * buf, int len, ZOLTAN_FILE* file)$/;"	f
ZOLTAN_FILE_gets	driver/dr_compress_const.h	94;"	d
ZOLTAN_FILE_open	driver/dr_compress.c	/^ZOLTAN_FILE* ZOLTAN_FILE_open(const char *path, const char *mode, const ZOLTAN_FILETYPE type)$/;"	f
ZOLTAN_FILE_open	driver/dr_compress_const.h	88;"	d
ZOLTAN_FILE_printf	driver/dr_compress_const.h	90;"	d
ZOLTAN_FILE_putc	driver/dr_compress_const.h	95;"	d
ZOLTAN_FILE_puts	driver/dr_compress_const.h	93;"	d
ZOLTAN_FILE_read	driver/dr_compress.c	/^int ZOLTAN_FILE_read(char* ptr, size_t size, size_t nitems, ZOLTAN_FILE *file)$/;"	f
ZOLTAN_FILE_read	driver/dr_compress_const.h	101;"	d
ZOLTAN_FILE_rewind	driver/dr_compress.c	/^void ZOLTAN_FILE_rewind(ZOLTAN_FILE* file)$/;"	f
ZOLTAN_FILE_rewind	driver/dr_compress_const.h	100;"	d
ZOLTAN_FILE_scanf	driver/dr_compress.c	/^int ZOLTAN_FILE_scanf (ZOLTAN_FILE*  stream, const char *  format, ... )$/;"	f
ZOLTAN_FILE_scanf	driver/dr_compress_const.h	92;"	d
ZOLTAN_FILE_ungetc	driver/dr_compress.c	/^int ZOLTAN_FILE_ungetc(int c, ZOLTAN_FILE* file)$/;"	f
ZOLTAN_FILE_ungetc	driver/dr_compress_const.h	97;"	d
ZOLTAN_FIRST_BORDER_OBJ_FN	include/zoltan.h	/^typedef int ZOLTAN_FIRST_BORDER_OBJ_FN($/;"	t
ZOLTAN_FIRST_BORDER_OBJ_FN_TYPE	fort/fwrap.f90	/^   ZOLTAN_NUM_BORDER_OBJ_FN_TYPE   = ZOLTAN_FN_TYPEF(11_Zoltan_INT), &$/;"	v	module:zoltan
ZOLTAN_FIRST_BORDER_OBJ_FN_TYPE	include/zoltan.h	/^  ZOLTAN_FIRST_BORDER_OBJ_FN_TYPE,$/;"	e	enum:Zoltan_Fn_Type
ZOLTAN_FIRST_BORDER_OBJ_FORT_FN	include/zoltan.h	/^typedef int ZOLTAN_FIRST_BORDER_OBJ_FORT_FN($/;"	t
ZOLTAN_FIRST_COARSE_OBJ_FN	include/zoltan.h	/^typedef int ZOLTAN_FIRST_COARSE_OBJ_FN($/;"	t
ZOLTAN_FIRST_COARSE_OBJ_FN_TYPE	fort/fwrap.f90	/^   ZOLTAN_NUM_COARSE_OBJ_FN_TYPE   = ZOLTAN_FN_TYPEF(24_Zoltan_INT), &$/;"	v	module:zoltan
ZOLTAN_FIRST_COARSE_OBJ_FN_TYPE	include/zoltan.h	/^  ZOLTAN_FIRST_COARSE_OBJ_FN_TYPE,$/;"	e	enum:Zoltan_Fn_Type
ZOLTAN_FIRST_COARSE_OBJ_FORT_FN	include/zoltan.h	/^typedef int ZOLTAN_FIRST_COARSE_OBJ_FORT_FN($/;"	t
ZOLTAN_FIRST_OBJ_FN	include/zoltan.h	/^typedef int ZOLTAN_FIRST_OBJ_FN($/;"	t
ZOLTAN_FIRST_OBJ_FN_TYPE	fort/fwrap.f90	/^   ZOLTAN_NUM_OBJ_FN_TYPE          = ZOLTAN_FN_TYPEF(7_Zoltan_INT), &$/;"	v	module:zoltan
ZOLTAN_FIRST_OBJ_FN_TYPE	include/zoltan.h	/^  ZOLTAN_FIRST_OBJ_FN_TYPE,$/;"	e	enum:Zoltan_Fn_Type
ZOLTAN_FIRST_OBJ_FORT_FN	include/zoltan.h	/^typedef int ZOLTAN_FIRST_OBJ_FORT_FN($/;"	t
ZOLTAN_FIXED_OBJ_LIST_FN	include/zoltan.h	/^typedef void ZOLTAN_FIXED_OBJ_LIST_FN($/;"	t
ZOLTAN_FIXED_OBJ_LIST_FN_TYPE	fort/fwrap.f90	/^   ZOLTAN_NUM_FIXED_OBJ_FN_TYPE    = ZOLTAN_FN_TYPES(41_Zoltan_INT), &$/;"	v	module:zoltan
ZOLTAN_FIXED_OBJ_LIST_FN_TYPE	include/zoltan.h	/^  ZOLTAN_FIXED_OBJ_LIST_FN_TYPE,$/;"	e	enum:Zoltan_Fn_Type
ZOLTAN_FIXED_OBJ_LIST_FORT_FN	include/zoltan.h	/^typedef void ZOLTAN_FIXED_OBJ_LIST_FORT_FN($/;"	t
ZOLTAN_FN_TYPE	include/zoltan.h	/^typedef enum Zoltan_Fn_Type ZOLTAN_FN_TYPE;$/;"	t	typeref:enum:Zoltan_Fn_Type
ZOLTAN_FN_TYPEF	fort/fwrap.f90	/^type ZOLTAN_FN_TYPEF$/;"	t	module:zoltan
ZOLTAN_FN_TYPES	fort/fwrap.f90	/^type ZOLTAN_FN_TYPES$/;"	t	module:zoltan
ZOLTAN_FORT_FREE_INT_FN	all/all_allo_const.h	/^typedef void ZOLTAN_FORT_FREE_INT_FN(int *arg);$/;"	t
ZOLTAN_FORT_FREE_INT_FN	all/all_allo_const.h	/^typedef void ZOLTAN_FORT_FREE_INT_FN(int *arg, int *hidden);$/;"	t
ZOLTAN_FORT_MALLOC_INT_FN	all/all_allo_const.h	/^typedef void ZOLTAN_FORT_MALLOC_INT_FN(int *arg, int *size, int **ret);$/;"	t
ZOLTAN_FORT_MALLOC_INT_FN	all/all_allo_const.h	/^typedef void ZOLTAN_FORT_MALLOC_INT_FN(int *arg, int *size, int **ret, int *hidden);$/;"	t
ZOLTAN_FORT_MALLOC_INT_FN	all/all_allo_const.h	/^typedef void ZOLTAN_FORT_MALLOC_INT_FN(int *arg, int *size, int **ret, int *hidden, int hidden2, int hidden3);$/;"	t
ZOLTAN_FORT_MALLOC_SET_STRUCT_FN	all/all_allo_const.h	/^typedef void ZOLTAN_FORT_MALLOC_SET_STRUCT_FN(int *arg, int **ret);$/;"	t
ZOLTAN_FREE	include/zoltan_mem.h	43;"	d
ZOLTAN_GEOM_FN	include/zoltan.h	/^typedef void ZOLTAN_GEOM_FN($/;"	t
ZOLTAN_GEOM_FN_TYPE	fort/fwrap.f90	/^   ZOLTAN_GEOM_MULTI_FN_TYPE       = ZOLTAN_FN_TYPES(5_Zoltan_INT), &$/;"	v	module:zoltan
ZOLTAN_GEOM_FN_TYPE	include/zoltan.h	/^  ZOLTAN_GEOM_FN_TYPE,$/;"	e	enum:Zoltan_Fn_Type
ZOLTAN_GEOM_FORT_FN	include/zoltan.h	/^typedef void ZOLTAN_GEOM_FORT_FN($/;"	t
ZOLTAN_GEOM_MULTI_FN	include/zoltan.h	/^typedef void ZOLTAN_GEOM_MULTI_FN($/;"	t
ZOLTAN_GEOM_MULTI_FN_TYPE	fort/fwrap.f90	/^   ZOLTAN_EDGE_LIST_MULTI_FN_TYPE  = ZOLTAN_FN_TYPES(3_Zoltan_INT), &$/;"	v	module:zoltan
ZOLTAN_GEOM_MULTI_FN_TYPE	include/zoltan.h	/^  ZOLTAN_GEOM_MULTI_FN_TYPE,$/;"	e	enum:Zoltan_Fn_Type
ZOLTAN_GEOM_MULTI_FORT_FN	include/zoltan.h	/^typedef void ZOLTAN_GEOM_MULTI_FORT_FN($/;"	t
ZOLTAN_GLOBAL	zz/zz_const.h	114;"	d
ZOLTAN_GRAPH	driver/dr_const.h	/^  ZOLTAN_GRAPH,$/;"	e	enum:DATA_TYPE
ZOLTAN_GRAPH_EVAL	include/zoltan_eval.h	/^typedef struct _eval_graph_struct ZOLTAN_GRAPH_EVAL;$/;"	t	typeref:struct:_eval_graph_struct
ZOLTAN_GT_GID	zz/zz_id_const.h	107;"	d
ZOLTAN_GT_ID	Utilities/shared/zoltan_id.c	/^int ZOLTAN_GT_ID(int n, ZOLTAN_ID_PTR a, ZOLTAN_ID_PTR b)$/;"	f
ZOLTAN_GZIP	driver/dr_const.h	84;"	d
ZOLTAN_HASH_FN	include/zoltan_dd.h	/^typedef unsigned int ZOLTAN_HASH_FN(ZOLTAN_ID_PTR, int, unsigned int);$/;"	t
ZOLTAN_HEAP_H	zz/zz_heap.h	15;"	d
ZOLTAN_HEAP_INFO	zz/zz_const.h	636;"	d
ZOLTAN_HEAP_INFO	zz/zz_const.h	643;"	d
ZOLTAN_HEX3D_OCT	fort/fwrap.f90	/^  ZOLTAN_QUAD_QUAD     = 3_Zoltan_INT, &$/;"	v	module:zoltan
ZOLTAN_HEX3D_OCT	include/zoltan.h	/^  ZOLTAN_HEX3D_OCT       \/* octasection of hexahedra *\/$/;"	e	enum:Zoltan_Ref_Type
ZOLTAN_HG_CS_FN	include/zoltan.h	/^typedef void ZOLTAN_HG_CS_FN($/;"	t
ZOLTAN_HG_CS_FN_TYPE	fort/fwrap.f90	/^   ZOLTAN_HG_SIZE_CS_FN_TYPE       = ZOLTAN_FN_TYPES(37_Zoltan_INT), &$/;"	v	module:zoltan
ZOLTAN_HG_CS_FN_TYPE	include/zoltan.h	/^  ZOLTAN_HG_CS_FN_TYPE,$/;"	e	enum:Zoltan_Fn_Type
ZOLTAN_HG_CS_FORT_FN	include/zoltan.h	/^typedef int ZOLTAN_HG_CS_FORT_FN($/;"	t
ZOLTAN_HG_EDGE_WEIGHTS_FN	include/zoltan.h	109;"	d
ZOLTAN_HG_EDGE_WEIGHTS_FN_TYPE	include/zoltan.h	107;"	d
ZOLTAN_HG_EDGE_WTS_FN	include/zoltan.h	/^typedef void ZOLTAN_HG_EDGE_WTS_FN($/;"	t
ZOLTAN_HG_EDGE_WTS_FN_TYPE	fort/fwrap.f90	/^   ZOLTAN_HG_SIZE_EDGE_WTS_FN_TYPE = ZOLTAN_FN_TYPES(39_Zoltan_INT), &$/;"	v	module:zoltan
ZOLTAN_HG_EDGE_WTS_FN_TYPE	include/zoltan.h	/^  ZOLTAN_HG_EDGE_WTS_FN_TYPE,$/;"	e	enum:Zoltan_Fn_Type
ZOLTAN_HG_EDGE_WTS_FORT_FN	include/zoltan.h	/^typedef void ZOLTAN_HG_EDGE_WTS_FORT_FN($/;"	t
ZOLTAN_HG_EVAL	include/zoltan_eval.h	/^typedef struct _eval_hg_struct ZOLTAN_HG_EVAL;$/;"	t	typeref:struct:_eval_hg_struct
ZOLTAN_HG_SIZE_CS_FN	include/zoltan.h	/^typedef void ZOLTAN_HG_SIZE_CS_FN($/;"	t
ZOLTAN_HG_SIZE_CS_FN_TYPE	fort/fwrap.f90	/^   ZOLTAN_PROC_NAME_FN_TYPE        = ZOLTAN_FN_TYPES(36_Zoltan_INT), &$/;"	v	module:zoltan
ZOLTAN_HG_SIZE_CS_FN_TYPE	include/zoltan.h	/^  ZOLTAN_HG_SIZE_CS_FN_TYPE,$/;"	e	enum:Zoltan_Fn_Type
ZOLTAN_HG_SIZE_CS_FORT_FN	include/zoltan.h	/^typedef void ZOLTAN_HG_SIZE_CS_FORT_FN($/;"	t
ZOLTAN_HG_SIZE_EDGE_WEIGHTS_FN	include/zoltan.h	108;"	d
ZOLTAN_HG_SIZE_EDGE_WEIGHTS_FN_TYPE	include/zoltan.h	106;"	d
ZOLTAN_HG_SIZE_EDGE_WTS_FN	include/zoltan.h	/^typedef void ZOLTAN_HG_SIZE_EDGE_WTS_FN($/;"	t
ZOLTAN_HG_SIZE_EDGE_WTS_FN_TYPE	fort/fwrap.f90	/^   ZOLTAN_HG_CS_FN_TYPE            = ZOLTAN_FN_TYPES(38_Zoltan_INT), &$/;"	v	module:zoltan
ZOLTAN_HG_SIZE_EDGE_WTS_FN_TYPE	include/zoltan.h	/^  ZOLTAN_HG_SIZE_EDGE_WTS_FN_TYPE,$/;"	e	enum:Zoltan_Fn_Type
ZOLTAN_HG_SIZE_EDGE_WTS_FORT_FN	include/zoltan.h	/^typedef void ZOLTAN_HG_SIZE_EDGE_WTS_FORT_FN($/;"	t
ZOLTAN_HIER	Utilities/shared/zoltan_util.h	100;"	d
ZOLTAN_HIER_ERROR	hier/hier.h	97;"	d
ZOLTAN_HIER_METHOD_FN	include/zoltan.h	/^typedef void ZOLTAN_HIER_METHOD_FN($/;"	t
ZOLTAN_HIER_METHOD_FN_TYPE	fort/fwrap.f90	/^   ZOLTAN_FIXED_OBJ_LIST_FN_TYPE   = ZOLTAN_FN_TYPES(42_Zoltan_INT), &$/;"	v	module:zoltan
ZOLTAN_HIER_METHOD_FN_TYPE	include/zoltan.h	/^  ZOLTAN_HIER_METHOD_FN_TYPE,$/;"	e	enum:Zoltan_Fn_Type
ZOLTAN_HIER_METHOD_FORT_FN	include/zoltan.h	/^typedef void ZOLTAN_HIER_METHOD_FORT_FN($/;"	t
ZOLTAN_HIER_NUM_LEVELS_FN	include/zoltan.h	/^typedef int ZOLTAN_HIER_NUM_LEVELS_FN($/;"	t
ZOLTAN_HIER_NUM_LEVELS_FN_TYPE	fort/fwrap.f90	/^   ZOLTAN_PART_FN_TYPE             = ZOLTAN_FN_TYPEF(34_Zoltan_INT), &$/;"	v	module:zoltan
ZOLTAN_HIER_NUM_LEVELS_FN_TYPE	include/zoltan.h	/^  ZOLTAN_HIER_NUM_LEVELS_FN_TYPE,$/;"	e	enum:Zoltan_Fn_Type
ZOLTAN_HIER_NUM_LEVELS_FORT_FN	include/zoltan.h	/^typedef int ZOLTAN_HIER_NUM_LEVELS_FORT_FN($/;"	t
ZOLTAN_HIER_PARTITION_FN	include/zoltan.h	2171;"	d
ZOLTAN_HIER_PARTITION_FN_TYPE	fort/fwrap.f90	/^   ZOLTAN_PARTITION_FN_TYPE        = ZOLTAN_FN_TYPEF(34_Zoltan_INT), &$/;"	v	module:zoltan
ZOLTAN_HIER_PARTITION_FN_TYPE	include/zoltan.h	101;"	d
ZOLTAN_HIER_PARTITION_FORT_FN	include/zoltan.h	2172;"	d
ZOLTAN_HIER_PART_FN	include/zoltan.h	/^typedef int ZOLTAN_HIER_PART_FN($/;"	t
ZOLTAN_HIER_PART_FN_TYPE	fort/fwrap.f90	/^   ZOLTAN_HIER_NUM_LEVELS_FN_TYPE  = ZOLTAN_FN_TYPEF(43_Zoltan_INT), &$/;"	v	module:zoltan
ZOLTAN_HIER_PART_FN_TYPE	include/zoltan.h	/^  ZOLTAN_HIER_PART_FN_TYPE,$/;"	e	enum:Zoltan_Fn_Type
ZOLTAN_HIER_PART_FORT_FN	include/zoltan.h	/^typedef int ZOLTAN_HIER_PART_FORT_FN($/;"	t
ZOLTAN_HSFC	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	257;"	d
ZOLTAN_HSFC_CONST_H	hsfc/hsfc_const.h	16;"	d
ZOLTAN_HSFC_ERROR	hsfc/hsfc.h	62;"	d
ZOLTAN_HSFC_H	hsfc/hsfc.h	16;"	d
ZOLTAN_ID_DEFAULT	Utilities/shared/zoltan_id.h	36;"	d
ZOLTAN_ID_MPI_TYPE	include/zoltan_types.h	32;"	d
ZOLTAN_ID_PTR	include/zoltan_types.h	/^typedef ZOLTAN_ID_TYPE     *ZOLTAN_ID_PTR;$/;"	t
ZOLTAN_ID_TYPE	include/zoltan_types.h	/^typedef unsigned int        ZOLTAN_ID_TYPE;$/;"	t
ZOLTAN_INC_PATH	makefile	/^ZOLTAN_INC_PATH	= $(SUBINCPATH) $(INCLUDE_PATH) $(MPI_INCPATH) \\$/;"	m
ZOLTAN_INIT_GID	zz/zz_id_const.h	36;"	d
ZOLTAN_INIT_ID	Utilities/shared/zoltan_id.h	42;"	d
ZOLTAN_INIT_LID	zz/zz_id_const.h	37;"	d
ZOLTAN_IN_ORDER	fort/fwrap.f90	/^  ZOLTAN_OTHER_REF     = 0_Zoltan_INT, &$/;"	v	module:zoltan
ZOLTAN_IN_ORDER	include/zoltan.h	/^  ZOLTAN_IN_ORDER,       \/* user provides the order of the children *\/$/;"	e	enum:Zoltan_Ref_Type
ZOLTAN_LB_ALL_LISTS	lb/lb_const.h	85;"	d
ZOLTAN_LB_APPROACH_DEF	lb/lb_const.h	96;"	d
ZOLTAN_LB_BOX_ASSIGN_FN	lb/lb_const.h	/^typedef int ZOLTAN_LB_BOX_ASSIGN_FN(struct Zoltan_Struct *, $/;"	t
ZOLTAN_LB_COMPLETE_EXPORT_LISTS	lb/lb_const.h	84;"	d
ZOLTAN_LB_COPY_DATA_FN	lb/lb_const.h	/^typedef int ZOLTAN_LB_COPY_DATA_FN(struct Zoltan_Struct *to, struct Zoltan_Struct const *from);$/;"	t
ZOLTAN_LB_EXPORT_LISTS	lb/lb_const.h	83;"	d
ZOLTAN_LB_FN	lb/lb_const.h	/^typedef int ZOLTAN_LB_FN(struct Zoltan_Struct *, float *, int *, $/;"	t
ZOLTAN_LB_FREE_DATA_FN	lb/lb_const.h	/^typedef void ZOLTAN_LB_FREE_DATA_FN(struct Zoltan_Struct *);$/;"	t
ZOLTAN_LB_IMBALANCE_TOL_DEF	lb/lb_const.h	92;"	d
ZOLTAN_LB_IMPORT_LISTS	lb/lb_const.h	82;"	d
ZOLTAN_LB_MAX_METHODS	lb/lb_const.h	/^  ZOLTAN_LB_MAX_METHODS          \/*  This entry should always be last.      *\/$/;"	e	enum:Zoltan_LB_Method
ZOLTAN_LB_METHOD	lb/lb_const.h	/^} ZOLTAN_LB_METHOD;$/;"	t	typeref:enum:Zoltan_LB_Method
ZOLTAN_LB_NO_LISTS	lb/lb_const.h	81;"	d
ZOLTAN_LB_POINT_ASSIGN_FN	lb/lb_const.h	/^typedef int ZOLTAN_LB_POINT_ASSIGN_FN(struct Zoltan_Struct *, double *, int *, $/;"	t
ZOLTAN_LB_REMAP_NONE	lb/lb_remap.c	28;"	d	file:
ZOLTAN_LB_REMAP_PARTS	lb/lb_remap.c	30;"	d	file:
ZOLTAN_LB_REMAP_PROCESSORS	lb/lb_remap.c	29;"	d	file:
ZOLTAN_LB_RETURN_LISTS_DEF	lb/lb_const.h	95;"	d
ZOLTAN_LIB	Utilities/makefile	/^ZOLTAN_LIB = libzoltan.a$/;"	m
ZOLTAN_LIB_DIR	makefile	/^ZOLTAN_LIB_DIR = $(ZOLTAN_OBJ_DIR)$/;"	m
ZOLTAN_LOCAL	zz/zz_const.h	113;"	d
ZOLTAN_LT_GID	zz/zz_id_const.h	106;"	d
ZOLTAN_LT_ID	Utilities/shared/zoltan_id.c	/^int ZOLTAN_LT_ID(int n, ZOLTAN_ID_PTR a, ZOLTAN_ID_PTR b)$/;"	f
ZOLTAN_MALLOC	include/zoltan_mem.h	40;"	d
ZOLTAN_MALLOC_GID	zz/zz_id_const.h	43;"	d
ZOLTAN_MALLOC_GID_ARRAY	zz/zz_id_const.h	53;"	d
ZOLTAN_MALLOC_LID	zz/zz_id_const.h	44;"	d
ZOLTAN_MALLOC_LID_ARRAY	zz/zz_id_const.h	55;"	d
ZOLTAN_MAP	zz/zz_map.c	/^typedef struct Zoltan_Map_List ZOLTAN_MAP;$/;"	t	typeref:struct:Zoltan_Map_List	file:
ZOLTAN_MAX_FN_TYPES	include/zoltan.h	/^  ZOLTAN_MAX_FN_TYPES               \/*  This entry should always be last. *\/$/;"	e	enum:Zoltan_Fn_Type
ZOLTAN_MAX_MAP	zz/zz_util_const.h	44;"	d
ZOLTAN_MEMERR	fort/fwrap.f90	/^   ZOLTAN_FATAL  = -1_Zoltan_INT, &$/;"	v	module:zoltan
ZOLTAN_MEMERR	include/zoltan_types.h	49;"	d
ZOLTAN_MEM_STAT_MAXIMUM	include/zoltan_mem.h	46;"	d
ZOLTAN_MEM_STAT_TOTAL	include/zoltan_mem.h	45;"	d
ZOLTAN_METIS	Utilities/shared/zoltan_util.h	64;"	d
ZOLTAN_METIS	driver/dr_const.h	76;"	d
ZOLTAN_METIS	parmetis/third_library_const.h	39;"	d
ZOLTAN_MID_MIGRATE_FN	include/zoltan.h	/^typedef void ZOLTAN_MID_MIGRATE_FN($/;"	t
ZOLTAN_MID_MIGRATE_FN_TYPE	fort/fwrap.f90	/^   ZOLTAN_PRE_MIGRATE_FN_TYPE      = ZOLTAN_FN_TYPES(18_Zoltan_INT), &$/;"	v	module:zoltan
ZOLTAN_MID_MIGRATE_FN_TYPE	include/zoltan.h	/^  ZOLTAN_MID_MIGRATE_FN_TYPE,$/;"	e	enum:Zoltan_Fn_Type
ZOLTAN_MID_MIGRATE_FORT_FN	include/zoltan.h	/^typedef void ZOLTAN_MID_MIGRATE_FORT_FN($/;"	t
ZOLTAN_MID_MIGRATE_PP_FN	include/zoltan.h	/^typedef void ZOLTAN_MID_MIGRATE_PP_FN($/;"	t
ZOLTAN_MID_MIGRATE_PP_FN_TYPE	fort/fwrap.f90	/^   ZOLTAN_PRE_MIGRATE_PP_FN_TYPE   = ZOLTAN_FN_TYPES(15_Zoltan_INT), &$/;"	v	module:zoltan
ZOLTAN_MID_MIGRATE_PP_FN_TYPE	include/zoltan.h	/^  ZOLTAN_MID_MIGRATE_PP_FN_TYPE,$/;"	e	enum:Zoltan_Fn_Type
ZOLTAN_MID_MIGRATE_PP_FORT_FN	include/zoltan.h	/^typedef void ZOLTAN_MID_MIGRATE_PP_FORT_FN($/;"	t
ZOLTAN_MIGRATE_ONLY_PROC_CHANGES_DEF	lb/lb_const.h	94;"	d
ZOLTAN_Malloc_ID	Utilities/shared/zoltan_id.c	/^ZOLTAN_ID_PTR ZOLTAN_Malloc_ID(int n, char *file, int line)$/;"	f
ZOLTAN_NEMESIS	driver/dr_const.h	104;"	d
ZOLTAN_NEXT_BORDER_OBJ_FN	include/zoltan.h	/^typedef int ZOLTAN_NEXT_BORDER_OBJ_FN($/;"	t
ZOLTAN_NEXT_BORDER_OBJ_FN_TYPE	fort/fwrap.f90	/^   ZOLTAN_FIRST_BORDER_OBJ_FN_TYPE = ZOLTAN_FN_TYPEF(13_Zoltan_INT), &$/;"	v	module:zoltan
ZOLTAN_NEXT_BORDER_OBJ_FN_TYPE	include/zoltan.h	/^  ZOLTAN_NEXT_BORDER_OBJ_FN_TYPE,$/;"	e	enum:Zoltan_Fn_Type
ZOLTAN_NEXT_BORDER_OBJ_FORT_FN	include/zoltan.h	/^typedef int ZOLTAN_NEXT_BORDER_OBJ_FORT_FN($/;"	t
ZOLTAN_NEXT_COARSE_OBJ_FN	include/zoltan.h	/^typedef int ZOLTAN_NEXT_COARSE_OBJ_FN($/;"	t
ZOLTAN_NEXT_COARSE_OBJ_FN_TYPE	fort/fwrap.f90	/^   ZOLTAN_FIRST_COARSE_OBJ_FN_TYPE = ZOLTAN_FN_TYPEF(26_Zoltan_INT), &$/;"	v	module:zoltan
ZOLTAN_NEXT_COARSE_OBJ_FN_TYPE	include/zoltan.h	/^  ZOLTAN_NEXT_COARSE_OBJ_FN_TYPE,$/;"	e	enum:Zoltan_Fn_Type
ZOLTAN_NEXT_COARSE_OBJ_FORT_FN	include/zoltan.h	/^typedef int ZOLTAN_NEXT_COARSE_OBJ_FORT_FN($/;"	t
ZOLTAN_NEXT_OBJ_FN	include/zoltan.h	/^typedef int ZOLTAN_NEXT_OBJ_FN($/;"	t
ZOLTAN_NEXT_OBJ_FN_TYPE	fort/fwrap.f90	/^   ZOLTAN_FIRST_OBJ_FN_TYPE        = ZOLTAN_FN_TYPEF(9_Zoltan_INT), &$/;"	v	module:zoltan
ZOLTAN_NEXT_OBJ_FN_TYPE	include/zoltan.h	/^  ZOLTAN_NEXT_OBJ_FN_TYPE,$/;"	e	enum:Zoltan_Fn_Type
ZOLTAN_NEXT_OBJ_FORT_FN	include/zoltan.h	/^typedef int ZOLTAN_NEXT_OBJ_FORT_FN($/;"	t
ZOLTAN_NUM_BORDER_OBJ_FN	include/zoltan.h	/^typedef int ZOLTAN_NUM_BORDER_OBJ_FN($/;"	t
ZOLTAN_NUM_BORDER_OBJ_FN_TYPE	fort/fwrap.f90	/^   ZOLTAN_NEXT_OBJ_FN_TYPE         = ZOLTAN_FN_TYPEF(10_Zoltan_INT), &$/;"	v	module:zoltan
ZOLTAN_NUM_BORDER_OBJ_FN_TYPE	include/zoltan.h	/^  ZOLTAN_NUM_BORDER_OBJ_FN_TYPE,$/;"	e	enum:Zoltan_Fn_Type
ZOLTAN_NUM_BORDER_OBJ_FORT_FN	include/zoltan.h	/^typedef int ZOLTAN_NUM_BORDER_OBJ_FORT_FN($/;"	t
ZOLTAN_NUM_CHILD_FN	include/zoltan.h	/^typedef int ZOLTAN_NUM_CHILD_FN($/;"	t
ZOLTAN_NUM_CHILD_FN_TYPE	fort/fwrap.f90	/^   ZOLTAN_NEXT_COARSE_OBJ_FN_TYPE  = ZOLTAN_FN_TYPEF(27_Zoltan_INT), &$/;"	v	module:zoltan
ZOLTAN_NUM_CHILD_FN_TYPE	include/zoltan.h	/^  ZOLTAN_NUM_CHILD_FN_TYPE,$/;"	e	enum:Zoltan_Fn_Type
ZOLTAN_NUM_CHILD_FORT_FN	include/zoltan.h	/^typedef int ZOLTAN_NUM_CHILD_FORT_FN($/;"	t
ZOLTAN_NUM_COARSE_OBJ_FN	include/zoltan.h	/^typedef int ZOLTAN_NUM_COARSE_OBJ_FN($/;"	t
ZOLTAN_NUM_COARSE_OBJ_FN_TYPE	fort/fwrap.f90	/^   ZOLTAN_OBJ_SIZE_FN_TYPE         = ZOLTAN_FN_TYPEF(21_Zoltan_INT), &$/;"	v	module:zoltan
ZOLTAN_NUM_COARSE_OBJ_FN_TYPE	include/zoltan.h	/^  ZOLTAN_NUM_COARSE_OBJ_FN_TYPE,$/;"	e	enum:Zoltan_Fn_Type
ZOLTAN_NUM_COARSE_OBJ_FORT_FN	include/zoltan.h	/^typedef int ZOLTAN_NUM_COARSE_OBJ_FORT_FN($/;"	t
ZOLTAN_NUM_EDGES_FN	include/zoltan.h	/^typedef int ZOLTAN_NUM_EDGES_FN($/;"	t
ZOLTAN_NUM_EDGES_FN_TYPE	fort/fwrap.f90	/^type(ZOLTAN_FN_TYPEF), parameter :: &$/;"	v	module:zoltan
ZOLTAN_NUM_EDGES_FN_TYPE	include/zoltan.h	/^  ZOLTAN_NUM_EDGES_FN_TYPE,$/;"	e	enum:Zoltan_Fn_Type
ZOLTAN_NUM_EDGES_FORT_FN	include/zoltan.h	/^typedef int ZOLTAN_NUM_EDGES_FORT_FN($/;"	t
ZOLTAN_NUM_EDGES_MULTI_FN	include/zoltan.h	/^typedef void ZOLTAN_NUM_EDGES_MULTI_FN($/;"	t
ZOLTAN_NUM_EDGES_MULTI_FN_TYPE	fort/fwrap.f90	/^type(ZOLTAN_FN_TYPES), parameter :: &$/;"	v	module:zoltan
ZOLTAN_NUM_EDGES_MULTI_FN_TYPE	include/zoltan.h	/^  ZOLTAN_NUM_EDGES_MULTI_FN_TYPE,$/;"	e	enum:Zoltan_Fn_Type
ZOLTAN_NUM_EDGES_MULTI_FORT_FN	include/zoltan.h	/^typedef void ZOLTAN_NUM_EDGES_MULTI_FORT_FN($/;"	t
ZOLTAN_NUM_FIXED_OBJ_FN	include/zoltan.h	/^typedef int ZOLTAN_NUM_FIXED_OBJ_FN($/;"	t
ZOLTAN_NUM_FIXED_OBJ_FN_TYPE	fort/fwrap.f90	/^   ZOLTAN_HG_EDGE_WTS_FN_TYPE      = ZOLTAN_FN_TYPES(40_Zoltan_INT), &$/;"	v	module:zoltan
ZOLTAN_NUM_FIXED_OBJ_FN_TYPE	include/zoltan.h	/^  ZOLTAN_NUM_FIXED_OBJ_FN_TYPE,$/;"	e	enum:Zoltan_Fn_Type
ZOLTAN_NUM_FIXED_OBJ_FORT_FN	include/zoltan.h	/^typedef int ZOLTAN_NUM_FIXED_OBJ_FORT_FN($/;"	t
ZOLTAN_NUM_GEOM_FN	include/zoltan.h	/^typedef int ZOLTAN_NUM_GEOM_FN($/;"	t
ZOLTAN_NUM_GEOM_FN_TYPE	fort/fwrap.f90	/^   ZOLTAN_NUM_EDGES_FN_TYPE        = ZOLTAN_FN_TYPEF(0_Zoltan_INT), &$/;"	v	module:zoltan
ZOLTAN_NUM_GEOM_FN_TYPE	include/zoltan.h	/^  ZOLTAN_NUM_GEOM_FN_TYPE,$/;"	e	enum:Zoltan_Fn_Type
ZOLTAN_NUM_GEOM_FORT_FN	include/zoltan.h	/^typedef int ZOLTAN_NUM_GEOM_FORT_FN($/;"	t
ZOLTAN_NUM_ID_ENTRIES_DEF	zz/zz_const.h	106;"	d
ZOLTAN_NUM_OBJ_FN	include/zoltan.h	/^typedef int ZOLTAN_NUM_OBJ_FN($/;"	t
ZOLTAN_NUM_OBJ_FN_TYPE	fort/fwrap.f90	/^   ZOLTAN_NUM_GEOM_FN_TYPE         = ZOLTAN_FN_TYPEF(4_Zoltan_INT), &$/;"	v	module:zoltan
ZOLTAN_NUM_OBJ_FN_TYPE	include/zoltan.h	/^  ZOLTAN_NUM_OBJ_FN_TYPE,$/;"	e	enum:Zoltan_Fn_Type
ZOLTAN_NUM_OBJ_FORT_FN	include/zoltan.h	/^typedef int ZOLTAN_NUM_OBJ_FORT_FN($/;"	t
ZOLTAN_OBJ	makefile	/^ZOLTAN_OBJ	= $(ZOLTAN_CSRC:.c=.o)$/;"	m
ZOLTAN_OBJ_DIR	Utilities/makefile	/^ZOLTAN_OBJ_DIR = Obj_$(ZOLTAN_ARCH)$/;"	m
ZOLTAN_OBJ_DIR	makefile	/^ZOLTAN_OBJ_DIR = Obj_$(ZOLTAN_ARCH)$/;"	m
ZOLTAN_OBJ_LIST_FN	include/zoltan.h	/^typedef void ZOLTAN_OBJ_LIST_FN($/;"	t
ZOLTAN_OBJ_LIST_FN_TYPE	fort/fwrap.f90	/^   ZOLTAN_GEOM_FN_TYPE             = ZOLTAN_FN_TYPES(6_Zoltan_INT), &$/;"	v	module:zoltan
ZOLTAN_OBJ_LIST_FN_TYPE	include/zoltan.h	/^  ZOLTAN_OBJ_LIST_FN_TYPE,$/;"	e	enum:Zoltan_Fn_Type
ZOLTAN_OBJ_LIST_FORT_FN	include/zoltan.h	/^typedef void ZOLTAN_OBJ_LIST_FORT_FN($/;"	t
ZOLTAN_OBJ_SIZE_FN	include/zoltan.h	/^typedef int ZOLTAN_OBJ_SIZE_FN($/;"	t
ZOLTAN_OBJ_SIZE_FN_TYPE	fort/fwrap.f90	/^   ZOLTAN_NEXT_BORDER_OBJ_FN_TYPE  = ZOLTAN_FN_TYPEF(14_Zoltan_INT), &$/;"	v	module:zoltan
ZOLTAN_OBJ_SIZE_FN_TYPE	include/zoltan.h	/^  ZOLTAN_OBJ_SIZE_FN_TYPE,$/;"	e	enum:Zoltan_Fn_Type
ZOLTAN_OBJ_SIZE_FORT_FN	include/zoltan.h	/^typedef int ZOLTAN_OBJ_SIZE_FORT_FN($/;"	t
ZOLTAN_OBJ_SIZE_MULTI_FN	include/zoltan.h	/^typedef void ZOLTAN_OBJ_SIZE_MULTI_FN($/;"	t
ZOLTAN_OBJ_SIZE_MULTI_FN_TYPE	fort/fwrap.f90	/^   ZOLTAN_CHILD_WEIGHT_FN_TYPE     = ZOLTAN_FN_TYPES(30_Zoltan_INT), &$/;"	v	module:zoltan
ZOLTAN_OBJ_SIZE_MULTI_FN_TYPE	include/zoltan.h	/^  ZOLTAN_OBJ_SIZE_MULTI_FN_TYPE,$/;"	e	enum:Zoltan_Fn_Type
ZOLTAN_OBJ_SIZE_MULTI_FORT_FN	include/zoltan.h	/^typedef void ZOLTAN_OBJ_SIZE_MULTI_FORT_FN($/;"	t
ZOLTAN_OBJ_WEIGHT_DEF	zz/zz_const.h	103;"	d
ZOLTAN_OCT	Utilities/shared/zoltan_util.h	87;"	d
ZOLTAN_OCT	driver/dr_const.h	100;"	d
ZOLTAN_OCT	makefile	/^ZOLTAN_OCT=1$/;"	m
ZOLTAN_OK	fort/fwrap.f90	/^integer(Zoltan_INT), parameter :: &$/;"	v	module:zoltan
ZOLTAN_OK	include/zoltan_types.h	46;"	d
ZOLTAN_OLD	makefile	/^ZOLTAN_OLD = $/;"	m
ZOLTAN_OLD	makefile	/^ZOLTAN_OLD = _old$/;"	m
ZOLTAN_ORDER_FN	order/order_const.h	/^typedef int ZOLTAN_ORDER_FN(  struct Zoltan_Struct *zz, int,$/;"	t
ZOLTAN_OTHER_REF	fort/fwrap.f90	/^integer(Zoltan_INT), parameter :: &$/;"	v	module:zoltan
ZOLTAN_OTHER_REF	include/zoltan.h	/^  ZOLTAN_OTHER_REF,      \/* unspecified type of refinement *\/$/;"	e	enum:Zoltan_Ref_Type
ZOLTAN_Output_Order	parmetis/third_library.h	/^} ZOLTAN_Output_Order;$/;"	t	typeref:struct:ZOLTAN_Output_Order_
ZOLTAN_Output_Order_	parmetis/third_library.h	/^typedef struct ZOLTAN_Output_Order_ {$/;"	s
ZOLTAN_Output_Part	parmetis/third_library.h	/^} ZOLTAN_Output_Part;$/;"	t	typeref:struct:ZOLTAN_Output_Part_
ZOLTAN_Output_Part_	parmetis/third_library.h	/^typedef struct ZOLTAN_Output_Part_ {$/;"	s
ZOLTAN_PACK_OBJ_FN	include/zoltan.h	/^typedef void ZOLTAN_PACK_OBJ_FN($/;"	t
ZOLTAN_PACK_OBJ_FN_TYPE	fort/fwrap.f90	/^   ZOLTAN_POST_MIGRATE_FN_TYPE     = ZOLTAN_FN_TYPES(20_Zoltan_INT), &$/;"	v	module:zoltan
ZOLTAN_PACK_OBJ_FN_TYPE	include/zoltan.h	/^  ZOLTAN_PACK_OBJ_FN_TYPE,$/;"	e	enum:Zoltan_Fn_Type
ZOLTAN_PACK_OBJ_FORT_FN	include/zoltan.h	/^typedef void ZOLTAN_PACK_OBJ_FORT_FN($/;"	t
ZOLTAN_PACK_OBJ_MULTI_FN	include/zoltan.h	/^typedef void ZOLTAN_PACK_OBJ_MULTI_FN($/;"	t
ZOLTAN_PACK_OBJ_MULTI_FN_TYPE	fort/fwrap.f90	/^   ZOLTAN_OBJ_SIZE_MULTI_FN_TYPE   = ZOLTAN_FN_TYPES(31_Zoltan_INT), &$/;"	v	module:zoltan
ZOLTAN_PACK_OBJ_MULTI_FN_TYPE	include/zoltan.h	/^  ZOLTAN_PACK_OBJ_MULTI_FN_TYPE,$/;"	e	enum:Zoltan_Fn_Type
ZOLTAN_PACK_OBJ_MULTI_FORT_FN	include/zoltan.h	/^typedef void ZOLTAN_PACK_OBJ_MULTI_FORT_FN($/;"	t
ZOLTAN_PARKWAY	Utilities/shared/zoltan_util.h	83;"	d
ZOLTAN_PARKWAY	driver/dr_const.h	96;"	d
ZOLTAN_PARKWAY_ERROR	phg/phg_parkway.c	28;"	d	file:
ZOLTAN_PARMETIS	Utilities/shared/zoltan_util.h	60;"	d
ZOLTAN_PARMETIS	driver/dr_const.h	72;"	d
ZOLTAN_PARMETIS_ERROR	parmetis/third_library.h	32;"	d
ZOLTAN_PARMETIS_ERROR	parmetis/third_library_tools.h	33;"	d
ZOLTAN_PARTITION_FN	include/zoltan.h	221;"	d
ZOLTAN_PARTITION_FN_TYPE	fort/fwrap.f90	/^type(ZOLTAN_FN_TYPEF), parameter :: &$/;"	v	module:zoltan
ZOLTAN_PARTITION_FN_TYPE	include/zoltan.h	102;"	d
ZOLTAN_PARTITION_FORT_FN	include/zoltan.h	222;"	d
ZOLTAN_PARTITION_MULTI_FN	include/zoltan.h	182;"	d
ZOLTAN_PARTITION_MULTI_FN_TYPE	fort/fwrap.f90	/^type(ZOLTAN_FN_TYPES), parameter :: &$/;"	v	module:zoltan
ZOLTAN_PARTITION_MULTI_FN_TYPE	include/zoltan.h	103;"	d
ZOLTAN_PARTITION_MULTI_FORT_FN	include/zoltan.h	183;"	d
ZOLTAN_PART_FN	include/zoltan.h	/^typedef int ZOLTAN_PART_FN($/;"	t
ZOLTAN_PART_FN_TYPE	fort/fwrap.f90	/^   ZOLTAN_NUM_CHILD_FN_TYPE        = ZOLTAN_FN_TYPEF(28_Zoltan_INT), &$/;"	v	module:zoltan
ZOLTAN_PART_FN_TYPE	include/zoltan.h	/^  ZOLTAN_PART_FN_TYPE,$/;"	e	enum:Zoltan_Fn_Type
ZOLTAN_PART_FORT_FN	include/zoltan.h	/^typedef int ZOLTAN_PART_FORT_FN($/;"	t
ZOLTAN_PART_MULTI_FN	include/zoltan.h	/^typedef void ZOLTAN_PART_MULTI_FN($/;"	t
ZOLTAN_PART_MULTI_FN_TYPE	fort/fwrap.f90	/^   ZOLTAN_UNPACK_OBJ_MULTI_FN_TYPE = ZOLTAN_FN_TYPES(33_Zoltan_INT), &$/;"	v	module:zoltan
ZOLTAN_PART_MULTI_FN_TYPE	include/zoltan.h	/^  ZOLTAN_PART_MULTI_FN_TYPE,$/;"	e	enum:Zoltan_Fn_Type
ZOLTAN_PART_MULTI_FORT_FN	include/zoltan.h	/^typedef void ZOLTAN_PART_MULTI_FORT_FN($/;"	t
ZOLTAN_PATOH	Utilities/shared/zoltan_util.h	75;"	d
ZOLTAN_PATOH	driver/dr_const.h	88;"	d
ZOLTAN_PATOH_ERROR	phg/phg_patoh.c	27;"	d	file:
ZOLTAN_PHG_COARSEPARTITION_FN	phg/phg.h	/^typedef int ZOLTAN_PHG_COARSEPARTITION_FN(ZZ*, HGraph*, int, float *, Partition,$/;"	t
ZOLTAN_PHG_MATCHING_FN	phg/phg.h	/^typedef int ZOLTAN_PHG_MATCHING_FN(ZZ*, HGraph*, Matching, $/;"	t
ZOLTAN_PHG_REFINEMENT_FN	phg/phg.h	/^typedef int ZOLTAN_PHG_REFINEMENT_FN(ZZ*, HGraph*, int, float *, Partition,$/;"	t
ZOLTAN_POST_MIGRATE_FN	include/zoltan.h	/^typedef void ZOLTAN_POST_MIGRATE_FN($/;"	t
ZOLTAN_POST_MIGRATE_FN_TYPE	fort/fwrap.f90	/^   ZOLTAN_MID_MIGRATE_FN_TYPE      = ZOLTAN_FN_TYPES(19_Zoltan_INT), &$/;"	v	module:zoltan
ZOLTAN_POST_MIGRATE_FN_TYPE	include/zoltan.h	/^  ZOLTAN_POST_MIGRATE_FN_TYPE,$/;"	e	enum:Zoltan_Fn_Type
ZOLTAN_POST_MIGRATE_FORT_FN	include/zoltan.h	/^typedef void ZOLTAN_POST_MIGRATE_FORT_FN($/;"	t
ZOLTAN_POST_MIGRATE_PP_FN	include/zoltan.h	/^typedef void ZOLTAN_POST_MIGRATE_PP_FN($/;"	t
ZOLTAN_POST_MIGRATE_PP_FN_TYPE	fort/fwrap.f90	/^   ZOLTAN_MID_MIGRATE_PP_FN_TYPE   = ZOLTAN_FN_TYPES(16_Zoltan_INT), &$/;"	v	module:zoltan
ZOLTAN_POST_MIGRATE_PP_FN_TYPE	include/zoltan.h	/^  ZOLTAN_POST_MIGRATE_PP_FN_TYPE,$/;"	e	enum:Zoltan_Fn_Type
ZOLTAN_POST_MIGRATE_PP_FORT_FN	include/zoltan.h	/^typedef void ZOLTAN_POST_MIGRATE_PP_FORT_FN($/;"	t
ZOLTAN_PRE_MIGRATE_FN	include/zoltan.h	/^typedef void ZOLTAN_PRE_MIGRATE_FN($/;"	t
ZOLTAN_PRE_MIGRATE_FN_TYPE	fort/fwrap.f90	/^   ZOLTAN_POST_MIGRATE_PP_FN_TYPE  = ZOLTAN_FN_TYPES(17_Zoltan_INT), &$/;"	v	module:zoltan
ZOLTAN_PRE_MIGRATE_FN_TYPE	include/zoltan.h	/^  ZOLTAN_PRE_MIGRATE_FN_TYPE,$/;"	e	enum:Zoltan_Fn_Type
ZOLTAN_PRE_MIGRATE_FORT_FN	include/zoltan.h	/^typedef void ZOLTAN_PRE_MIGRATE_FORT_FN($/;"	t
ZOLTAN_PRE_MIGRATE_PP_FN	include/zoltan.h	/^typedef void ZOLTAN_PRE_MIGRATE_PP_FN($/;"	t
ZOLTAN_PRE_MIGRATE_PP_FN_TYPE	fort/fwrap.f90	/^   ZOLTAN_BORDER_OBJ_LIST_FN_TYPE  = ZOLTAN_FN_TYPES(12_Zoltan_INT), &$/;"	v	module:zoltan
ZOLTAN_PRE_MIGRATE_PP_FN_TYPE	include/zoltan.h	/^  ZOLTAN_PRE_MIGRATE_PP_FN_TYPE,$/;"	e	enum:Zoltan_Fn_Type
ZOLTAN_PRE_MIGRATE_PP_FORT_FN	include/zoltan.h	/^typedef void ZOLTAN_PRE_MIGRATE_PP_FORT_FN($/;"	t
ZOLTAN_PRINT_ERROR	Utilities/shared/zoltan_util.h	114;"	d
ZOLTAN_PRINT_ERROR	util/converters_for_JPDC_adaptive_mesh_experiments/chaco2chaco/hsfc_hilbert.c	22;"	d	file:
ZOLTAN_PRINT_GID	zz/zz_id_const.h	93;"	d
ZOLTAN_PRINT_ID	Utilities/shared/zoltan_id.c	/^void ZOLTAN_PRINT_ID(int n, ZOLTAN_ID_PTR a)$/;"	f
ZOLTAN_PRINT_INFO	Utilities/shared/zoltan_util.h	132;"	d
ZOLTAN_PRINT_LID	zz/zz_id_const.h	94;"	d
ZOLTAN_PRINT_VTX_NUM	zz/zz_gen_files.c	25;"	d	file:
ZOLTAN_PRINT_WARN	Utilities/shared/zoltan_util.h	118;"	d
ZOLTAN_PROC_NAME_FN	include/zoltan.h	/^typedef void ZOLTAN_PROC_NAME_FN($/;"	t
ZOLTAN_PROC_NAME_FN_TYPE	fort/fwrap.f90	/^   ZOLTAN_PART_MULTI_FN_TYPE       = ZOLTAN_FN_TYPES(35_Zoltan_INT), &$/;"	v	module:zoltan
ZOLTAN_PROC_NAME_FN_TYPE	include/zoltan.h	/^  ZOLTAN_PROC_NAME_FN_TYPE,$/;"	e	enum:Zoltan_Fn_Type
ZOLTAN_PROC_NOT_IN_COMMUNICATOR	zz/zz_const.h	576;"	d
ZOLTAN_PTSCOTCH	Utilities/shared/zoltan_util.h	70;"	d
ZOLTAN_PTSCOTCH	Utilities/shared/zoltan_util.h	95;"	d
ZOLTAN_QUAD_QUAD	fort/fwrap.f90	/^  ZOLTAN_TRI_BISECT    = 2_Zoltan_INT, &$/;"	v	module:zoltan
ZOLTAN_QUAD_QUAD	include/zoltan.h	/^  ZOLTAN_QUAD_QUAD,      \/* quadrasection of quadralaterals *\/$/;"	e	enum:Zoltan_Ref_Type
ZOLTAN_RAND_INIT	zz/zz_rand.h	24;"	d
ZOLTAN_RAND_MAX	zz/zz_rand.h	23;"	d
ZOLTAN_RCB	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	255;"	d
ZOLTAN_REALLOC	include/zoltan_mem.h	42;"	d
ZOLTAN_REALLOC_GID_ARRAY	zz/zz_id_const.h	72;"	d
ZOLTAN_REALLOC_LID_ARRAY	zz/zz_id_const.h	75;"	d
ZOLTAN_REFTREE	reftree/reftree.h	/^typedef struct Zoltan_Reftree_Struct ZOLTAN_REFTREE;$/;"	t	typeref:struct:Zoltan_Reftree_Struct
ZOLTAN_REF_TYPE	include/zoltan.h	/^typedef enum Zoltan_Ref_Type ZOLTAN_REF_TYPE;$/;"	t	typeref:enum:Zoltan_Ref_Type
ZOLTAN_RIB	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	256;"	d
ZOLTAN_SCOTCH	Utilities/shared/zoltan_util.h	68;"	d
ZOLTAN_SCOTCH	driver/dr_const.h	80;"	d
ZOLTAN_SET_GID	zz/zz_id_const.h	85;"	d
ZOLTAN_SET_ID	Utilities/shared/zoltan_id.h	52;"	d
ZOLTAN_SET_LID	zz/zz_id_const.h	86;"	d
ZOLTAN_SET_PARAM_FN	params/params_const.h	/^typedef int ZOLTAN_SET_PARAM_FN(char *, char *); $/;"	t
ZOLTAN_SET_PARAM_VEC_FN	params/params_const.h	/^typedef int ZOLTAN_SET_PARAM_VEC_FN(char *, int, char *);$/;"	t
ZOLTAN_SORT_H	zz/zz_sort.h	15;"	d
ZOLTAN_SPECIAL_MALLOC_GID	all/all_allo_const.h	/^  ZOLTAN_SPECIAL_MALLOC_GID,$/;"	e	enum:Zoltan_Special_Malloc_Type
ZOLTAN_SPECIAL_MALLOC_INT	all/all_allo_const.h	/^  ZOLTAN_SPECIAL_MALLOC_INT,$/;"	e	enum:Zoltan_Special_Malloc_Type
ZOLTAN_SPECIAL_MALLOC_LID	all/all_allo_const.h	/^  ZOLTAN_SPECIAL_MALLOC_LID$/;"	e	enum:Zoltan_Special_Malloc_Type
ZOLTAN_SPECIAL_MALLOC_TYPE	all/all_allo_const.h	/^typedef enum Zoltan_Special_Malloc_Type ZOLTAN_SPECIAL_MALLOC_TYPE;$/;"	t	typeref:enum:Zoltan_Special_Malloc_Type
ZOLTAN_STRUCT	driver/dr_loadbal_const.h	24;"	d
ZOLTAN_STRUCT	driver/dr_loadbal_const.h	30;"	d
ZOLTAN_SUBLIB_DIR	makefile	/^ZOLTAN_SUBLIB_DIR = $(ZOLTAN_LIB_DIR)$/;"	m
ZOLTAN_SUBLIB_DIR	makefile	/^ZOLTAN_SUBLIB_DIR = ..\/$(ZOLTAN_OBJ_DIR)$/;"	m
ZOLTAN_TFLOPS_SPECIAL_DEF	zz/zz_const.h	108;"	d
ZOLTAN_THIRD_ERROR	parmetis/third_library.h	35;"	d
ZOLTAN_TIMER_CPP_H_	include/zoltan_timer_cpp.h	22;"	d
ZOLTAN_TIMER_DEF	zz/zz_const.h	107;"	d
ZOLTAN_TIMER_START	include/zoltan_timer.h	34;"	d
ZOLTAN_TIMER_STOP	include/zoltan_timer.h	36;"	d
ZOLTAN_TIME_CPU	include/zoltan_timer.h	29;"	d
ZOLTAN_TIME_USER	include/zoltan_timer.h	30;"	d
ZOLTAN_TIME_WALL	include/zoltan_timer.h	28;"	d
ZOLTAN_TRACE	Utilities/shared/zoltan_util.h	122;"	d
ZOLTAN_TRACE_DETAIL	zz/zz_const.h	593;"	d
ZOLTAN_TRACE_ENTER	zz/zz_const.h	581;"	d
ZOLTAN_TRACE_EXIT	zz/zz_const.h	587;"	d
ZOLTAN_TRACE_IN	Utilities/shared/zoltan_util.h	126;"	d
ZOLTAN_TRACE_OUT	Utilities/shared/zoltan_util.h	129;"	d
ZOLTAN_TRI_BISECT	fort/fwrap.f90	/^  ZOLTAN_IN_ORDER      = 1_Zoltan_INT, &$/;"	v	module:zoltan
ZOLTAN_TRI_BISECT	include/zoltan.h	/^  ZOLTAN_TRI_BISECT,     \/* bisection of triangles *\/$/;"	e	enum:Zoltan_Ref_Type
ZOLTAN_Third_Geom	parmetis/third_library.h	/^} ZOLTAN_Third_Geom;$/;"	t	typeref:struct:ZOLTAN_Third_Geom_
ZOLTAN_Third_Geom_	parmetis/third_library.h	/^typedef struct ZOLTAN_Third_Geom_ {$/;"	s
ZOLTAN_Third_Graph	parmetis/third_library.h	/^} ZOLTAN_Third_Graph;$/;"	t	typeref:struct:ZOLTAN_Third_Graph_
ZOLTAN_Third_Graph_	parmetis/third_library.h	/^typedef struct ZOLTAN_Third_Graph_ {$/;"	s
ZOLTAN_Third_Part	parmetis/third_library.h	/^} ZOLTAN_Third_Part;$/;"	t	typeref:struct:ZOLTAN_Third_Part_
ZOLTAN_Third_Part_	parmetis/third_library.h	/^typedef struct ZOLTAN_Third_Part_ {$/;"	s
ZOLTAN_Third_Vsize	parmetis/third_library.h	/^} ZOLTAN_Third_Vsize;$/;"	t	typeref:struct:ZOLTAN_Third_Vsize_
ZOLTAN_Third_Vsize_	parmetis/third_library.h	/^typedef struct ZOLTAN_Third_Vsize_ {$/;"	s
ZOLTAN_UNPACK_OBJ_FN	include/zoltan.h	/^typedef void ZOLTAN_UNPACK_OBJ_FN($/;"	t
ZOLTAN_UNPACK_OBJ_FN_TYPE	fort/fwrap.f90	/^   ZOLTAN_PACK_OBJ_FN_TYPE         = ZOLTAN_FN_TYPES(22_Zoltan_INT), &$/;"	v	module:zoltan
ZOLTAN_UNPACK_OBJ_FN_TYPE	include/zoltan.h	/^  ZOLTAN_UNPACK_OBJ_FN_TYPE,$/;"	e	enum:Zoltan_Fn_Type
ZOLTAN_UNPACK_OBJ_FORT_FN	include/zoltan.h	/^typedef void ZOLTAN_UNPACK_OBJ_FORT_FN($/;"	t
ZOLTAN_UNPACK_OBJ_MULTI_FN	include/zoltan.h	/^typedef void ZOLTAN_UNPACK_OBJ_MULTI_FN($/;"	t
ZOLTAN_UNPACK_OBJ_MULTI_FN_TYPE	fort/fwrap.f90	/^   ZOLTAN_PACK_OBJ_MULTI_FN_TYPE   = ZOLTAN_FN_TYPES(32_Zoltan_INT), &$/;"	v	module:zoltan
ZOLTAN_UNPACK_OBJ_MULTI_FN_TYPE	include/zoltan.h	/^  ZOLTAN_UNPACK_OBJ_MULTI_FN_TYPE,$/;"	e	enum:Zoltan_Fn_Type
ZOLTAN_UNPACK_OBJ_MULTI_FORT_FN	include/zoltan.h	/^typedef void ZOLTAN_UNPACK_OBJ_MULTI_FORT_FN($/;"	t
ZOLTAN_VERSION_NUMBER	include/zoltan.h	36;"	d
ZOLTAN_VOID_FN	include/zoltan.h	/^typedef void ZOLTAN_VOID_FN(void);$/;"	t
ZOLTAN_VPATH	makefile	/^ZOLTAN_VPATH	= $(SUB_VPATH) $(THIRD_PARTY_VPATH)$/;"	m
ZOLTAN_WARN	fort/fwrap.f90	/^   ZOLTAN_OK     =  0_Zoltan_INT, &$/;"	v	module:zoltan
ZOLTAN_WARN	include/zoltan_types.h	47;"	d
ZOLTAN_assign	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_loadbal.c	/^static int ZOLTAN_assign($/;"	f	file:
ZOM	fdriver/makefile	/^ZOM = $(F90_MODULE_PREFIX)$(ZOD)$/;"	m
ZOM	fdriver_old/makefile	/^ZOM = $(F90_MODULE_PREFIX)$(ZOD)$/;"	m
ZOM	fort/makefile	/^ZOM = $(F90_MODULE_PREFIX)$(ZOD) -I..\/fort$/;"	m
ZOOS	order/order_const.h	/^typedef struct Zoltan_Order_Options ZOOS;$/;"	t	typeref:struct:Zoltan_Order_Options
ZOS	order/order_const.h	/^typedef struct Zoltan_Order_Struct ZOS;$/;"	t	typeref:struct:Zoltan_Order_Struct
ZPINCH	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	253;"	d
ZPINCH_assign	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_loadbal.c	/^static int ZPINCH_assign($/;"	f	file:
ZTARGET	makefile	/^ZTARGET=zdrive $/;"	m
ZTIMER	Utilities/Timer/zoltan_timer.c	/^} ZTIMER;$/;"	t	typeref:struct:Zoltan_Timer	file:
ZTIMER_TS	Utilities/Timer/zoltan_timer.c	/^} ZTIMER_TS;$/;"	t	typeref:struct:TimeStruct	file:
ZTStruct	include/zoltan_timer_cpp.h	/^  struct Zoltan_Timer *ZTStruct;$/;"	m	class:Zoltan_Timer_Object	typeref:struct:Zoltan_Timer_Object::Zoltan_Timer
ZT_CSRC	Utilities/makefile	/^ZT_CSRC		= zoltan_timer.c timer.c$/;"	m
ZT_DRIVER	Utilities/makefile	/^ZT_DRIVER	= zdrive_timer$/;"	m
ZT_DRIVER_CPP	Utilities/makefile	/^ZT_DRIVER_CPP	= zCPPdrive_timer$/;"	m
ZT_DRIVER_CPP_CSRC	Utilities/makefile	/^ZT_DRIVER_CPP_CSRC = timer_main_2.cpp$/;"	m
ZT_DRIVER_CSRC	Utilities/makefile	/^ZT_DRIVER_CSRC	= timer_main.c$/;"	m
ZT_DRIVER_DEP	Utilities/makefile	/^ZT_DRIVER_DEP  	= $(ZT_LIB) $(MEM_LIB) $/;"	m
ZT_DRIVER_LIBS	Utilities/makefile	/^ZT_DRIVER_LIBS 	= -L. -l$(ZT_TARGET) -l$(MEM_TARGET) \\$/;"	m
ZT_INC	Utilities/makefile	/^ZT_INC		= zoltan_timer.h$/;"	m
ZT_LIB	Utilities/makefile	/^ZT_LIB		= libzoltan_timer.a$/;"	m
ZT_TARGET	Utilities/makefile	/^ZT_TARGET	= zoltan_timer$/;"	m
ZTime	zz/zz_const.h	/^  struct Zoltan_Timer *ZTime;     \/*  Timer structure for persistent timing. *\/$/;"	m	struct:Zoltan_Struct	typeref:struct:Zoltan_Struct::Zoltan_Timer
ZZ	zz/zz_const.h	/^typedef struct Zoltan_Struct ZZ;$/;"	t	typeref:struct:Zoltan_Struct
ZZ_CSRC	makefile	/^ZZ_CSRC		= zz_coord.c zz_obj_list.c zz_struct.c \\$/;"	m
ZZ_INC	makefile	/^ZZ_INC		= zz_const.h zz_id_const.h zz_util_const.h zz_rand.h zz_sort.h$/;"	m
ZZ_Ptr	include/zoltan_cpp.h	/^  Zoltan_Struct * ZZ_Ptr; $/;"	m	class:Zoltan
ZZ_Transform	zz/zz_const.h	/^typedef struct Zoltan_Transform_Struct ZZ_Transform;$/;"	t	typeref:struct:Zoltan_Transform_Struct
Z_f	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^typedef VOID Z_f;	\/* double complex function *\/$/;"	t
Z_f	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^typedef VOID Z_f;	\/* double complex function *\/$/;"	t
Z_fp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^typedef \/* Double Complex *\/ VOID (*Z_fp)();$/;"	t
Z_fp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^typedef \/* Double Complex *\/ VOID (*Z_fp)(...);$/;"	t
Z_fp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^typedef \/* Double Complex *\/ VOID (*Z_fp)();$/;"	t
Z_fp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^typedef \/* Double Complex *\/ VOID (*Z_fp)(...);$/;"	t
Zf90_Align	fort/fwrap.f90	/^function Zf90_Align(/;"	f	module:zoltan
Zf90_Color	fort/fwrap.f90	/^function Zf90_Color(/;"	f	module:zoltan
Zf90_Color_Test	fort/fwrap.f90	/^function Zf90_Color_Test(/;"	f	module:zoltan
Zf90_Compute_Destinations	fort/fwrap.f90	/^function Zf90_Compute_Destinations(/;"	f	module:zoltan
Zf90_Copy	fort/fwrap.f90	/^function Zf90_Copy(/;"	f	module:zoltan
Zf90_Copy_To	fort/fwrap.f90	/^function Zf90_Copy_To(/;"	f	module:zoltan
Zf90_Create	fort/fwrap.f90	/^function Zf90_Create(/;"	f	module:zoltan
Zf90_Destroy	fort/fwrap.f90	/^subroutine Zf90_Destroy(/;"	s	module:zoltan
Zf90_Generate_Files	fort/fwrap.f90	/^function Zf90_Generate_Files(/;"	f	module:zoltan
Zf90_Get_Struct_Addr	fort/fwrap.f90	/^subroutine Zf90_Get_Struct_Addr(/;"	s	module:zoltan
Zf90_Help_Migrate	fort/fwrap.f90	/^function Zf90_Help_Migrate(/;"	f	module:zoltan
Zf90_Initialize	fort/fwrap.f90	/^function Zf90_Initialize(/;"	f	module:zoltan
Zf90_Initialize1	fort/fwrap.f90	/^function Zf90_Initialize1(/;"	f	module:zoltan
Zf90_Invert_Lists	fort/fwrap.f90	/^function Zf90_Invert_Lists(/;"	f	module:zoltan
Zf90_LB_Balance	fort/fwrap.f90	/^function Zf90_LB_Balance(/;"	f	module:zoltan
Zf90_LB_Box_Assign	fort/fwrap.f90	/^function Zf90_LB_Box_Assign(/;"	f	module:zoltan
Zf90_LB_Box_PP_Assign	fort/fwrap.f90	/^function Zf90_LB_Box_PP_Assign(/;"	f	module:zoltan
Zf90_LB_Eval	fort/fwrap.f90	/^function Zf90_LB_Eval(/;"	f	module:zoltan
Zf90_LB_Free_Data	fort/fwrap.f90	/^function Zf90_LB_Free_Data(/;"	f	module:zoltan
Zf90_LB_Free_Part	fort/fwrap.f90	/^function Zf90_LB_Free_Part(/;"	f	module:zoltan
Zf90_LB_Partition	fort/fwrap.f90	/^function Zf90_LB_Partition(/;"	f	module:zoltan
Zf90_LB_Point_Assign	fort/fwrap.f90	/^function Zf90_LB_Point_Assign(/;"	f	module:zoltan
Zf90_LB_Point_PP_Assign	fort/fwrap.f90	/^function Zf90_LB_Point_PP_Assign(/;"	f	module:zoltan
Zf90_LB_Set_Part_Sizes	fort/fwrap.f90	/^function Zf90_LB_Set_Part_Sizes(/;"	f	module:zoltan
Zf90_Memory_Stats	fort/fwrap.f90	/^subroutine Zf90_Memory_Stats(/;"	s	module:zoltan
Zf90_Migrate	fort/fwrap.f90	/^function Zf90_Migrate(/;"	f	module:zoltan
Zf90_Order	fort/fwrap.f90	/^function Zf90_Order(/;"	f	module:zoltan
Zf90_RCB_Box	fort/fwrap.f90	/^function Zf90_RCB_Box(/;"	f	module:zoltan
Zf90_Reftree_Get_Child_Order	fort/fwrap.f90	/^subroutine Zf90_Reftree_Get_Child_Order(/;"	s	module:zoltan
Zf90_Set_Fn0f	fort/fwrap.f90	/^function Zf90_Set_Fn0f(/;"	f	module:zoltan
Zf90_Set_Fn0s	fort/fwrap.f90	/^function Zf90_Set_Fn0s(/;"	f	module:zoltan
Zf90_Set_Fn1f	fort/fwrap.f90	/^function Zf90_Set_Fn1f(/;"	f	module:zoltan
Zf90_Set_Fn1s	fort/fwrap.f90	/^function Zf90_Set_Fn1s(/;"	f	module:zoltan
Zf90_Set_Fn2f	fort/fwrap.f90	/^function Zf90_Set_Fn2f(/;"	f	module:zoltan
Zf90_Set_Fn2s	fort/fwrap.f90	/^function Zf90_Set_Fn2s(/;"	f	module:zoltan
Zf90_Set_Fn3f	fort/fwrap.f90	/^function Zf90_Set_Fn3f(/;"	f	module:zoltan
Zf90_Set_Fn3s	fort/fwrap.f90	/^function Zf90_Set_Fn3s(/;"	f	module:zoltan
Zf90_Set_Fn4f	fort/fwrap.f90	/^function Zf90_Set_Fn4f(/;"	f	module:zoltan
Zf90_Set_Fn4s	fort/fwrap.f90	/^function Zf90_Set_Fn4s(/;"	f	module:zoltan
Zf90_Set_Fn5f	fort/fwrap.f90	/^function Zf90_Set_Fn5f(/;"	f	module:zoltan
Zf90_Set_Fn5s	fort/fwrap.f90	/^function Zf90_Set_Fn5s(/;"	f	module:zoltan
Zf90_Set_Fn6f	fort/fwrap.f90	/^function Zf90_Set_Fn6f(/;"	f	module:zoltan
Zf90_Set_Fn6s	fort/fwrap.f90	/^function Zf90_Set_Fn6s(/;"	f	module:zoltan
Zf90_Set_Fn7f	fort/fwrap.f90	/^function Zf90_Set_Fn7f(/;"	f	module:zoltan
Zf90_Set_Fn7s	fort/fwrap.f90	/^function Zf90_Set_Fn7s(/;"	f	module:zoltan
Zf90_Set_Param	fort/fwrap.f90	/^function Zf90_Set_Param(/;"	f	module:zoltan
Zf90_Set_Param_Vec	fort/fwrap.f90	/^function Zf90_Set_Param_Vec(/;"	f	module:zoltan
Zfw_Align	fort/cwrap.c	/^int Zfw_Align(int *size)$/;"	f
Zfw_Align	fort/cwrap_fmangle.h	150;"	d
Zfw_Align	fort/cwrap_fmangle.h	209;"	d
Zfw_Align	fort/cwrap_fmangle.h	268;"	d
Zfw_Align	fort/cwrap_fmangle.h	28;"	d
Zfw_Align	fort/cwrap_fmangle.h	326;"	d
Zfw_Align	fort/cwrap_fmangle.h	384;"	d
Zfw_Align	fort/cwrap_fmangle.h	91;"	d
Zfw_Color	fort/cwrap.c	/^int Zfw_Color($/;"	f
Zfw_Color	fort/cwrap_fmangle.h	131;"	d
Zfw_Color	fort/cwrap_fmangle.h	190;"	d
Zfw_Color	fort/cwrap_fmangle.h	249;"	d
Zfw_Color	fort/cwrap_fmangle.h	308;"	d
Zfw_Color	fort/cwrap_fmangle.h	366;"	d
Zfw_Color	fort/cwrap_fmangle.h	424;"	d
Zfw_Color	fort/cwrap_fmangle.h	68;"	d
Zfw_Color_Test	fort/cwrap.c	/^int Zfw_Color_Test($/;"	f
Zfw_Color_Test	fort/cwrap_fmangle.h	132;"	d
Zfw_Color_Test	fort/cwrap_fmangle.h	191;"	d
Zfw_Color_Test	fort/cwrap_fmangle.h	250;"	d
Zfw_Color_Test	fort/cwrap_fmangle.h	309;"	d
Zfw_Color_Test	fort/cwrap_fmangle.h	367;"	d
Zfw_Color_Test	fort/cwrap_fmangle.h	425;"	d
Zfw_Color_Test	fort/cwrap_fmangle.h	69;"	d
Zfw_Compute_Destinations	fort/cwrap.c	/^int Zfw_Compute_Destinations(int *addr_lb, int *nbytes, $/;"	f
Zfw_Compute_Destinations	fort/cwrap_fmangle.h	127;"	d
Zfw_Compute_Destinations	fort/cwrap_fmangle.h	186;"	d
Zfw_Compute_Destinations	fort/cwrap_fmangle.h	245;"	d
Zfw_Compute_Destinations	fort/cwrap_fmangle.h	304;"	d
Zfw_Compute_Destinations	fort/cwrap_fmangle.h	362;"	d
Zfw_Compute_Destinations	fort/cwrap_fmangle.h	420;"	d
Zfw_Compute_Destinations	fort/cwrap_fmangle.h	64;"	d
Zfw_Copy	fort/cwrap.c	/^void Zfw_Copy(int *addr_lb1, int *addr_lb2, int *nbytes)$/;"	f
Zfw_Copy	fort/cwrap_fmangle.h	147;"	d
Zfw_Copy	fort/cwrap_fmangle.h	206;"	d
Zfw_Copy	fort/cwrap_fmangle.h	25;"	d
Zfw_Copy	fort/cwrap_fmangle.h	265;"	d
Zfw_Copy	fort/cwrap_fmangle.h	323;"	d
Zfw_Copy	fort/cwrap_fmangle.h	381;"	d
Zfw_Copy	fort/cwrap_fmangle.h	88;"	d
Zfw_Copy_To	fort/cwrap.c	/^int Zfw_Copy_To(int *addr_lb1, int *addr_lb2, int *nbytes)$/;"	f
Zfw_Copy_To	fort/cwrap_fmangle.h	148;"	d
Zfw_Copy_To	fort/cwrap_fmangle.h	207;"	d
Zfw_Copy_To	fort/cwrap_fmangle.h	266;"	d
Zfw_Copy_To	fort/cwrap_fmangle.h	26;"	d
Zfw_Copy_To	fort/cwrap_fmangle.h	324;"	d
Zfw_Copy_To	fort/cwrap_fmangle.h	382;"	d
Zfw_Copy_To	fort/cwrap_fmangle.h	89;"	d
Zfw_Create	fort/cwrap.c	/^void Zfw_Create(int *f_communicator, int *addr_lb, int *nbytes)$/;"	f
Zfw_Create	fort/cwrap_fmangle.h	146;"	d
Zfw_Create	fort/cwrap_fmangle.h	205;"	d
Zfw_Create	fort/cwrap_fmangle.h	24;"	d
Zfw_Create	fort/cwrap_fmangle.h	264;"	d
Zfw_Create	fort/cwrap_fmangle.h	322;"	d
Zfw_Create	fort/cwrap_fmangle.h	380;"	d
Zfw_Create	fort/cwrap_fmangle.h	87;"	d
Zfw_Destroy	fort/cwrap.c	/^void Zfw_Destroy(int *addr_lb, int *nbytes)$/;"	f
Zfw_Destroy	fort/cwrap_fmangle.h	149;"	d
Zfw_Destroy	fort/cwrap_fmangle.h	208;"	d
Zfw_Destroy	fort/cwrap_fmangle.h	267;"	d
Zfw_Destroy	fort/cwrap_fmangle.h	27;"	d
Zfw_Destroy	fort/cwrap_fmangle.h	325;"	d
Zfw_Destroy	fort/cwrap_fmangle.h	383;"	d
Zfw_Destroy	fort/cwrap_fmangle.h	90;"	d
Zfw_Generate_Files	fort/cwrap.c	/^int Zfw_Generate_Files(int *addr_lb, int *nbytes, int *int_filename,$/;"	f
Zfw_Generate_Files	fort/cwrap_fmangle.h	133;"	d
Zfw_Generate_Files	fort/cwrap_fmangle.h	192;"	d
Zfw_Generate_Files	fort/cwrap_fmangle.h	251;"	d
Zfw_Generate_Files	fort/cwrap_fmangle.h	310;"	d
Zfw_Generate_Files	fort/cwrap_fmangle.h	368;"	d
Zfw_Generate_Files	fort/cwrap_fmangle.h	426;"	d
Zfw_Generate_Files	fort/cwrap_fmangle.h	70;"	d
Zfw_Get_Address_int	fort/cwrap.c	/^void Zfw_Get_Address_int(int *addr,$/;"	f
Zfw_Get_Address_int	fort/cwrap_fmangle.h	136;"	d
Zfw_Get_Address_int	fort/cwrap_fmangle.h	195;"	d
Zfw_Get_Address_int	fort/cwrap_fmangle.h	254;"	d
Zfw_Get_Address_int	fort/cwrap_fmangle.h	313;"	d
Zfw_Get_Address_int	fort/cwrap_fmangle.h	371;"	d
Zfw_Get_Address_int	fort/cwrap_fmangle.h	429;"	d
Zfw_Get_Address_int	fort/cwrap_fmangle.h	73;"	d
Zfw_Get_Address_struct	fort/cwrap.c	/^void Zfw_Get_Address_struct(int *addr,$/;"	f
Zfw_Get_Address_struct	fort/cwrap_fmangle.h	137;"	d
Zfw_Get_Address_struct	fort/cwrap_fmangle.h	196;"	d
Zfw_Get_Address_struct	fort/cwrap_fmangle.h	255;"	d
Zfw_Get_Address_struct	fort/cwrap_fmangle.h	314;"	d
Zfw_Get_Address_struct	fort/cwrap_fmangle.h	372;"	d
Zfw_Get_Address_struct	fort/cwrap_fmangle.h	430;"	d
Zfw_Get_Address_struct	fort/cwrap_fmangle.h	74;"	d
Zfw_Get_Comm_Dim	fort/cwrap.c	/^int Zfw_Get_Comm_Dim(int *addr_lb, int *nbytes)$/;"	f
Zfw_Get_Comm_Dim	fort/cwrap_fmangle.h	139;"	d
Zfw_Get_Comm_Dim	fort/cwrap_fmangle.h	198;"	d
Zfw_Get_Comm_Dim	fort/cwrap_fmangle.h	257;"	d
Zfw_Get_Comm_Dim	fort/cwrap_fmangle.h	315;"	d
Zfw_Get_Comm_Dim	fort/cwrap_fmangle.h	373;"	d
Zfw_Get_Comm_Dim	fort/cwrap_fmangle.h	431;"	d
Zfw_Get_Comm_Dim	fort/cwrap_fmangle.h	76;"	d
Zfw_Get_Wgt_Dim	fort/cwrap.c	/^int Zfw_Get_Wgt_Dim(int *addr_lb, int *nbytes)$/;"	f
Zfw_Get_Wgt_Dim	fort/cwrap_fmangle.h	138;"	d
Zfw_Get_Wgt_Dim	fort/cwrap_fmangle.h	197;"	d
Zfw_Get_Wgt_Dim	fort/cwrap_fmangle.h	256;"	d
Zfw_Get_Wgt_Dim	fort/cwrap_fmangle.h	75;"	d
Zfw_Help_Migrate	fort/cwrap.c	/^int Zfw_Help_Migrate(int *addr_lb, int *nbytes, $/;"	f
Zfw_Help_Migrate	fort/cwrap_fmangle.h	129;"	d
Zfw_Help_Migrate	fort/cwrap_fmangle.h	188;"	d
Zfw_Help_Migrate	fort/cwrap_fmangle.h	247;"	d
Zfw_Help_Migrate	fort/cwrap_fmangle.h	306;"	d
Zfw_Help_Migrate	fort/cwrap_fmangle.h	364;"	d
Zfw_Help_Migrate	fort/cwrap_fmangle.h	422;"	d
Zfw_Help_Migrate	fort/cwrap_fmangle.h	66;"	d
Zfw_Initialize	fort/cwrap.c	/^int Zfw_Initialize(float *ver)$/;"	f
Zfw_Initialize	fort/cwrap_fmangle.h	144;"	d
Zfw_Initialize	fort/cwrap_fmangle.h	203;"	d
Zfw_Initialize	fort/cwrap_fmangle.h	22;"	d
Zfw_Initialize	fort/cwrap_fmangle.h	262;"	d
Zfw_Initialize	fort/cwrap_fmangle.h	320;"	d
Zfw_Initialize	fort/cwrap_fmangle.h	378;"	d
Zfw_Initialize	fort/cwrap_fmangle.h	85;"	d
Zfw_Initialize1	fort/cwrap.c	/^int Zfw_Initialize1(int *argc, int *argv, int *starts, float *ver)$/;"	f
Zfw_Initialize1	fort/cwrap_fmangle.h	145;"	d
Zfw_Initialize1	fort/cwrap_fmangle.h	204;"	d
Zfw_Initialize1	fort/cwrap_fmangle.h	23;"	d
Zfw_Initialize1	fort/cwrap_fmangle.h	263;"	d
Zfw_Initialize1	fort/cwrap_fmangle.h	321;"	d
Zfw_Initialize1	fort/cwrap_fmangle.h	379;"	d
Zfw_Initialize1	fort/cwrap_fmangle.h	86;"	d
Zfw_Invert_Lists	fort/cwrap.c	/^int Zfw_Invert_Lists(int *addr_lb, int *nbytes, $/;"	f
Zfw_Invert_Lists	fort/cwrap_fmangle.h	126;"	d
Zfw_Invert_Lists	fort/cwrap_fmangle.h	185;"	d
Zfw_Invert_Lists	fort/cwrap_fmangle.h	244;"	d
Zfw_Invert_Lists	fort/cwrap_fmangle.h	303;"	d
Zfw_Invert_Lists	fort/cwrap_fmangle.h	361;"	d
Zfw_Invert_Lists	fort/cwrap_fmangle.h	419;"	d
Zfw_Invert_Lists	fort/cwrap_fmangle.h	63;"	d
Zfw_LB_Box_Assign	fort/cwrap.c	/^int Zfw_LB_Box_Assign(int *addr_lb, int *nbytes, double *xmin, double *ymin,$/;"	f
Zfw_LB_Box_Assign	fort/cwrap_fmangle.h	124;"	d
Zfw_LB_Box_Assign	fort/cwrap_fmangle.h	183;"	d
Zfw_LB_Box_Assign	fort/cwrap_fmangle.h	242;"	d
Zfw_LB_Box_Assign	fort/cwrap_fmangle.h	301;"	d
Zfw_LB_Box_Assign	fort/cwrap_fmangle.h	359;"	d
Zfw_LB_Box_Assign	fort/cwrap_fmangle.h	417;"	d
Zfw_LB_Box_Assign	fort/cwrap_fmangle.h	61;"	d
Zfw_LB_Box_PP_Assign	fort/cwrap.c	/^int Zfw_LB_Box_PP_Assign(int *addr_lb, int *nbytes, double *xmin, double *ymin,$/;"	f
Zfw_LB_Box_PP_Assign	fort/cwrap_fmangle.h	125;"	d
Zfw_LB_Box_PP_Assign	fort/cwrap_fmangle.h	184;"	d
Zfw_LB_Box_PP_Assign	fort/cwrap_fmangle.h	243;"	d
Zfw_LB_Box_PP_Assign	fort/cwrap_fmangle.h	302;"	d
Zfw_LB_Box_PP_Assign	fort/cwrap_fmangle.h	360;"	d
Zfw_LB_Box_PP_Assign	fort/cwrap_fmangle.h	418;"	d
Zfw_LB_Box_PP_Assign	fort/cwrap_fmangle.h	62;"	d
Zfw_LB_Eval	fort/cwrap.c	/^int Zfw_LB_Eval(int *addr_lb, int *nbytes, int *print_stats)$/;"	f
Zfw_LB_Eval	fort/cwrap_fmangle.h	120;"	d
Zfw_LB_Eval	fort/cwrap_fmangle.h	179;"	d
Zfw_LB_Eval	fort/cwrap_fmangle.h	238;"	d
Zfw_LB_Eval	fort/cwrap_fmangle.h	297;"	d
Zfw_LB_Eval	fort/cwrap_fmangle.h	355;"	d
Zfw_LB_Eval	fort/cwrap_fmangle.h	413;"	d
Zfw_LB_Eval	fort/cwrap_fmangle.h	57;"	d
Zfw_LB_Partition	fort/cwrap.c	/^int Zfw_LB_Partition(int *addr_lb, int *nbytes, int *changes, $/;"	f
Zfw_LB_Partition	fort/cwrap_fmangle.h	119;"	d
Zfw_LB_Partition	fort/cwrap_fmangle.h	178;"	d
Zfw_LB_Partition	fort/cwrap_fmangle.h	237;"	d
Zfw_LB_Partition	fort/cwrap_fmangle.h	296;"	d
Zfw_LB_Partition	fort/cwrap_fmangle.h	354;"	d
Zfw_LB_Partition	fort/cwrap_fmangle.h	412;"	d
Zfw_LB_Partition	fort/cwrap_fmangle.h	56;"	d
Zfw_LB_Point_Assign	fort/cwrap.c	/^int Zfw_LB_Point_Assign(int *addr_lb, int *nbytes, double *coords, int *proc)$/;"	f
Zfw_LB_Point_Assign	fort/cwrap_fmangle.h	122;"	d
Zfw_LB_Point_Assign	fort/cwrap_fmangle.h	181;"	d
Zfw_LB_Point_Assign	fort/cwrap_fmangle.h	240;"	d
Zfw_LB_Point_Assign	fort/cwrap_fmangle.h	299;"	d
Zfw_LB_Point_Assign	fort/cwrap_fmangle.h	357;"	d
Zfw_LB_Point_Assign	fort/cwrap_fmangle.h	415;"	d
Zfw_LB_Point_Assign	fort/cwrap_fmangle.h	59;"	d
Zfw_LB_Point_PP_Assign	fort/cwrap.c	/^int Zfw_LB_Point_PP_Assign(int *addr_lb, int *nbytes, double *coords, int *proc,$/;"	f
Zfw_LB_Point_PP_Assign	fort/cwrap_fmangle.h	123;"	d
Zfw_LB_Point_PP_Assign	fort/cwrap_fmangle.h	182;"	d
Zfw_LB_Point_PP_Assign	fort/cwrap_fmangle.h	241;"	d
Zfw_LB_Point_PP_Assign	fort/cwrap_fmangle.h	300;"	d
Zfw_LB_Point_PP_Assign	fort/cwrap_fmangle.h	358;"	d
Zfw_LB_Point_PP_Assign	fort/cwrap_fmangle.h	416;"	d
Zfw_LB_Point_PP_Assign	fort/cwrap_fmangle.h	60;"	d
Zfw_LB_Set_Part_Sizes	fort/cwrap.c	/^int Zfw_LB_Set_Part_Sizes(int *addr_lb, int *nbytes, int *global_part, int *len,$/;"	f
Zfw_LB_Set_Part_Sizes	fort/cwrap_fmangle.h	121;"	d
Zfw_LB_Set_Part_Sizes	fort/cwrap_fmangle.h	180;"	d
Zfw_LB_Set_Part_Sizes	fort/cwrap_fmangle.h	239;"	d
Zfw_LB_Set_Part_Sizes	fort/cwrap_fmangle.h	298;"	d
Zfw_LB_Set_Part_Sizes	fort/cwrap_fmangle.h	356;"	d
Zfw_LB_Set_Part_Sizes	fort/cwrap_fmangle.h	414;"	d
Zfw_LB_Set_Part_Sizes	fort/cwrap_fmangle.h	58;"	d
Zfw_Memory_Stats	fort/cwrap.c	/^void Zfw_Memory_Stats()$/;"	f
Zfw_Memory_Stats	fort/cwrap_fmangle.h	151;"	d
Zfw_Memory_Stats	fort/cwrap_fmangle.h	210;"	d
Zfw_Memory_Stats	fort/cwrap_fmangle.h	269;"	d
Zfw_Memory_Stats	fort/cwrap_fmangle.h	29;"	d
Zfw_Memory_Stats	fort/cwrap_fmangle.h	327;"	d
Zfw_Memory_Stats	fort/cwrap_fmangle.h	385;"	d
Zfw_Memory_Stats	fort/cwrap_fmangle.h	92;"	d
Zfw_Migrate	fort/cwrap.c	/^int Zfw_Migrate(int *addr_lb, int *nbytes, $/;"	f
Zfw_Migrate	fort/cwrap_fmangle.h	128;"	d
Zfw_Migrate	fort/cwrap_fmangle.h	187;"	d
Zfw_Migrate	fort/cwrap_fmangle.h	246;"	d
Zfw_Migrate	fort/cwrap_fmangle.h	305;"	d
Zfw_Migrate	fort/cwrap_fmangle.h	363;"	d
Zfw_Migrate	fort/cwrap_fmangle.h	421;"	d
Zfw_Migrate	fort/cwrap_fmangle.h	65;"	d
Zfw_Order	fort/cwrap.c	/^int Zfw_Order($/;"	f
Zfw_Order	fort/cwrap_fmangle.h	130;"	d
Zfw_Order	fort/cwrap_fmangle.h	189;"	d
Zfw_Order	fort/cwrap_fmangle.h	248;"	d
Zfw_Order	fort/cwrap_fmangle.h	307;"	d
Zfw_Order	fort/cwrap_fmangle.h	365;"	d
Zfw_Order	fort/cwrap_fmangle.h	423;"	d
Zfw_Order	fort/cwrap_fmangle.h	67;"	d
Zfw_RCB_Box	fort/cwrap.c	/^int Zfw_RCB_Box(int *addr_lb, int *nbytes, int *part, int *ndim,$/;"	f
Zfw_RCB_Box	fort/cwrap_fmangle.h	134;"	d
Zfw_RCB_Box	fort/cwrap_fmangle.h	193;"	d
Zfw_RCB_Box	fort/cwrap_fmangle.h	252;"	d
Zfw_RCB_Box	fort/cwrap_fmangle.h	311;"	d
Zfw_RCB_Box	fort/cwrap_fmangle.h	369;"	d
Zfw_RCB_Box	fort/cwrap_fmangle.h	427;"	d
Zfw_RCB_Box	fort/cwrap_fmangle.h	71;"	d
Zfw_Reftree_Get_Child_Order	fort/cwrap.c	/^void Zfw_Reftree_Get_Child_Order($/;"	f
Zfw_Reftree_Get_Child_Order	fort/cwrap_fmangle.h	140;"	d
Zfw_Reftree_Get_Child_Order	fort/cwrap_fmangle.h	199;"	d
Zfw_Reftree_Get_Child_Order	fort/cwrap_fmangle.h	258;"	d
Zfw_Reftree_Get_Child_Order	fort/cwrap_fmangle.h	316;"	d
Zfw_Reftree_Get_Child_Order	fort/cwrap_fmangle.h	374;"	d
Zfw_Reftree_Get_Child_Order	fort/cwrap_fmangle.h	432;"	d
Zfw_Reftree_Get_Child_Order	fort/cwrap_fmangle.h	77;"	d
Zfw_Register_Fort_Malloc	fort/cwrap.c	/^void Zfw_Register_Fort_Malloc(ZOLTAN_FORT_MALLOC_INT_FN *fort_malloc_int,$/;"	f
Zfw_Register_Fort_Malloc	fort/cwrap_fmangle.h	135;"	d
Zfw_Register_Fort_Malloc	fort/cwrap_fmangle.h	194;"	d
Zfw_Register_Fort_Malloc	fort/cwrap_fmangle.h	253;"	d
Zfw_Register_Fort_Malloc	fort/cwrap_fmangle.h	312;"	d
Zfw_Register_Fort_Malloc	fort/cwrap_fmangle.h	370;"	d
Zfw_Register_Fort_Malloc	fort/cwrap_fmangle.h	428;"	d
Zfw_Register_Fort_Malloc	fort/cwrap_fmangle.h	72;"	d
Zfw_Set_Fn	fort/cwrap.c	/^int Zfw_Set_Fn(int *addr_lb, int *nbytes, ZOLTAN_FN_TYPE *type, void (*fn)(),$/;"	f
Zfw_Set_Fn0f	fort/cwrap.c	/^int Zfw_Set_Fn0f(int *addr_lb, int *nbytes, ZOLTAN_FN_TYPE *type, void (*fn)())$/;"	f
Zfw_Set_Fn0f	fort/cwrap_fmangle.h	152;"	d
Zfw_Set_Fn0f	fort/cwrap_fmangle.h	211;"	d
Zfw_Set_Fn0f	fort/cwrap_fmangle.h	270;"	d
Zfw_Set_Fn0f	fort/cwrap_fmangle.h	30;"	d
Zfw_Set_Fn0f	fort/cwrap_fmangle.h	328;"	d
Zfw_Set_Fn0f	fort/cwrap_fmangle.h	386;"	d
Zfw_Set_Fn0f	fort/cwrap_fmangle.h	93;"	d
Zfw_Set_Fn0s	fort/cwrap.c	/^int Zfw_Set_Fn0s(int *addr_lb, int *nbytes, ZOLTAN_FN_TYPE *type, void (*fn)())$/;"	f
Zfw_Set_Fn0s	fort/cwrap_fmangle.h	105;"	d
Zfw_Set_Fn0s	fort/cwrap_fmangle.h	164;"	d
Zfw_Set_Fn0s	fort/cwrap_fmangle.h	223;"	d
Zfw_Set_Fn0s	fort/cwrap_fmangle.h	282;"	d
Zfw_Set_Fn0s	fort/cwrap_fmangle.h	340;"	d
Zfw_Set_Fn0s	fort/cwrap_fmangle.h	398;"	d
Zfw_Set_Fn0s	fort/cwrap_fmangle.h	42;"	d
Zfw_Set_Fn1f	fort/cwrap.c	/^int Zfw_Set_Fn1f(int *addr_lb, int *nbytes, ZOLTAN_FN_TYPE *type, void (*fn)(),$/;"	f
Zfw_Set_Fn1f	fort/cwrap_fmangle.h	153;"	d
Zfw_Set_Fn1f	fort/cwrap_fmangle.h	212;"	d
Zfw_Set_Fn1f	fort/cwrap_fmangle.h	271;"	d
Zfw_Set_Fn1f	fort/cwrap_fmangle.h	31;"	d
Zfw_Set_Fn1f	fort/cwrap_fmangle.h	329;"	d
Zfw_Set_Fn1f	fort/cwrap_fmangle.h	387;"	d
Zfw_Set_Fn1f	fort/cwrap_fmangle.h	94;"	d
Zfw_Set_Fn1s	fort/cwrap.c	/^int Zfw_Set_Fn1s(int *addr_lb, int *nbytes, ZOLTAN_FN_TYPE *type, void (*fn)(),$/;"	f
Zfw_Set_Fn1s	fort/cwrap_fmangle.h	106;"	d
Zfw_Set_Fn1s	fort/cwrap_fmangle.h	165;"	d
Zfw_Set_Fn1s	fort/cwrap_fmangle.h	224;"	d
Zfw_Set_Fn1s	fort/cwrap_fmangle.h	283;"	d
Zfw_Set_Fn1s	fort/cwrap_fmangle.h	341;"	d
Zfw_Set_Fn1s	fort/cwrap_fmangle.h	399;"	d
Zfw_Set_Fn1s	fort/cwrap_fmangle.h	43;"	d
Zfw_Set_Fn2f	fort/cwrap.c	/^int Zfw_Set_Fn2f(int *addr_lb, int *nbytes, ZOLTAN_FN_TYPE *type, void (*fn)(),$/;"	f
Zfw_Set_Fn2f	fort/cwrap_fmangle.h	154;"	d
Zfw_Set_Fn2f	fort/cwrap_fmangle.h	213;"	d
Zfw_Set_Fn2f	fort/cwrap_fmangle.h	272;"	d
Zfw_Set_Fn2f	fort/cwrap_fmangle.h	32;"	d
Zfw_Set_Fn2f	fort/cwrap_fmangle.h	330;"	d
Zfw_Set_Fn2f	fort/cwrap_fmangle.h	388;"	d
Zfw_Set_Fn2f	fort/cwrap_fmangle.h	95;"	d
Zfw_Set_Fn2s	fort/cwrap.c	/^int Zfw_Set_Fn2s(int *addr_lb, int *nbytes, ZOLTAN_FN_TYPE *type, void (*fn)(),$/;"	f
Zfw_Set_Fn2s	fort/cwrap_fmangle.h	107;"	d
Zfw_Set_Fn2s	fort/cwrap_fmangle.h	166;"	d
Zfw_Set_Fn2s	fort/cwrap_fmangle.h	225;"	d
Zfw_Set_Fn2s	fort/cwrap_fmangle.h	284;"	d
Zfw_Set_Fn2s	fort/cwrap_fmangle.h	342;"	d
Zfw_Set_Fn2s	fort/cwrap_fmangle.h	400;"	d
Zfw_Set_Fn2s	fort/cwrap_fmangle.h	44;"	d
Zfw_Set_Fn3f	fort/cwrap.c	/^int Zfw_Set_Fn3f(int *addr_lb, int *nbytes, ZOLTAN_FN_TYPE *type, void (*fn)(),$/;"	f
Zfw_Set_Fn3f	fort/cwrap_fmangle.h	155;"	d
Zfw_Set_Fn3f	fort/cwrap_fmangle.h	214;"	d
Zfw_Set_Fn3f	fort/cwrap_fmangle.h	273;"	d
Zfw_Set_Fn3f	fort/cwrap_fmangle.h	331;"	d
Zfw_Set_Fn3f	fort/cwrap_fmangle.h	33;"	d
Zfw_Set_Fn3f	fort/cwrap_fmangle.h	389;"	d
Zfw_Set_Fn3f	fort/cwrap_fmangle.h	96;"	d
Zfw_Set_Fn3s	fort/cwrap.c	/^int Zfw_Set_Fn3s(int *addr_lb, int *nbytes, ZOLTAN_FN_TYPE *type, void (*fn)(),$/;"	f
Zfw_Set_Fn3s	fort/cwrap_fmangle.h	108;"	d
Zfw_Set_Fn3s	fort/cwrap_fmangle.h	167;"	d
Zfw_Set_Fn3s	fort/cwrap_fmangle.h	226;"	d
Zfw_Set_Fn3s	fort/cwrap_fmangle.h	285;"	d
Zfw_Set_Fn3s	fort/cwrap_fmangle.h	343;"	d
Zfw_Set_Fn3s	fort/cwrap_fmangle.h	401;"	d
Zfw_Set_Fn3s	fort/cwrap_fmangle.h	45;"	d
Zfw_Set_Fn4f	fort/cwrap.c	/^int Zfw_Set_Fn4f(int *addr_lb, int *nbytes, ZOLTAN_FN_TYPE *type, void (*fn)(),$/;"	f
Zfw_Set_Fn4f	fort/cwrap_fmangle.h	156;"	d
Zfw_Set_Fn4f	fort/cwrap_fmangle.h	215;"	d
Zfw_Set_Fn4f	fort/cwrap_fmangle.h	274;"	d
Zfw_Set_Fn4f	fort/cwrap_fmangle.h	332;"	d
Zfw_Set_Fn4f	fort/cwrap_fmangle.h	34;"	d
Zfw_Set_Fn4f	fort/cwrap_fmangle.h	390;"	d
Zfw_Set_Fn4f	fort/cwrap_fmangle.h	97;"	d
Zfw_Set_Fn4s	fort/cwrap.c	/^int Zfw_Set_Fn4s(int *addr_lb, int *nbytes, ZOLTAN_FN_TYPE *type, void (*fn)(),$/;"	f
Zfw_Set_Fn4s	fort/cwrap_fmangle.h	109;"	d
Zfw_Set_Fn4s	fort/cwrap_fmangle.h	168;"	d
Zfw_Set_Fn4s	fort/cwrap_fmangle.h	227;"	d
Zfw_Set_Fn4s	fort/cwrap_fmangle.h	286;"	d
Zfw_Set_Fn4s	fort/cwrap_fmangle.h	344;"	d
Zfw_Set_Fn4s	fort/cwrap_fmangle.h	402;"	d
Zfw_Set_Fn4s	fort/cwrap_fmangle.h	46;"	d
Zfw_Set_Fn5f	fort/cwrap.c	/^int Zfw_Set_Fn5f(int *addr_lb, int *nbytes, ZOLTAN_FN_TYPE *type, void (*fn)(),$/;"	f
Zfw_Set_Fn5f	fort/cwrap_fmangle.h	157;"	d
Zfw_Set_Fn5f	fort/cwrap_fmangle.h	216;"	d
Zfw_Set_Fn5f	fort/cwrap_fmangle.h	275;"	d
Zfw_Set_Fn5f	fort/cwrap_fmangle.h	333;"	d
Zfw_Set_Fn5f	fort/cwrap_fmangle.h	35;"	d
Zfw_Set_Fn5f	fort/cwrap_fmangle.h	391;"	d
Zfw_Set_Fn5f	fort/cwrap_fmangle.h	98;"	d
Zfw_Set_Fn5s	fort/cwrap.c	/^int Zfw_Set_Fn5s(int *addr_lb, int *nbytes, ZOLTAN_FN_TYPE *type, void (*fn)(),$/;"	f
Zfw_Set_Fn5s	fort/cwrap_fmangle.h	110;"	d
Zfw_Set_Fn5s	fort/cwrap_fmangle.h	169;"	d
Zfw_Set_Fn5s	fort/cwrap_fmangle.h	228;"	d
Zfw_Set_Fn5s	fort/cwrap_fmangle.h	287;"	d
Zfw_Set_Fn5s	fort/cwrap_fmangle.h	345;"	d
Zfw_Set_Fn5s	fort/cwrap_fmangle.h	403;"	d
Zfw_Set_Fn5s	fort/cwrap_fmangle.h	47;"	d
Zfw_Set_Fn6f	fort/cwrap.c	/^int Zfw_Set_Fn6f(int *addr_lb, int *nbytes, ZOLTAN_FN_TYPE *type, void (*fn)(),$/;"	f
Zfw_Set_Fn6f	fort/cwrap_fmangle.h	158;"	d
Zfw_Set_Fn6f	fort/cwrap_fmangle.h	217;"	d
Zfw_Set_Fn6f	fort/cwrap_fmangle.h	276;"	d
Zfw_Set_Fn6f	fort/cwrap_fmangle.h	334;"	d
Zfw_Set_Fn6f	fort/cwrap_fmangle.h	36;"	d
Zfw_Set_Fn6f	fort/cwrap_fmangle.h	392;"	d
Zfw_Set_Fn6f	fort/cwrap_fmangle.h	99;"	d
Zfw_Set_Fn6s	fort/cwrap.c	/^int Zfw_Set_Fn6s(int *addr_lb, int *nbytes, ZOLTAN_FN_TYPE *type, void (*fn)(),$/;"	f
Zfw_Set_Fn6s	fort/cwrap_fmangle.h	111;"	d
Zfw_Set_Fn6s	fort/cwrap_fmangle.h	170;"	d
Zfw_Set_Fn6s	fort/cwrap_fmangle.h	229;"	d
Zfw_Set_Fn6s	fort/cwrap_fmangle.h	288;"	d
Zfw_Set_Fn6s	fort/cwrap_fmangle.h	346;"	d
Zfw_Set_Fn6s	fort/cwrap_fmangle.h	404;"	d
Zfw_Set_Fn6s	fort/cwrap_fmangle.h	48;"	d
Zfw_Set_Fn7f	fort/cwrap.c	/^int Zfw_Set_Fn7f(int *addr_lb, int *nbytes, ZOLTAN_FN_TYPE *type, void (*fn)(),$/;"	f
Zfw_Set_Fn7f	fort/cwrap_fmangle.h	100;"	d
Zfw_Set_Fn7f	fort/cwrap_fmangle.h	159;"	d
Zfw_Set_Fn7f	fort/cwrap_fmangle.h	218;"	d
Zfw_Set_Fn7f	fort/cwrap_fmangle.h	277;"	d
Zfw_Set_Fn7f	fort/cwrap_fmangle.h	335;"	d
Zfw_Set_Fn7f	fort/cwrap_fmangle.h	37;"	d
Zfw_Set_Fn7f	fort/cwrap_fmangle.h	393;"	d
Zfw_Set_Fn7s	fort/cwrap.c	/^int Zfw_Set_Fn7s(int *addr_lb, int *nbytes, ZOLTAN_FN_TYPE *type, void (*fn)(),$/;"	f
Zfw_Set_Fn7s	fort/cwrap_fmangle.h	112;"	d
Zfw_Set_Fn7s	fort/cwrap_fmangle.h	171;"	d
Zfw_Set_Fn7s	fort/cwrap_fmangle.h	230;"	d
Zfw_Set_Fn7s	fort/cwrap_fmangle.h	289;"	d
Zfw_Set_Fn7s	fort/cwrap_fmangle.h	347;"	d
Zfw_Set_Fn7s	fort/cwrap_fmangle.h	405;"	d
Zfw_Set_Fn7s	fort/cwrap_fmangle.h	49;"	d
Zfw_Set_Fn8f	fort/cwrap.c	/^int Zfw_Set_Fn8f(int *addr_lb, int *nbytes, ZOLTAN_FN_TYPE *type, void (*fn)(),$/;"	f
Zfw_Set_Fn8f	fort/cwrap_fmangle.h	101;"	d
Zfw_Set_Fn8f	fort/cwrap_fmangle.h	160;"	d
Zfw_Set_Fn8f	fort/cwrap_fmangle.h	219;"	d
Zfw_Set_Fn8f	fort/cwrap_fmangle.h	278;"	d
Zfw_Set_Fn8f	fort/cwrap_fmangle.h	336;"	d
Zfw_Set_Fn8f	fort/cwrap_fmangle.h	38;"	d
Zfw_Set_Fn8f	fort/cwrap_fmangle.h	394;"	d
Zfw_Set_Fn8s	fort/cwrap.c	/^int Zfw_Set_Fn8s(int *addr_lb, int *nbytes, ZOLTAN_FN_TYPE *type, void (*fn)(),$/;"	f
Zfw_Set_Fn8s	fort/cwrap_fmangle.h	113;"	d
Zfw_Set_Fn8s	fort/cwrap_fmangle.h	172;"	d
Zfw_Set_Fn8s	fort/cwrap_fmangle.h	231;"	d
Zfw_Set_Fn8s	fort/cwrap_fmangle.h	290;"	d
Zfw_Set_Fn8s	fort/cwrap_fmangle.h	348;"	d
Zfw_Set_Fn8s	fort/cwrap_fmangle.h	406;"	d
Zfw_Set_Fn8s	fort/cwrap_fmangle.h	50;"	d
Zfw_Set_Fn9f	fort/cwrap.c	/^int Zfw_Set_Fn9f(int *addr_lb, int *nbytes, ZOLTAN_FN_TYPE *type, void (*fn)(),$/;"	f
Zfw_Set_Fn9f	fort/cwrap_fmangle.h	102;"	d
Zfw_Set_Fn9f	fort/cwrap_fmangle.h	161;"	d
Zfw_Set_Fn9f	fort/cwrap_fmangle.h	220;"	d
Zfw_Set_Fn9f	fort/cwrap_fmangle.h	279;"	d
Zfw_Set_Fn9f	fort/cwrap_fmangle.h	337;"	d
Zfw_Set_Fn9f	fort/cwrap_fmangle.h	395;"	d
Zfw_Set_Fn9f	fort/cwrap_fmangle.h	39;"	d
Zfw_Set_Fn9s	fort/cwrap.c	/^int Zfw_Set_Fn9s(int *addr_lb, int *nbytes, ZOLTAN_FN_TYPE *type, void (*fn)(),$/;"	f
Zfw_Set_Fn9s	fort/cwrap_fmangle.h	114;"	d
Zfw_Set_Fn9s	fort/cwrap_fmangle.h	173;"	d
Zfw_Set_Fn9s	fort/cwrap_fmangle.h	232;"	d
Zfw_Set_Fn9s	fort/cwrap_fmangle.h	291;"	d
Zfw_Set_Fn9s	fort/cwrap_fmangle.h	349;"	d
Zfw_Set_Fn9s	fort/cwrap_fmangle.h	407;"	d
Zfw_Set_Fn9s	fort/cwrap_fmangle.h	51;"	d
Zfw_Set_FnAf	fort/cwrap.c	/^int Zfw_Set_FnAf(int *addr_lb, int *nbytes, ZOLTAN_FN_TYPE *type, void (*fn)(),$/;"	f
Zfw_Set_FnAf	fort/cwrap_fmangle.h	103;"	d
Zfw_Set_FnAf	fort/cwrap_fmangle.h	162;"	d
Zfw_Set_FnAf	fort/cwrap_fmangle.h	221;"	d
Zfw_Set_FnAf	fort/cwrap_fmangle.h	280;"	d
Zfw_Set_FnAf	fort/cwrap_fmangle.h	338;"	d
Zfw_Set_FnAf	fort/cwrap_fmangle.h	396;"	d
Zfw_Set_FnAf	fort/cwrap_fmangle.h	40;"	d
Zfw_Set_FnAs	fort/cwrap.c	/^int Zfw_Set_FnAs(int *addr_lb, int *nbytes, ZOLTAN_FN_TYPE *type, void (*fn)(),$/;"	f
Zfw_Set_FnAs	fort/cwrap_fmangle.h	115;"	d
Zfw_Set_FnAs	fort/cwrap_fmangle.h	174;"	d
Zfw_Set_FnAs	fort/cwrap_fmangle.h	233;"	d
Zfw_Set_FnAs	fort/cwrap_fmangle.h	292;"	d
Zfw_Set_FnAs	fort/cwrap_fmangle.h	350;"	d
Zfw_Set_FnAs	fort/cwrap_fmangle.h	408;"	d
Zfw_Set_FnAs	fort/cwrap_fmangle.h	52;"	d
Zfw_Set_FnBf	fort/cwrap.c	/^int Zfw_Set_FnBf(int *addr_lb, int *nbytes, ZOLTAN_FN_TYPE *type, void (*fn)(),$/;"	f
Zfw_Set_FnBf	fort/cwrap_fmangle.h	104;"	d
Zfw_Set_FnBf	fort/cwrap_fmangle.h	163;"	d
Zfw_Set_FnBf	fort/cwrap_fmangle.h	222;"	d
Zfw_Set_FnBf	fort/cwrap_fmangle.h	281;"	d
Zfw_Set_FnBf	fort/cwrap_fmangle.h	339;"	d
Zfw_Set_FnBf	fort/cwrap_fmangle.h	397;"	d
Zfw_Set_FnBf	fort/cwrap_fmangle.h	41;"	d
Zfw_Set_FnBs	fort/cwrap.c	/^int Zfw_Set_FnBs(int *addr_lb, int *nbytes, ZOLTAN_FN_TYPE *type, void (*fn)(),$/;"	f
Zfw_Set_FnBs	fort/cwrap_fmangle.h	116;"	d
Zfw_Set_FnBs	fort/cwrap_fmangle.h	175;"	d
Zfw_Set_FnBs	fort/cwrap_fmangle.h	234;"	d
Zfw_Set_FnBs	fort/cwrap_fmangle.h	293;"	d
Zfw_Set_FnBs	fort/cwrap_fmangle.h	351;"	d
Zfw_Set_FnBs	fort/cwrap_fmangle.h	409;"	d
Zfw_Set_FnBs	fort/cwrap_fmangle.h	53;"	d
Zfw_Set_Param	fort/cwrap.c	/^int Zfw_Set_Param(int *addr_lb, int *nbytes, int *int_param_name,$/;"	f
Zfw_Set_Param	fort/cwrap_fmangle.h	117;"	d
Zfw_Set_Param	fort/cwrap_fmangle.h	176;"	d
Zfw_Set_Param	fort/cwrap_fmangle.h	235;"	d
Zfw_Set_Param	fort/cwrap_fmangle.h	294;"	d
Zfw_Set_Param	fort/cwrap_fmangle.h	352;"	d
Zfw_Set_Param	fort/cwrap_fmangle.h	410;"	d
Zfw_Set_Param	fort/cwrap_fmangle.h	54;"	d
Zfw_Set_Param_Vec	fort/cwrap.c	/^int Zfw_Set_Param_Vec(int *addr_lb, int *nbytes, int *int_param_name,$/;"	f
Zfw_Set_Param_Vec	fort/cwrap_fmangle.h	118;"	d
Zfw_Set_Param_Vec	fort/cwrap_fmangle.h	177;"	d
Zfw_Set_Param_Vec	fort/cwrap_fmangle.h	236;"	d
Zfw_Set_Param_Vec	fort/cwrap_fmangle.h	295;"	d
Zfw_Set_Param_Vec	fort/cwrap_fmangle.h	353;"	d
Zfw_Set_Param_Vec	fort/cwrap_fmangle.h	411;"	d
Zfw_Set_Param_Vec	fort/cwrap_fmangle.h	55;"	d
Zoltan	include/zoltan_cpp.h	/^  Zoltan (const MPI_Comm &communicator = MPI_COMM_WORLD) $/;"	f	class:Zoltan
Zoltan	include/zoltan_cpp.h	/^  Zoltan (const Zoltan &zz)$/;"	f	class:Zoltan
Zoltan	include/zoltan_cpp.h	/^class Zoltan {$/;"	c
ZoltanSpace	ZoltanComponent/CCA_Wrapper/BaseLB.h	/^namespace ZoltanSpace$/;"	n
ZoltanSpace	ZoltanComponent/CCA_Wrapper/EntityListImpl.h	/^namespace ZoltanSpace$/;"	n
ZoltanSpace	ZoltanComponent/CCA_Wrapper/HSFC.h	/^namespace ZoltanSpace$/;"	n
ZoltanSpace	ZoltanComponent/CCA_Wrapper/OctTree.h	/^namespace ZoltanSpace$/;"	n
ZoltanSpace	ZoltanComponent/CCA_Wrapper/ParMetis.h	/^namespace ZoltanSpace$/;"	n
ZoltanSpace	ZoltanComponent/CCA_Wrapper/PartitionerFactory.h	/^namespace ZoltanSpace$/;"	n
ZoltanSpace	ZoltanComponent/CCA_Wrapper/RCB.h	/^namespace ZoltanSpace$/;"	n
ZoltanSpace	ZoltanComponent/CCA_Wrapper/RIB.h	/^namespace ZoltanSpace$/;"	n
ZoltanSpace	ZoltanComponent/CCA_Wrapper/ZoltanApplQueryFunc.cpp	/^namespace ZoltanSpace$/;"	n	file:
ZoltanTestSpace	ZoltanComponent/TestComponents/Driver.h	/^namespace ZoltanTestSpace$/;"	n
ZoltanTestSpace	ZoltanComponent/TestComponents/IOPort.h	/^namespace ZoltanTestSpace$/;"	n
ZoltanTestSpace	ZoltanComponent/TestComponents/Mesh.h	/^namespace ZoltanTestSpace$/;"	n
ZoltanToMine	ZoltanComponent/TestComponents/Driver.h	/^    std::map< std::string, std::string> ZoltanToMine ;$/;"	m	class:ZoltanTestSpace::Driver
Zoltan_Align	Utilities/shared/zoltan_align.c	/^int Zoltan_Align(int a)$/;"	f
Zoltan_AllReduceInPlace	zz/zz_util.c	/^Zoltan_AllReduceInPlace(void *sndrcvbuf, int count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm)$/;"	f
Zoltan_Arc	matrix/matrix.h	/^} Zoltan_Arc;$/;"	t	typeref:struct:Zoltan_Arc_
Zoltan_Arc_	matrix/matrix.h	/^typedef struct Zoltan_Arc_ {$/;"	s
Zoltan_Array_Alloc	Utilities/Memory/mem.c	/^double *Zoltan_Array_Alloc(char *file, int lineno, int numdim, ...)$/;"	f
Zoltan_Assign_Param_Vals	params/assign_param_vals.c	/^int      Zoltan_Assign_Param_Vals($/;"	f
Zoltan_Bind_Param	params/bind_param.c	/^int       Zoltan_Bind_Param($/;"	f
Zoltan_Bind_Param_Vec	params/bind_param.c	/^int       Zoltan_Bind_Param_Vec($/;"	f
Zoltan_Block	simple/block.c	/^int Zoltan_Block($/;"	f
Zoltan_Border_Obj_List_Fort_Wrapper	fort/cwrap.c	/^void Zoltan_Border_Obj_List_Fort_Wrapper(void *data, $/;"	f
Zoltan_Build_Graph	parmetis/build_graph.c	/^int Zoltan_Build_Graph(ZZ *zz, int *graph_type, int check_graph,$/;"	f
Zoltan_Build_Machine_Desc	ha/build_machine_desc.c	/^int Zoltan_Build_Machine_Desc($/;"	f
Zoltan_Calloc	Utilities/Memory/mem.c	/^double *Zoltan_Calloc (size_t num, size_t size, char *filename, int lineno)$/;"	f
Zoltan_Check_Param	params/check_param.c	/^int       Zoltan_Check_Param($/;"	f
Zoltan_Child_List_Fort_Wrapper	fort/cwrap.c	/^void Zoltan_Child_List_Fort_Wrapper(void *data, $/;"	f
Zoltan_Child_Weight_Fort_Wrapper	fort/cwrap.c	/^void Zoltan_Child_Weight_Fort_Wrapper(void *data, $/;"	f
Zoltan_Clean_String	zz/zz_util.c	/^int Zoltan_Clean_String($/;"	f
Zoltan_Coarse_Obj_List_Fort_Wrapper	fort/cwrap.c	/^void Zoltan_Coarse_Obj_List_Fort_Wrapper(void *data, $/;"	f
Zoltan_Color	coloring/coloring.c	/^int Zoltan_Color($/;"	f
Zoltan_Color_Set_Param	coloring/coloring.c	/^int Zoltan_Color_Set_Param($/;"	f
Zoltan_Color_Test	coloring/color_test.c	/^int Zoltan_Color_Test($/;"	f
Zoltan_Comm	include/zoltan_comm_cpp.h	/^  Zoltan_Comm (const Zoltan_Comm &plan) \/\/ Copy constructor$/;"	f	class:Zoltan_Comm
Zoltan_Comm	include/zoltan_comm_cpp.h	/^  Zoltan_Comm()$/;"	f	class:Zoltan_Comm
Zoltan_Comm	include/zoltan_comm_cpp.h	/^  Zoltan_Comm(const int &nvals, int *assign, const MPI_Comm &comm, $/;"	f	class:Zoltan_Comm
Zoltan_Comm	include/zoltan_comm_cpp.h	/^class Zoltan_Comm {$/;"	c
Zoltan_Comm_Copy	Utilities/Communication/comm_create.c	/^ZOLTAN_COMM_OBJ *Zoltan_Comm_Copy(ZOLTAN_COMM_OBJ *from)$/;"	f
Zoltan_Comm_Copy_To	Utilities/Communication/comm_create.c	/^int Zoltan_Comm_Copy_To(ZOLTAN_COMM_OBJ **toptr, ZOLTAN_COMM_OBJ *from)$/;"	f
Zoltan_Comm_Create	Utilities/Communication/comm_create.c	/^int Zoltan_Comm_Create($/;"	f
Zoltan_Comm_Destroy	Utilities/Communication/comm_destroy.c	/^int       Zoltan_Comm_Destroy($/;"	f
Zoltan_Comm_Do	Utilities/Communication/comm_do.c	/^int       Zoltan_Comm_Do($/;"	f
Zoltan_Comm_Do_AlltoAll	Utilities/Communication/comm_do.c	/^int       Zoltan_Comm_Do_AlltoAll($/;"	f
Zoltan_Comm_Do_Post	Utilities/Communication/comm_do.c	/^int       Zoltan_Comm_Do_Post($/;"	f
Zoltan_Comm_Do_Reverse	Utilities/Communication/comm_do_reverse.c	/^int Zoltan_Comm_Do_Reverse($/;"	f
Zoltan_Comm_Do_Reverse_Post	Utilities/Communication/comm_do_reverse.c	/^int       Zoltan_Comm_Do_Reverse_Post($/;"	f
Zoltan_Comm_Do_Reverse_Wait	Utilities/Communication/comm_do_reverse.c	/^int Zoltan_Comm_Do_Reverse_Wait($/;"	f
Zoltan_Comm_Do_Wait	Utilities/Communication/comm_do.c	/^int       Zoltan_Comm_Do_Wait($/;"	f
Zoltan_Comm_Exchange_Sizes	Utilities/Communication/comm_exchange_sizes.c	/^int       Zoltan_Comm_Exchange_Sizes($/;"	f
Zoltan_Comm_Info	Utilities/Communication/comm_info.c	/^int Zoltan_Comm_Info($/;"	f
Zoltan_Comm_Invert_Map	Utilities/Communication/comm_invert_map.c	/^int       Zoltan_Comm_Invert_Map($/;"	f
Zoltan_Comm_Invert_Plan	Utilities/Communication/comm_invert_plan.c	/^int Zoltan_Comm_Invert_Plan($/;"	f
Zoltan_Comm_Obj	Utilities/Communication/comm.h	/^struct Zoltan_Comm_Obj {	\/* data for mapping between decompositions *\/$/;"	s
Zoltan_Comm_Resize	Utilities/Communication/comm_resize.c	/^int       Zoltan_Comm_Resize($/;"	f
Zoltan_Comm_Sort_Ints	Utilities/Communication/comm_sort_ints.c	/^int  Zoltan_Comm_Sort_Ints($/;"	f
Zoltan_Compare_Ints	parmetis/verify_graph.c	/^static int Zoltan_Compare_Ints(const void *key, const void *arg)$/;"	f	file:
Zoltan_Compute_Destinations	lb/lb_invert.c	/^int Zoltan_Compute_Destinations($/;"	f
Zoltan_Copy	zz/zz_struct.c	/^ZZ *Zoltan_Copy(ZZ const *from)$/;"	f
Zoltan_Copy_Machine_Desc	ha/build_machine_desc.c	/^int Zoltan_Copy_Machine_Desc(MachineType **to, MachineType const *from)$/;"	f
Zoltan_Copy_Params	params/free_params.c	/^int Zoltan_Copy_Params(PARAM_LIST **to, PARAM_LIST const *from)$/;"	f
Zoltan_Copy_To	zz/zz_struct.c	/^int Zoltan_Copy_To(ZZ *to, ZZ const *from)$/;"	f
Zoltan_Create	zz/zz_struct.c	/^ZZ *Zoltan_Create(MPI_Comm communicator)$/;"	f
Zoltan_Current	fort/cwrap.c	/^static struct Zoltan_Struct *Zoltan_Current;$/;"	v	typeref:struct:Zoltan_Struct	file:
Zoltan_Cyclic	simple/cyclic.c	/^int Zoltan_Cyclic($/;"	f
Zoltan_DD	include/zoltan_dd_cpp.h	/^  Zoltan_DD (const Zoltan_DD &dd) \/\/ Copy constructor$/;"	f	class:Zoltan_DD
Zoltan_DD	include/zoltan_dd_cpp.h	/^  Zoltan_DD()$/;"	f	class:Zoltan_DD
Zoltan_DD	include/zoltan_dd_cpp.h	/^  Zoltan_DD(const MPI_Comm &comm, const int &num_gid, const int &num_lid, $/;"	f	class:Zoltan_DD
Zoltan_DD	include/zoltan_dd_cpp.h	/^class Zoltan_DD {$/;"	c
Zoltan_DD_Copy	Utilities/DDirectory/DD_Create.c	/^Zoltan_DD_Directory *Zoltan_DD_Copy(Zoltan_DD_Directory *from)$/;"	f
Zoltan_DD_Copy_To	Utilities/DDirectory/DD_Create.c	/^int Zoltan_DD_Copy_To(Zoltan_DD_Directory **toptr, Zoltan_DD_Directory *from)$/;"	f
Zoltan_DD_Create	Utilities/DDirectory/DD_Create.c	/^int Zoltan_DD_Create ($/;"	f
Zoltan_DD_Destroy	Utilities/DDirectory/DD_Destroy.c	/^void Zoltan_DD_Destroy ($/;"	f
Zoltan_DD_Directory	include/zoltan_dd.h	/^typedef struct Zoltan_DD_Struct Zoltan_DD_Directory;$/;"	t	typeref:struct:Zoltan_DD_Struct
Zoltan_DD_Find	Utilities/DDirectory/DD_Find.c	/^int Zoltan_DD_Find ($/;"	f
Zoltan_DD_Hash2	Utilities/DDirectory/DD_Hash2.c	/^unsigned int Zoltan_DD_Hash2(ZOLTAN_ID_PTR key, int num_id_entries, unsigned int n, void* hashdata)$/;"	f
Zoltan_DD_Print	Utilities/DDirectory/DD_Print.c	/^int Zoltan_DD_Print ($/;"	f
Zoltan_DD_Remove	Utilities/DDirectory/DD_Remove.c	/^int Zoltan_DD_Remove ($/;"	f
Zoltan_DD_Set_Hash_Fn	Utilities/DDirectory/DD_Set_Hash_Fn.c	/^int Zoltan_DD_Set_Hash_Fn ($/;"	f
Zoltan_DD_Set_Neighbor_Hash_Fn1	Utilities/DDirectory/DD_Set_Neighbor_Hash_Fn1.c	/^int Zoltan_DD_Set_Neighbor_Hash_Fn1 ($/;"	f
Zoltan_DD_Set_Neighbor_Hash_Fn2	Utilities/DDirectory/DD_Set_Neighbor_Hash_Fn2.c	/^int Zoltan_DD_Set_Neighbor_Hash_Fn2 ($/;"	f
Zoltan_DD_Set_Neighbor_Hash_Fn3	Utilities/DDirectory/DD_Set_Neighbor_Hash_Fn3.c	/^int Zoltan_DD_Set_Neighbor_Hash_Fn3 ($/;"	f
Zoltan_DD_Stats	Utilities/DDirectory/DD_Stats.c	/^void Zoltan_DD_Stats ($/;"	f
Zoltan_DD_Struct	Utilities/DDirectory/DD.h	/^struct Zoltan_DD_Struct {$/;"	s
Zoltan_DD_Update	Utilities/DDirectory/DD_Update.c	/^int Zoltan_DD_Update ($/;"	f
Zoltan_DD_default_cleanup	Utilities/DDirectory/DD_Hash2.c	/^void Zoltan_DD_default_cleanup (void *hashdata)$/;"	f
Zoltan_DOUBLE	fort/ztypes.f90	/^   Zoltan_FLOAT = selected_real_kind(6), &$/;"	v	module:zoltan_types
Zoltan_Data	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_loadbal.c	/^} Zoltan_Data;$/;"	v	typeref:struct:__anon9	file:
Zoltan_Destroy	zz/zz_struct.c	/^void Zoltan_Destroy(ZZ **zz)$/;"	f
Zoltan_Distribute_LinearY	matrix/matrix_distribute.c	/^int Zoltan_Distribute_LinearY (ZZ * zz, PHGComm *layout)$/;"	f
Zoltan_Distribute_Square	matrix/matrix_distribute.c	/^int Zoltan_Distribute_Square (ZZ * zz, PHGComm *layout)$/;"	f
Zoltan_Distribute_layout	matrix/matrix_distribute.c	/^Zoltan_Distribute_layout (ZZ *zz, const PHGComm * const inlayout,$/;"	f
Zoltan_Divide_Machine	ha/divide_machine.c	/^int Zoltan_Divide_Machine($/;"	f
Zoltan_Divide_Parts	ha/divide_machine.c	/^int Zoltan_Divide_Parts($/;"	f
Zoltan_Drum	ha/ha_drum.h	/^typedef struct Zoltan_Drum_Struct Zoltan_Drum;$/;"	t	typeref:struct:Zoltan_Drum_Struct
Zoltan_Drum_Copy_Struct	ha/ha_drum.c	/^void Zoltan_Drum_Copy_Struct(struct Zoltan_Drum_Struct *to,$/;"	f
Zoltan_Drum_Create_Model	ha/ha_drum.c	/^int Zoltan_Drum_Create_Model(ZZ *zz) {$/;"	f
Zoltan_Drum_Free_Structure	ha/ha_drum.c	/^void Zoltan_Drum_Free_Structure(ZZ *zz) {$/;"	f
Zoltan_Drum_Init	ha/ha_drum.c	/^int Zoltan_Drum_Init(ZZ *zz) {$/;"	f
Zoltan_Drum_Init_Struct	ha/ha_drum.c	/^int Zoltan_Drum_Init_Struct(struct Zoltan_Drum_Struct *zds) {$/;"	f
Zoltan_Drum_Set_Param	ha/ha_drum.c	/^int Zoltan_Drum_Set_Param($/;"	f
Zoltan_Drum_Set_Part_Sizes	ha/ha_drum.c	/^int Zoltan_Drum_Set_Part_Sizes(ZZ *zz) {$/;"	f
Zoltan_Drum_Start_Monitors	ha/ha_drum.c	/^int Zoltan_Drum_Start_Monitors(ZZ *zz) {$/;"	f
Zoltan_Drum_Stop_Monitors	ha/ha_drum.c	/^int Zoltan_Drum_Stop_Monitors(ZZ *zz) {$/;"	f
Zoltan_Drum_Struct	ha/ha_drum.h	/^struct Zoltan_Drum_Struct {$/;"	s
Zoltan_Edge_List_Fort_Wrapper	fort/cwrap.c	/^void Zoltan_Edge_List_Fort_Wrapper(void *data, $/;"	f
Zoltan_Edge_List_Multi_Fort_Wrapper	fort/cwrap.c	/^void Zoltan_Edge_List_Multi_Fort_Wrapper(void *data, $/;"	f
Zoltan_FLOAT	fort/ztypes.f90	/^   Zoltan_INT_PTR = selected_int_kind(17), &$/;"	v	module:zoltan_types
Zoltan_First_Border_Obj_Fort_Wrapper	fort/cwrap.c	/^int Zoltan_First_Border_Obj_Fort_Wrapper(void *data, $/;"	f
Zoltan_First_Coarse_Obj_Fort_Wrapper	fort/cwrap.c	/^int Zoltan_First_Coarse_Obj_Fort_Wrapper(void *data, $/;"	f
Zoltan_First_Obj_Fort_Wrapper	fort/cwrap.c	/^int Zoltan_First_Obj_Fort_Wrapper(void *data, $/;"	f
Zoltan_Fixed_Obj_List_Fort_Wrapper	fort/cwrap.c	/^void Zoltan_Fixed_Obj_List_Fort_Wrapper(void *data,$/;"	f
Zoltan_Fn_Type	include/zoltan.h	/^enum Zoltan_Fn_Type {$/;"	g
Zoltan_Fort_Free_int	all/all_allo.c	/^static ZOLTAN_FORT_FREE_INT_FN *Zoltan_Fort_Free_int;$/;"	v	file:
Zoltan_Fort_Malloc_Set_Struct	all/all_allo.c	/^static ZOLTAN_FORT_MALLOC_SET_STRUCT_FN *Zoltan_Fort_Malloc_Set_Struct;$/;"	v	file:
Zoltan_Fort_Malloc_int	all/all_allo.c	/^static ZOLTAN_FORT_MALLOC_INT_FN *Zoltan_Fort_Malloc_int;$/;"	v	file:
Zoltan_Free	Utilities/Memory/mem.c	/^void Zoltan_Free (void **ptr, char *filename, int lineno)$/;"	f
Zoltan_Free_Machine_Desc	ha/build_machine_desc.c	/^int Zoltan_Free_Machine_Desc(MachineType **desc)$/;"	f
Zoltan_Free_Params	params/free_params.c	/^void Zoltan_Free_Params($/;"	f
Zoltan_Free_Structures	zz/zz_struct.c	/^static void Zoltan_Free_Structures($/;"	f	file:
Zoltan_Free_Zoltan_Struct_Members	zz/zz_struct.c	/^static void Zoltan_Free_Zoltan_Struct_Members(ZZ *zz)$/;"	f	file:
Zoltan_G2LHash_Create	coloring/g2l_hash.c	/^int Zoltan_G2LHash_Create(G2LHash *hash, int maxsize, int base, int nlvtx)$/;"	f
Zoltan_G2LHash_Destroy	coloring/g2l_hash.c	/^int Zoltan_G2LHash_Destroy(G2LHash *hash)$/;"	f
Zoltan_G2LHash_G2L	coloring/g2l_hash.c	/^int Zoltan_G2LHash_G2L(G2LHash *hash, int gno)$/;"	f
Zoltan_G2LHash_Insert	coloring/g2l_hash.c	/^int Zoltan_G2LHash_Insert(G2LHash *hash, int gno)$/;"	f
Zoltan_G2LHash_L2G	coloring/g2l_hash.h	54;"	d
Zoltan_GenPrime	coloring/g2l_hash.c	/^int Zoltan_GenPrime(int stop, int *prime_num)$/;"	f
Zoltan_Generate_Files	zz/zz_gen_files.c	/^int Zoltan_Generate_Files(ZZ *zz, char *fname, int base_index,$/;"	f
Zoltan_Geom_Fort_Wrapper	fort/cwrap.c	/^void Zoltan_Geom_Fort_Wrapper($/;"	f
Zoltan_Geom_Multi_Fort_Wrapper	fort/cwrap.c	/^void Zoltan_Geom_Multi_Fort_Wrapper($/;"	f
Zoltan_Get_Coordinates	zz/zz_coord.c	/^int Zoltan_Get_Coordinates($/;"	f
Zoltan_Get_Distribution	order/perm.c	/^int Zoltan_Get_Distribution(ZZ *zz, int **vtxdist)$/;"	f
Zoltan_Get_Hypergraph_From_Queries	phg/phg_build_calls.c	/^int Zoltan_Get_Hypergraph_From_Queries($/;"	f
Zoltan_Get_Num_Edges_Per_Obj	parmetis/build_graph.c	/^int Zoltan_Get_Num_Edges_Per_Obj($/;"	f
Zoltan_Get_Obj_List	zz/zz_obj_list.c	/^int Zoltan_Get_Obj_List($/;"	f
Zoltan_Get_Obj_List_Special_Malloc	zz/zz_obj_list.c	/^int Zoltan_Get_Obj_List_Special_Malloc($/;"	f
Zoltan_Get_Processor_Graph	order/perm.c	/^int Zoltan_Get_Processor_Graph(int *vtxdist, int p, int index)$/;"	f
Zoltan_Get_Processor_Name	ha/get_processor_name.c	/^int Zoltan_Get_Processor_Name($/;"	f
Zoltan_Graph	parmetis/third_library.c	/^int Zoltan_Graph($/;"	f
Zoltan_Graph_Package_Set_Param	parmetis/third_library.c	/^int Zoltan_Graph_Package_Set_Param($/;"	f
Zoltan_Graph_Queries	phg/phg_build_calls.c	/^int Zoltan_Graph_Queries( ZZ *zz, $/;"	f
Zoltan_HG_CS_Fort_Wrapper	fort/cwrap.c	/^void Zoltan_HG_CS_Fort_Wrapper(void *data, $/;"	f
Zoltan_HG_Check	phg/phg_hypergraph.c	/^int Zoltan_HG_Check ($/;"	f
Zoltan_HG_Create_Mirror	phg/phg_hypergraph.c	/^int Zoltan_HG_Create_Mirror ($/;"	f
Zoltan_HG_Edge_Wts_Fort_Wrapper	fort/cwrap.c	/^void Zoltan_HG_Edge_Wts_Fort_Wrapper(void *data,$/;"	f
Zoltan_HG_Get_Pins	zz/zz_gen_files.c	/^static int Zoltan_HG_Get_Pins(ZZ *zz, int *nEdges, int **edgeSize,$/;"	f	file:
Zoltan_HG_HGraph_Free	phg/phg_hypergraph.c	/^int Zoltan_HG_HGraph_Free($/;"	f
Zoltan_HG_HGraph_Init	phg/phg_hypergraph.c	/^void Zoltan_HG_HGraph_Init($/;"	f
Zoltan_HG_HGraph_Print	phg/phg_hypergraph.c	/^void Zoltan_HG_HGraph_Print($/;"	f
Zoltan_HG_Info	phg/phg_hypergraph.c	/^int Zoltan_HG_Info ($/;"	f
Zoltan_HG_Mirror	phg/phg_hypergraph.c	/^void Zoltan_HG_Mirror($/;"	f
Zoltan_HG_Print	phg/phg_hypergraph.c	/^void Zoltan_HG_Print($/;"	f
Zoltan_HG_Size_CS_Fort_Wrapper	fort/cwrap.c	/^void Zoltan_HG_Size_CS_Fort_Wrapper(void *data, $/;"	f
Zoltan_HG_Size_Edge_Wts_Fort_Wrapper	fort/cwrap.c	/^void Zoltan_HG_Size_Edge_Wts_Fort_Wrapper(void *data, int *num_edges, int *ierr)$/;"	f
Zoltan_HG_move_vertex	phg/phg_refinement.c	/^int Zoltan_HG_move_vertex (HGraph *hg, int vertex, int sour, int dest,$/;"	f
Zoltan_HGraph	phg/phg_hypergraph.h	/^struct Zoltan_HGraph {$/;"	s
Zoltan_HSFC	hsfc/hsfc.c	/^int Zoltan_HSFC($/;"	f
Zoltan_HSFC_Box_Assign	hsfc/hsfc_box_assign.c	/^int Zoltan_HSFC_Box_Assign ($/;"	f
Zoltan_HSFC_Copy_Structure	hsfc/hsfc.c	/^int Zoltan_HSFC_Copy_Structure(ZZ *toZZ, ZZ const *fromZZ)$/;"	f
Zoltan_HSFC_Free_Structure	hsfc/hsfc.c	/^void Zoltan_HSFC_Free_Structure (ZZ *zz)$/;"	f
Zoltan_HSFC_Hilbert1d	hsfc/hsfc_hilbert.c	/^void Zoltan_HSFC_Hilbert1d (ZZ *zz, double *coord, double key)$/;"	f
Zoltan_HSFC_Hilbert1d	util/converters_for_JPDC_adaptive_mesh_experiments/chaco2chaco/hsfc_hilbert.c	/^void Zoltan_HSFC_Hilbert1d (double *coord, double key)$/;"	f
Zoltan_HSFC_Hilbert2d	hsfc/hsfc_hilbert.c	/^void Zoltan_HSFC_Hilbert2d (ZZ *zz, double *coord, double key)$/;"	f
Zoltan_HSFC_Hilbert2d	util/converters_for_JPDC_adaptive_mesh_experiments/chaco2chaco/hsfc_hilbert.c	/^void Zoltan_HSFC_Hilbert2d (double *coord, double key)$/;"	f
Zoltan_HSFC_Hilbert3d	hsfc/hsfc_hilbert.c	/^void Zoltan_HSFC_Hilbert3d (ZZ *zz, double *coord, double key)$/;"	f
Zoltan_HSFC_Hilbert3d	util/converters_for_JPDC_adaptive_mesh_experiments/chaco2chaco/hsfc_hilbert.c	/^void Zoltan_HSFC_Hilbert3d (double *coord, double key)$/;"	f
Zoltan_HSFC_InvHilbert1d	hsfc/hsfc_hilbert.c	/^double Zoltan_HSFC_InvHilbert1d (ZZ *zz, double *coord)$/;"	f
Zoltan_HSFC_InvHilbert1d	util/converters_for_JPDC_adaptive_mesh_experiments/chaco2chaco/hsfc_hilbert.c	/^double Zoltan_HSFC_InvHilbert1d (double *coord)$/;"	f
Zoltan_HSFC_InvHilbert2d	hsfc/hsfc_hilbert.c	/^double Zoltan_HSFC_InvHilbert2d (ZZ *zz, double *coord)$/;"	f
Zoltan_HSFC_InvHilbert2d	util/converters_for_JPDC_adaptive_mesh_experiments/chaco2chaco/hsfc_hilbert.c	/^double Zoltan_HSFC_InvHilbert2d (double *coord)$/;"	f
Zoltan_HSFC_InvHilbert3d	hsfc/hsfc_hilbert.c	/^double Zoltan_HSFC_InvHilbert3d (ZZ *zz, double *coord)$/;"	f
Zoltan_HSFC_InvHilbert3d	util/converters_for_JPDC_adaptive_mesh_experiments/chaco2chaco/hsfc_hilbert.c	/^double Zoltan_HSFC_InvHilbert3d (double *coord)$/;"	f
Zoltan_HSFC_Point_Assign	hsfc/hsfc_point_assign.c	/^int Zoltan_HSFC_Point_Assign ($/;"	f
Zoltan_HSFC_Print_Structure	hsfc/hsfc.c	/^void Zoltan_HSFC_Print_Structure(ZZ *zz)$/;"	f
Zoltan_HSFC_Set_Param	hsfc/hsfc.c	/^int Zoltan_HSFC_Set_Param (char *name, char *val)$/;"	f
Zoltan_HSFC_compare	hsfc/hsfc.c	/^int Zoltan_HSFC_compare (const void *key, const void *arg)$/;"	f
Zoltan_Hash	zz/zz_hash.c	/^unsigned int Zoltan_Hash(ZOLTAN_ID_PTR key, int num_id_entries, unsigned int n)$/;"	f
Zoltan_Heap_Change_Value	zz/zz_heap.c	/^int Zoltan_Heap_Change_Value (HEAP *h, int element, float value)$/;"	f
Zoltan_Heap_Check	zz/zz_heap.c	/^int Zoltan_Heap_Check (HEAP *h)$/;"	f
Zoltan_Heap_Clear	zz/zz_heap.c	/^void Zoltan_Heap_Clear (HEAP *h)$/;"	f
Zoltan_Heap_Count	zz/zz_heap.h	39;"	d
Zoltan_Heap_Empty	zz/zz_heap.h	33;"	d
Zoltan_Heap_Extract	zz/zz_heap.c	/^int Zoltan_Heap_Extract (HEAP *h, int element)$/;"	f
Zoltan_Heap_Extract_Max	zz/zz_heap.c	/^int Zoltan_Heap_Extract_Max (HEAP *h)$/;"	f
Zoltan_Heap_Free	zz/zz_heap.c	/^void Zoltan_Heap_Free (HEAP *h)$/;"	f
Zoltan_Heap_Has_Elem	zz/zz_heap.h	35;"	d
Zoltan_Heap_Init	zz/zz_heap.c	/^int Zoltan_Heap_Init (ZZ *zz, HEAP *h, int space)$/;"	f
Zoltan_Heap_Input	zz/zz_heap.c	/^int Zoltan_Heap_Input (HEAP *h, int element, float value)$/;"	f
Zoltan_Heap_Make	zz/zz_heap.c	/^int Zoltan_Heap_Make (HEAP *h)$/;"	f
Zoltan_Heap_Max_Value	zz/zz_heap.h	37;"	d
Zoltan_Heap_Not_Empty	zz/zz_heap.h	34;"	d
Zoltan_Heap_Peek_Max	zz/zz_heap.h	38;"	d
Zoltan_Heap_Value	zz/zz_heap.h	36;"	d
Zoltan_Help_Migrate	lb/lb_migrate.c	/^int Zoltan_Help_Migrate($/;"	f
Zoltan_Help_Migrate	lb/low_mem_lb_migrate.c	/^int Zoltan_Help_Migrate($/;"	f
Zoltan_Hier	hier/hier.c	/^int Zoltan_Hier($/;"	f
Zoltan_Hier_Check_Data	hier/hier.c	/^static void Zoltan_Hier_Check_Data(HierPartParams *hpp, int *ierr) {$/;"	f	file:
Zoltan_Hier_Copy_Structure	hier/hier_free_struct.c	/^int Zoltan_Hier_Copy_Structure($/;"	f
Zoltan_Hier_Edge_List_Fn	hier/hier.c	/^static void Zoltan_Hier_Edge_List_Fn(void *data, int num_gid_entries, $/;"	f	file:
Zoltan_Hier_Free_Structure	hier/hier_free_struct.c	/^void Zoltan_Hier_Free_Structure($/;"	f
Zoltan_Hier_Geom_Fn	hier/hier.c	/^static void Zoltan_Hier_Geom_Fn(void *data, int num_gid_entries, $/;"	f	file:
Zoltan_Hier_Initialize_Params	hier/hier.c	/^static int Zoltan_Hier_Initialize_Params(ZZ *zz, HierPartParams *hpp) {$/;"	f	file:
Zoltan_Hier_Method_Fort_Wrapper	fort/cwrap.c	/^void Zoltan_Hier_Method_Fort_Wrapper(void *data, int level, $/;"	f
Zoltan_Hier_Mid_Migrate_Fn	hier/hier.c	/^static void Zoltan_Hier_Mid_Migrate_Fn(void *data, int num_gid_entries,$/;"	f	file:
Zoltan_Hier_Num_Edges_Fn	hier/hier.c	/^static int Zoltan_Hier_Num_Edges_Fn(void *data, int num_gid_entries, $/;"	f	file:
Zoltan_Hier_Num_Geom_Fn	hier/hier.c	/^static int Zoltan_Hier_Num_Geom_Fn(void *data, int *ierr) {$/;"	f	file:
Zoltan_Hier_Num_Levels_Fort_Wrapper	fort/cwrap.c	/^int Zoltan_Hier_Num_Levels_Fort_Wrapper(void *data, int *ierr)$/;"	f
Zoltan_Hier_Num_Obj_Fn	hier/hier.c	/^static int Zoltan_Hier_Num_Obj_Fn(void *data, int *ierr) {$/;"	f	file:
Zoltan_Hier_Obj_List_Fn	hier/hier.c	/^static void Zoltan_Hier_Obj_List_Fn(void *data, int num_gid_entries,$/;"	f	file:
Zoltan_Hier_Obj_Size_Fn	hier/hier.c	/^static int Zoltan_Hier_Obj_Size_Fn(void *data, $/;"	f	file:
Zoltan_Hier_Pack_Obj_Fn	hier/hier.c	/^static void Zoltan_Hier_Pack_Obj_Fn(void *data, $/;"	f	file:
Zoltan_Hier_Part_Fort_Wrapper	fort/cwrap.c	/^int Zoltan_Hier_Part_Fort_Wrapper(void *data, int level, int *ierr)$/;"	f
Zoltan_Hier_Set_Param	hier/hier.c	/^int Zoltan_Hier_Set_Param($/;"	f
Zoltan_Hier_Unpack_Obj_Fn	hier/hier.c	/^static void Zoltan_Hier_Unpack_Obj_Fn(void *data, $/;"	f	file:
Zoltan_Hypergraph_Queries	phg/phg_build_calls.c	/^int Zoltan_Hypergraph_Queries(ZZ *zz, $/;"	f
Zoltan_INT	fort/lbfn.h	/^integer(Zoltan_INT), dimension(Zoltan_PTR_LENGTH) :: lb_addr$/;"	v
Zoltan_INT	fort/ztypes.f90	/^integer, parameter :: &$/;"	v	module:zoltan_types
Zoltan_INT_PTR	fort/ztypes.f90	/^   Zoltan_INT = selected_int_kind(9), &$/;"	v	module:zoltan_types
Zoltan_Init	zz/zz_struct.c	/^static void Zoltan_Init(ZZ* zz)$/;"	f	file:
Zoltan_Initialize	zz/zz_init.c	/^int Zoltan_Initialize(int argc, char **argv, float *ver)$/;"	f
Zoltan_Initialize_Transformation	zz/zz_coord.c	/^void Zoltan_Initialize_Transformation(ZZ_Transform *tr)$/;"	f
Zoltan_Input_HG_Free	phg/phg_hypergraph.c	/^int Zoltan_Input_HG_Free(ZHG *zhg)$/;"	f
Zoltan_Input_HG_Init	phg/phg_hypergraph.c	/^void Zoltan_Input_HG_Init(ZHG *zhg)$/;"	f
Zoltan_Inverse_Perm	order/perm.c	/^int Zoltan_Inverse_Perm($/;"	f
Zoltan_Invert_Lists	lb/lb_invert.c	/^int Zoltan_Invert_Lists($/;"	f
Zoltan_KVHash_Create	coloring/g2l_hash.c	/^int Zoltan_KVHash_Create(KVHash *hash, int maxsize)$/;"	f
Zoltan_KVHash_Destroy	coloring/g2l_hash.c	/^int Zoltan_KVHash_Destroy(KVHash *hash)$/;"	f
Zoltan_KVHash_GetValue	coloring/g2l_hash.c	/^int Zoltan_KVHash_GetValue(KVHash *hash, int key)    $/;"	f
Zoltan_KVHash_Insert	coloring/g2l_hash.c	/^int Zoltan_KVHash_Insert(KVHash *hash, int key, int value)$/;"	f
Zoltan_LB	lb/lb_balance.c	/^static int Zoltan_LB($/;"	f	file:
Zoltan_LB_Add_Part_Sizes_Weight	lb/lb_set_part_sizes.c	/^int Zoltan_LB_Add_Part_Sizes_Weight($/;"	f
Zoltan_LB_Balance	lb/lb_balance.c	/^int Zoltan_LB_Balance($/;"	f
Zoltan_LB_Box_Assign	lb/lb_box_assign.c	/^int Zoltan_LB_Box_Assign ($/;"	f
Zoltan_LB_Box_PP_Assign	lb/lb_box_assign.c	/^int Zoltan_LB_Box_PP_Assign ($/;"	f
Zoltan_LB_Build_PartDist	lb/lb_balance.c	/^int Zoltan_LB_Build_PartDist(ZZ *zz)$/;"	f
Zoltan_LB_Build_ProcDist	lb/lb_part2proc.c	/^static int Zoltan_LB_Build_ProcDist($/;"	f	file:
Zoltan_LB_Copy_Struct	lb/lb_copy.c	/^int Zoltan_LB_Copy_Struct(ZZ *toZZ, ZZ const *fromZZ)$/;"	f
Zoltan_LB_Eval	lb/lb_eval.c	/^int Zoltan_LB_Eval (ZZ *zzin, int print_stats, ZOLTAN_BALANCE_EVAL *obj, ZOLTAN_GRAPH_EVAL *graph, ZOLTAN_HG_EVAL *hg)$/;"	f
Zoltan_LB_Eval_Balance	lb/lb_eval.c	/^int Zoltan_LB_Eval_Balance(ZZ *zz, int print_stats, ZOLTAN_BALANCE_EVAL *eval)$/;"	f
Zoltan_LB_Eval_Graph	lb/lb_eval.c	/^int Zoltan_LB_Eval_Graph(ZZ *zz, int print_stats, ZOLTAN_GRAPH_EVAL *graph)$/;"	f
Zoltan_LB_Eval_HG	lb/lb_eval.c	/^int Zoltan_LB_Eval_HG(ZZ *zz, int print_stats, ZOLTAN_HG_EVAL *hg)$/;"	f
Zoltan_LB_Eval_Print_Balance	lb/lb_eval.c	/^void Zoltan_LB_Eval_Print_Balance(ZOLTAN_BALANCE_EVAL *lb)$/;"	f
Zoltan_LB_Eval_Print_Graph	lb/lb_eval.c	/^void Zoltan_LB_Eval_Print_Graph(ZOLTAN_GRAPH_EVAL *graph)$/;"	f
Zoltan_LB_Eval_Print_HG	lb/lb_eval.c	/^void Zoltan_LB_Eval_Print_HG(ZOLTAN_HG_EVAL *hg)$/;"	f
Zoltan_LB_Free_Data	lb/lb_free.c	/^int Zoltan_LB_Free_Data($/;"	f
Zoltan_LB_Free_Part	lb/lb_free.c	/^int Zoltan_LB_Free_Part($/;"	f
Zoltan_LB_Free_Struct	lb/lb_free.c	/^void Zoltan_LB_Free_Struct(struct Zoltan_LB_Struct *lb)$/;"	f
Zoltan_LB_Get_Part_Sizes	lb/lb_set_part_sizes.c	/^int Zoltan_LB_Get_Part_Sizes(ZZ *zz, $/;"	f
Zoltan_LB_Init	lb/lb_init.c	/^void Zoltan_LB_Init(struct Zoltan_LB_Struct *lb, int num_proc)$/;"	f
Zoltan_LB_Method	lb/lb_const.h	/^typedef enum Zoltan_LB_Method {$/;"	g
Zoltan_LB_Part_To_Proc	lb/lb_part2proc.c	/^int Zoltan_LB_Part_To_Proc(ZZ *zz, int part, ZOLTAN_ID_PTR gid)$/;"	f
Zoltan_LB_Partition	lb/lb_balance.c	/^int Zoltan_LB_Partition($/;"	f
Zoltan_LB_Point_Assign	lb/lb_point_assign.c	/^int Zoltan_LB_Point_Assign ($/;"	f
Zoltan_LB_Point_PP_Assign	lb/lb_point_assign.c	/^int Zoltan_LB_Point_PP_Assign ($/;"	f
Zoltan_LB_Proc_To_Part	lb/lb_part2proc.c	/^int Zoltan_LB_Proc_To_Part($/;"	f
Zoltan_LB_Remap	lb/lb_remap.c	/^int Zoltan_LB_Remap($/;"	f
Zoltan_LB_Set_LB_Method	lb/lb_set_method.c	/^int Zoltan_LB_Set_LB_Method(ZZ *zz, char *method_name)$/;"	f
Zoltan_LB_Set_Part_Sizes	lb/lb_set_part_sizes.c	/^int Zoltan_LB_Set_Part_Sizes(ZZ *zz, int global_num,$/;"	f
Zoltan_LB_Special_Free_Part	lb/lb_free.c	/^int Zoltan_LB_Special_Free_Part($/;"	f
Zoltan_LB_Struct	lb/lb_const.h	/^struct Zoltan_LB_Struct {$/;"	s
Zoltan_LocalHSFC_Order	order/hsfcOrder.c	/^int Zoltan_LocalHSFC_Order($/;"	f
Zoltan_Low_Mem_Migrate	lb/low_mem_lb_migrate.c	/^int Zoltan_Low_Mem_Migrate($/;"	f
Zoltan_Malloc	Utilities/Memory/mem.c	/^double *Zoltan_Malloc(size_t n, char *filename, int lineno)$/;"	f
Zoltan_Malloc_Num	Utilities/Memory/mem.c	/^int       Zoltan_Malloc_Num(void)$/;"	f
Zoltan_Map_Add	zz/zz_map.c	/^int Zoltan_Map_Add(ZZ *zz, int map_num, int *key, int *data)$/;"	f
Zoltan_Map_Create	zz/zz_map.c	/^int Zoltan_Map_Create(ZZ *zz,     \/* just need this for error messages *\/$/;"	f
Zoltan_Map_Destroy	zz/zz_map.c	/^int Zoltan_Map_Destroy(ZZ *zz, int map_num)$/;"	f
Zoltan_Map_Entry	zz/zz_map.c	/^struct Zoltan_Map_Entry{$/;"	s	file:
Zoltan_Map_Find	zz/zz_map.c	/^int Zoltan_Map_Find(ZZ *zz, int map_num, int *key, int **data)$/;"	f
Zoltan_Map_First	zz/zz_map.c	/^int Zoltan_Map_First(ZZ *zz, int map_num, int **key, int **data)$/;"	f
Zoltan_Map_List	zz/zz_map.c	/^struct Zoltan_Map_List{$/;"	s	file:
Zoltan_Map_Next	zz/zz_map.c	/^int Zoltan_Map_Next(ZZ *zz, int map_num, int **key, int **data)$/;"	f
Zoltan_Map_Size	zz/zz_map.c	/^int Zoltan_Map_Size(ZZ *zz, int map_num)$/;"	f
Zoltan_Matrix2d_Distribute	matrix/matrix_distribute.c	/^Zoltan_Matrix2d_Distribute (ZZ* zz, Zoltan_matrix inmat, \/* Cannot be const as we can share it inside outmat *\/$/;"	f
Zoltan_Matrix2d_Free	matrix/matrix_utils.c	/^Zoltan_Matrix2d_Free(Zoltan_matrix_2d *m)$/;"	f
Zoltan_Matrix2d_adjproc	matrix/matrix_utils.c	/^Zoltan_Matrix2d_adjproc (ZZ* zz, const Zoltan_matrix_2d * const mat, int **adjproc)$/;"	f
Zoltan_Matrix_Build	matrix/matrix_build.c	/^Zoltan_Matrix_Build (ZZ* zz, Zoltan_matrix_options *opt, Zoltan_matrix* matrix)$/;"	f
Zoltan_Matrix_Complete	matrix/matrix_utils.c	/^Zoltan_Matrix_Complete(ZZ* zz,Zoltan_matrix* m)$/;"	f
Zoltan_Matrix_Construct_CSR	matrix/matrix_operations.c	/^Zoltan_Matrix_Construct_CSR(ZZ *zz, int size, Zoltan_Arc *arcs, float* pinwgt,$/;"	f
Zoltan_Matrix_Delete_nnz	matrix/matrix_operations.c	/^Zoltan_Matrix_Delete_nnz(ZZ* zz, Zoltan_matrix* m,$/;"	f
Zoltan_Matrix_Free	matrix/matrix_utils.c	/^Zoltan_Matrix_Free(Zoltan_matrix *m)$/;"	f
Zoltan_Matrix_Mark_Diag	matrix/matrix_operations.c	/^Zoltan_Matrix_Mark_Diag(ZZ* zz, const Zoltan_matrix* const m,$/;"	f
Zoltan_Matrix_Permute	matrix/matrix_operations.c	/^Zoltan_Matrix_Permute(ZZ* zz, Zoltan_matrix *m, int* perm_y)$/;"	f
Zoltan_Matrix_Remove_DupArcs	matrix/matrix_operations.c	/^Zoltan_Matrix_Remove_DupArcs(ZZ *zz, int size, Zoltan_Arc *arcs, float* pinwgt,$/;"	f
Zoltan_Matrix_Remove_Duplicates	matrix/matrix_operations.c	/^Zoltan_Matrix_Remove_Duplicates(ZZ *zz, Zoltan_matrix inmat, Zoltan_matrix *outmat)$/;"	f
Zoltan_Matrix_Reset	matrix/matrix_utils.c	/^Zoltan_Matrix_Reset(Zoltan_matrix* m)$/;"	f
Zoltan_Matrix_Sym	matrix/matrix_sym.c	/^Zoltan_Matrix_Sym(ZZ* zz, Zoltan_matrix *matrix, int bipartite)$/;"	f
Zoltan_Memory_Debug	Utilities/Memory/mem.c	/^void Zoltan_Memory_Debug(int new_level) {$/;"	f
Zoltan_Memory_Reset	Utilities/Memory/mem.c	/^void Zoltan_Memory_Reset (int type)$/;"	f
Zoltan_Memory_Stats	Utilities/Memory/mem.c	/^void Zoltan_Memory_Stats()$/;"	f
Zoltan_Memory_Usage	Utilities/Memory/mem.c	/^size_t Zoltan_Memory_Usage (int type)$/;"	f
Zoltan_Mid_Migrate_Fort_Wrapper	fort/cwrap.c	/^void Zoltan_Mid_Migrate_Fort_Wrapper(void *data, $/;"	f
Zoltan_Mid_Migrate_PP_Fort_Wrapper	fort/cwrap.c	/^void Zoltan_Mid_Migrate_PP_Fort_Wrapper(void *data, $/;"	f
Zoltan_Migrate	lb/lb_migrate.c	/^int Zoltan_Migrate($/;"	f
Zoltan_Migrate	lb/low_mem_lb_migrate.c	/^int Zoltan_Migrate($/;"	f
Zoltan_Migrate_Init	lb/lb_init.c	/^void Zoltan_Migrate_Init(struct Zoltan_Migrate_Struct *mig)$/;"	f
Zoltan_Migrate_Struct	lb/lb_const.h	/^struct Zoltan_Migrate_Struct {$/;"	s
Zoltan_Multifree	Utilities/Memory/mem.c	/^void Zoltan_Multifree(char *filename, int lineno, int n, ...)$/;"	f
Zoltan_Multifree	Utilities/Memory/mem.c	/^void Zoltan_Multifree(va_alist)$/;"	f
Zoltan_NULL_PTR	fort/ztypes.f90	/^type(Zoltan_PTR), parameter :: &$/;"	v	module:zoltan_types
Zoltan_Next_Border_Obj_Fort_Wrapper	fort/cwrap.c	/^int Zoltan_Next_Border_Obj_Fort_Wrapper(void *data, $/;"	f
Zoltan_Next_Coarse_Obj_Fort_Wrapper	fort/cwrap.c	/^int Zoltan_Next_Coarse_Obj_Fort_Wrapper(void *data, int num_gid_entries, $/;"	f
Zoltan_Next_Obj_Fort_Wrapper	fort/cwrap.c	/^int Zoltan_Next_Obj_Fort_Wrapper(void *data, $/;"	f
Zoltan_Num_Border_Obj_Fort_Wrapper	fort/cwrap.c	/^int Zoltan_Num_Border_Obj_Fort_Wrapper(void *data, int nbor_proc, int *ierr)$/;"	f
Zoltan_Num_Child_Fort_Wrapper	fort/cwrap.c	/^int Zoltan_Num_Child_Fort_Wrapper(void *data, $/;"	f
Zoltan_Num_Coarse_Obj_Fort_Wrapper	fort/cwrap.c	/^int Zoltan_Num_Coarse_Obj_Fort_Wrapper(void *data, int *ierr)$/;"	f
Zoltan_Num_Edges_Fort_Wrapper	fort/cwrap.c	/^int Zoltan_Num_Edges_Fort_Wrapper(void *data, $/;"	f
Zoltan_Num_Edges_Multi_Fort_Wrapper	fort/cwrap.c	/^void Zoltan_Num_Edges_Multi_Fort_Wrapper(void *data, $/;"	f
Zoltan_Num_Fixed_Obj_Fort_Wrapper	fort/cwrap.c	/^int Zoltan_Num_Fixed_Obj_Fort_Wrapper(void *data, int *ierr)$/;"	f
Zoltan_Num_Geom_Fort_Wrapper	fort/cwrap.c	/^int Zoltan_Num_Geom_Fort_Wrapper(void *data, int *ierr)$/;"	f
Zoltan_Num_Obj_Fort_Wrapper	fort/cwrap.c	/^int Zoltan_Num_Obj_Fort_Wrapper(void *data, int *ierr)$/;"	f
Zoltan_Obj_List_Fort_Wrapper	fort/cwrap.c	/^void Zoltan_Obj_List_Fort_Wrapper(void *data,$/;"	f
Zoltan_Obj_Size_Fort_Wrapper	fort/cwrap.c	/^int Zoltan_Obj_Size_Fort_Wrapper(void *data, int num_gid_entries,$/;"	f
Zoltan_Obj_Size_Multi_Fort_Wrapper	fort/cwrap.c	/^void Zoltan_Obj_Size_Multi_Fort_Wrapper($/;"	f
Zoltan_Oct_CompareCoords	oct/octupdate.c	/^static int Zoltan_Oct_CompareCoords(int dim, COORD pt1, COORD pt2) $/;"	f	file:
Zoltan_Oct_Cpid	oct/octant.c	/^int Zoltan_Oct_Cpid(pOctant octant, int i)$/;"	f
Zoltan_Oct_Final_Migration	oct/migoct.c	/^static int Zoltan_Oct_Final_Migration($/;"	f	file:
Zoltan_Oct_Free_Structure	oct/oct_util.c	/^void Zoltan_Oct_Free_Structure(ZZ *zz)$/;"	f
Zoltan_Oct_POct_delTree	oct/octree.c	/^int Zoltan_Oct_POct_delTree(OCT_Global_Info *OCT_info, pOctant *root) {$/;"	f
Zoltan_Oct_POct_free	oct/octree.c	/^void Zoltan_Oct_POct_free(OCT_Global_Info *OCT_info, pOctant *oct) {$/;"	f
Zoltan_Oct_POct_init	oct/octree.c	/^OCT_Global_Info *Zoltan_Oct_POct_init(ZZ *zz, int pid, int dim) {$/;"	f
Zoltan_Oct_POct_local	oct/octree.c	/^int Zoltan_Oct_POct_local(OCT_Global_Info *OCT_info, pOctant octant, int i) {$/;"	f
Zoltan_Oct_POct_localroots	oct/octree.c	/^pRList Zoltan_Oct_POct_localroots(OCT_Global_Info *OCT_info)$/;"	f
Zoltan_Oct_POct_new	oct/octree.c	/^extern pOctant Zoltan_Oct_POct_new(OCT_Global_Info *OCT_info) {$/;"	f
Zoltan_Oct_POct_nextDfs	oct/octree.c	/^pOctant Zoltan_Oct_POct_nextDfs(OCT_Global_Info *OCT_info, pOctant octant) {$/;"	f
Zoltan_Oct_POct_setparent	oct/octree.c	/^void Zoltan_Oct_POct_setparent(OCT_Global_Info *OCT_info, pOctant oct, pOctant parent, int ppid) {$/;"	f
Zoltan_Oct_Plots	oct/oct_plot.c	/^void Zoltan_Oct_Plots(ZZ *zz) {$/;"	f
Zoltan_Oct_Ppid	oct/octant.c	/^int Zoltan_Oct_Ppid(pOctant octant)$/;"	f
Zoltan_Oct_Set_Param	oct/octupdate.c	/^int Zoltan_Oct_Set_Param($/;"	f
Zoltan_Oct_Update_Connections	oct/migoct.c	/^static int Zoltan_Oct_Update_Connections($/;"	f	file:
Zoltan_Oct_Update_Map	oct/migoct.c	/^static int Zoltan_Oct_Update_Map(ZZ *zz) {$/;"	f	file:
Zoltan_Oct_addRegion	oct/octant.c	/^int Zoltan_Oct_addRegion(ZZ *zz, pOctant oct, pRegion region) { $/;"	f
Zoltan_Oct_bounds	oct/octant.c	/^void Zoltan_Oct_bounds(pOctant oct, COORD min, COORD max)$/;"	f
Zoltan_Oct_bounds_to_origin	oct/oct_util.c	/^void Zoltan_Oct_bounds_to_origin(COORD min, COORD max, COORD origin)$/;"	f
Zoltan_Oct_bounds_to_origin_size	oct/oct_util.c	/^void Zoltan_Oct_bounds_to_origin_size(COORD min, COORD max, COORD origin, COORD size) {$/;"	f
Zoltan_Oct_build_global_rootlist	oct/migoct.c	/^static int Zoltan_Oct_build_global_rootlist(ZZ *zz,Migrate_msg  **ret_rmsg, int *size) {$/;"	f	file:
Zoltan_Oct_child	oct/octant.c	/^pOctant Zoltan_Oct_child(pOctant oct, int i) $/;"	f
Zoltan_Oct_child_bounds	oct/oct_util.c	/^void Zoltan_Oct_child_bounds(COORD pmin, COORD pmax, COORD porigin, int cnum,$/;"	f
Zoltan_Oct_child_bounds_wrapper	oct/oct_util.c	/^void Zoltan_Oct_child_bounds_wrapper(OCT_Global_Info *OCT_info,$/;"	f
Zoltan_Oct_child_which	oct/oct_util.c	/^int Zoltan_Oct_child_which(OCT_Global_Info *OCT_info,COORD porigin, COORD point) {$/;"	f
Zoltan_Oct_child_which_wrapper	oct/oct_util.c	/^int Zoltan_Oct_child_which_wrapper(OCT_Global_Info *OCT_info,pOctant oct, COORD point) {$/;"	f
Zoltan_Oct_childnum	oct/octant.c	/^int Zoltan_Oct_childnum(pOctant octant)$/;"	f
Zoltan_Oct_children	oct/octant.c	/^int Zoltan_Oct_children(pOctant oct, pOctant children[8]) {$/;"	f
Zoltan_Oct_clearRegions	oct/octant.c	/^void Zoltan_Oct_clearRegions(pOctant oct) { $/;"	f
Zoltan_Oct_convert_idx_from_map	oct/oct_util.c	/^int Zoltan_Oct_convert_idx_from_map(OCT_Global_Info *OCT_info, int dir, int cnum) {$/;"	f
Zoltan_Oct_convert_idx_to_map	oct/oct_util.c	/^static int Zoltan_Oct_convert_idx_to_map(OCT_Global_Info *OCT_info, int dir, int cnum) {$/;"	f	file:
Zoltan_Oct_copy_info	oct/migreg.c	/^static int Zoltan_Oct_copy_info(ZZ *zz, pRegion src, pRegion *dest) {$/;"	f	file:
Zoltan_Oct_costs_free	oct/costs.c	/^void Zoltan_Oct_costs_free(OCT_Global_Info *OCT_info,pOctant octant) {$/;"	f
Zoltan_Oct_costs_global_compute	oct/costs.c	/^float Zoltan_Oct_costs_global_compute(OCT_Global_Info *OCT_info) {$/;"	f
Zoltan_Oct_costs_init	oct/costs.c	/^static void Zoltan_Oct_costs_init(OCT_Global_Info *OCT_info,pOctant octant) {$/;"	f	file:
Zoltan_Oct_costs_subtree_compute	oct/costs.c	/^static float Zoltan_Oct_costs_subtree_compute(OCT_Global_Info *OCT_info,pOctant octant, int *seq) {$/;"	f	file:
Zoltan_Oct_costs_value	oct/costs.c	/^float Zoltan_Oct_costs_value(pOctant oct)$/;"	f
Zoltan_Oct_costs_weight	oct/costs.c	/^static float Zoltan_Oct_costs_weight(pOctant octant) {$/;"	f	file:
Zoltan_Oct_cpids	oct/octant.c	/^void Zoltan_Oct_cpids(pOctant oct, int cpids[8]) {$/;"	f
Zoltan_Oct_data_newpid	oct/octant.c	/^int Zoltan_Oct_data_newpid(pOctant oct)$/;"	f
Zoltan_Oct_dfs_SetIds	oct/dfs.c	/^static int Zoltan_Oct_dfs_SetIds(OCT_Global_Info *OCT_info, pOctant oct,$/;"	f	file:
Zoltan_Oct_dfs_migrate	oct/dfs.c	/^void Zoltan_Oct_dfs_migrate(ZZ *zz, int *nsentags,$/;"	f
Zoltan_Oct_dfs_partition	oct/dfs.c	/^void Zoltan_Oct_dfs_partition(ZZ *zz, int *counter, float *c1,$/;"	f
Zoltan_Oct_dir	oct/octant.c	/^int Zoltan_Oct_dir(pOctant oct) {$/;"	f
Zoltan_Oct_findOctant	oct/octupdate.c	/^static pOctant Zoltan_Oct_findOctant(OCT_Global_Info *OCT_info,pOctant oct, $/;"	f	file:
Zoltan_Oct_fix	oct/octupdate.c	/^static int Zoltan_Oct_fix(ZZ *zz, pRegion Region_list, int num_objs) $/;"	f	file:
Zoltan_Oct_fix_tags	oct/migtags.c	/^int Zoltan_Oct_fix_tags(ZZ *zz, ZOLTAN_ID_PTR *import_global_ids, $/;"	f
Zoltan_Oct_free	oct/octant.c	/^void Zoltan_Oct_free(OCT_Global_Info *OCT_info, pOctant *oct) {$/;"	f
Zoltan_Oct_gen_tree_from_input_data	oct/octupdate.c	/^static void Zoltan_Oct_gen_tree_from_input_data(ZZ *zz, int oct_wgtflag,$/;"	f	file:
Zoltan_Oct_get_bounds	oct/octupdate.c	/^static void Zoltan_Oct_get_bounds(ZZ *zz, pRegion *ptr1, int *num_objs, $/;"	f	file:
Zoltan_Oct_get_child_dir	oct/oct_util.c	/^int Zoltan_Oct_get_child_dir(OCT_Global_Info *OCT_info, int dir, int cnum) {$/;"	f
Zoltan_Oct_global_clear	oct/octupdate.c	/^static void Zoltan_Oct_global_clear(OCT_Global_Info * OCT_info)$/;"	f	file:
Zoltan_Oct_global_dref	oct/octupdate.c	/^static void Zoltan_Oct_global_dref(ZZ *zz, OCT_Global_Info *OCT_info) $/;"	f	file:
Zoltan_Oct_global_find	oct/octupdate.c	/^static pOctant Zoltan_Oct_global_find(OCT_Global_Info *OCT_info,COORD point) $/;"	f	file:
Zoltan_Oct_global_insert	oct/octupdate.c	/^static pOctant Zoltan_Oct_global_insert(ZZ *zz, pRegion region) $/;"	f	file:
Zoltan_Oct_global_insert_object	oct/octupdate.c	/^static int Zoltan_Oct_global_insert_object(ZZ *zz, pRegion Region_list, $/;"	f	file:
Zoltan_Oct_id	oct/octant.c	/^int Zoltan_Oct_id(pOctant oct) $/;"	f
Zoltan_Oct_in_box	oct/oct_util.c	/^int Zoltan_Oct_in_box(OCT_Global_Info *OCT_info, COORD pt, COORD lower, COORD upper) {$/;"	f
Zoltan_Oct_in_box_closure	oct/oct_util.c	/^int Zoltan_Oct_in_box_closure(OCT_Global_Info *OCT_info, COORD pt, COORD lower, COORD upper) {$/;"	f
Zoltan_Oct_initCounters	oct/octant.c	/^void Zoltan_Oct_initCounters(void) {$/;"	f
Zoltan_Oct_insert_orphan	oct/migreg.c	/^static int Zoltan_Oct_insert_orphan(ZZ *zz, Region reg) {$/;"	f	file:
Zoltan_Oct_isTerminal	oct/octant.c	/^int Zoltan_Oct_isTerminal(pOctant oct) {$/;"	f
Zoltan_Oct_malloc	oct/octant.c	/^static pOctant Zoltan_Oct_malloc(void) {$/;"	f	file:
Zoltan_Oct_mallocremote	oct/octant.c	/^static pOctant Zoltan_Oct_mallocremote(void) {$/;"	f	file:
Zoltan_Oct_mapidx	oct/octant.c	/^int Zoltan_Oct_mapidx(pOctant oct) {$/;"	f
Zoltan_Oct_migrate_objects	oct/migtags.c	/^int Zoltan_Oct_migrate_objects(ZZ *zz, pOctant *octs, int *newpids, int nocts,$/;"	f
Zoltan_Oct_migrate_octants	oct/migoct.c	/^int Zoltan_Oct_migrate_octants(ZZ *zz, int *newpids, pOctant *octs, int nocts, int *nrecocts) {$/;"	f
Zoltan_Oct_migreg_migrate_orphans	oct/migreg.c	/^int Zoltan_Oct_migreg_migrate_orphans(ZZ *zz, pRegion RegionList, int nregions,$/;"	f
Zoltan_Oct_migreg_migrate_regions	oct/migreg.c	/^static int Zoltan_Oct_migreg_migrate_regions(ZZ *zz, Region *regions, $/;"	f	file:
Zoltan_Oct_modify_cost	oct/octant.c	/^void Zoltan_Oct_modify_cost(pOctant oct, float cost)$/;"	f
Zoltan_Oct_modify_newpid	oct/octant.c	/^void Zoltan_Oct_modify_newpid(pOctant oct, int newpid)$/;"	f
Zoltan_Oct_msg_float_scan	oct/msg.c	/^float Zoltan_Oct_msg_float_scan(MPI_Comm communicator, int proc, float value)$/;"	f
Zoltan_Oct_msg_int_scan	oct/msg.c	/^int Zoltan_Oct_msg_int_scan(MPI_Comm communicator, int proc, int value)$/;"	f
Zoltan_Oct_nOctants	oct/octant.c	/^int Zoltan_Oct_nOctants()$/;"	f
Zoltan_Oct_nRegions	oct/octant.c	/^int Zoltan_Oct_nRegions(pOctant oct) {$/;"	f
Zoltan_Oct_nUniqueRegions	oct/octupdate.c	/^int Zoltan_Oct_nUniqueRegions(OCT_Global_Info *OCT_info, pOctant oct) {$/;"	f
Zoltan_Oct_new	oct/octant.c	/^pOctant Zoltan_Oct_new(void) {$/;"	f
Zoltan_Oct_newremote	oct/octant.c	/^pOctant Zoltan_Oct_newremote(void) {$/;"	f
Zoltan_Oct_nextId	oct/octupdate.c	/^int Zoltan_Oct_nextId(void)$/;"	f
Zoltan_Oct_nlocal	oct/octant.c	/^static int Zoltan_Oct_nlocal(pOctant oct) {$/;"	f	file:
Zoltan_Oct_origin_volume	oct/octant.c	/^void Zoltan_Oct_origin_volume(pOctant oct, COORD origin, double *volume) {$/;"	f
Zoltan_Oct_parent	oct/octant.c	/^pOctant Zoltan_Oct_parent(pOctant oct) $/;"	f
Zoltan_Oct_print_stats	oct/output.c	/^void Zoltan_Oct_print_stats(ZZ *zz, double timetotal, double *timers, int *counters,$/;"	f
Zoltan_Oct_regionlist	oct/octant.c	/^pRegion Zoltan_Oct_regionlist(pOctant oct) {$/;"	f
Zoltan_Oct_resetIdCount	oct/octupdate.c	/^void Zoltan_Oct_resetIdCount(int start_count)$/;"	f
Zoltan_Oct_setCpid	oct/octant.c	/^void Zoltan_Oct_setCpid(pOctant octant, int i, int cpid) {$/;"	f
Zoltan_Oct_setDir	oct/octant.c	/^void Zoltan_Oct_setDir(pOctant oct, int dir) {$/;"	f
Zoltan_Oct_setID	oct/octant.c	/^void Zoltan_Oct_setID(pOctant oct, int id) {$/;"	f
Zoltan_Oct_setMapIdx	oct/octant.c	/^void Zoltan_Oct_setMapIdx(pOctant oct, int idx) {$/;"	f
Zoltan_Oct_set_maxregions	oct/octupdate.c	/^static void Zoltan_Oct_set_maxregions(int max)$/;"	f	file:
Zoltan_Oct_set_method	oct/oct_util.c	/^void Zoltan_Oct_set_method(OCT_Global_Info *OCT_info, int method_number) {$/;"	f
Zoltan_Oct_set_minregions	oct/octupdate.c	/^static void Zoltan_Oct_set_minregions(int min)$/;"	f	file:
Zoltan_Oct_setbounds	oct/octant.c	/^void Zoltan_Oct_setbounds(pOctant oct, COORD min, COORD max)$/;"	f
Zoltan_Oct_setchild	oct/octant.c	/^void Zoltan_Oct_setchild(pOctant oct, int i, pOctant child) {$/;"	f
Zoltan_Oct_setchildnum	oct/octant.c	/^void Zoltan_Oct_setchildnum(pOctant oct, int childnum)$/;"	f
Zoltan_Oct_setchildren	oct/octant.c	/^void Zoltan_Oct_setchildren(pOctant oct, pOctant *children, int *cpids) {$/;"	f
Zoltan_Oct_subtree_dref	oct/octupdate.c	/^static int Zoltan_Oct_subtree_dref(ZZ *zz, OCT_Global_Info *OCT_info,$/;"	f	file:
Zoltan_Oct_subtree_insert	oct/octupdate.c	/^int Zoltan_Oct_subtree_insert(ZZ *zz, pOctant oct, pRegion region) $/;"	f
Zoltan_Oct_tag_subtree	oct/dfs.c	/^static void Zoltan_Oct_tag_subtree(OCT_Global_Info *OCT_info,pOctant octant, $/;"	f	file:
Zoltan_Oct_terminal_coarsen	oct/octupdate.c	/^static void Zoltan_Oct_terminal_coarsen(ZZ *zz, OCT_Global_Info *OCT_info,$/;"	f	file:
Zoltan_Oct_terminal_refine	oct/octupdate.c	/^static void Zoltan_Oct_terminal_refine(ZZ *zz, pOctant oct,int count) $/;"	f	file:
Zoltan_Oct_visit	oct/dfs.c	/^static void Zoltan_Oct_visit(ZZ *zz, pOctant octant, float *part_sizes) {$/;"	f	file:
Zoltan_Oct_visit_all_subtrees	oct/dfs.c	/^static void Zoltan_Oct_visit_all_subtrees(ZZ *zz, float *part_sizes) {$/;"	f	file:
Zoltan_Octpart	oct/octupdate.c	/^int Zoltan_Octpart($/;"	f
Zoltan_Order	order/order.c	/^int Zoltan_Order ($/;"	f
Zoltan_Order_Create	order/order_struct.c	/^int Zoltan_Order_Create(ZOS **order_info, ZZ *zz)$/;"	f
Zoltan_Order_Destroy	order/order_struct.c	/^int Zoltan_Order_Destroy(ZOS **order_info)$/;"	f
Zoltan_Order_Free_Struct	order/order_tools.c	/^void Zoltan_Order_Free_Struct(struct Zoltan_Order_Struct *order)$/;"	f
Zoltan_Order_Get_Block_Bounds	order/order.c	/^int Zoltan_Order_Get_Block_Bounds($/;"	f
Zoltan_Order_Get_Block_Leaves	order/order.c	/^void Zoltan_Order_Get_Block_Leaves($/;"	f
Zoltan_Order_Get_Block_Parent	order/order.c	/^int Zoltan_Order_Get_Block_Parent($/;"	f
Zoltan_Order_Get_Block_Size	order/order.c	/^int Zoltan_Order_Get_Block_Size($/;"	f
Zoltan_Order_Get_Num_Blocks	order/order.c	/^int Zoltan_Order_Get_Num_Blocks($/;"	f
Zoltan_Order_Get_Num_Leaves	order/order.c	/^int Zoltan_Order_Get_Num_Leaves($/;"	f
Zoltan_Order_Init_Tree	order/order_tools.c	/^int  Zoltan_Order_Init_Tree (struct Zoltan_Order_Struct *order, int blocknbr, int leavesnbr)$/;"	f
Zoltan_Order_Options	order/order_const.h	/^struct Zoltan_Order_Options {$/;"	s
Zoltan_Order_Set_Param	order/order.c	/^int Zoltan_Order_Set_Param($/;"	f
Zoltan_Order_Struct	order/order_const.h	/^struct Zoltan_Order_Struct {$/;"	s
Zoltan_Order_Test	driver/order_test.c	/^int Zoltan_Order_Test($/;"	f
Zoltan_PHG	phg/phg.c	/^int Zoltan_PHG($/;"	f
Zoltan_PHGComm_Destroy	phg/phg_comm.c	/^Zoltan_PHGComm_Destroy(PHGComm* comm)$/;"	f
Zoltan_PHGComm_Init	phg/phg_comm.c	/^Zoltan_PHGComm_Init(PHGComm* comm)$/;"	f
Zoltan_PHG_2ways_hyperedge_partition	phg/phg_two_ways.c	/^Zoltan_PHG_2ways_hyperedge_partition ($/;"	f
Zoltan_PHG_Add_Repart_Data	phg/phg_build.c	/^static int Zoltan_PHG_Add_Repart_Data($/;"	f	file:
Zoltan_PHG_Build_Hypergraph	phg/phg_build.c	/^int Zoltan_PHG_Build_Hypergraph($/;"	f
Zoltan_PHG_CoarsePartition	phg/phg_serialpartition.c	/^int Zoltan_PHG_CoarsePartition($/;"	f
Zoltan_PHG_Coarsening	phg/phg_coarse.c	/^int Zoltan_PHG_Coarsening$/;"	f
Zoltan_PHG_Compute_Balance	phg/phg_Vcycle.c	/^double Zoltan_PHG_Compute_Balance ($/;"	f
Zoltan_PHG_Compute_ConCut	phg/phg_Vcycle.c	/^double Zoltan_PHG_Compute_ConCut($/;"	f
Zoltan_PHG_Compute_NetCut	phg/phg_Vcycle.c	/^double Zoltan_PHG_Compute_NetCut($/;"	f
Zoltan_PHG_Copy_Structure	phg/phg_tree.c	/^int Zoltan_PHG_Copy_Structure(ZZ *to, ZZ const *from)$/;"	f
Zoltan_PHG_Cuts	phg/phg_build.c	/^int Zoltan_PHG_Cuts($/;"	f
Zoltan_PHG_Fill_Hypergraph	phg/phg_build.c	/^int Zoltan_PHG_Fill_Hypergraph($/;"	f
Zoltan_PHG_Find_Root	phg/phg_util.c	/^void Zoltan_PHG_Find_Root($/;"	f
Zoltan_PHG_Free_Hypergraph_Data	phg/phg.c	/^void Zoltan_PHG_Free_Hypergraph_Data(ZHG *zoltan_hg)$/;"	f
Zoltan_PHG_Free_Structure	phg/phg_tree.c	/^void Zoltan_PHG_Free_Structure(ZZ *zz)$/;"	f
Zoltan_PHG_GIDs_to_global_numbers	phg/phg_build_calls.c	/^int Zoltan_PHG_GIDs_to_global_numbers(ZZ *zz, int *gnos, int len, int randomize,$/;"	f
Zoltan_PHG_Gather_To_All_Procs	phg/phg_gather.c	/^int Zoltan_PHG_Gather_To_All_Procs($/;"	f
Zoltan_PHG_Gno_To_Proc_Block	phg/phg_distrib.c	/^int Zoltan_PHG_Gno_To_Proc_Block($/;"	f
Zoltan_PHG_Initialize_Params	phg/phg.c	/^int Zoltan_PHG_Initialize_Params($/;"	f
Zoltan_PHG_LB_Data	phg/phg_tree.c	/^} Zoltan_PHG_LB_Data;$/;"	t	typeref:struct:Zoltan_PHG_LB_Data_	file:
Zoltan_PHG_LB_Data_	phg/phg_tree.c	/^typedef struct Zoltan_PHG_LB_Data_ {$/;"	s	file:
Zoltan_PHG_LB_Data_alloc	phg/phg_tree.c	/^Zoltan_PHG_LB_Data_alloc()$/;"	f
Zoltan_PHG_LB_Data_free_timers	phg/phg_tree.c	/^Zoltan_PHG_LB_Data_free_timers(ZZ* zz)$/;"	f
Zoltan_PHG_LB_Data_free_tree	phg/phg_tree.c	/^Zoltan_PHG_LB_Data_free_tree(ZZ* zz)$/;"	f
Zoltan_PHG_LB_Data_timers	phg/phg_tree.c	/^Zoltan_PHG_LB_Data_timers(ZZ const * zz)$/;"	f
Zoltan_PHG_LB_Data_tree	phg/phg_tree.c	/^Zoltan_PHG_LB_Data_tree(ZZ const * zz)$/;"	f
Zoltan_PHG_LoadBalStat	phg/phg_util.c	/^int Zoltan_PHG_LoadBalStat(ZZ *zz, HGraph *hg)$/;"	f
Zoltan_PHG_Matching	phg/phg_match.c	/^int Zoltan_PHG_Matching ($/;"	f
Zoltan_PHG_Output_Parts	phg/phg.c	/^static int Zoltan_PHG_Output_Parts ($/;"	f	file:
Zoltan_PHG_PaToH	phg/phg_patoh.c	/^int Zoltan_PHG_PaToH($/;"	f
Zoltan_PHG_ParKway	phg/phg_parkway.c	/^int Zoltan_PHG_ParKway($/;"	f
Zoltan_PHG_Partition	phg/phg_Vcycle.c	/^int Zoltan_PHG_Partition ($/;"	f
Zoltan_PHG_Plot	phg/phg_plot.c	/^void Zoltan_PHG_Plot($/;"	f
Zoltan_PHG_Plot_2D_Distrib	phg/phg_plot.c	/^void Zoltan_PHG_Plot_2D_Distrib($/;"	f
Zoltan_PHG_Redistribute	phg/phg_distrib.c	/^int Zoltan_PHG_Redistribute($/;"	f
Zoltan_PHG_Redistribute_Hypergraph	phg/phg_distrib.c	/^static int Zoltan_PHG_Redistribute_Hypergraph($/;"	f	file:
Zoltan_PHG_Refinement	phg/phg_refinement.c	/^int Zoltan_PHG_Refinement (ZZ *zz, HGraph *hg, int p, float *part_sizes, Partition part,$/;"	f
Zoltan_PHG_Remove_Repart_Data	phg/phg_build.c	/^int Zoltan_PHG_Remove_Repart_Data($/;"	f
Zoltan_PHG_Return_Lists	phg/phg.c	/^static int Zoltan_PHG_Return_Lists ($/;"	f	file:
Zoltan_PHG_Scale_Edges	phg/phg_scale.c	/^int Zoltan_PHG_Scale_Edges (ZZ *zz, HGraph *hg, float *new_ewgt, $/;"	f
Zoltan_PHG_Scale_Vtx	phg/phg_scale.c	/^int Zoltan_PHG_Scale_Vtx (ZZ *zz, HGraph *hg, PHGPartParams *hgp)$/;"	f
Zoltan_PHG_Set_2D_Proc_Distrib	phg/phg.c	/^int Zoltan_PHG_Set_2D_Proc_Distrib($/;"	f
Zoltan_PHG_Set_CoarsePartition_Fn	phg/phg_serialpartition.c	/^ZOLTAN_PHG_COARSEPARTITION_FN *Zoltan_PHG_Set_CoarsePartition_Fn($/;"	f
Zoltan_PHG_Set_Matching_Fn	phg/phg_match.c	/^int Zoltan_PHG_Set_Matching_Fn (PHGPartParams *hgp)$/;"	f
Zoltan_PHG_Set_Param	phg/phg.c	/^int Zoltan_PHG_Set_Param($/;"	f
Zoltan_PHG_Set_Part_Options	phg/phg_Vcycle.c	/^int Zoltan_PHG_Set_Part_Options (ZZ *zz, PHGPartParams *hgp)$/;"	f
Zoltan_PHG_Set_Refinement_Fn	phg/phg_refinement.c	/^ZOLTAN_PHG_REFINEMENT_FN *Zoltan_PHG_Set_Refinement_Fn(char *str)$/;"	f
Zoltan_PHG_Timers_copy	phg/phg_tree.c	/^Zoltan_PHG_Timers_copy(ZZ* zz, struct phg_timer_indices* ftimers)$/;"	f
Zoltan_PHG_Timers_init	phg/phg_tree.c	/^Zoltan_PHG_Timers_init(ZZ* zz)$/;"	f
Zoltan_PHG_Tree	phg/phg_tree.h	/^} Zoltan_PHG_Tree;$/;"	t	typeref:struct:Zoltan_PHG_Tree_
Zoltan_PHG_Tree_	phg/phg_tree.h	/^typedef struct Zoltan_PHG_Tree_ {$/;"	s
Zoltan_PHG_Tree_Set	phg/phg_tree.c	/^Zoltan_PHG_Tree_Set(ZZ* zz, int father, int lo, int hi)$/;"	f
Zoltan_PHG_Tree_centralize	phg/phg_tree.c	/^Zoltan_PHG_Tree_centralize(ZZ *zz)$/;"	f
Zoltan_PHG_Tree_copy	phg/phg_tree.c	/^Zoltan_PHG_Tree_copy(ZZ* zz, Zoltan_PHG_Tree* ftree)$/;"	f
Zoltan_PHG_Tree_create	phg/phg_tree.c	/^Zoltan_PHG_Tree_create(int part_number, ZZ* zz)$/;"	f
Zoltan_PHG_Tree_init	phg/phg_tree.c	/^Zoltan_PHG_Tree_init(Zoltan_PHG_Tree* tree)$/;"	f
Zoltan_PHG_Vertex_Visit_Order	phg/phg_order.c	/^int Zoltan_PHG_Vertex_Visit_Order($/;"	f
Zoltan_PHG_compute_esize	phg/phg_match.c	/^static int Zoltan_PHG_compute_esize($/;"	f	file:
Zoltan_PHG_errexit	phg/phg_util.c	/^void Zoltan_PHG_errexit(char *f_str,...)$/;"	f
Zoltan_PHG_isPrime	phg/phg_util.c	/^int Zoltan_PHG_isPrime(int n)$/;"	f
Zoltan_PHG_match_isolated	phg/phg_match.c	/^static int Zoltan_PHG_match_isolated($/;"	f	file:
Zoltan_PHG_rdivide	phg/phg_rdivide.c	/^int Zoltan_PHG_rdivide($/;"	f
Zoltan_PHG_uMe	phg/phg_util.c	/^char *Zoltan_PHG_uMe(PHGComm *hgc)$/;"	f
Zoltan_PHG_uprintf	phg/phg_util.c	/^void Zoltan_PHG_uprintf(PHGComm *hgc, char *f_str,...)$/;"	f
Zoltan_PTR	fort/ztypes.f90	/^type Zoltan_PTR$/;"	t	module:zoltan_types
Zoltan_PTR_LENGTH	fort/ztypes.f90	/^integer, parameter :: Zoltan_PTR_LENGTH /;"	v	module:zoltan_types
Zoltan_Pack_Obj_Fort_Wrapper	fort/cwrap.c	/^void Zoltan_Pack_Obj_Fort_Wrapper(void *data, $/;"	f
Zoltan_Pack_Obj_Multi_Fort_Wrapper	fort/cwrap.c	/^void Zoltan_Pack_Obj_Multi_Fort_Wrapper($/;"	f
Zoltan_ParMetis	parmetis/parmetis_interface.c	/^int Zoltan_ParMetis($/;"	f
Zoltan_ParMetis_Order	parmetis/parmetis_interface.c	/^int Zoltan_ParMetis_Order($/;"	f
Zoltan_ParMetis_Set_Param	parmetis/parmetis_interface.c	/^int Zoltan_ParMetis_Set_Param($/;"	f
Zoltan_Parmetis_Check_Error	parmetis/parmetis_interface.c	/^int Zoltan_Parmetis_Check_Error (ZZ *zz,$/;"	f
Zoltan_Parmetis_Parse	parmetis/parmetis_interface.c	/^Zoltan_Parmetis_Parse(ZZ* zz, int *options, char* alg,$/;"	f
Zoltan_PartDist_MPIOp	lb/lb_balance.c	/^void Zoltan_PartDist_MPIOp($/;"	f
Zoltan_Part_Fort_Wrapper	fort/cwrap.c	/^int Zoltan_Part_Fort_Wrapper(void *data, $/;"	f
Zoltan_Part_Multi_Fort_Wrapper	fort/cwrap.c	/^void Zoltan_Part_Multi_Fort_Wrapper(void *data, $/;"	f
Zoltan_Post_Migrate_Fort_Wrapper	fort/cwrap.c	/^void Zoltan_Post_Migrate_Fort_Wrapper(void *data, $/;"	f
Zoltan_Post_Migrate_PP_Fort_Wrapper	fort/cwrap.c	/^void Zoltan_Post_Migrate_PP_Fort_Wrapper(void *data, $/;"	f
Zoltan_Postprocess_FinalOutput	parmetis/postprocessing.c	/^Zoltan_Postprocess_FinalOutput (ZZ* zz, ZOLTAN_Third_Graph *gr,$/;"	f
Zoltan_Postprocess_Graph	parmetis/postprocessing.c	/^int Zoltan_Postprocess_Graph($/;"	f
Zoltan_Postprocess_Order	parmetis/postprocessing.c	/^Zoltan_Postprocess_Order (ZZ *zz,$/;"	f	file:
Zoltan_Postprocess_Partition	parmetis/postprocessing.c	/^Zoltan_Postprocess_Partition (ZZ *zz,$/;"	f	file:
Zoltan_Postprocess_UnScatter_Graph	parmetis/postprocessing.c	/^Zoltan_Postprocess_UnScatter_Graph (ZZ *zz,$/;"	f	file:
Zoltan_Pre_Migrate_Fort_Wrapper	fort/cwrap.c	/^void Zoltan_Pre_Migrate_Fort_Wrapper(void *data, $/;"	f
Zoltan_Pre_Migrate_PP_Fort_Wrapper	fort/cwrap.c	/^void Zoltan_Pre_Migrate_PP_Fort_Wrapper(void *data, $/;"	f
Zoltan_Preprocess_Add_Weight	parmetis/preprocessing.c	/^Zoltan_Preprocess_Add_Weight (ZZ *zz,$/;"	f	file:
Zoltan_Preprocess_Extract_Geom	parmetis/preprocessing.c	/^Zoltan_Preprocess_Extract_Geom (ZZ *zz,$/;"	f	file:
Zoltan_Preprocess_Extract_Vsize	parmetis/preprocessing.c	/^Zoltan_Preprocess_Extract_Vsize (ZZ *zz,$/;"	f	file:
Zoltan_Preprocess_Graph	parmetis/preprocessing.c	/^int Zoltan_Preprocess_Graph($/;"	f
Zoltan_Preprocess_Scale_Weights	parmetis/preprocessing.c	/^Zoltan_Preprocess_Scale_Weights (ZOLTAN_Third_Graph *gr, float *flt_wgt, weighttype** rnd_wgt,$/;"	f	file:
Zoltan_Preprocess_Scatter_Graph	parmetis/preprocessing.c	/^Zoltan_Preprocess_Scatter_Graph (ZZ *zz,$/;"	f	file:
Zoltan_Preprocess_Timer	parmetis/preprocessing.c	/^int Zoltan_Preprocess_Timer(ZZ *zz, int *use_timers)$/;"	f
Zoltan_Print_Assigned_Param_Vals	params/assign_param_vals.c	/^static void Zoltan_Print_Assigned_Param_Vals($/;"	f	file:
Zoltan_Print_Key_Params	params/key_params.c	/^void Zoltan_Print_Key_Params(ZZ const *zz)$/;"	f
Zoltan_Print_Obj_List	zz/zz_obj_list.c	/^int Zoltan_Print_Obj_List($/;"	f
Zoltan_Print_Params	params/print_params.c	/^void Zoltan_Print_Params($/;"	f
Zoltan_Print_Stats	par/par_stats.c	/^void Zoltan_Print_Stats (MPI_Comm communicator, int debug_proc, double x, char *msg)$/;"	f
Zoltan_Print_Sync_End	par/par_sync.c	/^void Zoltan_Print_Sync_End(MPI_Comm communicator, int do_print_line)$/;"	f
Zoltan_Print_Sync_Start	par/par_sync.c	/^void Zoltan_Print_Sync_Start(MPI_Comm communicator, int do_print_line)$/;"	f
Zoltan_Print_Transformation	zz/zz_coord.c	/^void Zoltan_Print_Transformation(ZZ_Transform *tr)$/;"	f
Zoltan_RB_Average_Cut	par/par_average.c	/^double Zoltan_RB_Average_Cut($/;"	f
Zoltan_RB_Box_Assign	rcb/box_assign.c	/^int Zoltan_RB_Box_Assign($/;"	f
Zoltan_RB_Build_Structure	rcb/shared.c	/^int Zoltan_RB_Build_Structure($/;"	f
Zoltan_RB_Create_Proc_List	rcb/create_proc_list.c	/^int Zoltan_RB_Create_Proc_List($/;"	f
Zoltan_RB_Gather	rcb/create_proc_list.c	/^static void Zoltan_RB_Gather($/;"	f	file:
Zoltan_RB_Point_Assign	rcb/point_assign.c	/^int Zoltan_RB_Point_Assign($/;"	f
Zoltan_RB_Print_All	rcb/shared.c	/^void Zoltan_RB_Print_All($/;"	f
Zoltan_RB_Remap	rcb/shared.c	/^int Zoltan_RB_Remap($/;"	f
Zoltan_RB_Return_Arguments	rcb/shared.c	/^int Zoltan_RB_Return_Arguments($/;"	f
Zoltan_RB_Send_Dots	rcb/shared.c	/^int Zoltan_RB_Send_Dots($/;"	f
Zoltan_RB_Send_Outgoing	rcb/shared.c	/^int Zoltan_RB_Send_Outgoing($/;"	f
Zoltan_RB_Send_To_Part	rcb/shared.c	/^int Zoltan_RB_Send_To_Part($/;"	f
Zoltan_RB_Tree_Gatherv	rcb/shared.c	/^int Zoltan_RB_Tree_Gatherv($/;"	f
Zoltan_RB_Use_IDs	rcb/shared.c	/^int Zoltan_RB_Use_IDs(ZZ *zz)$/;"	f
Zoltan_RB_bcast_doubles	par/par_tflops_special.c	/^void Zoltan_RB_bcast_doubles($/;"	f
Zoltan_RB_check_geom_input	rcb/shared.c	/^int Zoltan_RB_check_geom_input($/;"	f
Zoltan_RB_check_geom_output	rcb/shared.c	/^int Zoltan_RB_check_geom_output($/;"	f
Zoltan_RB_find_bisector	par/par_bisect.c	/^int Zoltan_RB_find_bisector($/;"	f
Zoltan_RB_find_median	par/par_median.c	/^int Zoltan_RB_find_median($/;"	f
Zoltan_RB_find_median_randomized	par/par_median_randomized.c	/^int Zoltan_RB_find_median_randomized($/;"	f
Zoltan_RB_gather_double	par/par_tflops_special.c	/^void Zoltan_RB_gather_double($/;"	f
Zoltan_RB_max_double	par/par_tflops_special.c	/^void Zoltan_RB_max_double($/;"	f
Zoltan_RB_median_merge	par/par_median.c	/^void Zoltan_RB_median_merge(void *in, void *inout, int *len, MPI_Datatype *dptr)$/;"	f
Zoltan_RB_reduce	par/par_median.c	/^void Zoltan_RB_reduce($/;"	f
Zoltan_RB_scan_double	par/par_tflops_special.c	/^void Zoltan_RB_scan_double($/;"	f
Zoltan_RB_stats	rcb/shared.c	/^void Zoltan_RB_stats(ZZ *zz, double timetotal, struct Dot_Struct *dotpt,$/;"	f
Zoltan_RB_sum_double	par/par_tflops_special.c	/^void Zoltan_RB_sum_double($/;"	f
Zoltan_RCB	rcb/rcb.c	/^int Zoltan_RCB($/;"	f
Zoltan_RCB_Box	rcb/rcb_box.c	/^int Zoltan_RCB_Box($/;"	f
Zoltan_RCB_Build_Structure	rcb/rcb_util.c	/^int Zoltan_RCB_Build_Structure(ZZ *zz, int *num_obj, int *max_obj, int wgtflag,$/;"	f
Zoltan_RCB_Copy_Structure	rcb/rcb_util.c	/^int Zoltan_RCB_Copy_Structure(ZZ *toZZ, ZZ const *fromZZ)$/;"	f
Zoltan_RCB_Free_Structure	rcb/rcb_util.c	/^void Zoltan_RCB_Free_Structure(ZZ *zz)$/;"	f
Zoltan_RCB_Print_Structure	rcb/rcb_util.c	/^void Zoltan_RCB_Print_Structure(ZZ *zz, int howMany)$/;"	f
Zoltan_RCB_Set_Param	rcb/rcb.c	/^int Zoltan_RCB_Set_Param($/;"	f
Zoltan_RCB_box_merge	rcb/rcb.c	/^void Zoltan_RCB_box_merge(void *in, void *inout, int *len, MPI_Datatype *dptr)$/;"	f
Zoltan_RIB	rcb/rib.c	/^int Zoltan_RIB($/;"	f
Zoltan_RIB_Build_Structure	rcb/rib_util.c	/^int Zoltan_RIB_Build_Structure(ZZ *zz, int *num_obj, int *max_obj, int wgtflag,$/;"	f
Zoltan_RIB_Copy_Structure	rcb/rib_util.c	/^int Zoltan_RIB_Copy_Structure(ZZ *toZZ, ZZ const *fromZZ)$/;"	f
Zoltan_RIB_Free_Structure	rcb/rib_util.c	/^void Zoltan_RIB_Free_Structure(ZZ *zz)$/;"	f
Zoltan_RIB_Print_Structure	rcb/rib_util.c	/^void Zoltan_RIB_Print_Structure(ZZ *zz, int howMany)$/;"	f
Zoltan_RIB_Set_Param	rcb/rib.c	/^int Zoltan_RIB_Set_Param($/;"	f
Zoltan_RIB_inertial1d	rcb/inertial1d.c	/^int Zoltan_RIB_inertial1d($/;"	f
Zoltan_RIB_inertial2d	rcb/inertial2d.c	/^int Zoltan_RIB_inertial2d($/;"	f
Zoltan_RIB_inertial3d	rcb/inertial3d.c	/^int Zoltan_RIB_inertial3d($/;"	f
Zoltan_RIB_min_max	rcb/rib.c	/^void Zoltan_RIB_min_max($/;"	f
Zoltan_RIB_reduce_double	rcb/inertial3d.c	/^void Zoltan_RIB_reduce_double(double *in, double *out, int len, MPI_Comm comm,$/;"	f
Zoltan_Rand	zz/zz_rand.c	/^unsigned Zoltan_Rand(unsigned int *myidum) {$/;"	f
Zoltan_Rand_InRange	zz/zz_rand.c	/^unsigned int Zoltan_Rand_InRange (unsigned int *myidum, unsigned int n)$/;"	f
Zoltan_Rand_Perm_Int	zz/zz_rand.c	/^void Zoltan_Rand_Perm_Int (int *data, int n, unsigned int *myidum)$/;"	f
Zoltan_Random	simple/random.c	/^int Zoltan_Random($/;"	f
Zoltan_Realloc	Utilities/Memory/mem.c	/^double *Zoltan_Realloc(void *ptr, size_t n, char *filename, int lineno)$/;"	f
Zoltan_Ref_Type	include/zoltan.h	/^enum Zoltan_Ref_Type {$/;"	g
Zoltan_Reftree_Build	reftree/reftree_build.c	/^int Zoltan_Reftree_Build(ZZ *zz)$/;"	f
Zoltan_Reftree_Build_Recursive	reftree/reftree_build.c	/^static int Zoltan_Reftree_Build_Recursive(ZZ *zz,ZOLTAN_REFTREE *subroot)$/;"	f	file:
Zoltan_Reftree_Clear_Hash_Table	reftree/reftree_hash.c	/^void Zoltan_Reftree_Clear_Hash_Table(struct Zoltan_Reftree_hash_node **hashtab,$/;"	f
Zoltan_Reftree_Clear_IntHash_Table	reftree/reftree_hash.c	/^void Zoltan_Reftree_Clear_IntHash_Table($/;"	f
Zoltan_Reftree_Coarse_Grid_Path	reftree/reftree_coarse_path.c	/^int Zoltan_Reftree_Coarse_Grid_Path(int nobj, int *num_vert, $/;"	f
Zoltan_Reftree_Export_Lists	reftree/reftree_part.c	/^static int Zoltan_Reftree_Export_Lists(ZZ *zz, ZOLTAN_REFTREE *subroot, $/;"	f	file:
Zoltan_Reftree_Free_Structure	reftree/reftree_build.c	/^void Zoltan_Reftree_Free_Structure(ZZ *zz)$/;"	f
Zoltan_Reftree_Free_Subtree	reftree/reftree_build.c	/^static void Zoltan_Reftree_Free_Subtree(ZZ *zz, ZOLTAN_REFTREE *subroot)$/;"	f	file:
Zoltan_Reftree_Get_Child_Order	reftree/reftree_build.c	/^void Zoltan_Reftree_Get_Child_Order(ZZ *zz, int *order, int *ierr)$/;"	f
Zoltan_Reftree_Hash_Insert	reftree/reftree_hash.c	/^void Zoltan_Reftree_Hash_Insert(ZZ *zz, ZOLTAN_REFTREE *reftree_node,$/;"	f
Zoltan_Reftree_Hash_Remove	reftree/reftree_hash.c	/^void Zoltan_Reftree_Hash_Remove (ZZ *zz, ZOLTAN_REFTREE *reftree_node,$/;"	f
Zoltan_Reftree_Init	reftree/reftree_build.c	/^int Zoltan_Reftree_Init(ZZ *zz)$/;"	f
Zoltan_Reftree_IntHash_Insert	reftree/reftree_hash.c	/^void Zoltan_Reftree_IntHash_Insert(ZZ *zz, ZOLTAN_ID_PTR gid, int lid,$/;"	f
Zoltan_Reftree_List_Other_Leaves	reftree/reftree_part.c	/^static void Zoltan_Reftree_List_Other_Leaves(ZZ *zz, ZOLTAN_REFTREE *subroot, $/;"	f	file:
Zoltan_Reftree_Mark_and_Count	reftree/reftree_part.c	/^static int Zoltan_Reftree_Mark_and_Count(ZOLTAN_REFTREE *subroot, int part, $/;"	f	file:
Zoltan_Reftree_Part	reftree/reftree_part.c	/^int Zoltan_Reftree_Part($/;"	f
Zoltan_Reftree_Part_Recursive	reftree/reftree_part.c	/^static int Zoltan_Reftree_Part_Recursive(ZZ *zz, ZOLTAN_REFTREE *subroot, int *part,$/;"	f	file:
Zoltan_Reftree_Partition	reftree/reftree_part.c	/^static int Zoltan_Reftree_Partition(ZZ *zz, float *part_sizes, int *num_export, $/;"	f	file:
Zoltan_Reftree_Print	reftree/reftree_build.c	/^void Zoltan_Reftree_Print(ZZ *zz, ZOLTAN_REFTREE *subroot, int level)$/;"	f
Zoltan_Reftree_Reinit_Coarse	reftree/reftree_build.c	/^static int Zoltan_Reftree_Reinit_Coarse(ZZ *zz)$/;"	f	file:
Zoltan_Reftree_Set_Param	reftree/reftree_build.c	/^int Zoltan_Reftree_Set_Param($/;"	f
Zoltan_Reftree_Struct	reftree/reftree.h	/^struct Zoltan_Reftree_Struct {$/;"	s
Zoltan_Reftree_Sum_All_Weights	reftree/reftree_part.c	/^static void Zoltan_Reftree_Sum_All_Weights(ZZ *zz, ZOLTAN_REFTREE *subroot, int wdim)$/;"	f	file:
Zoltan_Reftree_Sum_My_Weights	reftree/reftree_part.c	/^static void Zoltan_Reftree_Sum_My_Weights(ZZ *zz, ZOLTAN_REFTREE *subroot, $/;"	f	file:
Zoltan_Reftree_Sum_Weights	reftree/reftree_part.c	/^static int Zoltan_Reftree_Sum_Weights(ZZ *zz)$/;"	f	file:
Zoltan_Reftree_data_struct	reftree/reftree.h	/^struct Zoltan_Reftree_data_struct {$/;"	s
Zoltan_Reftree_hash_lookup	reftree/reftree_hash.c	/^ZOLTAN_REFTREE* Zoltan_Reftree_hash_lookup (ZZ *zz, $/;"	f
Zoltan_Reftree_hash_node	reftree/reftree.h	/^struct Zoltan_Reftree_hash_node {$/;"	s
Zoltan_Reftree_inthash_lookup	reftree/reftree_hash.c	/^int Zoltan_Reftree_inthash_lookup (ZZ *zz, $/;"	f
Zoltan_Reftree_inthash_node	reftree/reftree.h	/^struct Zoltan_Reftree_inthash_node {$/;"	s
Zoltan_Register_Fort_Malloc	all/all_allo.c	/^void Zoltan_Register_Fort_Malloc(ZOLTAN_FORT_MALLOC_INT_FN *fort_malloc_int,$/;"	f
Zoltan_Scatter_Graph	parmetis/scatter_graph.c	/^int Zoltan_Scatter_Graph($/;"	f
Zoltan_Scotch	parmetis/scotch_interface.c	/^int Zoltan_Scotch($/;"	f
Zoltan_Scotch_Bind_Param	parmetis/scotch_interface.c	/^static int Zoltan_Scotch_Bind_Param(ZZ* zz, char *alg, char *graph_type, char **strat)$/;"	f	file:
Zoltan_Scotch_Build_Graph	parmetis/scotch_interface.c	/^Zoltan_Scotch_Build_Graph(ZOLTAN_Third_Graph * gr,$/;"	f	file:
Zoltan_Scotch_Construct_Offset	parmetis/scotch_interface.c	/^Zoltan_Scotch_Construct_Offset(ZOS *order, indextype *children, int root,$/;"	f	file:
Zoltan_Scotch_Order	parmetis/scotch_interface.c	/^int Zoltan_Scotch_Order($/;"	f
Zoltan_Scotch_Set_Param	parmetis/scotch_interface.c	/^int Zoltan_Scotch_Set_Param($/;"	f
Zoltan_Seed	zz/zz_rand.c	/^unsigned int Zoltan_Seed()$/;"	f
Zoltan_Set_Border_Obj_List_Fn	zz/zz_set_fn.c	/^int Zoltan_Set_Border_Obj_List_Fn($/;"	f
Zoltan_Set_Child_List_Fn	zz/zz_set_fn.c	/^int Zoltan_Set_Child_List_Fn($/;"	f
Zoltan_Set_Child_Weight_Fn	zz/zz_set_fn.c	/^int Zoltan_Set_Child_Weight_Fn($/;"	f
Zoltan_Set_Coarse_Obj_List_Fn	zz/zz_set_fn.c	/^int Zoltan_Set_Coarse_Obj_List_Fn($/;"	f
Zoltan_Set_Edge_List_Fn	zz/zz_set_fn.c	/^int Zoltan_Set_Edge_List_Fn($/;"	f
Zoltan_Set_Edge_List_Multi_Fn	zz/zz_set_fn.c	/^int Zoltan_Set_Edge_List_Multi_Fn($/;"	f
Zoltan_Set_First_Border_Obj_Fn	zz/zz_set_fn.c	/^int Zoltan_Set_First_Border_Obj_Fn($/;"	f
Zoltan_Set_First_Coarse_Obj_Fn	zz/zz_set_fn.c	/^int Zoltan_Set_First_Coarse_Obj_Fn($/;"	f
Zoltan_Set_First_Obj_Fn	zz/zz_set_fn.c	/^int Zoltan_Set_First_Obj_Fn($/;"	f
Zoltan_Set_Fixed_Obj_List_Fn	zz/zz_set_fn.c	/^int Zoltan_Set_Fixed_Obj_List_Fn($/;"	f
Zoltan_Set_Fn	zz/zz_set_fn.c	/^int Zoltan_Set_Fn(ZZ *zz, ZOLTAN_FN_TYPE fn_type, void (*fn)(void), void *data)$/;"	f
Zoltan_Set_Geom_Fn	zz/zz_set_fn.c	/^int Zoltan_Set_Geom_Fn($/;"	f
Zoltan_Set_Geom_Multi_Fn	zz/zz_set_fn.c	/^int Zoltan_Set_Geom_Multi_Fn($/;"	f
Zoltan_Set_HG_CS_Fn	zz/zz_set_fn.c	/^int Zoltan_Set_HG_CS_Fn($/;"	f
Zoltan_Set_HG_Edge_Weights_Fn	include/zoltan.h	111;"	d
Zoltan_Set_HG_Edge_Wts_Fn	zz/zz_set_fn.c	/^int Zoltan_Set_HG_Edge_Wts_Fn($/;"	f
Zoltan_Set_HG_Size_CS_Fn	zz/zz_set_fn.c	/^int Zoltan_Set_HG_Size_CS_Fn($/;"	f
Zoltan_Set_HG_Size_Edge_Weights_Fn	include/zoltan.h	110;"	d
Zoltan_Set_HG_Size_Edge_Wts_Fn	zz/zz_set_fn.c	/^int Zoltan_Set_HG_Size_Edge_Wts_Fn($/;"	f
Zoltan_Set_Hier_Method_Fn	zz/zz_set_fn.c	/^int Zoltan_Set_Hier_Method_Fn($/;"	f
Zoltan_Set_Hier_Num_Levels_Fn	zz/zz_set_fn.c	/^int Zoltan_Set_Hier_Num_Levels_Fn($/;"	f
Zoltan_Set_Hier_Part_Fn	zz/zz_set_fn.c	/^int Zoltan_Set_Hier_Part_Fn($/;"	f
Zoltan_Set_Hier_Partition_Fn	include/zoltan.h	2603;"	d
Zoltan_Set_Key_Param	params/key_params.c	/^int Zoltan_Set_Key_Param($/;"	f
Zoltan_Set_Machine_Param	ha/build_machine_desc.c	/^int Zoltan_Set_Machine_Param($/;"	f
Zoltan_Set_Malloc_Param	all/all_allo.c	/^int Zoltan_Set_Malloc_Param($/;"	f
Zoltan_Set_Mid_Migrate_Fn	lb/lb_set_fn.c	/^int Zoltan_Set_Mid_Migrate_Fn($/;"	f
Zoltan_Set_Mid_Migrate_PP_Fn	lb/lb_set_fn.c	/^int Zoltan_Set_Mid_Migrate_PP_Fn($/;"	f
Zoltan_Set_Next_Border_Obj_Fn	zz/zz_set_fn.c	/^int Zoltan_Set_Next_Border_Obj_Fn($/;"	f
Zoltan_Set_Next_Coarse_Obj_Fn	zz/zz_set_fn.c	/^int Zoltan_Set_Next_Coarse_Obj_Fn($/;"	f
Zoltan_Set_Next_Obj_Fn	zz/zz_set_fn.c	/^int Zoltan_Set_Next_Obj_Fn($/;"	f
Zoltan_Set_Num_Border_Obj_Fn	zz/zz_set_fn.c	/^int Zoltan_Set_Num_Border_Obj_Fn($/;"	f
Zoltan_Set_Num_Child_Fn	zz/zz_set_fn.c	/^int Zoltan_Set_Num_Child_Fn($/;"	f
Zoltan_Set_Num_Coarse_Obj_Fn	zz/zz_set_fn.c	/^int Zoltan_Set_Num_Coarse_Obj_Fn($/;"	f
Zoltan_Set_Num_Edges_Fn	zz/zz_set_fn.c	/^int Zoltan_Set_Num_Edges_Fn($/;"	f
Zoltan_Set_Num_Edges_Multi_Fn	zz/zz_set_fn.c	/^int Zoltan_Set_Num_Edges_Multi_Fn($/;"	f
Zoltan_Set_Num_Fixed_Obj_Fn	zz/zz_set_fn.c	/^int Zoltan_Set_Num_Fixed_Obj_Fn($/;"	f
Zoltan_Set_Num_Geom_Fn	zz/zz_set_fn.c	/^int Zoltan_Set_Num_Geom_Fn($/;"	f
Zoltan_Set_Num_Obj_Fn	zz/zz_set_fn.c	/^int Zoltan_Set_Num_Obj_Fn($/;"	f
Zoltan_Set_Obj_List_Fn	zz/zz_set_fn.c	/^int Zoltan_Set_Obj_List_Fn($/;"	f
Zoltan_Set_Obj_Size_Fn	zz/zz_set_fn.c	/^int Zoltan_Set_Obj_Size_Fn($/;"	f
Zoltan_Set_Obj_Size_Multi_Fn	zz/zz_set_fn.c	/^int Zoltan_Set_Obj_Size_Multi_Fn($/;"	f
Zoltan_Set_Pack_Obj_Fn	zz/zz_set_fn.c	/^int Zoltan_Set_Pack_Obj_Fn($/;"	f
Zoltan_Set_Pack_Obj_Multi_Fn	zz/zz_set_fn.c	/^int Zoltan_Set_Pack_Obj_Multi_Fn($/;"	f
Zoltan_Set_Param	params/set_param.c	/^int Zoltan_Set_Param($/;"	f
Zoltan_Set_Param_Vec	params/set_param.c	/^int Zoltan_Set_Param_Vec($/;"	f
Zoltan_Set_Part_Fn	zz/zz_set_fn.c	/^int Zoltan_Set_Part_Fn($/;"	f
Zoltan_Set_Part_Multi_Fn	zz/zz_set_fn.c	/^int Zoltan_Set_Part_Multi_Fn($/;"	f
Zoltan_Set_Partition_Fn	include/zoltan.h	2602;"	d
Zoltan_Set_Partition_Multi_Fn	include/zoltan.h	2601;"	d
Zoltan_Set_Post_Migrate_Fn	lb/lb_set_fn.c	/^int Zoltan_Set_Post_Migrate_Fn($/;"	f
Zoltan_Set_Post_Migrate_PP_Fn	lb/lb_set_fn.c	/^int Zoltan_Set_Post_Migrate_PP_Fn($/;"	f
Zoltan_Set_Pre_Migrate_Fn	lb/lb_set_fn.c	/^int Zoltan_Set_Pre_Migrate_Fn($/;"	f
Zoltan_Set_Pre_Migrate_PP_Fn	lb/lb_set_fn.c	/^int Zoltan_Set_Pre_Migrate_PP_Fn($/;"	f
Zoltan_Set_Timer_Param	timer/timer_params.c	/^int Zoltan_Set_Timer_Param($/;"	f
Zoltan_Set_Unpack_Obj_Fn	zz/zz_set_fn.c	/^int Zoltan_Set_Unpack_Obj_Fn($/;"	f
Zoltan_Set_Unpack_Obj_Multi_Fn	zz/zz_set_fn.c	/^int Zoltan_Set_Unpack_Obj_Multi_Fn($/;"	f
Zoltan_Special_Fort_Malloc_Set_Struct	all/all_allo.c	/^int Zoltan_Special_Fort_Malloc_Set_Struct(int *zz_addr_bytes, int **fort_zz) $/;"	f
Zoltan_Special_Free	all/all_allo.c	/^int Zoltan_Special_Free(ZZ *zz, void **array,$/;"	f
Zoltan_Special_Malloc	all/all_allo.c	/^int Zoltan_Special_Malloc(ZZ *zz, void **array, int size,$/;"	f
Zoltan_Special_Malloc_Type	all/all_allo_const.h	/^enum Zoltan_Special_Malloc_Type {$/;"	g
Zoltan_Srand	zz/zz_rand.c	/^void Zoltan_Srand (unsigned int seed, unsigned int *myidum) {$/;"	f
Zoltan_Srand_Sync	zz/zz_rand.c	/^void Zoltan_Srand_Sync($/;"	f
Zoltan_Strdup	zz/zz_util.c	/^char *Zoltan_Strdup(const char *str)$/;"	f
Zoltan_Struct	fort/ztypes.f90	/^type Zoltan_Struct$/;"	t	module:zoltan_types
Zoltan_Struct	zz/zz_const.h	/^struct Zoltan_Struct {$/;"	s
Zoltan_Third_DisplayTime	parmetis/preprocessing.c	/^void Zoltan_Third_DisplayTime(ZZ* zz, double* times)$/;"	f
Zoltan_Third_Exit	parmetis/third_library.c	/^void Zoltan_Third_Exit(ZOLTAN_Third_Graph *gr, ZOLTAN_Third_Geom *geo,$/;"	f
Zoltan_Third_Export_User	parmetis/third_library.c	/^int Zoltan_Third_Export_User(ZOLTAN_Output_Part *part,$/;"	f
Zoltan_Third_Init	parmetis/third_library.c	/^int Zoltan_Third_Init(ZOLTAN_Third_Graph *gr, ZOLTAN_Third_Part  *prt, ZOLTAN_Third_Vsize *vsp, ZOLTAN_Output_Part *part,$/;"	f
Zoltan_Third_Set_Param	parmetis/preprocessing.c	/^int Zoltan_Third_Set_Param($/;"	f
Zoltan_Time	Utilities/Timer/timer.c	/^double Zoltan_Time(int timer)$/;"	f
Zoltan_Time_Resolution	Utilities/Timer/timer.c	/^double Zoltan_Time_Resolution(int timer)$/;"	f
Zoltan_Timer	Utilities/Timer/zoltan_timer.c	/^typedef struct Zoltan_Timer {$/;"	s	file:
Zoltan_Timer_ChangeFlag	Utilities/Timer/zoltan_timer.c	/^int Zoltan_Timer_ChangeFlag($/;"	f
Zoltan_Timer_Copy	Utilities/Timer/zoltan_timer.c	/^ZTIMER *Zoltan_Timer_Copy(ZTIMER *from)$/;"	f
Zoltan_Timer_Copy_To	Utilities/Timer/zoltan_timer.c	/^int Zoltan_Timer_Copy_To(ZTIMER **to, ZTIMER *from)$/;"	f
Zoltan_Timer_Create	Utilities/Timer/zoltan_timer.c	/^ZTIMER *Zoltan_Timer_Create($/;"	f
Zoltan_Timer_Destroy	Utilities/Timer/zoltan_timer.c	/^void Zoltan_Timer_Destroy($/;"	f
Zoltan_Timer_Init	Utilities/Timer/zoltan_timer.c	/^int Zoltan_Timer_Init($/;"	f
Zoltan_Timer_Object	include/zoltan_timer_cpp.h	/^  Zoltan_Timer_Object(const Zoltan_Timer_Object &zt)$/;"	f	class:Zoltan_Timer_Object
Zoltan_Timer_Object	include/zoltan_timer_cpp.h	/^  Zoltan_Timer_Object(int flag = ZOLTAN_TIME_WALL) {$/;"	f	class:Zoltan_Timer_Object
Zoltan_Timer_Object	include/zoltan_timer_cpp.h	/^class Zoltan_Timer_Object {$/;"	c
Zoltan_Timer_Print	Utilities/Timer/zoltan_timer.c	/^int Zoltan_Timer_Print($/;"	f
Zoltan_Timer_PrintAll	Utilities/Timer/zoltan_timer.c	/^int Zoltan_Timer_PrintAll($/;"	f
Zoltan_Timer_Reset	Utilities/Timer/zoltan_timer.c	/^int Zoltan_Timer_Reset($/;"	f
Zoltan_Timer_Start	Utilities/Timer/zoltan_timer.c	/^int Zoltan_Timer_Start($/;"	f
Zoltan_Timer_Stop	Utilities/Timer/zoltan_timer.c	/^int Zoltan_Timer_Stop($/;"	f
Zoltan_Transform_Box	zz/zz_util.c	/^void Zoltan_Transform_Box( $/;"	f
Zoltan_Transform_Box_Points	zz/zz_util.c	/^void Zoltan_Transform_Box_Points($/;"	f
Zoltan_Transform_Point	zz/zz_util.c	/^void Zoltan_Transform_Point($/;"	f
Zoltan_Transform_Struct	zz/zz_const.h	/^struct Zoltan_Transform_Struct{$/;"	s
Zoltan_Unpack_Obj_Fort_Wrapper	fort/cwrap.c	/^void Zoltan_Unpack_Obj_Fort_Wrapper(void *data, int num_gid_entries,$/;"	f
Zoltan_Unpack_Obj_Multi_Fort_Wrapper	fort/cwrap.c	/^void Zoltan_Unpack_Obj_Multi_Fort_Wrapper($/;"	f
Zoltan_User_Data_1	fort/zoltan_user_data.f90	/^type Zoltan_User_Data_1$/;"	t	module:zoltan_user_data
Zoltan_User_Data_2	fort/zoltan_user_data.f90	/^type Zoltan_User_Data_2$/;"	t	module:zoltan_user_data
Zoltan_User_Data_3	fort/zoltan_user_data.f90	/^type Zoltan_User_Data_3$/;"	t	module:zoltan_user_data
Zoltan_User_Data_4	fort/zoltan_user_data.f90	/^type Zoltan_User_Data_4$/;"	t	module:zoltan_user_data
Zoltan_Verify_Graph	parmetis/verify_graph.c	/^int Zoltan_Verify_Graph(MPI_Comm comm, indextype *vtxdist, indextype *xadj, $/;"	f
Zoltan_ZG_Build	graph/graph.c	/^Zoltan_ZG_Build (ZZ* zz, ZG* graph, int local)$/;"	f
Zoltan_ZG_Export	graph/graph.c	/^Zoltan_ZG_Export (ZZ* zz, const ZG* const graph, int *gvtx, int *nvtx,$/;"	f
Zoltan_ZG_Free	graph/graph.c	/^Zoltan_ZG_Free(ZG *graph){$/;"	f
Zoltan_ZG_Query	graph/graph.c	/^Zoltan_ZG_Query (ZZ* zz, const ZG* const graph,$/;"	f
Zoltan_ZG_Register	graph/graph.c	/^Zoltan_ZG_Register(ZZ* zz, ZG* graph, int* properties)$/;"	f
Zoltan_ZG_Set_Param	graph/graph.c	/^int Zoltan_ZG_Set_Param($/;"	f
Zoltan_ZG_Vertex_Info	graph/graph.c	/^Zoltan_ZG_Vertex_Info(ZZ* zz, const ZG *const graph,$/;"	f
Zoltan_average_cuts_reduce	par/par_average.c	/^static void Zoltan_average_cuts_reduce($/;"	f	file:
Zoltan_bisector_copy	par/par_bisect.c	/^static void Zoltan_bisector_copy(struct bisector *from, struct bisector *to)$/;"	f	file:
Zoltan_bisector_merge	par/par_bisect.c	/^void Zoltan_bisector_merge(void *in, void *inout, int *len, MPI_Datatype *dptr)$/;"	f
Zoltan_comm_f2c	fort/cwrap.c	/^MPI_Comm Zoltan_comm_f2c(int *f_comm)$/;"	f
Zoltan_daxpy	par/par_bisect.c	/^static void Zoltan_daxpy(int n, double alpha, double *x, double *y, double *z)$/;"	f	file:
Zoltan_matrix	matrix/matrix.h	/^} Zoltan_matrix;$/;"	t	typeref:struct:Zoltan_matrix_
Zoltan_matrix_	matrix/matrix.h	/^typedef struct Zoltan_matrix_ {$/;"	s
Zoltan_matrix_2d	matrix/matrix.h	/^} Zoltan_matrix_2d;$/;"	t	typeref:struct:Zoltan_matrix_2d_
Zoltan_matrix_2d_	matrix/matrix.h	/^typedef struct Zoltan_matrix_2d_ {$/;"	s
Zoltan_matrix_options	matrix/matrix.h	/^} Zoltan_matrix_options;$/;"	t	typeref:struct:Zoltan_matrix_options_
Zoltan_matrix_options_	matrix/matrix.h	/^typedef struct Zoltan_matrix_options_ {$/;"	s
Zoltan_norm	par/par_bisect.c	/^static double Zoltan_norm(int mcnorm, int n, double *x, double *scal)$/;"	f	file:
Zoltan_part_info	lb/lb_const.h	/^struct Zoltan_part_info {$/;"	s
Zoltan_quicksort_list_inc_double	util/converters_for_JPDC_adaptive_mesh_experiments/chaco2chaco/main.c	/^void Zoltan_quicksort_list_inc_double(struct KEY *list, int start, int end)$/;"	f
Zoltan_quicksort_list_inc_int	zz/zz_sort.c	/^void Zoltan_quicksort_list_inc_int (int* list, int *parlist, int start, int end)$/;"	f
Zoltan_quicksort_pointer_dec_double	zz/zz_sort.c	/^void Zoltan_quicksort_pointer_dec_double ($/;"	f
Zoltan_quicksort_pointer_dec_float	zz/zz_sort.c	/^void Zoltan_quicksort_pointer_dec_float ($/;"	f
Zoltan_quicksort_pointer_dec_float_int	zz/zz_sort.c	/^void Zoltan_quicksort_pointer_dec_float_int ($/;"	f
Zoltan_quicksort_pointer_inc_float	zz/zz_sort.c	/^void Zoltan_quicksort_pointer_inc_float ($/;"	f
Zoltan_quicksort_pointer_inc_int_int	zz/zz_sort.c	/^void Zoltan_quicksort_pointer_inc_int_int ($/;"	f
Zoltan_reduce_bisector	par/par_bisect.c	/^static void Zoltan_reduce_bisector(int nproc, int rank, int proc, int n, $/;"	f	file:
_DEBUG1	phg/phg_coarse.c	34;"	d	file:
_DR_COMPRESS_CONST_H	driver/dr_compress_const.h	15;"	d
_DR_CONST_H	driver/dr_const.h	15;"	d
_DR_CONST_H	driver_old/dr_const.h	16;"	d
_DR_ELEM_UTIL_CONST_H_	driver/dr_elem_util_const.h	16;"	d
_DR_ELEM_UTIL_CONST_H_	driver_old/dr_elem_util_const.h	16;"	d
_DR_ELM_CONST_H	driver/dr_elem_const.h	16;"	d
_DR_ELM_CONST_H	driver_old/dr_elem_const.h	16;"	d
_DR_ERR_CONST_H_	driver/dr_err_const.h	16;"	d
_DR_ERR_CONST_H_	driver_old/dr_err_const.h	16;"	d
_DR_EVAL_H_	driver/dr_eval_const.h	16;"	d
_DR_EVAL_H_	driver_old/dr_eval_const.h	16;"	d
_DR_INPUT_CONST_H_	driver/dr_input_const.h	16;"	d
_DR_INPUT_CONST_H_	driver_old/dr_input_const.h	16;"	d
_DR_LOADBAL_CONST_H_	driver/dr_loadbal_const.h	16;"	d
_DR_LOADBAL_CONST_H_	driver_old/dr_loadbal_const.h	16;"	d
_DR_MAPS_CONST_H	driver/dr_maps_const.h	16;"	d
_DR_MAPS_CONST_H	driver_old/dr_maps_const.h	16;"	d
_DR_OUTPUT_CONST_H_	driver/dr_output_const.h	16;"	d
_DR_OUTPUT_CONST_H_	driver_old/dr_output_const.h	16;"	d
_DR_PAR_UTIL_CONST_H_	driver/dr_par_util_const.h	16;"	d
_DR_PAR_UTIL_CONST_H_	driver_old/dr_par_util_const.h	16;"	d
_DR_UTIL_CONST_H_	driver/dr_util_const.h	16;"	d
_DR_UTIL_CONST_H_	driver_old/dr_util_const.h	16;"	d
_ELB_ALLO_CONST_H_	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_allo_const.h	18;"	d
_ELB_ELM_CONST_H	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_elem_const.h	18;"	d
_ELB_EXO_CONST_H_	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_exo_const.h	18;"	d
_ELB_GRAPH_CONST_H_	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_graph_const.h	18;"	d
_ELB_GROUPS_CONST_H_	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_groups_const.h	18;"	d
_ELB_INP_CONST_H_	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_inp_const.h	18;"	d
_ELB_LOADBAL_CONST_H_	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_loadbal_const.h	18;"	d
_ELB_OUTPUT_CONST_H_	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_output_const.h	18;"	d
_ELB_UTIL_CONST_H_	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_util_const.h	18;"	d
_EXOIILB_CONST_H_	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	18;"	d
_EXOIILB_ERR_CONST_H_	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_err_const.h	18;"	d
_G2L_HASH_H_	coloring/g2l_hash.h	14;"	d
_GID_lookup	phg/phg_lookup.h	/^typedef struct _GID_lookup{$/;"	s
_Octant	oct/octant_const.h	/^typedef struct _Octant {            \/* octant tree node that has 8 children *\/$/;"	s
_ZOLTAN_HG_READFILE_CONST_H_	driver/dr_hg_readfile.h	16;"	d
_Zoltan_Get_Obj_List	zz/zz_obj_list.c	/^static int _Zoltan_Get_Obj_List($/;"	f	file:
__ALL_ALLO_H	all/all_allo_const.h	16;"	d
__CH_INPUT_CONST_H	ch/ch_input_const.h	16;"	d
__COLORING_CONST_H	coloring/coloring_const.h	16;"	d
__COLORING_H	coloring/coloring.h	15;"	d
__COMMON_H	parmetis/graph_util.h	16;"	d
__COMM_CONST_H	include/zoltan_comm.h	16;"	d
__COMM_H	Utilities/Communication/comm.h	16;"	d
__COSTS_CONST_H	oct/costs_const.h	10;"	d
__COSTS_H	oct/costs.h	10;"	d
__CREATE_PROC_LIST_CONST_H	rcb/create_proc_list_const.h	16;"	d
__DFS_CONST_H	oct/dfs_const.h	10;"	d
__DFS_H	oct/dfs.h	10;"	d
__DR_DD_H	driver/dr_dd.h	15;"	d
__GRAPH_CONST_H	graph/graph_const.h	16;"	d
__GRAPH_H	graph/graph.h	15;"	d
__HA_CONST_H	ha/ha_const.h	16;"	d
__HA_DRUM_H	ha/ha_drum.h	17;"	d
__HIER_H	hier/hier.h	15;"	d
__HSFC_HILBERT_CONST_H	hsfc/hsfc_hilbert_const.h	16;"	d
__HSFC_HILBERT_CONST_H	util/converters_for_JPDC_adaptive_mesh_experiments/chaco2chaco/hsfc_hilbert_const.h	16;"	d
__KEY_PARAMS_H	params/key_params.h	16;"	d
__LBI_CONST_H	include/lbi_const.h	15;"	d
__LB_CONST_H	lb/lb_const.h	16;"	d
__LB_INIT_CONST_H	lb/lb_init_const.h	16;"	d
__MATRIX_H	matrix/matrix.h	24;"	d
__MEM_CONST_H	include/zoltan_mem.h	16;"	d
__MIGOCT_CONST_H	oct/migoct_const.h	10;"	d
__MIGREG_CONST_H	oct/migreg_const.h	10;"	d
__MIGREG_H	oct/migreg.h	10;"	d
__MIGTAGS_CONST_H	oct/migtags_const.h	10;"	d
__MSG_CONST_H	oct/msg_const.h	10;"	d
__OCTANT_CONST_H	oct/octant_const.h	10;"	d
__OCTUPDATE_CONST_H	oct/octupdate_const.h	10;"	d
__OCTUPDATE_H	oct/octupdate.h	10;"	d
__OCT_OCTREE_CONST_H	oct/octree_const.h	10;"	d
__OCT_ROOTLIST_CONST_H	oct/rootlist_const.h	10;"	d
__OCT_SFC_H	oct/SFC.h	10;"	d
__OCT_UTIL_CONST_H	oct/oct_util_const.h	10;"	d
__ORDER_CONST_H	order/order_const.h	16;"	d
__PARAMS_CONST_H	params/params_const.h	16;"	d
__PARMETIS_INTERFACE_H	parmetis/parmetis_interface.h	16;"	d
__PAR_AVERAGE_CONST_H	par/par_average_const.h	16;"	d
__PAR_BISECT_CONST_H	par/par_bisect_const.h	16;"	d
__PAR_CONST_H	par/par_const.h	16;"	d
__PAR_MEDIAN_CONST_H	par/par_median_const.h	16;"	d
__PAR_TFLOPS_SPECIAL_H	par/par_tflops_special_const.h	16;"	d
__PHG_CONST_H	phg/phg_const.h	15;"	d
__PHG_HYPERGRAPH_H	phg/phg_hypergraph.h	15;"	d
__PHG_UTIL_H	phg/phg_util.h	15;"	d
__RCB_CONST_H	rcb/rcb_const.h	16;"	d
__RCB_H	rcb/rcb.h	16;"	d
__REFTREE_CONST_H	reftree/reftree_const.h	10;"	d
__REFTREE_H	reftree/reftree.h	10;"	d
__RIB_CONST_H	rcb/rib_const.h	16;"	d
__RIB_H	rcb/rib.h	16;"	d
__SCOTCH_INTERFACE_H	parmetis/scotch_interface.h	16;"	d
__SHARED_CONST_H	rcb/shared.h	16;"	d
__THIRD_LIBRARY_CONST_H	parmetis/third_library_const.h	16;"	d
__THIRD_LIBRARY_H	parmetis/third_library.h	16;"	d
__THIRD_LIBRARY_TOOLS_H	parmetis/third_library_tools.h	16;"	d
__TIMER_CONST_H	timer/timer_const.h	16;"	d
__TIMER_H	Utilities/Timer/timer.h	16;"	d
__USE_XOPEN	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/add_to_log.c	9;"	d	file:
__ZOLTANPARAMS_H	driver/dr_param_file.h	39;"	d
__ZOLTANPARAMS_H	driver/dr_param_fileCPP.h	39;"	d
__ZOLTANTIMER_H	include/zoltan_timer.h	16;"	d
__ZOLTAN_ALIGN_H	include/zoltan_align.h	15;"	d
__ZOLTAN_CONST_H	zz/zz_const.h	16;"	d
__ZOLTAN_EVAL_H	include/zoltan_eval.h	16;"	d
__ZOLTAN_H	include/zoltan.h	15;"	d
__ZOLTAN_ID_CONST_H	zz/zz_id_const.h	15;"	d
__ZOLTAN_ID_H	Utilities/shared/zoltan_id.h	16;"	d
__ZOLTAN_PHG_COMM_H	phg/phg_comm.h	14;"	d
__ZOLTAN_PHG_DISTRIB_H	phg/phg_distrib.h	14;"	d
__ZOLTAN_PHG_H	phg/phg.h	15;"	d
__ZOLTAN_PHG_LOOKUP_H	phg/phg_lookup.h	14;"	d
__ZOLTAN_PHG_TREE_H	phg/phg_tree.h	15;"	d
__ZOLTAN_PHG_VERBOSE_H	phg/phg_verbose.h	14;"	d
__ZOLTAN_TYPES_H	include/zoltan_types.h	15;"	d
__ZOLTAN_UTIL_CONST_H	zz/zz_util_const.h	16;"	d
__ZOLTAN_UTIL_H	Utilities/shared/zoltan_util.h	16;"	d
__ZZ_RAND_H	zz/zz_rand.h	14;"	d
__func__	zz/zz_const.h	36;"	d
_commStruct	par/par_median_randomized.c	/^typedef struct _commStruct{$/;"	s	file:
_eval_balance_struct	include/zoltan_eval.h	/^struct _eval_balance_struct{$/;"	s
_eval_graph_struct	include/zoltan_eval.h	/^struct _eval_graph_struct{$/;"	s
_eval_hg_struct	include/zoltan_eval.h	/^struct _eval_hg_struct{$/;"	s
_export_buf	lb/low_mem_lb_migrate.c	/^static char *_export_buf= NULL;$/;"	v	file:
_export_buf_len	lb/low_mem_lb_migrate.c	/^static int _export_buf_len = 0;$/;"	v	file:
_gid_list	lb/low_mem_lb_migrate.c	/^static ZOLTAN_ID_PTR _gid_list = NULL;$/;"	v	file:
_gid_list_len	lb/low_mem_lb_migrate.c	/^static int _gid_list_len = 0;$/;"	v	file:
_hshEdge	phg/phg_lookup.h	/^typedef struct _hshEdge{ \/* Edges assigned to this process with hash func *\/$/;"	s
_hshVtx	phg/phg_lookup.h	/^typedef struct _hshVtx{ \/* Vertices assigned to this process with hash func *\/$/;"	s
_idx	lb/low_mem_lb_migrate.c	/^static int *_idx = NULL;$/;"	v	file:
_idx_len	lb/low_mem_lb_migrate.c	/^static int _idx_len = 0;$/;"	v	file:
_import_buf	lb/low_mem_lb_migrate.c	/^static char *_import_buf= NULL;$/;"	v	file:
_import_buf_len	lb/low_mem_lb_migrate.c	/^static int _import_buf_len = 0;$/;"	v	file:
_import_gids	lb/low_mem_lb_migrate.c	/^static ZOLTAN_ID_PTR _import_gids= NULL;$/;"	v	file:
_import_gids_len	lb/low_mem_lb_migrate.c	/^static int _import_gids_len = 0;$/;"	v	file:
_import_lids	lb/low_mem_lb_migrate.c	/^static ZOLTAN_ID_PTR _import_lids = NULL;$/;"	v	file:
_import_lids_len	lb/low_mem_lb_migrate.c	/^static int _import_lids_len = 0;$/;"	v	file:
_import_parts	lb/low_mem_lb_migrate.c	/^static int *_import_parts = NULL;$/;"	v	file:
_import_parts_len	lb/low_mem_lb_migrate.c	/^static int _import_parts_len = 0;$/;"	v	file:
_import_procs	lb/low_mem_lb_migrate.c	/^static int *_import_procs = NULL;$/;"	v	file:
_import_procs_len	lb/low_mem_lb_migrate.c	/^static int _import_procs_len = 0;$/;"	v	file:
_lid_list	lb/low_mem_lb_migrate.c	/^static ZOLTAN_ID_PTR _lid_list = NULL;$/;"	v	file:
_lid_list_len	lb/low_mem_lb_migrate.c	/^static int _lid_list_len = 0;$/;"	v	file:
_myEW	phg/phg_lookup.h	/^typedef struct _myEW{     \/* Values returned by edge weight query functions *\/$/;"	s
_myObj	phg/phg_lookup.h	/^typedef struct _myObj{  \/* Vertices returned in Get_Obj_List queries *\/$/;"	s
_myPin	phg/phg_lookup.h	/^typedef struct _myPin{      \/* Pins returned by hypergraph query functions *\/$/;"	s
_part_list	lb/low_mem_lb_migrate.c	/^static int *_part_list = NULL;$/;"	v	file:
_part_list_len	lb/low_mem_lb_migrate.c	/^static int _part_list_len = 0;$/;"	v	file:
_proc_list	lb/low_mem_lb_migrate.c	/^static int *_proc_list = NULL;$/;"	v	file:
_proc_list_len	lb/low_mem_lb_migrate.c	/^static int _proc_list_len = 0;$/;"	v	file:
_request	lb/low_mem_lb_migrate.c	/^static MPI_Request _request;$/;"	v	file:
_sizes	lb/low_mem_lb_migrate.c	/^static int *_sizes = NULL;$/;"	v	file:
_sizes_len	lb/low_mem_lb_migrate.c	/^static int _sizes_len = 0;$/;"	v	file:
_zoltan_sortFunc	driver/dr_hg_io.c	/^int _zoltan_sortFunc(const void *a, const void *b)$/;"	f
a1	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double a1, a2, a3;	\/* linear mapping coefficients *\/$/;"	v	file:
a1g	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double a1g, a2g, a3g;	\/* gamma first derivatives *\/$/;"	v	file:
a1gg	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double a1gg, a2gg, a3gg;	\/* gamma\/gamma second derivatives *\/$/;"	v	file:
a1p	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double a1p, a2p, a3p;	\/* phi first derivatives *\/$/;"	v	file:
a1pg	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double a1pg, a2pg, a3pg;	\/* phi\/gamma second derivatives *\/$/;"	v	file:
a1pp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double a1pp, a2pp, a3pp;	\/* phi\/phi second derivatives *\/$/;"	v	file:
a1t	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double a1t, a2t, a3t;	\/* theta first derivatives *\/$/;"	v	file:
a1tg	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double a1tg, a2tg, a3tg;	\/* theta\/gamma second derivatives *\/$/;"	v	file:
a1tp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double a1tp, a2tp, a3tp;	\/* theta\/phi second derivatives *\/$/;"	v	file:
a1tt	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double a1tt, a2tt, a3tt;	\/* theta\/theta second derivatives *\/$/;"	v	file:
a2	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double a1, a2, a3;	\/* linear mapping coefficients *\/$/;"	v	file:
a2g	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double a1g, a2g, a3g;	\/* gamma first derivatives *\/$/;"	v	file:
a2gg	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double a1gg, a2gg, a3gg;	\/* gamma\/gamma second derivatives *\/$/;"	v	file:
a2p	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double a1p, a2p, a3p;	\/* phi first derivatives *\/$/;"	v	file:
a2pg	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double a1pg, a2pg, a3pg;	\/* phi\/gamma second derivatives *\/$/;"	v	file:
a2pp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double a1pp, a2pp, a3pp;	\/* phi\/phi second derivatives *\/$/;"	v	file:
a2t	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double a1t, a2t, a3t;	\/* theta first derivatives *\/$/;"	v	file:
a2tg	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double a1tg, a2tg, a3tg;	\/* theta\/gamma second derivatives *\/$/;"	v	file:
a2tp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double a1tp, a2tp, a3tp;	\/* theta\/phi second derivatives *\/$/;"	v	file:
a2tt	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double a1tt, a2tt, a3tt;	\/* theta\/theta second derivatives *\/$/;"	v	file:
a3	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double a1, a2, a3;	\/* linear mapping coefficients *\/$/;"	v	file:
a3g	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double a1g, a2g, a3g;	\/* gamma first derivatives *\/$/;"	v	file:
a3gg	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double a1gg, a2gg, a3gg;	\/* gamma\/gamma second derivatives *\/$/;"	v	file:
a3p	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double a1p, a2p, a3p;	\/* phi first derivatives *\/$/;"	v	file:
a3pg	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double a1pg, a2pg, a3pg;	\/* phi\/gamma second derivatives *\/$/;"	v	file:
a3pp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double a1pp, a2pp, a3pp;	\/* phi\/phi second derivatives *\/$/;"	v	file:
a3t	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double a1t, a2t, a3t;	\/* theta first derivatives *\/$/;"	v	file:
a3tg	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double a1tg, a2tg, a3tg;	\/* theta\/gamma second derivatives *\/$/;"	v	file:
a3tp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double a1tp, a2tp, a3tp;	\/* theta\/phi second derivatives *\/$/;"	v	file:
a3tt	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double a1tt, a2tt, a3tt;	\/* theta\/theta second derivatives *\/$/;"	v	file:
above	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/refine_map/refine_map.h	/^	float above;		\/* sum of edge weights pulling me higher *\/$/;"	m	struct:refine_vdata
abs	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	146;"	d
abs	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	146;"	d
absval	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/defs.h	4;"	d
ackTag	lb/low_mem_lb_migrate.c	/^static int ackTag = 10000, dataTag = 20000, sizeTag=30000;$/;"	v	file:
actual_arrays	lb/lb_migrate.c	/^static int actual_arrays($/;"	f	file:
actual_arrays	lb/low_mem_lb_migrate.c	/^static int actual_arrays($/;"	f	file:
add2bilist	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klspiff/bilistops.c	/^void      add2bilist(lptr, list)\/* add val to unsorted list *\/$/;"	f
addCaption	util/vtk_view.cpp	/^static char addCaption[1024] = {'\\0'};$/;"	v	file:
addRef	ZoltanComponent/CCA_Wrapper/BaseLB.h	/^    virtual void addRef() { ref++ ; } $/;"	f	class:ZoltanSpace::BaseLB
addRef	ZoltanComponent/CCA_Wrapper/EntityListImpl.h	/^    virtual void addRef() { ref++ ; }$/;"	f	class:ZoltanSpace::EntityListImpl
add_around_vertex	reftree/reftree_coarse_path.c	/^static int add_around_vertex(int vert, ZZ *zz)$/;"	f	file:
add_around_vertices	reftree/reftree_coarse_path.c	/^static int add_around_vertices(ZZ *zz)$/;"	f	file:
add_edges	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/connect/add_edges.c	/^void      add_edges(graph, new_edges, old_edges, old_ewgts, using_ewgts)$/;"	f
add_graph_extra_weight	lb/lb_eval.c	/^add_graph_extra_weight(ZZ *zz, int num_obj, int *edges_per_obj, int *vwgt_dim, float **vwgts)$/;"	f	file:
add_neigh_pair	reftree/reftree_coarse_path.c	/^static int add_neigh_pair(int v,int e1,int e2, ZZ *zz)$/;"	f	file:
add_new_vals	driver/dr_mm_readfile.c	/^static int add_new_vals(int *newvals, int newCount, $/;"	f	file:
add_obj_weight	phg/phg.h	/^  int add_obj_weight;       \/* Calculated weight: unit vertex, non-zeroes,$/;"	m	struct:PHGPartParamsStruct
add_param	params/set_param.c	/^static int add_param($/;"	f	file:
add_to_cycle	reftree/reftree_coarse_path.c	/^static int add_to_cycle(int element)$/;"	f	file:
add_to_cycle_by_element	reftree/reftree_coarse_path.c	/^static int add_to_cycle_by_element(int elementD, int indexB1, int indexB2)$/;"	f	file:
add_to_list	rcb/box_assign.c	/^void add_to_list($/;"	f
add_to_log	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/add_to_log.c	/^void add_to_log(const char *my_name)$/;"	f
add_to_to_add	reftree/reftree_coarse_path.c	/^static int add_to_to_add(int element, ZZ *zz)$/;"	f	file:
addr	fort/ztypes.f90	/^   character(len=Zoltan_PTR_LENGTH) :: addr$/;"	k	type:Zoltan_PTR
addr	fort/ztypes.f90	/^   type(Zoltan_PTR) :: addr$/;"	k	type:Zoltan_Struct
addr	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^	char *addr;$/;"	m	struct:Vardesc
addr	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^	char *addr;$/;"	m	struct:Vardesc
address	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^typedef char *address;$/;"	t
address	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^typedef char *address;$/;"	t
adj	driver/dr_const.h	/^  int     *adj;		\/* list of adjacent elements .$/;"	m	struct:Element_Description
adj	driver_old/dr_const.h	/^  int     *adj;		\/* list of adjacent elements .$/;"	m	struct:Element_Description
adj	fdriver/fdr_const.f90	/^  integer(Zoltan_INT), pointer :: adj(/;"	k	type:ELEM_INFO
adj	fdriver_old/lb_user_const.f90	/^  integer(LB_INT), pointer :: adj(/;"	k	type:ELEM_INFO
adj	hier/hier.c	/^  ZOLTAN_ID_PTR adj;$/;"	m	struct:HierGIDInfo	file:
adj	parmetis/third_library_tools.h	/^  int *adj;          \/* Pointer to adjcny array *\/$/;"	m	struct:Edge_Info
adj	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int     *adj;$/;"	m	struct:Graph_Description
adj_alloc	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  long     adj_alloc;$/;"	m	struct:Graph_Description
adj_band	zz/zz_const.h	/^  int *adj_band;       \/* bandwidth of each link *\/$/;"	m	struct:__anon37
adj_blank	driver/dr_const.h	/^  int     *adj_blank;   \/* NULL if not blanking, else 1\/0 for blanked\/not *\/$/;"	m	struct:Element_Description
adj_lat	zz/zz_const.h	/^  int *adj_lat;        \/* latency of each link *\/$/;"	m	struct:__anon37
adj_len	driver/dr_const.h	/^  int      adj_len;	\/* allocated length of adj\/adj_proc\/edge_wgt arrays *\/$/;"	m	struct:Element_Description
adj_len	driver_old/dr_const.h	/^  int      adj_len;	\/* allocated length of adj\/adj_proc\/edge_wgt arrays *\/$/;"	m	struct:Element_Description
adj_len	fdriver/fdr_const.f90	/^  integer(Zoltan_INT) :: adj_len /;"	k	type:ELEM_INFO
adj_len	fdriver_old/lb_user_const.f90	/^  integer(LB_INT) :: adj_len /;"	k	type:ELEM_INFO
adj_proc	driver/dr_const.h	/^  int     *adj_proc;	\/* list of processors for adjacent elements *\/$/;"	m	struct:Element_Description
adj_proc	driver_old/dr_const.h	/^  int     *adj_proc;	\/* list of processors for adjacent elements *\/$/;"	m	struct:Element_Description
adj_proc	fdriver/fdr_const.f90	/^  integer(Zoltan_INT), pointer :: adj_proc(/;"	k	type:ELEM_INFO
adj_proc	fdriver_old/lb_user_const.f90	/^  integer(LB_INT), pointer :: adj_proc(/;"	k	type:ELEM_INFO
adjncy	hier/hier.h	/^  ZOLTAN_ID_PTR adjncy;              \/*    see Zoltan_Build_Graph *\/$/;"	m	struct:HierPartParamsStruct
adjncy	parmetis/third_library.h	/^  indextype * adjncy;                   \/* adjency array (CSR) *\/$/;"	m	struct:ZOLTAN_Third_Graph_
adjncy	zz/zz_const.h	/^  int *adjncy;         \/* link list *\/$/;"	m	struct:__anon37
adjproc	hier/hier.h	/^  int *adjproc;                      \/* adjacent proc for each edge *\/$/;"	m	struct:HierPartParamsStruct
adjproc	parmetis/third_library.h	/^  int * adjproc;                        \/* Array of procs ? *\/$/;"	m	struct:ZOLTAN_Third_Graph_
adjust	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int  *adjust;$/;"	m	struct:Sphere_Info
aerr	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^{	flag aerr;$/;"	m	struct:__anon24
aerr	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^{	flag aerr;$/;"	m	struct:__anon16
affirm	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/affirm.c	/^int       affirm(char *prompt)$/;"	f
alist	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^} alist;$/;"	t	typeref:struct:__anon24
alist	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^} alist;$/;"	t	typeref:struct:__anon16
all	phg/phg_tree.h	/^  int all;  \/* All of Zoltan_PHG; this timer includes other timers and their$/;"	m	struct:phg_timer_indices
all_usage	util/vtk_view.cpp	/^static void all_usage()$/;"	f	file:
allocVCycle	phg/phg_Vcycle.c	/^static int allocVCycle(VCycle *v)$/;"	f	file:
alloc_cnt	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int     *alloc_cnt;$/;"	m	struct:Graph_Description
alloc_graph	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int   alloc_graph;$/;"	m	struct:Problem_Description
alloc_migrated_in_gids	hier/hier.h	/^  int alloc_migrated_in_gids;        \/* size of allocated array of migrated$/;"	m	struct:HierPartParamsStruct
alloc_reftree_nodes	reftree/reftree_build.c	/^static int alloc_reftree_nodes(ZZ *zz, ZOLTAN_REFTREE **node, int num_node,$/;"	f	file:
alloc_stat	fdriver/fdr_main.f90	/^  integer(Zoltan_INT) :: alloc_stat$/;"	v	program:fdriver
alloc_stat	fdriver_old/fdr_main.f90	/^  integer(LB_INT) :: alloc_stat$/;"	v	program:fdriver
allocate_copy_list	Utilities/DDirectory/DD_Create.c	/^static void allocate_copy_list(DD_Node **new, DD_Node *l, int len)$/;"	f	file:
allocsize_gids_of_interest	hier/hier.h	/^  int allocsize_gids_of_interest;    \/* size of gids_of_interest array *\/$/;"	m	struct:HierPartParamsStruct
ancestor	order/order_const.h	/^  int *ancestor;                \/* Out: father of block i *\/$/;"	m	struct:Zoltan_Order_Struct
aprod_	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/aprod.c	/^int       aprod_(lnvtxs, x, y, dA, vwsqrt, work, dorthlist)$/;"	f
area	oct/octant_const.h	/^  double area;$/;"	m	struct:_Octant
array	phg/phg_tree.h	/^  int * array;$/;"	m	struct:Zoltan_PHG_Tree_
array_alloc	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_allo.c	/^void *array_alloc (int numdim , ...)$/;"	f
array_alloc_2D_ret	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/array_alloc_2D.c	/^void *array_alloc_2D_ret(int dim1, int dim2, size_t size)$/;"	f
assert_sorted	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_util.c	/^void assert_sorted(int *vector, int vecsize)$/;"	f
assign	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/assign/assign.c	/^void      assign(graph, yvecs, nvtxs, ndims, cube_or_mesh, nsets, wsqrt, sets,$/;"	f
assign_out	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/assign/assign_out.c	/^void      assign_out(nvtxs, sets, nsets, outname)$/;"	f
assign_out_inv	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/assign/assign_out.c	/^static void assign_out_inv(nvtxs, sets, nsets, outname)$/;"	f	file:
assign_out_normal	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/assign/assign_out.c	/^static void assign_out_normal(nvtxs, sets, outname)$/;"	f	file:
assign_partition_numbers	util/vtk_view.cpp	/^int assign_partition_numbers(vtkUnstructuredGrid *ug)$/;"	f
assigned_to_me	reftree/reftree.h	/^   int assigned_to_me;   \/* for a leaf, 1 if this element is assigned to$/;"	m	struct:Zoltan_Reftree_Struct
attached	oct/octant_const.h	/^  int    attached;                    \/* flag to see if region was attached *\/$/;"	m	struct:Region_Node
augment	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klvspiff/flow.c	/^static int augment(node, pointers, indices, resid, flow, touched, seen)$/;"	f	file:
augment	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klvspiff/matching.c	/^static void augment(node, pointers, indices, matching, touched, seen)$/;"	f	file:
augment_search_structure	zz/zz_gen_files.c	/^static int augment_search_structure(ZZ *zz, void *htptr,$/;"	f	file:
aunit	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^	ftnint aunit;$/;"	m	struct:__anon24
aunit	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^	ftnint aunit;$/;"	m	struct:__anon16
average	Utilities/DDirectory/DD_Set_Neighbor_Hash_Fn3.c	/^  int average;$/;"	m	struct:dd_nh3_struct	file:
avg_coord	driver/dr_const.h	/^  double   avg_coord[3];\/* average coordinates (centroid) for the element *\/$/;"	m	struct:Element_Description
avg_dist_interval	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/make_term_props.c	/^static double avg_dist_interval(set1_low, set1_span, set2_low, set2_span)$/;"	f	file:
avg_dist_mesh	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/make_term_props.c	/^static double avg_dist_mesh(set1, set2, architecture)$/;"	f	file:
avg_dists_cube	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/make_term_props.c	/^static void avg_dists_cube(ndims_tot, ndims, set_info, nsets, set_max, subsets, dists)$/;"	f	file:
avg_dists_mesh	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/make_term_props.c	/^static void avg_dists_mesh(architecture, set_info, nsets, set_max,$/;"	f	file:
b1	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double b1, b2, b3;	\/* linear mapping coefficients *\/$/;"	v	file:
b1g	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double b1g, b2g, b3g;	\/* gamma first derivatives *\/$/;"	v	file:
b1gg	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double b1gg, b2gg, b3gg;	\/* gamma\/gamma second derivatives *\/$/;"	v	file:
b1p	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double b1p, b2p, b3p;	\/* phi first derivatives *\/$/;"	v	file:
b1pg	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double b1pg, b2pg, b3pg;	\/* phi\/gamma second derivatives *\/$/;"	v	file:
b1pp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double b1pp, b2pp, b3pp;	\/* phi\/phi second derivatives *\/$/;"	v	file:
b1t	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double b1t, b2t, b3t;	\/* theta first derivatives *\/$/;"	v	file:
b1tg	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double b1tg, b2tg, b3tg;	\/* theta\/gamma second derivatives *\/$/;"	v	file:
b1tp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double b1tp, b2tp, b3tp;	\/* theta\/phi second derivatives *\/$/;"	v	file:
b1tt	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double b1tt, b2tt, b3tt;	\/* theta\/theta second derivatives *\/$/;"	v	file:
b2	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double b1, b2, b3;	\/* linear mapping coefficients *\/$/;"	v	file:
b2g	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double b1g, b2g, b3g;	\/* gamma first derivatives *\/$/;"	v	file:
b2gg	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double b1gg, b2gg, b3gg;	\/* gamma\/gamma second derivatives *\/$/;"	v	file:
b2p	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double b1p, b2p, b3p;	\/* phi first derivatives *\/$/;"	v	file:
b2pg	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double b1pg, b2pg, b3pg;	\/* phi\/gamma second derivatives *\/$/;"	v	file:
b2pp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double b1pp, b2pp, b3pp;	\/* phi\/phi second derivatives *\/$/;"	v	file:
b2t	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double b1t, b2t, b3t;	\/* theta first derivatives *\/$/;"	v	file:
b2tg	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double b1tg, b2tg, b3tg;	\/* theta\/gamma second derivatives *\/$/;"	v	file:
b2tp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double b1tp, b2tp, b3tp;	\/* theta\/phi second derivatives *\/$/;"	v	file:
b2tt	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double b1tt, b2tt, b3tt;	\/* theta\/theta second derivatives *\/$/;"	v	file:
b3	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double b1, b2, b3;	\/* linear mapping coefficients *\/$/;"	v	file:
b3g	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double b1g, b2g, b3g;	\/* gamma first derivatives *\/$/;"	v	file:
b3gg	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double b1gg, b2gg, b3gg;	\/* gamma\/gamma second derivatives *\/$/;"	v	file:
b3p	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double b1p, b2p, b3p;	\/* phi first derivatives *\/$/;"	v	file:
b3pg	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double b1pg, b2pg, b3pg;	\/* phi\/gamma second derivatives *\/$/;"	v	file:
b3pp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double b1pp, b2pp, b3pp;	\/* phi\/phi second derivatives *\/$/;"	v	file:
b3t	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double b1t, b2t, b3t;	\/* theta first derivatives *\/$/;"	v	file:
b3tg	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double b1tg, b2tg, b3tg;	\/* theta\/gamma second derivatives *\/$/;"	v	file:
b3tp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double b1tp, b2tp, b3tp;	\/* theta\/phi second derivatives *\/$/;"	v	file:
b3tt	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double b1tt, b2tt, b3tt;	\/* theta\/theta second derivatives *\/$/;"	v	file:
bail	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/bail.c	/^void      bail(char *msg, int status)$/;"	f
bal_tol	phg/phg.h	/^  float bal_tol;                 \/* Balance tolerance in % of average *\/$/;"	m	struct:PHGPartParamsStruct
bal_tol_adjustment	phg/phg.h	/^  float bal_tol_adjustment;      \/* balance tolerance adjustment;$/;"	m	struct:PHGPartParamsStruct
balance	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/submain/balance.c	/^void      balance(graph, nvtxs, nedges, using_vwgts, using_ewgts, vwsqrt,$/;"	f
balanceTol	phg/phg_rdivide.c	/^static float balanceTol(PHGPartParams *hgp, int part_dim, int pno, float *ratios,$/;"	f	file:
bandwidth	zz/zz_const.h	/^  int bandwidth;         \/* specify the bandwidth of the topology *\/$/;"	m	struct:__anon37
base	coloring/g2l_hash.h	/^    int   base, baseend; \/* base and baseend are inclusive gno's of local vertices *\/$/;"	m	struct:G2L_Hash
baseend	coloring/g2l_hash.h	/^    int   base, baseend; \/* base and baseend are inclusive gno's of local vertices *\/$/;"	m	struct:G2L_Hash
bbox_extent	hsfc/hsfc.h	/^   double     bbox_extent[3];    \/* length of each side of bounding box *\/$/;"	m	struct:HSFC_Data
bbox_hi	hsfc/hsfc.h	/^   double     bbox_hi[3];        \/* smallest bounding box, high point *\/$/;"	m	struct:HSFC_Data
bbox_lo	hsfc/hsfc.h	/^   double     bbox_lo[3];        \/* smallest bounding box, low point *\/$/;"	m	struct:HSFC_Data
beg	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^	double beg;		\/* time at which message begins *\/$/;"	m	struct:msg_data
begin	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^	struct list *begin;		\/* pointer to list *\/$/;"	m	struct:lists	typeref:struct:lists::list
begin	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int  *begin;$/;"	m	struct:Sphere_Info
below	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/refine_map/refine_map.h	/^	float below;		\/* sum of edge weights pulling me lower *\/$/;"	m	struct:refine_vdata
betaji	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^	double betaji;		\/* residual bound on good ritz pair *\/ $/;"	m	struct:orthlink
betaji	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^	double betaji;		\/* residual bound on good ritz pair *\/ $/;"	m	struct:orthlink_float
bfsearch	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/connect/find_comps.c	/^static int bfsearch(graph, root, count, mark, vtxlist, comp_num)$/;"	f	file:
bidint	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/internal/internal.h	/^struct bidint {$/;"	s
bidir	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/eigen/bidir.c	/^double    bidir(alpha, beta, j, ritz, s, hurdle)$/;"	f
bilist	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^struct bilist {				\/* bidirectional list *\/$/;"	s
bin_search2	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_util.c	/^int bin_search2 (int value, int num, int List[])$/;"	f
bipartite	graph/graph.h	/^  int          bipartite;$/;"	m	struct:ZG_
bisec_split	phg/phg_hypergraph.h	/^  int bisec_split;  \/* For fixed vertex partitioning via Recursive Bisection$/;"	m	struct:__anon38
bisect	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/eigen/bisect.c	/^int       bisect(alpha, beta, j, Anorm, workj, ritz, nevals_left, $/;"	f
bisector	par/par_bisect.c	/^struct bisector {          \/* bisector cut info *\/$/;"	s	file:
bit_reverse	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/bit_reverse.c	/^int       bit_reverse(int val, int nbits)$/;"	f
blank	driver/dr_const.h	/^  int     *blank;               \/* 1 if my element is blanked, 0 if not      *\/$/;"	m	struct:Mesh_Description
blank_count	driver/dr_const.h	/^  int     blank_count;          \/* number of my elements that are blanked    *\/$/;"	m	struct:Mesh_Description
blas_time	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/timing.c	/^double    blas_time = 0;$/;"	v
block_part	simple/block.c	/^static void block_part(ZZ *zz, int num_obj, int wtflag, float *wgts, $/;"	f	file:
bor_elems	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int   **bor_elems;$/;"	m	struct:LB_Description
bor_nodes	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int    **bor_nodes;$/;"	m	struct:LB_Description
border	driver/dr_const.h	/^  int      border;	\/* set to 1 if this element is a border element *\/$/;"	m	struct:Element_Description
border	driver_old/dr_const.h	/^  int      border;	\/* set to 1 if this element is a border element *\/$/;"	m	struct:Element_Description
border	fdriver/fdr_const.f90	/^  integer(Zoltan_INT) :: border /;"	k	type:ELEM_INFO
border	fdriver_old/lb_user_const.f90	/^  integer(LB_INT) :: border /;"	k	type:ELEM_INFO
born_proc_cnts	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int   **born_proc_cnts;$/;"	m	struct:LB_Description
born_procs	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int  ***born_procs;$/;"	m	struct:LB_Description
boundary_exchange	driver/dr_par_util.c	/^void boundary_exchange($/;"	f
boundary_exchange	driver_old/dr_par_util.c	/^void boundary_exchange($/;"	f
boundary_exchange	fdriver/fdr_migrate.f90	/^subroutine boundary_exchange(/;"	s	module:dr_migrate
boundary_exchange	fdriver_old/fdr_migrate.f90	/^subroutine boundary_exchange(/;"	s	module:dr_migrate
bpcover	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klvspiff/matching.c	/^void      bpcover(n_left, n_right, pointers, indices,$/;"	f
bpflow	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klvspiff/flow.c	/^static void bpflow(n_left, n_right, pointers, indices, vweight, resid, flow, touched)$/;"	f	file:
bpm_improve	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klvspiff/bpm_improve.c	/^void      bpm_improve(graph, sets, goal, max_dev, bndy_list, weights, using_vwgts)$/;"	f
bpm_improve1	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klvspiff/bpm_improve.c	/^static int bpm_improve1(graph, sets, pbndy_list, weights, set_match, set_other,$/;"	f	file:
bpmatching	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klvspiff/matching.c	/^static void bpmatching(n_left, n_right, pointers, indices, matching, touched)$/;"	f	file:
brdcst_cmd_info	driver/dr_input.c	/^void brdcst_cmd_info ($/;"	f
brdcst_cmd_info	driver_old/dr_input.c	/^void brdcst_cmd_info(int Proc, PROB_INFO_PTR prob, PARIO_INFO_PTR pio_info)$/;"	f
brdcst_cmd_info	fdriver/fdr_input.f90	/^subroutine brdcst_cmd_info(/;"	s	module:dr_input
brdcst_cmd_info	fdriver_old/fdr_input.f90	/^subroutine brdcst_cmd_info(/;"	s	module:dr_input
break_pnt	ch/ch_input_read.c	/^static int break_pnt = LINE_LENGTH;	\/* place in sequence to pause *\/$/;"	v	file:
break_pnt	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/input/read_val.c	/^static int break_pnt = LINE_LENGTH;	\/* place in sequence to pause *\/$/;"	v	file:
breakpt	Utilities/DDirectory/DD_Set_Neighbor_Hash_Fn3.c	/^  int breakpt;$/;"	m	struct:dd_nh3_struct	file:
broken_link	reftree/reftree_coarse_path.c	/^static int broken_link(int *ierr, ZZ *zz)$/;"	f	file:
bucketsort1	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klspiff/buckets1.c	/^void      bucketsort1(graph, vtx, buckets, listspace, dvals, sets, term_wgts,$/;"	f
bucketsorts	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klspiff/buckets.c	/^void      bucketsorts(graph, nvtxs, buckets, listspace, dvals, sets, term_wgts,$/;"	f
bucketsorts_bi	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klspiff/buckets_bi.c	/^void      bucketsorts_bi(graph, nvtxs, buckets, listspace, dvals, sets, term_wgts,$/;"	f
bucketsortsv	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klvspiff/bucketsv.c	/^void      bucketsortsv(graph, nvtxs, lbuckets, rbuckets, llistspace, rlistspace,$/;"	f
buffer	driver/dr_compress_const.h	/^  char * buffer;$/;"	m	struct:ZOLTAN_FILE_
build	phg/phg_tree.h	/^  int build;  \/* hypergraph build time *\/$/;"	m	struct:phg_timer_indices
build_elem_comm_maps	driver/dr_maps.c	/^int build_elem_comm_maps(int proc, MESH_INFO_PTR mesh)$/;"	f
build_elem_comm_maps	driver/dr_mapsCPP.cpp	/^int build_elem_comm_maps(int proc, MESH_INFO_PTR mesh)$/;"	f
build_elem_comm_maps	driver_old/dr_maps.c	/^int build_elem_comm_maps(int proc, MESH_INFO_PTR mesh)$/;"	f
build_elem_comm_maps	fdriver/fdr_chaco_io.f90	/^logical function build_elem_comm_maps(/;"	f	module:dr_chaco_io
build_elem_comm_maps	fdriver_old/fdr_chaco_io.f90	/^logical function build_elem_comm_maps(/;"	f	module:dr_chaco_io
build_elem_dd	driver/dr_dd.c	/^int build_elem_dd(MESH_INFO_PTR mesh) $/;"	f
build_elem_dd	driver/dr_ddCPP.cpp	/^int build_elem_dd(MESH_INFO_PTR mesh) $/;"	f
build_grp_map	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_groups.c	/^void build_grp_map(MESH_INFO_PTR mesh, PROB_INFO_PTR prob, int* map, int g)$/;"	f
build_tree	ha/ha_drum.h	/^  int build_tree;                    \/* should Zoltan build the tree? *\/$/;"	m	struct:Zoltan_Drum_Struct
bytes_max	Utilities/Memory/mem.c	/^static size_t bytes_max = 0;	\/* Largest total of active allocations *\/$/;"	v	file:
bytes_max	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/smalloc.c	/^static int bytes_max = 0;	\/* largest dynamic memory usage *\/$/;"	v	file:
bytes_used	Utilities/Memory/mem.c	/^static size_t bytes_used = 0;	\/* Sum of active allocations *\/$/;"	v	file:
bytes_used	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/smalloc.c	/^static int bytes_used = 0;	\/* current dynamic memory usage *\/$/;"	v	file:
c	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func2d.c	/^static double s, c;		\/* sign and cosine of angle *\/$/;"	v	file:
c	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^	complex c;$/;"	m	union:Multitype
c	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^	complex c;$/;"	m	union:Multitype
c1	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double c1, c2, c3;	\/* linear mapping coefficients *\/$/;"	v	file:
c1g	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double c1g, c2g, c3g;	\/* gamma first derivatives *\/$/;"	v	file:
c1gg	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double c1gg, c2gg, c3gg;	\/* gamma\/gamma second derivatives *\/$/;"	v	file:
c1p	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double c1p, c2p, c3p;	\/* phi first derivatives *\/$/;"	v	file:
c1pg	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double c1pg, c2pg, c3pg;	\/* phi\/gamma second derivatives *\/$/;"	v	file:
c1pp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double c1pp, c2pp, c3pp;	\/* phi\/phi second derivatives *\/$/;"	v	file:
c1t	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double c1t, c2t, c3t;	\/* theta first derivatives *\/$/;"	v	file:
c1tg	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double c1tg, c2tg, c3tg;	\/* theta\/gamma second derivatives *\/$/;"	v	file:
c1tp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double c1tp, c2tp, c3tp;	\/* theta\/phi second derivatives *\/$/;"	v	file:
c1tt	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double c1tt, c2tt, c3tt;	\/* theta\/theta second derivatives *\/$/;"	v	file:
c2	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double c1, c2, c3;	\/* linear mapping coefficients *\/$/;"	v	file:
c2g	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double c1g, c2g, c3g;	\/* gamma first derivatives *\/$/;"	v	file:
c2gg	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double c1gg, c2gg, c3gg;	\/* gamma\/gamma second derivatives *\/$/;"	v	file:
c2p	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double c1p, c2p, c3p;	\/* phi first derivatives *\/$/;"	v	file:
c2pg	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double c1pg, c2pg, c3pg;	\/* phi\/gamma second derivatives *\/$/;"	v	file:
c2pp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double c1pp, c2pp, c3pp;	\/* phi\/phi second derivatives *\/$/;"	v	file:
c2t	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double c1t, c2t, c3t;	\/* theta first derivatives *\/$/;"	v	file:
c2tg	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double c1tg, c2tg, c3tg;	\/* theta\/gamma second derivatives *\/$/;"	v	file:
c2tp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double c1tp, c2tp, c3tp;	\/* theta\/phi second derivatives *\/$/;"	v	file:
c2tt	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double c1tt, c2tt, c3tt;	\/* theta\/theta second derivatives *\/$/;"	v	file:
c3	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double c1, c2, c3;	\/* linear mapping coefficients *\/$/;"	v	file:
c3g	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double c1g, c2g, c3g;	\/* gamma first derivatives *\/$/;"	v	file:
c3gg	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double c1gg, c2gg, c3gg;	\/* gamma\/gamma second derivatives *\/$/;"	v	file:
c3p	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double c1p, c2p, c3p;	\/* phi first derivatives *\/$/;"	v	file:
c3pg	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double c1pg, c2pg, c3pg;	\/* phi\/gamma second derivatives *\/$/;"	v	file:
c3pp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double c1pp, c2pp, c3pp;	\/* phi\/phi second derivatives *\/$/;"	v	file:
c3t	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double c1t, c2t, c3t;	\/* theta first derivatives *\/$/;"	v	file:
c3tg	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double c1tg, c2tg, c3tg;	\/* theta\/gamma second derivatives *\/$/;"	v	file:
c3tp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double c1tp, c2tp, c3tp;	\/* theta\/phi second derivatives *\/$/;"	v	file:
c3tt	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double c1tt, c2tt, c3tt;	\/* theta\/theta second derivatives *\/$/;"	v	file:
c__1	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/symmlq.c	/^static integer c__1 = 1;$/;"	v	file:
c_b18	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/symmlq.c	/^static doublereal c_b18 = .33333;$/;"	v	file:
c_b4	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/symmlq.c	/^static doublereal c_b4 = 1.;$/;"	v	file:
calc_nCandidates	phg/phg_match.c	/^static int calc_nCandidates (int num_vtx, int procs)$/;"	f	file:
calculate_cuts	phg/phg_build.c	/^static int calculate_cuts(ZZ *zz, ZHG *zhg, $/;"	f	file:
candidate	phg/phg_match.c	/^    int candidate;      \/* gno of candidate vertex *\/$/;"	m	struct:triplet	file:
captionText	util/vtk_view.cpp	/^static char *captionText(char *pnm, char *cnm)$/;"	f	file:
cart_dim	zz/zz_const.h	/^  int cart_dim[3];     \/* Number of nodes in each dimension *\/$/;"	m	struct:__anon37
cerr	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^{	flag cerr;$/;"	m	struct:__anon23
cerr	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^{	flag cerr;$/;"	m	struct:__anon15
cgamma	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double sgamma, cgamma;	\/* squares of sign and cosine of angle *\/$/;"	v	file:
cgrad	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double cgrad[3];		\/* grad of constraint equation *\/$/;"	v	file:
ch_dist_init	ch/ch_init_dist.c	/^void ch_dist_init(int num_proc, int gnvtxs, PARIO_INFO_PTR pio_info,$/;"	f
ch_dist_max_num_vtx	ch/ch_init_dist.c	/^int ch_dist_max_num_vtx(short *assignments)$/;"	f
ch_dist_num_vtx	ch/ch_init_dist.c	/^int ch_dist_num_vtx($/;"	f
ch_dist_proc	ch/ch_init_dist.c	/^int ch_dist_proc(int v, short *assignments, int base)$/;"	f
ch_dist_vtx_list	ch/ch_init_dist.c	/^void ch_dist_vtx_list($/;"	f
chaco_dist_graph	ch/ch_dist_graph.c	/^int chaco_dist_graph($/;"	f
chaco_dist_graph	fdriver/fdr_chaco_io.f90	/^logical function chaco_dist_graph(/;"	f	module:dr_chaco_io
chaco_dist_graph	fdriver_old/fdr_chaco_io.f90	/^logical function chaco_dist_graph(/;"	f	module:dr_chaco_io
chaco_fill_elements	driver/dr_chaco_io.c	/^int chaco_fill_elements($/;"	f
chaco_init_local_ids	driver/dr_chaco_io.c	/^void chaco_init_local_ids($/;"	f
chaco_input_assign	ch/ch_input_assign.c	/^int chaco_input_assign($/;"	f
chaco_input_geom	ch/ch_input_geom.c	/^int chaco_input_geom($/;"	f
chaco_input_geom	fdriver/fdr_chaco_io.f90	/^logical function chaco_input_geom(/;"	f	module:dr_chaco_io
chaco_input_geom	fdriver_old/fdr_chaco_io.f90	/^logical function chaco_input_geom(/;"	f	module:dr_chaco_io
chaco_input_graph	ch/ch_input_graph.c	/^int chaco_input_graph($/;"	f
chaco_input_graph	fdriver/fdr_chaco_io.f90	/^logical function chaco_input_graph(/;"	f	module:dr_chaco_io
chaco_input_graph	fdriver_old/fdr_chaco_io.f90	/^logical function chaco_input_graph(/;"	f	module:dr_chaco_io
chaco_setup_mesh_struct	driver/dr_chaco_io.c	/^int chaco_setup_mesh_struct($/;"	f
checkAllrc	util/vtk_view.cpp	/^static int checkAllrc(int rc, vtkMPICommunicator *comm)$/;"	f	file:
check_assignment	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/input/check_input.c	/^static int check_assignment(assignment, nvtxs, nsets_tot, ndims, local_method)$/;"	f	file:
check_bpgraph	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klvspiff/make_bpgraph.c	/^void check_bpgraph(n_left, n_right, pointers, indices)$/;"	f
check_graph	parmetis/third_library.h	/^  int check_graph;                      \/* We have to check graph consistency *\/$/;"	m	struct:ZOLTAN_Third_Graph_
check_graph	phg/phg.h	/^  int check_graph;      \/* Flag indicating whether the input hypergraph should $/;"	m	struct:PHGPartParamsStruct
check_graph	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/graph/check_graph.c	/^int       check_graph(graph, nvtxs, nedges)$/;"	f
check_inp	driver/dr_input.c	/^int check_inp ($/;"	f
check_inp	driver_old/dr_input.c	/^int check_inp(PROB_INFO_PTR prob, PARIO_INFO_PTR pio_info)$/;"	f
check_inp	fdriver/fdr_input.f90	/^logical function check_inp(/;"	f	module:dr_input
check_inp	fdriver_old/fdr_input.f90	/^logical function check_inp(/;"	f	module:dr_input
check_inp_specs	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_inp.c	/^int check_inp_specs($/;"	f
check_input	lb/lb_migrate.c	/^static int check_input($/;"	f	file:
check_input	lb/low_mem_lb_migrate.c	/^static int check_input($/;"	f	file:
check_input	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/input/check_input.c	/^int       check_input(graph, nvtxs, nedges, igeom, coords,$/;"	f
check_input_time	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/timing.c	/^double    check_input_time = 0;$/;"	v
check_internal	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/internal/check_internal.c	/^void      check_internal(graph, nvtxs, int_list, set_list, vtx_elems, $/;"	f
check_invert_input	lb/lb_invert.c	/^static int check_invert_input($/;"	f	file:
check_level	driver/dr_param_file.c	/^static void check_level(int level) {$/;"	f	file:
check_level	driver/dr_param_fileCPP.cpp	/^static void check_level(int level) {$/;"	f	file:
check_level	fdriver/fdr_param_file.f90	/^subroutine check_level(/;"	s	module:dr_param_file
check_params	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/input/check_input.c	/^static int check_params(global_method, local_method, rqi_flag, ndims)$/;"	f	file:
check_partition_numbers	util/vtk_view.cpp	/^static int check_partition_numbers(vtkUnstructuredGrid *ug)$/;"	f	file:
check_resid	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klvspiff/flow.c	/^void check_resid(n_left, n_right, vweight, resid, pointers, indices, flow)$/;"	f
check_valid_range	util/vtk_view.cpp	/^static int check_valid_range(int val, char *nm, int lo, int hi)$/;"	f	file:
checkbp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/bpmatch/checkbp.c	/^void      checkbp(graph, xvecs, sets, dists, nvtxs, ndims)$/;"	f
checkeig	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/eigen/checkeig.c	/^double    checkeig(err, A, y, n, lambda, vwsqrt, work)$/;"	f
checkeig_ext	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/eigen/checkeig_ext.c	/^double    checkeig_ext(err, work, A, y, n, extval, vwsqrt, gvec, eigtol, warnings)$/;"	f
checkorth	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/eigen/checkorth.c	/^void      checkorth(mat, n, dim)$/;"	f
checkorth_float	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/eigen/checkorth.c	/^void      checkorth_float(mat, n, dim)$/;"	f
checkpnt	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/checkpnt.c	/^void      checkpnt(char *tag)$/;"	f
checks	hier/hier.h	/^  int checks;                        \/* should we do sanity checks? *\/$/;"	m	struct:HierPartParamsStruct
checkvec	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/time_kernels.c	/^static double checkvec(dvec, beg, end, svec)$/;"	f	file:
chgrp	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_groups.c	/^static void chgrp(int grp_id, int blk, int *blkids, int nblks,$/;"	f	file:
child	oct/octant_const.h	/^  struct _Octant *child[8];         \/* array of octant's children           *\/$/;"	m	struct:_Octant	typeref:struct:_Octant::_Octant
childnum	oct/migoct.c	/^  int     childnum;           \/* Update child (0-7) or parent (-1) *\/$/;"	m	struct:__anon29	file:
childnum	oct/migoct.c	/^  int childnum;$/;"	m	struct:__anon30	file:
children	oct/migoct.c	/^  pOctant children[8];$/;"	m	struct:__anon30	file:
children	reftree/reftree.h	/^   struct Zoltan_Reftree_Struct *children; \/* array of the children in the tree *\/$/;"	m	struct:Zoltan_Reftree_Struct	typeref:struct:Zoltan_Reftree_Struct::Zoltan_Reftree_Struct
choice	fort/fwrap.f90	/^   integer(Zoltan_INT) :: choice$/;"	k	type:ZOLTAN_FN_TYPEF
choice	fort/fwrap.f90	/^   integer(Zoltan_INT) :: choice$/;"	k	type:ZOLTAN_FN_TYPES
chunk_reader	driver/dr_input_const.h	/^  int     chunk_reader;   \/* for very large matrix market files *\/$/;"	m	struct:Parallel_IO
ciend	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^	flag ciend;$/;"	m	struct:__anon20
ciend	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^	flag ciend;$/;"	m	struct:__anon12
cierr	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^{	flag cierr;$/;"	m	struct:__anon20
cierr	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^{	flag cierr;$/;"	m	struct:__anon12
cifmt	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^	char *cifmt;$/;"	m	struct:__anon20
cifmt	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^	char *cifmt;$/;"	m	struct:__anon12
cilist	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^} cilist;$/;"	t	typeref:struct:__anon20
cilist	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^} cilist;$/;"	t	typeref:struct:__anon12
cirec	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^	ftnint cirec;$/;"	m	struct:__anon20
cirec	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^	ftnint cirec;$/;"	m	struct:__anon12
ciunit	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^	ftnint ciunit;$/;"	m	struct:__anon20
ciunit	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^	ftnint ciunit;$/;"	m	struct:__anon12
cksturmcnt	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/eigen/cksturmcnt.c	/^void      cksturmcnt(vec, beg, end, x1, x2, x1ck, x2ck, numck)$/;"	f
clean_string	driver/dr_util.c	/^void clean_string(char inp_str[], const char *tokens)$/;"	f
clean_string	driver_old/dr_util.c	/^void clean_string(char inp_str[], const char *tokens)$/;"	f
clean_string	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_util.c	/^void clean_string(char inp_str[], const char *tokens)$/;"	f
cleanup	Utilities/DDirectory/DD.h	/^  DD_Cleanup_fn *cleanup;$/;"	m	struct:Zoltan_DD_Struct
cleanup	ZoltanComponent/CCA_Wrapper/BaseLB.cpp	/^int ZoltanSpace::BaseLB::cleanup()$/;"	f	class:ZoltanSpace::BaseLB
clear_dvals	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klvspiff/clear_dvals.c	/^void      clear_dvals(graph, nvtxs, ldvals, rdvals, bspace, list_length)$/;"	f
clear_partition_ids	util/vtk_view.cpp	/^static void clear_partition_ids()$/;"	f	file:
clear_timing	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/timing.c	/^void      clear_timing()$/;"	f
cllist	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^} cllist;$/;"	t	typeref:struct:__anon23
cllist	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^} cllist;$/;"	t	typeref:struct:__anon15
cm	rcb/rib.h	/^    double    cm[3];            \/* center of mass *\/$/;"	m	struct:rib_tree
cmd_file	fdriver/fdr_main.f90	/^  character(len=64)  :: cmd_file$/;"	v	program:fdriver
cmd_file	fdriver_old/fdr_main.f90	/^  character(len=64)  :: cmd_file$/;"	v	program:fdriver
cmd_filename	ZoltanComponent/TestComponents/Mesh.h	/^    std::string cmd_filename ;$/;"	m	class:ZoltanTestSpace::Mesh
cmd_filename_set	ZoltanComponent/TestComponents/Mesh.h	/^    bool is_init, cmd_filename_set ;$/;"	m	class:ZoltanTestSpace::Mesh
cmd_line_arg_parse	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_inp.c	/^int cmd_line_arg_parse($/;"	f
cmp_ints	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_output.c	/^int cmp_ints(int *pval1, int *pval2)$/;"	f
cnctd_dom	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int      cnctd_dom;$/;"	m	struct:LB_Description
coarse	phg/phg_tree.h	/^  int coarse;  \/* Coarsening time *\/$/;"	m	struct:phg_timer_indices
coarse_flag	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int   coarse_flag;$/;"	m	struct:Problem_Description
coarse_part_greedy	phg/phg_serialpartition.c	/^static ZOLTAN_PHG_COARSEPARTITION_FN coarse_part_greedy;$/;"	v	file:
coarse_part_greedy	phg/phg_serialpartition.c	/^static int coarse_part_greedy ($/;"	f	file:
coarse_part_linear	phg/phg_serialpartition.c	/^static ZOLTAN_PHG_COARSEPARTITION_FN coarse_part_linear;$/;"	v	file:
coarse_part_linear	phg/phg_serialpartition.c	/^static int coarse_part_linear ($/;"	f	file:
coarse_part_random	phg/phg_serialpartition.c	/^static ZOLTAN_PHG_COARSEPARTITION_FN coarse_part_random;$/;"	v	file:
coarse_part_random	phg/phg_serialpartition.c	/^static int coarse_part_random ($/;"	f	file:
coarsen	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/coarsen/coarsen.c	/^void      coarsen(graph, nvtxs, nedges, using_vwgts, using_ewgts, term_wgts,$/;"	f
coarsen1	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/coarsen/coarsen1.c	/^void      coarsen1(graph, nvtxs, nedges, pcgraph, pcnvtxs, pcnedges,$/;"	f
coarsen_kl	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klspiff/coarsen_kl.c	/^void      coarsen_kl(graph, nvtxs, nedges, using_vwgts, using_ewgts, term_wgts,$/;"	f
coarsen_klv	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klvspiff/coarsen_klv.c	/^void      coarsen_klv(graph, nvtxs, nedges, using_vwgts, using_ewgts, term_wgts,$/;"	f
coarsen_time	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/timing.c	/^double    coarsen_time = 0;$/;"	v
coarsepart	phg/phg_tree.h	/^  int coarsepart;  \/* Coarse partitioning time *\/$/;"	m	struct:phg_timer_indices
coarsepartition_str	phg/phg.h	/^  char coarsepartition_str[MAX_PARAM_STRING_LEN]; $/;"	m	struct:PHGPartParamsStruct
col_comm	phg/phg_comm.h	/^  MPI_Comm col_comm; \/* my processor's column communicator *\/$/;"	m	struct:PHGCommStruct
comerge	phg/phg_tree.h	/^  int comerge;   \/* Part of coarsening *\/$/;"	m	struct:phg_timer_indices
comm	Utilities/Communication/comm.h	/^    MPI_Comm  comm;		\/* communicator for operation *\/$/;"	m	struct:Zoltan_Comm_Obj
comm	Utilities/DDirectory/DD.h	/^  MPI_Comm comm;          \/* Dup of original MPI Comm (KDD)         *\/$/;"	m	struct:Zoltan_DD_Struct
comm	ZoltanComponent/TestComponents/Driver.h	/^    MPI_Comm comm ;$/;"	m	class:ZoltanTestSpace::Driver
comm	driver/dr_param_file.c	/^static MPI_Comm comm;$/;"	v	file:
comm	driver/dr_param_fileCPP.cpp	/^static MPI_Comm comm;$/;"	v	file:
comm	fdriver/fdr_param_file.f90	/^integer :: comm$/;"	v	module:dr_param_file
comm	matrix/matrix.h	/^  PHGComm         *comm;        \/* How data are distributed *\/$/;"	m	struct:Zoltan_matrix_2d_
comm	par/par_median_randomized.c	/^  MPI_Comm comm;$/;"	m	struct:_commStruct	file:
comm	phg/phg_hypergraph.h	/^  PHGComm *comm;  \/* this is a pointer to storage PHGPartParamsStruct:$/;"	m	struct:__anon38
commStruct	par/par_median_randomized.c	/^}commStruct;$/;"	t	typeref:struct:_commStruct	file:
comm_plan	parmetis/third_library.h	/^  ZOLTAN_COMM_OBJ *comm_plan;           \/* Communication plan used by scattering process *\/$/;"	m	struct:ZOLTAN_Third_Graph_
comm_plan	phg/phg_Vcycle.c	/^    struct Zoltan_Comm_Obj  *comm_plan;    $/;"	m	struct:tagVCycle	typeref:struct:tagVCycle::Zoltan_Comm_Obj	file:
communication_by_plan	phg/phg_match.c	/^static int communication_by_plan (ZZ* zz, int sendcnt, int* dest, int* size, $/;"	f	file:
comp	driver/dr_mm_readfile.c	/^static int comp(const void *a, const void *b)$/;"	f	file:
compar_int	parmetis/scotch_interface.c	/^static int compar_int (const void * a, const void * b)$/;"	f	file:
compare_maps_with_ddirectory_results	driver/dr_maps.c	/^static void compare_maps_with_ddirectory_results($/;"	f	file:
compare_maps_with_ddirectory_results	driver/dr_mapsCPP.cpp	/^static void compare_maps_with_ddirectory_results($/;"	f	file:
compare_maps_with_ddirectory_results	driver_old/dr_maps.c	/^static void compare_maps_with_ddirectory_results($/;"	f	file:
compare_search	Utilities/DDirectory/DD_Set_Neighbor_Hash_Fn2.c	/^static int compare_search (const void *a, const void *b)$/;"	f	file:
compare_sort	Utilities/DDirectory/DD_Set_Neighbor_Hash_Fn2.c	/^static int compare_sort (const void *a, const void *b)$/;"	f	file:
completed	matrix/matrix.h	/^  int           completed;     \/* Matrix is ready to be specialized in HG or G *\/$/;"	m	struct:Zoltan_matrix_
complex	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^typedef struct { real r, i; } complex;$/;"	t	typeref:struct:__anon18
complex	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^typedef struct { real r, i; } complex;$/;"	t	typeref:struct:__anon10
compress_ewgts	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klspiff/compress_ewgts.c	/^void      compress_ewgts(graph, nvtxs, nedges, ewgt_max, using_ewgts)$/;"	f
compute_RCB_box	rcb/rcb.c	/^static void compute_RCB_box($/;"	f	file:
compute_box	rcb/rcb_box.c	/^static void compute_box($/;"	f	file:
compute_cube_edata	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/refine_map/compute_cube_edata.c	/^double    compute_cube_edata(edata, vdata, nsets_tot, comm_graph, node2vtx)$/;"	f
compute_cube_vdata	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/refine_map/compute_cube_vdata.c	/^void      compute_cube_vdata(vdata, comm_graph, vtx, mask, vtx2node)$/;"	f
compute_mesh_edata	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/refine_map/compute_mesh_edata.c	/^double    compute_mesh_edata(edata, vdata, mesh_dims, comm_graph, node2vtx)$/;"	f
compute_mesh_vdata	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/refine_map/compute_mesh_vdata.c	/^void      compute_mesh_vdata(vdata, comm_graph, vtx, vtx2node, mesh_dims, dim)$/;"	f
compute_only_part_changes	parmetis/third_library.h	/^  int  compute_only_part_changes;$/;"	m	struct:ZOLTAN_Output_Part_
compute_part_number	phg/phg_tree.c	/^compute_part_number(Zoltan_PHG_Tree *tree)$/;"	f
compute_rib_direction	rcb/rib.c	/^static int compute_rib_direction($/;"	f	file:
compute_weight_sums	par/par_bisect.c	/^static void compute_weight_sums($/;"	f	file:
computeoffset	postprocessing/bin/toscotchperm.py	/^def computeoffset(infile):$/;"	f
computeoffset	postprocessing/ordering/toscotchperm.py	/^def computeoffset(infile):$/;"	f
computeordering	postprocessing/ordering/ordering.py	/^def computeordering(filename, procnbr, verbose):$/;"	f
computevertices	postprocessing/bin/toscotchperm.py	/^def computevertices(file):$/;"	f
computevertices	postprocessing/ordering/toscotchperm.py	/^def computevertices(file):$/;"	f
confirm_cover	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klvspiff/flow.c	/^void confirm_cover(n_left, n_right, pointers, indices, flow, vweight, resid,$/;"	f
confirm_match	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klvspiff/matching.c	/^void confirm_match(n_left, n_right, pointers, indices, matching, sep_size, sep_nodes)$/;"	f
connect	driver/dr_const.h	/^  int     *connect;	\/* list of nodes that make up this element, the node$/;"	m	struct:Element_Description
connect	driver_old/dr_const.h	/^  int     *connect;	\/* list of nodes that make up this element, the node$/;"	m	struct:Element_Description
connect	fdriver/fdr_const.f90	/^  integer(Zoltan_INT), pointer :: connect(/;"	k	type:ELEM_INFO
connect	fdriver_old/lb_user_const.f90	/^  integer(LB_INT), pointer :: connect(/;"	k	type:ELEM_INFO
connect	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int   **connect;$/;"	m	struct:Mesh_Description
connect_data	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^struct connect_data {$/;"	s
connect_enforce	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/connect/connect_enforce.c	/^void      connect_enforce(graph, nvtxs, using_ewgts, assignment, goal, nsets_tot,$/;"	f
connectivity_cut	phg/phg.h	/^  int connectivity_cut;     \/* 1: if cut_objective==connectivity,$/;"	m	struct:PHGPartParamsStruct
constraint	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^double    constraint(coeffs2)$/;"	f
coor	phg/phg_hypergraph.h	/^  double *coor;     \/* |V| long by CoordinateDim *\/$/;"	m	struct:__anon38
coord	driver/dr_const.h	/^  float  **coord;	\/* array for the coordinates of the element.$/;"	m	struct:Element_Description
coord	driver_old/dr_const.h	/^  float  **coord;	\/* array for the coordinates of the element.$/;"	m	struct:Element_Description
coord	fdriver/fdr_const.f90	/^  real(Zoltan_FLOAT), pointer ::  coord(/;"	k	type:ELEM_INFO
coord	fdriver_old/lb_user_const.f90	/^  real(LB_FLOAT), pointer ::  coord(/;"	k	type:ELEM_INFO
coords	hier/hier.c	/^  double *coords;$/;"	m	struct:HierGIDInfo	file:
coords	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  float  *coords;$/;"	m	struct:Mesh_Description
copyKeys	zz/zz_map.c	/^  int copyKeys;         \/* 1 - We create a copy of the added keys *\/$/;"	m	struct:Zoltan_Map_List	file:
coremove	phg/phg_tree.h	/^  int coremove;   \/* Part of coarsening *\/$/;"	m	struct:phg_timer_indices
cos2	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func2d.c	/^static double s2, cos2;		\/* squares of sign and cosine of angle *\/$/;"	v	file:
coshuffle	phg/phg_tree.h	/^  int coshuffle;   \/* Part of coarsening *\/$/;"	m	struct:phg_timer_indices
cost	oct/octant_const.h	/^  float cost;                       \/* cost of the octant                   *\/$/;"	m	struct:_Octant
cotheend	phg/phg_tree.h	/^  int cotheend;   \/* Part of coarsening *\/$/;"	m	struct:phg_timer_indices
count	Utilities/DDirectory/DD_Set_Neighbor_Hash_Fn2.c	/^  int count;$/;"	m	struct:dd_nh2_struct	file:
count	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/count.c	/^void      count(graph, nvtxs, sets, nsets, hops, dump, using_ewgts)$/;"	f
count_flow	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klvspiff/flow.c	/^int count_flow(n_left, n_right, pointers, flow)$/;"	f
count_resid	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klvspiff/flow.c	/^void count_resid(n_left, n_right, resid, vweight, marked)$/;"	f
count_time	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/timing.c	/^double    count_time = 0;$/;"	v
count_weights	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klspiff/count_weights.c	/^void      count_weights(graph, nvtxs, sets, nsets, weights, using_vwgts)$/;"	f
countcedges	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/coarsen/countcedges.c	/^void      countcedges(graph, nvtxs, start, seenflag, mflag, v2cv, pcnedges)$/;"	f
counthi	par/par_bisect.c	/^  int       countlo, counthi;   \/* # of dots at that position *\/$/;"	m	struct:bisector	file:
counthi	par/par_median.c	/^  int       countlo, counthi;   \/* # of dots at that position *\/$/;"	m	struct:median	file:
counthi	rcb/rcb.h	/^  int       countlo, counthi;   \/* # of dots at that position *\/$/;"	m	struct:rcb_median
countlo	par/par_bisect.c	/^  int       countlo, counthi;   \/* # of dots at that position *\/$/;"	m	struct:bisector	file:
countlo	par/par_median.c	/^  int       countlo, counthi;   \/* # of dots at that position *\/$/;"	m	struct:median	file:
countlo	rcb/rcb.h	/^  int       countlo, counthi;   \/* # of dots at that position *\/$/;"	m	struct:rcb_median
countup	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/countup.c	/^void      countup(graph, nvtxs, assignment, ndims, architecture, ndims_tot,$/;"	f
countup_cube	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/countup_cube.c	/^void      countup_cube(graph, nvtxs, assignment, ndims, ndims_tot, print_lev,$/;"	f
countup_mesh	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/countup_mesh.c	/^void      countup_mesh(graph, nvtxs, assignment, mesh_dims, print_lev, outfile,$/;"	f
countup_vtx_sep	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klvspiff/countup_vtx_sep.c	/^void      countup_vtx_sep(graph, nvtxs, sets)$/;"	f
countwd	fdriver/mmio.f	/^      subroutine countwd(/;"	s
couple	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/bpmatch/movevtxs.c	/^static void couple(nsets, from, to, vtx)$/;"	f	file:
coupled_sets	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/bpmatch/movevtxs.c	/^static short coupled_sets[MAXSETS][MAXSETS];$/;"	v	file:
coupled_vtxs	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/bpmatch/movevtxs.c	/^static int coupled_vtxs[MAXSETS];$/;"	v	file:
cpart	phg/phg_tree.h	/^  int cpart;   \/* Coarse partitioning time *\/$/;"	m	struct:phg_timer_indices
cpgather	phg/phg_tree.h	/^  int cpgather;   \/* Part of Coarse Partitioning *\/$/;"	m	struct:phg_timer_indices
cphi	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double sphi, cphi;	\/* sign and cosine of angle *\/$/;"	v	file:
cpid	oct/octant_const.h	/^  int cpid[8];                      \/* the pid of the children              *\/$/;"	m	struct:_Octant
cpids	oct/migoct.c	/^  int cpids[8];$/;"	m	struct:__anon30	file:
cprefine	phg/phg_tree.h	/^  int cprefine;   \/* Part of Coarse Partitioning *\/$/;"	m	struct:phg_timer_indices
cpu_wgt	driver/dr_const.h	/^  float    cpu_wgt[MAX_CPU_WGTS]; \/* the computational weight(s) associated with the elem *\/$/;"	m	struct:Element_Description
cpu_wgt	driver_old/dr_const.h	/^  float    cpu_wgt[MAX_CPU_WGTS]; \/* the computational weight(s) associated with the elem *\/$/;"	m	struct:Element_Description
cpu_wgt	fdriver/fdr_const.f90	/^  real(Zoltan_FLOAT)  :: cpu_wgt /;"	k	type:ELEM_INFO
cpu_wgt	fdriver_old/lb_user_const.f90	/^  real(LB_FLOAT)  :: cpu_wgt /;"	k	type:ELEM_INFO
cpvec	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/cpvec.c	/^void      cpvec(double *copy, int beg, int end, double *vec)$/;"	f
cray	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	190;"	d
cray	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	190;"	d
create_Driver	ZoltanComponent/TestComponents/Driver_wrapper.cpp	/^CONV_NS(Component) *create_Driver() $/;"	f
create_Mesh	ZoltanComponent/TestComponents/Mesh_wrapper.cpp	/^CONV_NS(Component) *create_Mesh() $/;"	f
create_PartitionerFactory_JR	ZoltanComponent/CCA_Wrapper/ZoltanLB_wrapper.cpp	/^CONV_NS(Component) *create_PartitionerFactory_JR() $/;"	f
create_Vtxdist	ch/ch_init_dist.c	/^static void create_Vtxdist()$/;"	f	file:
create_edge_lists	driver/dr_hg_io.c	/^static int create_edge_lists(int nMyPins, int *myPinI, int *myPinJ,$/;"	f	file:
create_field_array	util/vtk_view.cpp	/^static int create_field_array(vtkUnstructuredGrid *ug, $/;"	f	file:
create_gid_list	ZoltanComponent/CCA_Wrapper/EntityListImpl.h	/^    int create_gid_list(int n, unsigned int *glist) $/;"	f	class:ZoltanSpace::EntityListImpl
create_hash_table	lb/lb_balance.c	/^static struct Hash_Node **create_hash_table(ZZ *zz, $/;"	f	file:
create_import_lists	lb/low_mem_lb_migrate.c	/^static int create_import_lists(ZZ *zz, int msglen, int src, int num,$/;"	f	file:
create_lid_list	ZoltanComponent/CCA_Wrapper/EntityListImpl.h	/^    int create_lid_list(int n, unsigned int *llist) $/;"	f	class:ZoltanSpace::EntityListImpl
create_proc_list	ZoltanComponent/CCA_Wrapper/EntityListImpl.h	/^    int create_proc_list(int n, int *plist) $/;"	f	class:ZoltanSpace::EntityListImpl
create_random_input	driver/dr_random_io.c	/^int create_random_input($/;"	f
create_random_triangles	driver/dr_random_io.c	/^int create_random_triangles($/;"	f
create_reverse_plan	Utilities/Communication/comm_do_reverse.c	/^static int create_reverse_plan( $/;"	f	file:
create_user_def_list	ZoltanComponent/CCA_Wrapper/EntityListImpl.h	/^    int create_user_def_list(int n, unsigned int *udlist) $/;"	f	class:ZoltanSpace::EntityListImpl
csta	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^	char *csta;$/;"	m	struct:__anon23
csta	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^	char *csta;$/;"	m	struct:__anon15
ctheta	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double stheta, ctheta;	\/* sign and cosine of angle *\/$/;"	v	file:
cunit	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^	ftnint cunit;$/;"	m	struct:__anon23
cunit	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^	ftnint cunit;$/;"	m	struct:__anon15
current_proc_of_gid	hier/hier.c	/^static int current_proc_of_gid(HierPartParams *hpp, ZOLTAN_ID_TYPE gid) {$/;"	f	file:
cut	rcb/rcb.h	/^  double    cut;        	\/* position of cut *\/$/;"	m	struct:rcb_tree
cut	rcb/rib.h	/^    double    cut;              \/* position of cut *\/$/;"	m	struct:rib_tree
cut_dimension	rcb/rcb.c	/^static int cut_dimension($/;"	f	file:
cut_wgt	include/zoltan_eval.h	/^  float cut_wgt[EVAL_SIZE]  ;   \/* The sum of the weights of the cut edges *\/$/;"	m	struct:_eval_graph_struct
cutl	include/zoltan_eval.h	/^  float cutl[EVAL_SIZE];        \/* ConCut measure *\/$/;"	m	struct:_eval_hg_struct
cutl	include/zoltan_eval.h	/^  float cutl[EVAL_SIZE];        \/* HG ConCut measure *\/$/;"	m	struct:_eval_graph_struct
cutn	include/zoltan_eval.h	/^  float cutn[EVAL_SIZE];        \/* HG NetCut measure *\/$/;"	m	struct:_eval_graph_struct
cutn	include/zoltan_eval.h	/^  float cutn[EVAL_SIZE];        \/* NetCut measure *\/$/;"	m	struct:_eval_hg_struct
cuts	include/zoltan_eval.h	/^  float cuts[EVAL_SIZE];        \/* The number of cut edges *\/$/;"	m	struct:_eval_graph_struct
cval	params/params_const.h	/^  char cval;$/;"	m	struct:Param_Utype
cval	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double cval;		\/* value of constraint equation *\/$/;"	v	file:
cvs_alloch_id	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_allo_const.h	/^static char *cvs_alloch_id = "$Id$";$/;"	v
cvs_elballo_id	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_allo.c	/^static char *cvs_elballo_id = "$Id$";$/;"	v	file:
cvs_elem_id	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_elem.c	/^static char *cvs_elem_id = "$Id$";$/;"	v	file:
cvs_elemch_id	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_elem_const.h	/^static char *cvs_elemch_id = "$Id$";$/;"	v
cvs_errch_id	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_err_const.h	/^static char *cvs_errch_id = "$Id$";$/;"	v
cvs_error_id	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_err.c	/^static char *cvs_error_id = "$Id$";$/;"	v	file:
cvs_exoIIlbch_id	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^static char *cvs_exoIIlbch_id = "$Id$";$/;"	v
cvs_exoch_id	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_exo_const.h	/^static char *cvs_exoch_id = "$Id$";$/;"	v
cvs_exoutil_id	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_exo_util.c	/^static char *cvs_exoutil_id = "$Id$";$/;"	v	file:
cvs_graph_id	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_graph.c	/^static char *cvs_graph_id = "$Id$";$/;"	v	file:
cvs_graphch_id	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_graph_const.h	/^static char *cvs_graphch_id = "$Id$";$/;"	v
cvs_groups_id	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_groups.c	/^static char *cvs_groups_id = "$Id$";$/;"	v	file:
cvs_grpch_id	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_groups_const.h	/^static char *cvs_grpch_id = "$Id$";$/;"	v
cvs_inp_consth_id	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_inp_const.h	/^static char *cvs_inp_consth_id = "$Id$";$/;"	v
cvs_io_id	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_inp.c	/^static char *cvs_io_id = "$Id$";$/;"	v	file:
cvs_loadbal_id	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_loadbal.c	/^static char *cvs_loadbal_id = "$Id$";$/;"	v	file:
cvs_loadbalch_id	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_loadbal_const.h	/^static char *cvs_loadbalch_id = "$Id$";$/;"	v
cvs_main_id	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_main.c	/^static char *cvs_main_id = "$Id$";$/;"	v	file:
cvs_mdgetsubopt_id	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/md_getsubopt.c	/^static char *cvs_mdgetsubopt_id = "$Id$";$/;"	v	file:
cvs_output_id	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_output.c	/^static char *cvs_output_id = "$Id$";$/;"	v	file:
cvs_outputch_id	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_output_const.h	/^static char *cvs_outputch_id = "$Id$";$/;"	v
cvs_time_id	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_time.c	/^static char *cvs_time_id = "$Id$";$/;"	v	file:
cvs_util_ch_id	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_util_const.h	/^static char *cvs_util_ch_id = "$Id$";$/;"	v
cvs_util_id	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_util.c	/^static char *cvs_util_id = "$Id$";$/;"	v	file:
cyclic_part	simple/cyclic.c	/^static void cyclic_part(ZZ *zz, int num_obj, int wtflag, float *wgts, $/;"	f	file:
d	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^	doublereal d;$/;"	m	union:Multitype
d	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^	doublereal d;$/;"	m	union:Multitype
dabs	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	147;"	d
dabs	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	147;"	d
data	zz/zz_map.c	/^  int *data;        \/* a pointer provided by caller *\/$/;"	m	struct:Zoltan_Map_Entry	file:
data2d	hsfc/hsfc_hilbert_const.h	/^static unsigned const int data2d[] = \/* nkey to 2 dimension conversion *\/$/;"	v
data2d	util/converters_for_JPDC_adaptive_mesh_experiments/chaco2chaco/hsfc_hilbert_const.h	/^static unsigned const int data2d[] = \/* nkey to 2 dimension conversion *\/$/;"	v
data3d	hsfc/hsfc_hilbert_const.h	/^static unsigned const data3d [] = {  \/* nkey to 3 dimension conversion *\/$/;"	v
data3d	util/converters_for_JPDC_adaptive_mesh_experiments/chaco2chaco/hsfc_hilbert_const.h	/^static unsigned const data3d [] = {  \/* nkey to 3 dimension conversion *\/$/;"	v
dataTag	lb/low_mem_lb_migrate.c	/^static int ackTag = 10000, dataTag = 20000, sizeTag=30000;$/;"	v	file:
data_type	driver/dr_const.h	/^  enum DATA_TYPE data_type;     \/* Type of data stored in this data structure,$/;"	m	struct:Mesh_Description	typeref:enum:Mesh_Description::DATA_TYPE
daxpy	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/symmlqblas.f	/^      subroutine daxpy(/;"	s
daxpy_	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/symmlqblas.c	/^ \/* Subroutine *\/ int daxpy_(n, da, dx, incx, dy, incy)$/;"	f
dcopy	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/symmlqblas.f	/^      subroutine  dcopy(/;"	s
dcopy_	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/symmlqblas.c	/^ \/* Subroutine *\/ int dcopy_(n, dx, incx, dy, incy)$/;"	f
dd	driver/dr_const.h	/^  struct Zoltan_DD_Struct *dd;  \/* Only used C and Fortran test driver *\/$/;"	m	struct:Mesh_Description	typeref:struct:Mesh_Description::Zoltan_DD_Struct
dd	driver/dr_ddCPP.cpp	/^static Zoltan_DD *dd = NULL;$/;"	v	file:
dd	hier/hier.h	/^  struct Zoltan_DD_Struct *dd;       \/* distributed data to track migrated $/;"	m	struct:HierPartParamsStruct	typeref:struct:HierPartParamsStruct::Zoltan_DD_Struct
ddHedge	phg/phg_hypergraph.h	/^  struct Zoltan_DD_Struct *ddHedge;$/;"	m	struct:Zoltan_HGraph	typeref:struct:Zoltan_HGraph::Zoltan_DD_Struct
ddHedge	phg/phg_tree.c	/^  struct Zoltan_DD_Struct *ddHedge;$/;"	m	struct:Zoltan_PHG_LB_Data_	typeref:struct:Zoltan_PHG_LB_Data_::Zoltan_DD_Struct	file:
ddX	matrix/matrix.h	/^  struct Zoltan_DD_Struct *ddX; \/* Map xGNO -> xGID, xwgt, Input_Parts *\/$/;"	m	struct:Zoltan_matrix_	typeref:struct:Zoltan_matrix_::Zoltan_DD_Struct
ddY	matrix/matrix.h	/^  struct Zoltan_DD_Struct *ddY; \/* Map yGNO -> yGID, ywgt *\/$/;"	m	struct:Zoltan_matrix_	typeref:struct:Zoltan_matrix_::Zoltan_DD_Struct
dd_hash_user	Utilities/DDirectory/DD_Set_Hash_Fn.c	/^static unsigned int dd_hash_user (ZOLTAN_ID_PTR gid, int gid_length, unsigned int nproc,$/;"	f	file:
dd_nh1	Utilities/DDirectory/DD_Set_Neighbor_Hash_Fn1.c	/^static unsigned int dd_nh1 (ZOLTAN_ID_PTR gid, int gid_length,$/;"	f	file:
dd_nh1_struct	Utilities/DDirectory/DD_Set_Neighbor_Hash_Fn1.c	/^struct dd_nh1_struct {$/;"	s	file:
dd_nh2	Utilities/DDirectory/DD_Set_Neighbor_Hash_Fn2.c	/^static unsigned int dd_nh2 (ZOLTAN_ID_PTR gid, int gid_length,$/;"	f	file:
dd_nh2_cleanup	Utilities/DDirectory/DD_Set_Neighbor_Hash_Fn2.c	/^static void dd_nh2_cleanup (struct dd_nh2_struct *hashdata)$/;"	f	file:
dd_nh2_struct	Utilities/DDirectory/DD_Set_Neighbor_Hash_Fn2.c	/^struct dd_nh2_struct {$/;"	s	file:
dd_nh3	Utilities/DDirectory/DD_Set_Neighbor_Hash_Fn3.c	/^static unsigned int dd_nh3 (ZOLTAN_ID_PTR gid, int gid_length,$/;"	f	file:
dd_nh3_struct	Utilities/DDirectory/DD_Set_Neighbor_Hash_Fn3.c	/^struct dd_nh3_struct {$/;"	s	file:
ddot	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/symmlqblas.f	/^      double precision function ddot(/;"	f
ddot_	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/symmlqblas.c	/^doublereal ddot_(n, dx, incx, dy, incy)$/;"	f
debug_graph_to_hg	phg/phg_verbose.c	/^void debug_graph_to_hg($/;"	f
debug_level	Utilities/DDirectory/DD.h	/^  int debug_level;        \/* Determines actions to multiple updates *\/$/;"	m	struct:Zoltan_DD_Struct
debug_level	Utilities/DDirectory/DD_Set_Neighbor_Hash_Fn2.c	/^  int debug_level;$/;"	m	struct:dd_nh2_struct	file:
debug_level	ha/ha_drum.h	/^  int debug_level;                   \/* debug level to pass to DRUM *\/$/;"	m	struct:Zoltan_Drum_Struct
debug_partition_ids	util/vtk_view.cpp	/^static void debug_partition_ids(vtkPoints *pts, vtkIntArray *partids)$/;"	f	file:
debug_partition_ids	util/vtk_view.cpp	/^static void debug_partition_ids(vtkUnstructuredGrid *ug, vtkIntArray *partids)$/;"	f	file:
debug_time	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/timing.c	/^double    debug_time = 0;$/;"	v
def	params/params_const.h	/^  int def;   \/* default flag *\/$/;"	m	struct:Param_Utype
define_subcubes	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/define_subcubes.c	/^int       define_subcubes(nsets_real, ndims_tot, ndims, set, set_info, subsets,$/;"	f
define_submeshes	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/define_submeshes.c	/^int       define_submeshes(nsets, cube_or_mesh, mesh_dims, set, set_info, subsets,$/;"	f
deleteRef	ZoltanComponent/CCA_Wrapper/BaseLB.h	/^    virtual void deleteRef() { ref-- ; if (ref == 0) delete (this) ; }$/;"	f	class:ZoltanSpace::BaseLB
deleteRef	ZoltanComponent/CCA_Wrapper/EntityListImpl.h	/^    virtual void deleteRef() { ref--; if (ref == 0) delete (this); }$/;"	f	class:ZoltanSpace::EntityListImpl
depth	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^	int depth;		\/* bottom of list is 0, previous is 1 etc *\/$/;"	m	struct:orthlink
depth	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^	int depth;		\/* bottom of list is 0, previous is 1 etc *\/$/;"	m	struct:orthlink_float
depthCount	par/par_median_randomized.c	/^static int depthCount = 0;$/;"	v	file:
dest	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^	int dest;		\/* destination of the message *\/$/;"	m	struct:msg_data
destroy_elem_dd	driver/dr_ddCPP.cpp	/^void destroy_elem_dd()$/;"	f
determinant	rcb/inertial3d.c	/^static double determinant($/;"	f	file:
determinant	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/determinant.c	/^double    determinant(M, ndims)$/;"	f
dim	rcb/rcb.h	/^  int       dim;	        \/* dimension (012) of cut *\/$/;"	m	struct:rcb_tree
dim	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/refine_map/refine_map.h	/^	short dim;		\/* which dimension of mesh does wire span? *\/$/;"	m	struct:refine_edata
dim	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int dim[3];$/;"	m	struct:Machine_Description
dimension	fort/lbif.h	/^integer(Zoltan_INT), dimension(*) , intent(in) :: lb$/;"	v
dims	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^	ftnlen *dims;$/;"	m	struct:Vardesc
dims	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^	ftnlen *dims;$/;"	m	struct:Vardesc
dir	oct/migoct.c	/^  int dir;$/;"	m	struct:__anon30	file:
dir	oct/octant_const.h	/^  int dir;$/;"	m	struct:_Octant
displayresults	postprocessing/ordering/ordering.py	/^def displayresults(procmin, procmax, results, values):$/;"	f
dist_hyperedges	driver/dr_hg_io.c	/^static int dist_hyperedges($/;"	f	file:
dist_x	matrix/matrix.h	/^  int             *dist_x;      \/* Distribution on x axis *\/$/;"	m	struct:Zoltan_matrix_2d_
dist_x	phg/phg_hypergraph.h	/^  int *dist_x;    \/* distributions of vertices to processor columns. Vertices$/;"	m	struct:__anon38
dist_y	matrix/matrix.h	/^  int             *dist_y;      \/* Distribution on y axis *\/$/;"	m	struct:Zoltan_matrix_2d_
dist_y	phg/phg_hypergraph.h	/^  int *dist_y;    \/* distribution of hyperedges to processor rows as above *\/    $/;"	m	struct:__anon38
divide	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/submain/divide.c	/^void      divide(graph, nvtxs, nedges, using_vwgts, using_ewgts, vwsqrt,$/;"	f
divide_procs	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/divide_procs.c	/^int       divide_procs(architecture, ndims, ndims_tot, set_info, set, subsets, inert,$/;"	f
dmax	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	151;"	d
dmax	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	151;"	d
dmin	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	150;"	d
dmin	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	150;"	d
dmm	ha/ha_drum.h	/^  DRUM_machineModel *dmm;            \/* pointer to DRUM machine model$/;"	m	struct:Zoltan_Drum_Struct
dnrm2	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/symmlqblas.f	/^      double precision function dnrm2 /;"	f
dnrm2_	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/symmlqblas.c	/^doublereal dnrm2_(n, dx, incx)$/;"	f
do_match	lb/lb_remap.c	/^static int do_match($/;"	f	file:
docleaning	postprocessing/ordering/ordering.py	/^def docleaning(filename, procnbr):$/;"	f
dot	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/dot.c	/^double    dot(double *vec1, int beg, int end, double *vec2)$/;"	f
dot_float	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/dot.c	/^double    dot_float(float *vec1, int beg, int end, float *vec2)$/;"	f
dotranslation	postprocessing/bin/toscotchperm.py	/^def dotranslation(infile, outfile, offset):$/;"	f
dotranslation	postprocessing/ordering/toscotchperm.py	/^def dotranslation(infile, outfile, offset):$/;"	f
double_to_float	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/cpvec.c	/^void      double_to_float(float *copy, int beg, int end, double *vec)$/;"	f
doublecomplex	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^typedef struct { doublereal r, i; } doublecomplex;$/;"	t	typeref:struct:__anon19
doublecomplex	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^typedef struct { doublereal r, i; } doublecomplex;$/;"	t	typeref:struct:__anon11
doubleout	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/doubleout.c	/^void      doubleout(double number, int mode)$/;"	f
doubleout_file	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/doubleout.c	/^void      doubleout_file(FILE *outfile, double number, int mode)$/;"	f
doublereal	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^typedef double doublereal;$/;"	t
doublereal	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^typedef double doublereal;$/;"	t
doverify	postprocessing/ordering/ordering.py	/^def doverify(proc, force):$/;"	f
dr_chaco_io	fdriver/fdr_chaco_io.f90	/^module dr_chaco_io$/;"	m
dr_chaco_io	fdriver_old/fdr_chaco_io.f90	/^module dr_chaco_io$/;"	m
dr_const	fdriver/fdr_const.f90	/^module dr_const$/;"	m
dr_const	fdriver_old/fdr_const.f90	/^module dr_const$/;"	m
dr_input	fdriver/fdr_input.f90	/^module dr_input$/;"	m
dr_input	fdriver_old/fdr_input.f90	/^module dr_input$/;"	m
dr_loadbal	fdriver/fdr_loadbal.f90	/^module dr_loadbal$/;"	m
dr_loadbal	fdriver_old/fdr_loadbal.f90	/^module dr_loadbal$/;"	m
dr_migrate	fdriver/fdr_migrate.f90	/^module dr_migrate$/;"	m
dr_migrate	fdriver_old/fdr_migrate.f90	/^module dr_migrate$/;"	m
dr_mm_io	fdriver/fdr_mm_io.f90	/^module dr_mm_io$/;"	m
dr_param_file	fdriver/fdr_param_file.f90	/^module dr_param_file$/;"	m
dr_sort	fdriver/fdr_sort.f90	/^module dr_sort$/;"	m
dr_sort_index	fdriver/fdr_sort.f90	/^subroutine dr_sort_index(/;"	s	module:dr_sort
drandom	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/randomize.c	/^double    drandom(void)$/;"	f
driver_eval	driver/dr_eval.c	/^void driver_eval(MESH_INFO_PTR mesh)$/;"	f
driver_eval	driver_old/dr_eval.c	/^void driver_eval(MESH_INFO_PTR mesh)$/;"	f
drum_hier	ha/ha_drum.h	/^  int drum_hier;                     \/* will DRUM store hier info? *\/$/;"	m	struct:Zoltan_Drum_Struct
dsd_add_procs	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int   dsd_add_procs;    \/* adds processors in cases of disconnected subdomains *\/$/;"	m	struct:Problem_Description
dsk_list	driver/dr_input_const.h	/^  int    *dsk_list;$/;"	m	struct:Parallel_IO
dsk_list	driver_old/dr_input_const.h	/^  int    *dsk_list;$/;"	m	struct:Parallel_IO
dsk_list	fdriver/fdr_input.f90	/^  integer(Zoltan_INT), pointer :: dsk_list(/;"	k	type:PARIO_INFO
dsk_list	fdriver_old/fdr_input.f90	/^  integer(LB_INT), pointer :: dsk_list(/;"	k	type:PARIO_INFO
dsk_list_cnt	driver/dr_input_const.h	/^  int     dsk_list_cnt;$/;"	m	struct:Parallel_IO
dsk_list_cnt	driver_old/dr_input_const.h	/^  int     dsk_list_cnt;$/;"	m	struct:Parallel_IO
dsk_list_cnt	fdriver/fdr_input.f90	/^  integer(Zoltan_INT) :: dsk_list_cnt$/;"	k	type:PARIO_INFO
dsk_list_cnt	fdriver_old/fdr_input.f90	/^  integer(LB_INT) :: dsk_list_cnt$/;"	k	type:PARIO_INFO
dummy	fdriver_old/lb_user_const.f90	/^   integer :: dummy$/;"	k	type:LB_User_Data_3
dummy	fdriver_old/lb_user_const.f90	/^   integer :: dummy$/;"	k	type:LB_User_Data_4
dummy	fort/lb_user_const.f90	/^   integer :: dummy$/;"	k	type:LB_User_Data_1
dummy	fort/lb_user_const.f90	/^   integer :: dummy$/;"	k	type:LB_User_Data_2
dummy	fort/lb_user_const.f90	/^   integer :: dummy$/;"	k	type:LB_User_Data_3
dummy	fort/lb_user_const.f90	/^   integer :: dummy$/;"	k	type:LB_User_Data_4
dummy	fort/zoltan_user_data.f90	/^   integer :: dummy$/;"	k	type:Zoltan_User_Data_1
dummy	fort/zoltan_user_data.f90	/^   integer :: dummy$/;"	k	type:Zoltan_User_Data_2
dummy	fort/zoltan_user_data.f90	/^   integer :: dummy$/;"	k	type:Zoltan_User_Data_3
dummy	fort/zoltan_user_data.f90	/^   integer :: dummy$/;"	k	type:Zoltan_User_Data_4
dur	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^	double dur;		\/* duration of message *\/$/;"	m	struct:msg_data
dval	params/params_const.h	/^  double dval;$/;"	m	struct:Param_Utype
dynamicEntries	zz/zz_map.c	/^  int dynamicEntries;   \/* 1 - entries allocated as they are added *\/$/;"	m	struct:Zoltan_Map_List	file:
e_cmap_elems	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int   **e_cmap_elems;$/;"	m	struct:LB_Description
e_cmap_neigh	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int   **e_cmap_neigh;$/;"	m	struct:LB_Description
e_cmap_procs	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int   **e_cmap_procs;$/;"	m	struct:LB_Description
e_cmap_sides	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int   **e_cmap_sides;$/;"	m	struct:LB_Description
e_cmap_size	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int    *e_cmap_size;$/;"	m	struct:LB_Description
eb_cnts	driver/dr_const.h	/^  int    *eb_cnts;		\/* number of elements in each element block  *\/$/;"	m	struct:Mesh_Description
eb_cnts	driver_old/dr_const.h	/^  int    *eb_cnts;		\/* number of elements in each element block  *\/$/;"	m	struct:Mesh_Description
eb_cnts	fdriver/fdr_const.f90	/^  integer(Zoltan_INT), pointer :: eb_cnts(/;"	k	type:MESH_INFO
eb_cnts	fdriver_old/lb_user_const.f90	/^  integer(LB_INT), pointer :: eb_cnts(/;"	k	type:MESH_INFO
eb_cnts	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int    *eb_cnts;$/;"	m	struct:Mesh_Description
eb_etypes	driver/dr_const.h	/^  int    *eb_etypes;            \/* element block element types               *\/$/;"	m	struct:Mesh_Description
eb_etypes	driver_old/dr_const.h	/^  int    *eb_etypes;            \/* element block element types               *\/$/;"	m	struct:Mesh_Description
eb_ids	driver/dr_const.h	/^  int    *eb_ids;		\/* element block ids                         *\/$/;"	m	struct:Mesh_Description
eb_ids	driver_old/dr_const.h	/^  int    *eb_ids;		\/* element block ids                         *\/$/;"	m	struct:Mesh_Description
eb_ids	fdriver/fdr_const.f90	/^  integer(Zoltan_INT), pointer :: eb_ids(/;"	k	type:MESH_INFO
eb_ids	fdriver_old/lb_user_const.f90	/^  integer(LB_INT), pointer :: eb_ids(/;"	k	type:MESH_INFO
eb_names	driver/dr_const.h	/^  char  **eb_names;		\/* element block element names               *\/$/;"	m	struct:Mesh_Description
eb_names	driver_old/dr_const.h	/^  char  **eb_names;		\/* element block element names               *\/$/;"	m	struct:Mesh_Description
eb_names	fdriver/fdr_const.f90	/^  character(len=MAX_EB_NAME_LEN), pointer :: eb_names(/;"	k	type:MESH_INFO
eb_names	fdriver_old/lb_user_const.f90	/^  character(len=MAX_EB_NAME_LEN), pointer :: eb_names(/;"	k	type:MESH_INFO
eb_nattrs	driver/dr_const.h	/^  int    *eb_nattrs;		\/* number of attributes per element in each$/;"	m	struct:Mesh_Description
eb_nattrs	driver_old/dr_const.h	/^  int    *eb_nattrs;		\/* number of attributes per element in each$/;"	m	struct:Mesh_Description
eb_nattrs	fdriver/fdr_const.f90	/^  integer(Zoltan_INT), pointer :: eb_nattrs(/;"	k	type:MESH_INFO
eb_nattrs	fdriver_old/lb_user_const.f90	/^  integer(LB_INT), pointer :: eb_nattrs(/;"	k	type:MESH_INFO
eb_nnodes	driver/dr_const.h	/^  int    *eb_nnodes;		\/* number of nodes per element in each$/;"	m	struct:Mesh_Description
eb_nnodes	driver_old/dr_const.h	/^  int    *eb_nnodes;		\/* number of nodes per element in each$/;"	m	struct:Mesh_Description
eb_nnodes	fdriver/fdr_const.f90	/^  integer(Zoltan_INT), pointer :: eb_nnodes(/;"	k	type:MESH_INFO
eb_nnodes	fdriver_old/lb_user_const.f90	/^  integer(LB_INT), pointer :: eb_nnodes(/;"	k	type:MESH_INFO
echo_cmd_file	driver/dr_output.c	/^static void echo_cmd_file(FILE *fp, const char *cmd_file)$/;"	f	file:
echo_cmd_file	driver_old/dr_output.c	/^static void echo_cmd_file(FILE *fp, char *cmd_file)$/;"	f	file:
echo_cmd_file	fdriver/fdr_main.f90	/^subroutine echo_cmd_file(/;"	s
echo_cmd_file	fdriver_old/fdr_main.f90	/^subroutine echo_cmd_file(/;"	s
ecmap_cnt	driver/dr_const.h	/^  int    *ecmap_cnt;            \/* number of elements in each elemental$/;"	m	struct:Mesh_Description
ecmap_cnt	driver_old/dr_const.h	/^  int    *ecmap_cnt;            \/* number of elements in each elemental$/;"	m	struct:Mesh_Description
ecmap_cnt	fdriver/fdr_const.f90	/^  integer(Zoltan_INT), pointer :: ecmap_cnt(/;"	k	type:MESH_INFO
ecmap_cnt	fdriver_old/lb_user_const.f90	/^  integer(LB_INT), pointer :: ecmap_cnt(/;"	k	type:MESH_INFO
ecmap_elemids	driver/dr_const.h	/^  int    *ecmap_elemids;        \/* element ids of elements for all elemental$/;"	m	struct:Mesh_Description
ecmap_elemids	driver_old/dr_const.h	/^  int    *ecmap_elemids;        \/* element ids of elements for all elemental$/;"	m	struct:Mesh_Description
ecmap_elemids	fdriver/fdr_const.f90	/^  integer(Zoltan_INT), pointer :: ecmap_elemids(/;"	k	type:MESH_INFO
ecmap_elemids	fdriver_old/lb_user_const.f90	/^  integer(LB_INT), pointer :: ecmap_elemids(/;"	k	type:MESH_INFO
ecmap_id	driver/dr_const.h	/^  int    *ecmap_id;             \/* IDs of each elemental communication map.  *\/$/;"	m	struct:Mesh_Description
ecmap_id	driver_old/dr_const.h	/^  int    *ecmap_id;             \/* IDs of each elemental communication map.  *\/$/;"	m	struct:Mesh_Description
ecmap_id	fdriver/fdr_const.f90	/^  integer(Zoltan_INT), pointer :: ecmap_id(/;"	k	type:MESH_INFO
ecmap_id	fdriver_old/lb_user_const.f90	/^  integer(LB_INT), pointer :: ecmap_id(/;"	k	type:MESH_INFO
ecmap_neighids	driver/dr_const.h	/^  int    *ecmap_neighids;       \/* elements ids of neighboring elements $/;"	m	struct:Mesh_Description
ecmap_neighids	driver_old/dr_const.h	/^  int    *ecmap_neighids;       \/* elements ids of neighboring elements $/;"	m	struct:Mesh_Description
ecmap_neighids	fdriver/fdr_const.f90	/^  integer(Zoltan_INT), pointer :: ecmap_neighids(/;"	k	type:MESH_INFO
ecmap_neighids	fdriver_old/lb_user_const.f90	/^  integer(LB_INT), pointer :: ecmap_neighids(/;"	k	type:MESH_INFO
ecmap_sideids	driver/dr_const.h	/^  int    *ecmap_sideids;        \/* side ids of elements for all elemental $/;"	m	struct:Mesh_Description
ecmap_sideids	driver_old/dr_const.h	/^  int    *ecmap_sideids;        \/* side ids of elements for all elemental $/;"	m	struct:Mesh_Description
ecmap_sideids	fdriver/fdr_const.f90	/^  integer(Zoltan_INT), pointer :: ecmap_sideids(/;"	k	type:MESH_INFO
ecmap_sideids	fdriver_old/lb_user_const.f90	/^  integer(LB_INT), pointer :: ecmap_sideids(/;"	k	type:MESH_INFO
edgeGID	phg/phg_lookup.h	/^  ZOLTAN_ID_PTR edgeGID;    \/* edge global IDs *\/$/;"	m	struct:_hshEdge
edgeGID	phg/phg_lookup.h	/^  ZOLTAN_ID_PTR edgeGID;    \/* edge global IDs *\/$/;"	m	struct:_myPin
edgeGID	phg/phg_lookup.h	/^  ZOLTAN_ID_PTR edgeGID;   \/* edge global IDs *\/$/;"	m	struct:_myEW
edgeGNO	phg/phg_hypergraph.h	/^  int *edgeGNO;             \/* edge global number *\/$/;"	m	struct:Zoltan_HGraph
edgeHash	phg/phg_lookup.h	/^  int           *edgeHash;  \/* process assigned edgeGID by hash function *\/$/;"	m	struct:_myPin
edgeHash	phg/phg_lookup.h	/^  int           *edgeHash;  \/* process assigned this edge by hash function *\/$/;"	m	struct:_myEW
edgeWeightDim	phg/phg_hypergraph.h	/^  int edgeWeightDim;        \/* Number of weights stored for each hyperedge *\/$/;"	m	struct:Zoltan_HGraph
edge_scaling	phg/phg.h	/^  int edge_scaling;              \/* type of hyperedge weight scaling *\/$/;"	m	struct:PHGPartParamsStruct
edge_weight_op	phg/phg.h	/^  int edge_weight_op;   \/* What to do when more than one process returns a$/;"	m	struct:PHGPartParamsStruct
edge_weight_operation	phg/phg_build_calls.c	/^static int edge_weight_operation(ZZ *zz, float *dest, float *src, int ew_dim, int ew_op, int len)$/;"	f	file:
edge_wgt	driver/dr_const.h	/^  float   *edge_wgt;	\/* edge weights for adjacent elements *\/$/;"	m	struct:Element_Description
edge_wgt	driver_old/dr_const.h	/^  float   *edge_wgt;	\/* edge weights for adjacent elements *\/$/;"	m	struct:Element_Description
edge_wgt	fdriver/fdr_const.f90	/^  real(Zoltan_FLOAT), pointer :: edge_wgt(/;"	k	type:ELEM_INFO
edge_wgt	fdriver_old/lb_user_const.f90	/^  real(LB_FLOAT), pointer :: edge_wgt(/;"	k	type:ELEM_INFO
edge_wgt_dim	hier/hier.h	/^  int obj_wgt_dim, edge_wgt_dim;     \/* object and edge weight dimensions *\/$/;"	m	struct:HierPartParamsStruct
edge_wgt_dim	parmetis/third_library.h	/^  int edge_wgt_dim;                     \/* Number of weights by edge *\/$/;"	m	struct:ZOLTAN_Third_Graph_
edges	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^	int *edges;		\/* neighbor list in subgraph numbering scheme *\/$/;"	m	struct:vtx_data
edges	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  float *edges;$/;"	m	struct:Weight_Description
edgeslist	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^struct edgeslist {$/;"	s
eigensolve	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/eigen/eigensolve.c	/^void      eigensolve(graph, nvtxs, nedges, maxdeg, vwgt_max, vwsqrt,$/;"	f
eigenvec2	rcb/inertial2d.c	/^static void eigenvec2($/;"	f	file:
eigenvec2	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/inertial/eigenvec2.c	/^void      eigenvec2(A, eval, evec, res)$/;"	f
eigenvec3	rcb/inertial3d.c	/^static void eigenvec3($/;"	f	file:
eigenvec3	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/inertial/eigenvec3.c	/^void      eigenvec3(A, eval, evec, res)$/;"	f
eigenvectors	zz/zz_coord.c	/^static int eigenvectors(double (*m)[3], double (*evecs)[3], int dim)$/;"	f	file:
ele	zz/zz_heap.h	/^   int   *ele;$/;"	m	struct:__anon36
elem_array_len	driver/dr_const.h	/^  int     elem_array_len;	\/* length that the ELEM_INFO array is$/;"	m	struct:Mesh_Description
elem_array_len	driver_old/dr_const.h	/^  int     elem_array_len;	\/* length that the ELEM_INFO array is$/;"	m	struct:Mesh_Description
elem_array_len	fdriver/fdr_const.f90	/^  integer(Zoltan_INT) :: elem_array_len /;"	k	type:MESH_INFO
elem_array_len	fdriver_old/lb_user_const.f90	/^  integer(LB_INT) :: elem_array_len /;"	k	type:MESH_INFO
elem_blk	driver/dr_const.h	/^  int      elem_blk;    \/* element block number which this element is in *\/$/;"	m	struct:Element_Description
elem_blk	driver_old/dr_const.h	/^  int      elem_blk;    \/* element block number which this element is in *\/$/;"	m	struct:Element_Description
elem_blk	fdriver/fdr_const.f90	/^  integer(Zoltan_INT) :: elem_blk /;"	k	type:ELEM_INFO
elem_blk	fdriver_old/lb_user_const.f90	/^  integer(LB_INT) :: elem_blk /;"	k	type:ELEM_INFO
elem_dim	reftree/reftree_coarse_path.c	/^static int *elem_dim;$/;"	v	file:
elem_id	driver/dr_maps.c	/^  int *elem_id;$/;"	m	struct:map_list_head	file:
elem_id	driver/dr_mapsCPP.cpp	/^  int *elem_id;$/;"	m	struct:map_list_head	file:
elem_id	driver_old/dr_maps.c	/^  int *elem_id;$/;"	m	struct:map_list_head	file:
elem_id	fdriver/fdr_chaco_io.f90	/^  integer(Zoltan_INT), pointer :: elem_id(/;"	k	type:map_list_head
elem_id	fdriver_old/fdr_chaco_io.f90	/^  integer(LB_INT), pointer :: elem_id(/;"	k	type:map_list_head
elem_names	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_main.c	/^char* elem_names[NULL_EL] = {"SPHERE", "BAR2", "BAR3", "QUAD4", "QUAD8", "QUAD9",$/;"	v
elem_type	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  E_Type *elem_type;$/;"	m	struct:Mesh_Description
elemblk	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int   *elemblk;$/;"	m	struct:Weight_Description
elemblk_wgt	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int   *elemblk_wgt;$/;"	m	struct:Weight_Description
element_list	reftree/reftree_coarse_path.c	/^static int **element_list;$/;"	v	file:
element_list_dim	reftree/reftree_coarse_path.c	/^static int element_list_dim;$/;"	v	file:
element_swap	reftree/reftree_coarse_path.c	/^static int element_swap(int *ierr, ZZ *zz)$/;"	f	file:
element_swap_recur	reftree/reftree_coarse_path.c	/^static int element_swap_recur(int element, int *ierr, ZZ *zz)$/;"	f	file:
elemental_dist	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_loadbal.c	/^int elemental_dist(LB_INFO_PTR lb,$/;"	f
elements	driver/dr_const.h	/^  ELEM_INFO_PTR elements;       \/* array of elements that are in the mesh.   *\/$/;"	m	struct:Mesh_Description
elements	driver_old/dr_const.h	/^  ELEM_INFO_PTR elements;       \/* array of elements that are in the mesh.   *\/$/;"	m	struct:Mesh_Description
elements	fdriver/fdr_const.f90	/^  type(ELEM_INFO), pointer :: elements(/;"	k	type:MESH_INFO
elements	fdriver_old/lb_user_const.f90	/^  type(ELEM_INFO), pointer :: elements(/;"	k	type:MESH_INFO
end	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^	double end;		\/* time at which message end *\/$/;"	m	struct:msg_data
end	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int  *end;$/;"	m	struct:Sphere_Info
enforceSquare	matrix/matrix.h	/^  int enforceSquare;           \/* Want to build a graph *\/$/;"	m	struct:Zoltan_matrix_options_
entries	zz/zz_map.c	/^  ZOLTAN_ENTRY **entries; \/* hash array, length max_index + 1 *\/$/;"	m	struct:Zoltan_Map_List	file:
entry_count	zz/zz_map.c	/^  int entry_count;      \/* how many entries have been added to the map *\/$/;"	m	struct:Zoltan_Map_List	file:
epslon	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/epslon.f	/^      double precision function epslon /;"	f
epslon_	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/epslon.c	/^doublereal epslon_(x)$/;"	f
err_mesg	driver/dr_err_const.h	/^  char *err_mesg;$/;"	m	struct:error_message
err_mesg	driver_old/dr_err_const.h	/^  char *err_mesg;$/;"	m	struct:error_message
err_mesg	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_err_const.h	/^  char *err_mesg;$/;"	m	struct:error_message
errcheck	Utilities/DDirectory/DD.h	/^   int              errcheck;   \/* Error checking (inconsistent updates) *\/$/;"	m	struct:DD_Node
errexit	phg/phg_util.h	31;"	d
error	fdriver/fdr_main.f90	/^  integer(Zoltan_INT) :: error,/;"	v	program:fdriver
error	fdriver_old/fdr_main.f90	/^  integer(LB_INT) :: error,/;"	v	program:fdriver
error_add	driver/dr_err.c	/^void error_add(int level, const char *message, const char *filename, int line_no)$/;"	f
error_add	driver_old/dr_err.c	/^void error_add(int level, char *message, char *filename, int line_no)$/;"	f
error_add	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_err.c	/^void error_add(int level, char *message, char *filename, int line_no)$/;"	f
error_cnt	driver/dr_err.c	/^static int error_cnt = 0;$/;"	v	file:
error_cnt	driver_old/dr_err.c	/^static int error_cnt = 0;$/;"	v	file:
error_cnt	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_err.c	/^static int error_cnt = 0;$/;"	v	file:
error_info	driver/dr_err.c	/^static ERROR_MSG_PTR error_info;$/;"	v	file:
error_info	driver_old/dr_err.c	/^static ERROR_MSG_PTR error_info;$/;"	v	file:
error_info	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_err.c	/^static ERROR_MSG_PTR error_info;$/;"	v	file:
error_lev	driver/dr_err.c	/^static int error_lev = 3;$/;"	v	file:
error_lev	driver_old/dr_err.c	/^static int error_lev = 3;$/;"	v	file:
error_lev	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_err.c	/^int error_lev = 1;$/;"	v
error_level	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_err_const.h	/^  int   error_level;$/;"	m	struct:error_message
error_message	driver/dr_err_const.h	/^struct error_message$/;"	s
error_message	driver_old/dr_err_const.h	/^struct error_message$/;"	s
error_message	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_err_const.h	/^struct error_message$/;"	s
error_report	ZoltanComponent/TestComponents/Driver.h	/^    void error_report( char *mesg, int line, char *file) $/;"	f	class:ZoltanTestSpace::Driver
error_report	driver/dr_err.c	/^void error_report(int Proc)$/;"	f
error_report	driver_old/dr_err.c	/^void error_report(int Proc)$/;"	f
error_report	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_err.c	/^void error_report(void)$/;"	f
esize	phg/phg_hypergraph.h	/^  int  *esize;      \/* global edge size; nEdge long *\/$/;"	m	struct:__anon38
esizes	phg/phg_lookup.h	/^  int           *esizes;    \/* local size in pins of each hyperedge *\/$/;"	m	struct:_myPin
ev	rcb/rib.h	/^    double    ev[3];            \/* perpendicular direction from cut *\/$/;"	m	struct:rib_tree
eval_cut_quality	par/par_bisect.c	/^static double eval_cut_quality($/;"	f	file:
evals2	rcb/inertial2d.c	/^static void evals2($/;"	f	file:
evals2	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/inertial/eigenvec2.c	/^void      evals2(H, eval1, eval2)$/;"	f
evals3	rcb/inertial3d.c	/^static void evals3($/;"	f	file:
evals3	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/inertial/eigenvec3.c	/^void      evals3(H, eval1, eval2, eval3)$/;"	f
evec_time	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/timing.c	/^double    evec_time = 0;$/;"	v
ewgt	phg/phg_hypergraph.h	/^  float *ewgt;    \/* weights of hypergraph edges, nEdge long by EdgeWeightDim *\/$/;"	m	struct:__anon38
ewgt_dim	driver/dr_const.h	/^  int     ewgt_dim;             \/* number of weights per graph edge.         *\/$/;"	m	struct:Mesh_Description
ewgts	hier/hier.h	/^  float *ewgts;                      \/* edge weights for intermediate struct *\/$/;"	m	struct:HierPartParamsStruct
ewgts	parmetis/third_library.h	/^  weighttype * ewgts;                   \/* Array of edge weights *\/$/;"	m	struct:ZOLTAN_Third_Graph_
ewgts	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^	float *ewgts;		\/* weights of all the edges *\/$/;"	m	struct:vtx_data
exchange	par/par_median_randomized.c	463;"	d	file:
exo_filename	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  char  exo_filename[MAX_FNL+1];$/;"	m	struct:Weight_Description
exo_tindx	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int   exo_tindx;$/;"	m	struct:Weight_Description
exo_varname	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  char  exo_varname[MAX_STR_LENGTH];$/;"	m	struct:Weight_Description
exo_vindx	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int   exo_vindx;$/;"	m	struct:Weight_Description
exp_gids	parmetis/third_library.h	/^  ZOLTAN_ID_PTR *exp_gids;$/;"	m	struct:ZOLTAN_Output_Part_
exp_lids	parmetis/third_library.h	/^  ZOLTAN_ID_PTR *exp_lids;$/;"	m	struct:ZOLTAN_Output_Part_
exp_part	parmetis/third_library.h	/^  int **exp_part;$/;"	m	struct:ZOLTAN_Output_Part_
exp_procs	parmetis/third_library.h	/^  int **exp_procs;$/;"	m	struct:ZOLTAN_Output_Part_
export_it	reftree/reftree_part.c	/^static int export_it(ZOLTAN_REFTREE *subroot, ZZ *zz, int *ierr)$/;"	f	file:
ext_nodes	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int    **ext_nodes;$/;"	m	struct:LB_Description
ext_procs	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int    **ext_procs;$/;"	m	struct:LB_Description
extra_options	util/vtk_view.cpp	/^static UNDEFINED_INFO extra_options;$/;"	v	file:
extract_connected_lists	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_loadbal.c	/^int extract_connected_lists( int nrow, const int* columns,  $/;"	f
extracttime	postprocessing/ordering/ordering.py	/^def extracttime(string):$/;"	f
extractvalue	postprocessing/ordering/ordering.py	/^def extractvalue(string, value):$/;"	f
face_adj	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int   face_adj;         \/* true if using face definition of adjacencies      *\/$/;"	m	struct:Problem_Description
factorView	postprocessing/ordering/order_eval.c	/^factorView ($/;"	f	file:
factorView2	postprocessing/ordering/order_eval.c	/^factorView2 ($/;"	f	file:
factorView3	postprocessing/ordering/order_eval.c	/^factorView3 ($/;"	f	file:
factorView4	postprocessing/ordering/order_eval.c	/^factorView4 ($/;"	f	file:
fan_in_edge_global_ids	zz/zz_gen_files.c	/^static int fan_in_edge_global_ids(ZZ *zz, int numEdges, ZOLTAN_ID_PTR egids)$/;"	f	file:
fcopy	driver/dr_exoII_io.c	/^void fcopy(char *in, char *out)$/;"	f
fcopy	driver/dr_exoII_ioCPP.cpp	/^void fcopy(char *in, char *out)$/;"	f
fdriver	fdriver/fdr_main.f90	/^program fdriver$/;"	p
fdriver	fdriver_old/fdr_main.f90	/^program fdriver$/;"	p
fget_strided_stats	lb/lb_eval.c	/^static void fget_strided_stats(float *v, int stride, int offset, int len,$/;"	f	file:
fhsfc	hsfc/hsfc.h	/^   double    (*fhsfc)(ZZ*, double*);  \/* space filling curve function *\/$/;"	m	struct:HSFC_Data
file	Utilities/Memory/mem.c	/^  char  file[MAX_STRING_LEN+1];   	\/* file name *\/$/;"	m	struct:malloc_debug_data	file:
file	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  char     file[MAX_FNL+1];$/;"	m	struct:LB_Description
fileNames	util/vtk_view.cpp	/^static char **fileNames;  \/\/ OR list of all file names $/;"	v	file:
fileNamesBase	util/vtk_view.cpp	/^static char **fileNamesBase;$/;"	v	file:
filePattern	util/vtk_view.cpp	/^static char filePattern[ZMAXPATH]; \/\/ "printf"-like pattern: "%s\/basename.0016.%04d"$/;"	v	file:
filePrefix	util/vtk_view.cpp	/^static char filePrefix[ZMAXPATH];  \/\/   root directory for pattern$/;"	v	file:
fileRange	util/vtk_view.cpp	/^static int fileRange[2];      \/\/   file numbers for pattern$/;"	v	file:
file_comp	driver/dr_input_const.h	/^  ZOLTAN_FILETYPE file_comp;  \/* whether the file is compressed and how      *\/$/;"	m	struct:Parallel_IO
file_comp	driver_old/dr_input_const.h	/^  int     file_comp;    \/* wether the file is compressed and how       *\/$/;"	m	struct:Parallel_IO
file_type	driver/dr_input_const.h	/^  int     file_type;    \/* input file type *\/$/;"	m	struct:Parallel_IO
file_type	driver_old/dr_input_const.h	/^  int     file_type;    \/* input file type *\/$/;"	m	struct:Parallel_IO
file_type	fdriver/fdr_input.f90	/^  integer(Zoltan_INT) :: file_type /;"	k	type:PARIO_INFO
file_type	fdriver_old/fdr_input.f90	/^  integer(LB_INT) :: file_type /;"	k	type:PARIO_INFO
filebz	driver/dr_compress_const.h	/^    BZFILE * filebz;$/;"	m	union:ZOLTAN_FILE_::__anon39
filegz	driver/dr_compress_const.h	/^    gzFile filegz;$/;"	m	union:ZOLTAN_FILE_::__anon39
filename	driver/dr_err_const.h	/^  char *filename;$/;"	m	struct:error_message
filename	driver_old/dr_err_const.h	/^  char *filename;$/;"	m	struct:error_message
filename	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_err_const.h	/^  char *filename;$/;"	m	struct:error_message
fileunc	driver/dr_compress_const.h	/^    FILE * fileunc;$/;"	m	union:ZOLTAN_FILE_::__anon39
fill_elements	driver_old/dr_chaco_io.c	/^static int fill_elements($/;"	f	file:
fill_elements	fdriver/fdr_chaco_io.f90	/^logical function fill_elements(/;"	f	module:dr_chaco_io
fill_elements	fdriver_old/fdr_chaco_io.f90	/^logical function fill_elements(/;"	f	module:dr_chaco_io
final_output	matrix/matrix.h	/^  int final_output;            \/* final_output flag, not used yet *\/$/;"	m	struct:Zoltan_matrix_options_
final_output	parmetis/third_library.h	/^  int final_output;                     \/* Do some output computations *\/$/;"	m	struct:ZOLTAN_Third_Graph_
final_output	phg/phg.h	/^  int final_output;     \/* Prints final timing and quality info at end of PHG$/;"	m	struct:PHGPartParamsStruct
final_partition	hsfc/hsfc.h	/^   Partition *final_partition;$/;"	m	struct:HSFC_Data
finaloutput	phg/phg_tree.h	/^  int finaloutput;  \/* printing final output time *\/$/;"	m	struct:phg_timer_indices
findAndSaveLeftAloneVertices	phg/phg.c	/^static int findAndSaveLeftAloneVertices(ZZ *zz, HGraph *hg, int p, $/;"	f	file:
find_adjacency	driver/dr_exoII_io.c	/^static int find_adjacency(int Proc, MESH_INFO_PTR mesh,$/;"	f	file:
find_adjacency	driver/dr_exoII_ioCPP.cpp	/^static int find_adjacency(int Proc, MESH_INFO_PTR mesh,$/;"	f	file:
find_adjacency	driver_old/dr_exoII_io.c	/^static int find_adjacency(int Proc, MESH_INFO_PTR mesh,$/;"	f	file:
find_adjacency	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_graph.c	/^int find_adjacency(PROB_INFO_PTR problem,$/;"	f
find_bndy	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klvspiff/find_bndy.c	/^int       find_bndy(graph, nvtxs, assignment, new_val, pbndy_list)$/;"	f
find_cnt_domains	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int   find_cnt_domains; \/* true if finding number of connected domains in a graph *\/$/;"	m	struct:Problem_Description
find_comps	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/connect/find_comps.c	/^int       find_comps(graph, nvtxs, mark, vtxlist)$/;"	f
find_edge_cube	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/refine_map/find_edge_cube.c	/^struct refine_edata *find_edge_cube(node, dim, edata, nsets_tot)$/;"	f
find_edge_mesh	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/refine_map/find_edge_mesh.c	/^struct refine_edata *find_edge_mesh(vertex, dim, edata, mesh_dims, $/;"	f
find_edges	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/connect/find_comps.c	/^int       find_edges(graph, nvtxs, mark, vtxlist, edges)$/;"	f
find_first_last	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_util.c	/^void find_first_last(int val, int vecsize, int *vector, int *first, int *last)$/;"	f
find_flat	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klvspiff/flatten.c	/^void      find_flat(graph, nvtxs, pcnvtxs, v2cv)$/;"	f
find_in_hash	driver/dr_migrate.c	/^int find_in_hash($/;"	f
find_inout	reftree/reftree_build.c	/^static int find_inout(ZZ *zz,int level,int num_child,int *num_vert,int *vert1,$/;"	f	file:
find_inout	reftree/reftree_coarse_path.c	/^static int find_inout(int elem, int prev, int prevprev,$/;"	f	file:
find_int	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_util.c	/^int find_int(int value1, int value2, int start, int stop, int *vector1,$/;"	f
find_inter	driver/dr_util.c	/^int find_inter(const int set1[], const int set2[], const int length1,$/;"	f
find_inter	driver_old/dr_util.c	/^int find_inter(const int set1[], const int set2[], const int length1,$/;"	f
find_inter	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_util.c	/^int find_inter(const int set1[], const int set2[], const int length1,$/;"	f
find_interval_in_tree	phg/phg_tree.c	/^find_interval_in_tree(Zoltan_PHG_Tree *tree, int *interval)$/;"	f
find_max	driver/dr_util.c	/^int find_max(const int list_length, const int list[])$/;"	f
find_max	driver_old/dr_util.c	/^int find_max(const int list_length, const int list[])$/;"	f
find_max	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_util.c	/^int find_max(const int list_length, const int list[])$/;"	f
find_maxdeg	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/find_maxdeg.c	/^double    find_maxdeg(graph, nvtxs, using_ewgts, pmax_ewgt)$/;"	f
find_min	driver/dr_util.c	/^int find_min(const int list_length, const int list[])$/;"	f
find_min	driver_old/dr_util.c	/^int find_min(const int list_length, const int list[])$/;"	f
find_min	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_util.c	/^int find_min(const int list_length, const int list[])$/;"	f
find_msg_size	Utilities/DDirectory/DD.h	/^  int find_msg_size;      \/* Total allocation for DD_FIND_MSG       *\/$/;"	m	struct:Zoltan_DD_Struct
find_needed_gid_procs	hier/hier.c	/^static int find_needed_gid_procs(HierPartParams *hpp) {$/;"	f	file:
find_side_bndy	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klvspiff/find_bndy.c	/^int       find_side_bndy(graph, nvtxs, assignment, side, new_val, pbndy_list)$/;"	f
find_surnd_elem	driver/dr_exoII_io.c	/^static int find_surnd_elem(MESH_INFO_PTR mesh, int **sur_elem, int *nsurnd,$/;"	f	file:
find_surnd_elem	driver/dr_exoII_ioCPP.cpp	/^static int find_surnd_elem(MESH_INFO_PTR mesh, int **sur_elem, int *nsurnd,$/;"	f	file:
find_surnd_elem	driver_old/dr_exoII_io.c	/^static int find_surnd_elem(MESH_INFO_PTR mesh, int **sur_elem, int *nsurnd,$/;"	f	file:
find_surnd_elems	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_graph.c	/^int find_surnd_elems(MESH_INFO_PTR mesh,$/;"	f
findindex	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/bpmatch/inits2d.c	/^int       findindex(indices, vals, target, nvals)$/;"	f
finer	phg/phg_Vcycle.c	/^    struct tagVCycle *finer; $/;"	m	struct:tagVCycle	typeref:struct:tagVCycle::tagVCycle	file:
first	driver/dr_param_file.c	/^  struct zoltanParams_list_entry *first;$/;"	m	struct:zoltanParams_hier_struct	typeref:struct:zoltanParams_hier_struct::zoltanParams_list_entry	file:
first	driver/dr_param_fileCPP.cpp	/^  struct zoltanParams_list_entry *first;$/;"	m	struct:zoltanParams_hier_struct	typeref:struct:zoltanParams_hier_struct::zoltanParams_list_entry	file:
first	fdriver/fdr_param_file.f90	/^   type (ztnPrm_list_entry), pointer :: first$/;"	k	type:ztnPrm_hier_struct
first_char	driver/dr_hg_io.c	/^static char *first_char(char *buf, int max)$/;"	f	file:
fixObj	graph/graph.h	/^  int          fixObj;$/;"	m	struct:ZG_
fixed	phg/phg_hypergraph.h	/^  int *fixed;               \/* vertex assignments for fixed vertices *\/$/;"	m	struct:Zoltan_HGraph
fixed_network_weight	ha/ha_drum.h	/^  float fixed_network_weight;        \/* what weight for network if using it? *\/$/;"	m	struct:Zoltan_Drum_Struct
fixed_part	driver/dr_const.h	/^  int      fixed_part;  \/* Partition to which the element should be fixed;$/;"	m	struct:Element_Description
fixed_part	phg/phg_hypergraph.h	/^  int *fixed_part;       \/* an array of size |V| containing part assignments of fixed$/;"	m	struct:__anon38
fixed_vertices	graph/graph.h	/^  int         *fixed_vertices;$/;"	m	struct:ZG_
flag	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^typedef long flag;$/;"	t
flag	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^typedef short flag;$/;"	t
flag	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^typedef long flag;$/;"	t
flag	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^typedef short flag;$/;"	t
flatten	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klvspiff/flatten.c	/^int       flatten(graph, nvtxs, nedges, pcgraph, pcnvtxs, pcnedges, pv2cv,$/;"	f
flists	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^struct flists {				\/* linked list of floating lists *\/$/;"	s
float_ewgts	parmetis/third_library.h	/^  float * float_ewgts;$/;"	m	struct:ZOLTAN_Third_Graph_
float_to_double	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/cpvec.c	/^void      float_to_double(double *copy, int beg, int end, float *vec)$/;"	f
flush_line	ch/ch_input_read.c	/^static void flush_line($/;"	f	file:
flush_line	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/input/read_val.c	/^static void flush_line(infile)$/;"	f	file:
fm2_move_vertex_oneway	phg/phg_refinement.c	/^static void fm2_move_vertex_oneway(int v, HGraph *hg, Partition part, $/;"	f	file:
fm2_move_vertex_oneway_nonroot	phg/phg_refinement.c	/^static void fm2_move_vertex_oneway_nonroot(int v, HGraph *hg, Partition part, $/;"	f	file:
fm_loop_limit	phg/phg.h	/^  int fm_loop_limit;    \/* Number of FM loops (if the refinement is FM) *\/$/;"	m	struct:PHGPartParamsStruct
fm_max_neg_move	phg/phg.h	/^  int fm_max_neg_move;  \/* Maximum number of vertex moves with negative gain;$/;"	m	struct:PHGPartParamsStruct
fname_opts	util/vtk_view.cpp	/^static PARIO_INFO fname_opts;$/;"	v	file:
fnnzsum	postprocessing/ordering/order_eval.h	/^  double                  fnnzsum;$/;"	m	struct:FactorStat_
fnnztax	postprocessing/ordering/order_eval.h	/^  const SCOTCH_Num *      fnnztax;$/;"	m	struct:FactorStat_
force_internal	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/internal/force_internal.c	/^void      force_internal(graph, nvtxs, using_ewgts, assign, goal, nsets_tot,$/;"	f
format	driver/dr_const.h	/^  int     format;               \/* rows (edges) or columns (vertices) *\/$/;"	m	struct:Mesh_Description
fort_free_int	fort/fwrap.f90	/^subroutine fort_free_int(/;"	s	module:zoltan
fort_malloc_int	fort/fwrap.f90	/^subroutine fort_malloc_int(/;"	s	module:zoltan
fort_malloc_set_struct	fort/fwrap.f90	/^subroutine fort_malloc_set_struct(/;"	s	module:zoltan
free2d	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/bpmatch/map2d.c	/^static void free2d(vals, indices)$/;"	f	file:
free3d	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/bpmatch/map3d.c	/^static void free3d(vals, indices)$/;"	f	file:
free_edgeslist	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/connect/connected.c	/^void      free_edgeslist(edge_list)$/;"	f
free_element_arrays	driver/dr_elem_util.c	/^void free_element_arrays(ELEM_INFO *elem, MESH_INFO_PTR mesh)$/;"	f
free_element_arrays	driver_old/dr_elem_util.c	/^void free_element_arrays(ELEM_INFO *elem, MESH_INFO_PTR mesh)$/;"	f
free_element_arrays	fdriver/fdr_chaco_io.f90	/^subroutine free_element_arrays(/;"	s	module:dr_chaco_io
free_element_arrays	fdriver_old/fdr_chaco_io.f90	/^subroutine free_element_arrays(/;"	s	module:dr_chaco_io
free_graph	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/graph/free_graph.c	/^void      free_graph(graph)$/;"	f
free_hash_table	lb/lb_balance.c	/^static void free_hash_table(struct Hash_Node **ht, int tableSize)$/;"	f	file:
free_hier_mig_data	hier/hier.c	/^static void free_hier_mig_data(void *voiddata) {$/;"	f	file:
free_kl	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klspiff/klspiff.c	/^static void free_kl(buckets, listspace, dvals, tops)$/;"	f	file:
free_klv	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klvspiff/klvspiff.c	/^static void free_klv(lbuckets, rbuckets, llistspace, rlistspace, ldvals, rdvals)$/;"	f	file:
free_lists	reftree/reftree_coarse_path.c	/^static void free_lists(int all_triangles)$/;"	f	file:
free_mesh_arrays	driver/dr_elem_util.c	/^void free_mesh_arrays(MESH_INFO_PTR mesh)$/;"	f
free_mesh_arrays	driver_old/dr_elem_util.c	/^void free_mesh_arrays(MESH_INFO_PTR mesh)$/;"	f
free_reftree_nodes	reftree/reftree_build.c	/^static void free_reftree_nodes(ZOLTAN_REFTREE **node)$/;"	f	file:
free_reverse_plan	Utilities/Communication/comm_do_reverse.c	/^static void free_reverse_plan(ZOLTAN_COMM_OBJ *plan)$/;"	f	file:
from	oct/migoct.c	/^  int from;$/;"	m	struct:__anon30	file:
frvec	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/mkvec.c	/^void      frvec(double *v, int nl)$/;"	f
frvec_float	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/mkvec.c	/^void      frvec_float(float *v, int nl)$/;"	f
fsfc	hsfc/hsfc.h	/^   double fsfc;         \/* computed normalized SFC coordinate     *\/$/;"	m	struct:Dots
ftnint	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^typedef long ftnint;$/;"	t
ftnint	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^typedef short ftnint;$/;"	t
ftnint	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^typedef long ftnint;$/;"	t
ftnint	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^typedef short ftnint;$/;"	t
ftnlen	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^typedef long ftnlen;$/;"	t
ftnlen	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^typedef short ftnlen;$/;"	t
ftnlen	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^typedef long ftnlen;$/;"	t
ftnlen	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^typedef short ftnlen;$/;"	t
func2d	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func2d.c	/^double    func2d(coeffs, theta)$/;"	f
func3d	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^double    func3d(coeffs, theta, phi, gamma2)$/;"	f
fval	params/params_const.h	/^  float fval;$/;"	m	struct:Param_Utype
gather_and_build_remap	lb/lb_remap.c	/^static int gather_and_build_remap($/;"	f	file:
gcos	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	191;"	d
gcos	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	191;"	d
gen_par_filename	driver/dr_input.c	/^void gen_par_filename ($/;"	f
gen_par_filename	driver_old/dr_input.c	/^void gen_par_filename(char *scalar_fname, char *par_fname,$/;"	f
gen_par_filename	fdriver/fdr_input.f90	/^subroutine gen_par_filename(/;"	s	module:dr_input
gen_par_filename	fdriver_old/fdr_input.f90	/^subroutine gen_par_filename(/;"	s	module:dr_input
generate_graph	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_graph.c	/^int generate_graph(PROB_INFO_PTR problem,$/;"	f
generate_loadbal	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_loadbal.c	/^int generate_loadbal(MACHINE_PTR machine,$/;"	f
generate_maps	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_loadbal.c	/^int generate_maps($/;"	f
genvals2d	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/bpmatch/genvals2d.c	/^void      genvals2d(xvecs, vals, nvtxs)$/;"	f
genvals3d	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/bpmatch/genvals3d.c	/^void      genvals3d(xvecs, vals, nvtxs)$/;"	f
geom_vec	hier/hier.h	/^  double *geom_vec;                  \/* geometry of objects in intermediate *\/$/;"	m	struct:HierPartParamsStruct
getComponentList	ZoltanComponent/CCA_Wrapper/ZoltanLB_wrapper.cpp	/^char **getComponentList() $/;"	f
getComponentList	ZoltanComponent/TestComponents/Driver_wrapper.cpp	/^char **getComponentList() $/;"	f
getComponentList	ZoltanComponent/TestComponents/Mesh_wrapper.cpp	/^char **getComponentList() $/;"	f
getObjectSizes	phg/phg_build.c	/^static int getObjectSizes(ZZ *zz, ZHG *zhg)$/;"	f	file:
get_3plus_candidates	par/par_median_randomized.c	/^static int get_3plus_candidates(int numlist, int *dotlist, double *dots,$/;"	f	file:
get_char_array	lb/low_mem_lb_migrate.c	/^static int get_char_array(ZZ *zz, int len, char **buf, int *oldlen)$/;"	f	file:
get_child_elements	driver/dr_loadbal.c	/^ZOLTAN_CHILD_LIST_FN get_child_elements;$/;"	v
get_child_elements	driver/dr_loadbal.c	/^void get_child_elements(void *data, int num_gid_entries, int num_lid_entries,$/;"	f
get_child_elements	driver/dr_loadbalCPP.cpp	/^ZOLTAN_CHILD_LIST_FN get_child_elements;$/;"	v
get_child_elements	driver/dr_loadbalCPP.cpp	/^void get_child_elements(void *data, int num_gid_entries, int num_lid_entries,$/;"	f
get_child_order_recur	reftree/reftree_build.c	/^static void get_child_order_recur(ZZ *zz, ZOLTAN_REFTREE *subroot, int *isub, int *order)$/;"	f	file:
get_current_part	reftree/reftree_part.c	/^static int get_current_part(ZOLTAN_REFTREE *subroot, ZZ *zz, int *ierr)$/;"	f	file:
get_data	parmetis/third_library.h	/^  int get_data;                         \/* Construct edge datas *\/$/;"	m	struct:ZOLTAN_Third_Graph_
get_edge_list	driver/dr_loadbal.c	/^ZOLTAN_EDGE_LIST_FN get_edge_list;$/;"	v
get_edge_list	driver/dr_loadbal.c	/^void get_edge_list (void *data, int num_gid_entries, int num_lid_entries,$/;"	f
get_edge_list	driver/dr_loadbalCPP.cpp	/^ZOLTAN_EDGE_LIST_FN get_edge_list;$/;"	v
get_edge_list	driver/dr_loadbalCPP.cpp	/^void get_edge_list (void *data, int num_gid_entries, int num_lid_entries,$/;"	f
get_edge_list	driver_old/dr_loadbal.c	/^LB_EDGE_LIST_FN get_edge_list;$/;"	v
get_edge_list	driver_old/dr_loadbal.c	/^void get_edge_list (void *data, int num_gid_entries, int num_lid_entries, $/;"	f
get_edge_list	fdriver/fdr_loadbal.f90	/^subroutine get_edge_list /;"	s	module:dr_loadbal
get_edge_list	fdriver_old/fdr_loadbal.f90	/^subroutine get_edge_list /;"	s	module:dr_loadbal
get_edge_list_multi	driver/dr_loadbal.c	/^ZOLTAN_EDGE_LIST_MULTI_FN get_edge_list_multi;$/;"	v
get_edge_list_multi	driver/dr_loadbal.c	/^void get_edge_list_multi (void *data, int num_gid_entries, int num_lid_entries,$/;"	f
get_edge_list_multi	driver/dr_loadbalCPP.cpp	/^ZOLTAN_EDGE_LIST_MULTI_FN get_edge_list_multi;$/;"	v
get_edge_list_multi	driver/dr_loadbalCPP.cpp	/^void get_edge_list_multi (void *data, int num_gid_entries, int num_lid_entries,$/;"	f
get_edge_list_multi	fdriver/fdr_loadbal.f90	/^subroutine get_edge_list_multi(/;"	s	module:dr_loadbal
get_elem_info	driver/dr_elem.c	/^int get_elem_info(const int req, const E_Type etype, const int sid)$/;"	f
get_elem_info	driver_old/dr_elem.c	/^int get_elem_info(const int req, const E_Type etype, const int sid)$/;"	f
get_elem_info	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_elem.c	/^int get_elem_info(const int req, const E_Type etype)$/;"	f
get_elem_name	driver/dr_elem.c	/^const char *get_elem_name(int itype) {$/;"	f
get_elem_name	driver_old/dr_elem.c	/^char *get_elem_name(int itype) {$/;"	f
get_elem_type	driver/dr_elem.c	/^E_Type get_elem_type(char *elem_name, const int num_nodes,$/;"	f
get_elem_type	driver_old/dr_elem.c	/^E_Type get_elem_type(char *elem_name, const int num_nodes,$/;"	f
get_elem_type	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_elem.c	/^E_Type get_elem_type(const char *elem_name, const int num_nodes,$/;"	f
get_element_to_add	reftree/reftree_coarse_path.c	/^static int get_element_to_add(void)$/;"	f	file:
get_elements	driver/dr_loadbal.c	/^ZOLTAN_OBJ_LIST_FN get_elements;$/;"	v
get_elements	driver/dr_loadbal.c	/^void get_elements(void *data, int num_gid_entries, int num_lid_entries,$/;"	f
get_elements	driver/dr_loadbalCPP.cpp	/^ZOLTAN_OBJ_LIST_FN get_elements;$/;"	v
get_elements	driver/dr_loadbalCPP.cpp	/^void get_elements(void *data, int num_gid_entries, int num_lid_entries,$/;"	f
get_elements	fdriver/fdr_loadbal.f90	/^subroutine get_elements(/;"	s	module:dr_loadbal
get_extval	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/eigen/get_extval.c	/^void      get_extval(alpha, beta, j, ritzval, s, eigtol, wnorm_g, sigma, extval, v, work1, work2)$/;"	f
get_first_coarse_element	driver/dr_loadbal.c	/^ZOLTAN_FIRST_COARSE_OBJ_FN get_first_coarse_element;$/;"	v
get_first_coarse_element	driver/dr_loadbal.c	/^int get_first_coarse_element(void *data, int num_gid_entries,$/;"	f
get_first_coarse_element	driver/dr_loadbalCPP.cpp	/^ZOLTAN_FIRST_COARSE_OBJ_FN get_first_coarse_element;$/;"	v
get_first_coarse_element	driver/dr_loadbalCPP.cpp	/^int get_first_coarse_element(void *data, int num_gid_entries,$/;"	f
get_first_element	driver/dr_loadbal.c	/^ZOLTAN_FIRST_OBJ_FN get_first_element;$/;"	v
get_first_element	driver/dr_loadbal.c	/^int get_first_element(void *data, int num_gid_entries, int num_lid_entries,$/;"	f
get_first_element	driver/dr_loadbalCPP.cpp	/^ZOLTAN_FIRST_OBJ_FN get_first_element;$/;"	v
get_first_element	driver/dr_loadbalCPP.cpp	/^int get_first_element(void *data, int num_gid_entries, int num_lid_entries,$/;"	f
get_first_element	driver_old/dr_loadbal.c	/^LB_FIRST_OBJ_FN get_first_element;$/;"	v
get_first_element	driver_old/dr_loadbal.c	/^int get_first_element(void *data, int num_gid_entries, int num_lid_entries,$/;"	f
get_first_element	fdriver/fdr_loadbal.f90	/^integer(Zoltan_INT) function get_first_element(/;"	f	module:dr_loadbal
get_first_element	fdriver_old/fdr_loadbal.f90	/^integer(LB_INT) function get_first_element(/;"	f	module:dr_loadbal
get_fixed_obj_list	driver/dr_loadbal.c	/^ZOLTAN_FIXED_OBJ_LIST_FN get_fixed_obj_list;$/;"	v
get_fixed_obj_list	driver/dr_loadbal.c	/^void get_fixed_obj_list(void *data, int num_fixed_obj,$/;"	f
get_fixed_obj_list	driver/dr_loadbalCPP.cpp	/^ZOLTAN_FIXED_OBJ_LIST_FN get_fixed_obj_list;$/;"	v
get_fixed_obj_list	driver/dr_loadbalCPP.cpp	/^void get_fixed_obj_list(void *data, int num_fixed_obj,$/;"	f
get_geom	driver/dr_loadbal.c	/^ZOLTAN_GEOM_FN get_geom;$/;"	v
get_geom	driver/dr_loadbal.c	/^void get_geom(void *data, int num_gid_entries, int num_lid_entries,$/;"	f
get_geom	driver/dr_loadbalCPP.cpp	/^ZOLTAN_GEOM_FN get_geom;$/;"	v
get_geom	driver/dr_loadbalCPP.cpp	/^void get_geom(void *data, int num_gid_entries, int num_lid_entries,$/;"	f
get_geom	driver_old/dr_loadbal.c	/^LB_GEOM_FN get_geom;$/;"	v
get_geom	driver_old/dr_loadbal.c	/^void get_geom(void *data, int num_gid_entries, int num_lid_entries,$/;"	f
get_geom	fdriver/fdr_loadbal.f90	/^subroutine get_geom(/;"	s	module:dr_loadbal
get_geom	fdriver_old/fdr_loadbal.f90	/^subroutine get_geom(/;"	s	module:dr_loadbal
get_geom_multi	driver/dr_loadbal.c	/^ZOLTAN_GEOM_MULTI_FN get_geom_multi;$/;"	v
get_geom_multi	driver/dr_loadbal.c	/^void get_geom_multi(void *data, int num_gid_entries, int num_lid_entries,$/;"	f
get_geom_multi	driver/dr_loadbalCPP.cpp	/^ZOLTAN_GEOM_MULTI_FN get_geom_multi;$/;"	v
get_geom_multi	driver/dr_loadbalCPP.cpp	/^void get_geom_multi(void *data, int num_gid_entries, int num_lid_entries,$/;"	f
get_geom_multi	fdriver/fdr_loadbal.f90	/^subroutine get_geom_multi(/;"	s	module:dr_loadbal
get_gid_array	lb/low_mem_lb_migrate.c	/^static int get_gid_array(ZZ *zz, int len, ZOLTAN_ID_TYPE **buf, int *oldlen)$/;"	f	file:
get_group_info	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_groups.c	/^int get_group_info(MACHINE_PTR machine,$/;"	f
get_heap_usage	util/memory_usage/get_heap_usage.h	/^static size_t get_heap_usage()$/;"	f
get_hg_compressed_pin_storage	driver/dr_loadbal.c	/^ZOLTAN_HG_CS_FN get_hg_compressed_pin_storage;$/;"	v
get_hg_compressed_pin_storage	driver/dr_loadbal.c	/^void get_hg_compressed_pin_storage($/;"	f
get_hg_compressed_pin_storage	driver/dr_loadbalCPP.cpp	/^ZOLTAN_HG_CS_FN get_hg_compressed_pin_storage;$/;"	v
get_hg_compressed_pin_storage	driver/dr_loadbalCPP.cpp	/^void get_hg_compressed_pin_storage($/;"	f
get_hg_compressed_pins	fdriver/fdr_loadbal.f90	/^subroutine get_hg_compressed_pins(/;"	s	module:dr_loadbal
get_hg_edge_weights	driver/dr_loadbal.c	/^ZOLTAN_HG_EDGE_WTS_FN get_hg_edge_weights;$/;"	v
get_hg_edge_weights	driver/dr_loadbal.c	/^void get_hg_edge_weights($/;"	f
get_hg_edge_weights	driver/dr_loadbalCPP.cpp	/^ZOLTAN_HG_EDGE_WTS_FN get_hg_edge_weights;$/;"	v
get_hg_edge_weights	driver/dr_loadbalCPP.cpp	/^void get_hg_edge_weights($/;"	f
get_hg_edge_weights	fdriver/fdr_loadbal.f90	/^subroutine get_hg_edge_weights(/;"	s	module:dr_loadbal
get_hg_size_compressed_pin_storage	driver/dr_loadbal.c	/^ZOLTAN_HG_SIZE_CS_FN get_hg_size_compressed_pin_storage;$/;"	v
get_hg_size_compressed_pin_storage	driver/dr_loadbal.c	/^void get_hg_size_compressed_pin_storage($/;"	f
get_hg_size_compressed_pin_storage	driver/dr_loadbalCPP.cpp	/^ZOLTAN_HG_SIZE_CS_FN get_hg_size_compressed_pin_storage;$/;"	v
get_hg_size_compressed_pin_storage	driver/dr_loadbalCPP.cpp	/^void get_hg_size_compressed_pin_storage($/;"	f
get_hg_size_compressed_pins	fdriver/fdr_loadbal.f90	/^subroutine get_hg_size_compressed_pins(/;"	s	module:dr_loadbal
get_hg_size_edge_weights	driver/dr_loadbal.c	/^ZOLTAN_HG_SIZE_EDGE_WTS_FN get_hg_size_edge_weights;$/;"	v
get_hg_size_edge_weights	driver/dr_loadbal.c	/^void get_hg_size_edge_weights($/;"	f
get_hg_size_edge_weights	driver/dr_loadbalCPP.cpp	/^ZOLTAN_HG_SIZE_EDGE_WTS_FN get_hg_size_edge_weights;$/;"	v
get_hg_size_edge_weights	driver/dr_loadbalCPP.cpp	/^void get_hg_size_edge_weights($/;"	f
get_hg_size_edge_weights	fdriver/fdr_loadbal.f90	/^subroutine get_hg_size_edge_weights(/;"	s	module:dr_loadbal
get_hier_mig_adj	hier/hier.c	/^static ZOLTAN_ID_PTR get_hier_mig_adj(void *voiddata) {$/;"	f	file:
get_hier_mig_adj_info	hier/hier.c	/^static void get_hier_mig_adj_info(void *voiddata, int *count, $/;"	f	file:
get_hier_mig_adj_wgts	hier/hier.c	/^static float *get_hier_mig_adj_wgts(void *voiddata, HierPartParams *hpp) {$/;"	f	file:
get_hier_mig_coords	hier/hier.c	/^static double *get_hier_mig_coords(void *voiddata, HierPartParams *hpp) {$/;"	f	file:
get_hier_mig_ith_adj	hier/hier.c	/^static ZOLTAN_ID_TYPE get_hier_mig_ith_adj(void *voiddata, int adj_index) {$/;"	f	file:
get_hier_mig_ith_adj_wgts	hier/hier.c	/^static void get_hier_mig_ith_adj_wgts(void *voiddata, HierPartParams *hpp, $/;"	f	file:
get_hier_mig_num_adj	hier/hier.c	/^static int get_hier_mig_num_adj(void *voiddata) {$/;"	f	file:
get_hier_mig_vwgts	hier/hier.c	/^static float *get_hier_mig_vwgts(void *voiddata) {$/;"	f	file:
get_int_array	lb/low_mem_lb_migrate.c	/^static int get_int_array(ZZ *zz, int len, int **buf, int *oldlen)$/;"	f	file:
get_local_index	hier/hier.c	/^static int get_local_index(HierPartParams *hpp, ZOLTAN_ID_TYPE gid) {$/;"	f	file:
get_median_candidates	par/par_median_randomized.c	/^static int get_median_candidates(double *mymed, int nmymed, $/;"	f	file:
get_method	driver/dr_param_file.c	/^static void get_method(void *data, int level, struct Zoltan_Struct *zz,$/;"	f	file:
get_method	driver/dr_param_fileCPP.cpp	/^static void get_method(void *data, int level, struct Zoltan_Struct *zz,$/;"	f	file:
get_method	fdriver/fdr_param_file.f90	/^subroutine get_method(/;"	s	module:dr_param_file
get_nbor_parts	lb/lb_eval.c	/^static int get_nbor_parts($/;"	f	file:
get_nemesis_hg	driver/dr_loadbal.c	/^ZOLTAN_HG_CS_FN get_nemesis_hg;$/;"	v
get_nemesis_hg	driver/dr_loadbal.c	/^void get_nemesis_hg($/;"	f
get_nemesis_hg_size	driver/dr_loadbal.c	/^ZOLTAN_HG_SIZE_CS_FN get_nemesis_hg_size;$/;"	v
get_nemesis_hg_size	driver/dr_loadbal.c	/^void get_nemesis_hg_size($/;"	f
get_next_coarse_element	driver/dr_loadbal.c	/^ZOLTAN_NEXT_COARSE_OBJ_FN get_next_coarse_element;$/;"	v
get_next_coarse_element	driver/dr_loadbal.c	/^int get_next_coarse_element(void *data, int num_gid_entries,$/;"	f
get_next_coarse_element	driver/dr_loadbalCPP.cpp	/^ZOLTAN_NEXT_COARSE_OBJ_FN get_next_coarse_element;$/;"	v
get_next_coarse_element	driver/dr_loadbalCPP.cpp	/^int get_next_coarse_element(void *data, int num_gid_entries,$/;"	f
get_next_element	driver/dr_loadbal.c	/^ZOLTAN_NEXT_OBJ_FN get_next_element;$/;"	v
get_next_element	driver/dr_loadbal.c	/^int get_next_element(void *data, int num_gid_entries, int num_lid_entries,$/;"	f
get_next_element	driver/dr_loadbalCPP.cpp	/^ZOLTAN_NEXT_OBJ_FN get_next_element;$/;"	v
get_next_element	driver/dr_loadbalCPP.cpp	/^int get_next_element(void *data, int num_gid_entries, int num_lid_entries,$/;"	f
get_next_element	driver_old/dr_loadbal.c	/^LB_NEXT_OBJ_FN get_next_element;$/;"	v
get_next_element	driver_old/dr_loadbal.c	/^int get_next_element(void *data, int num_gid_entries, int num_lid_entries,$/;"	f
get_next_element	fdriver/fdr_loadbal.f90	/^integer(Zoltan_INT) function get_next_element(/;"	f	module:dr_loadbal
get_next_element	fdriver_old/fdr_loadbal.f90	/^integer(LB_INT) function get_next_element(/;"	f	module:dr_loadbal
get_num_child	driver/dr_loadbal.c	/^ZOLTAN_NUM_CHILD_FN get_num_child;$/;"	v
get_num_child	driver/dr_loadbal.c	/^int get_num_child(void *data, int num_gid_entries, int num_lid_entries,$/;"	f
get_num_child	driver/dr_loadbalCPP.cpp	/^ZOLTAN_NUM_CHILD_FN get_num_child;$/;"	v
get_num_child	driver/dr_loadbalCPP.cpp	/^int get_num_child(void *data, int num_gid_entries, int num_lid_entries,$/;"	f
get_num_edges	driver/dr_loadbal.c	/^ZOLTAN_NUM_EDGES_FN get_num_edges;$/;"	v
get_num_edges	driver/dr_loadbal.c	/^int get_num_edges(void *data, int num_gid_entries, int num_lid_entries,$/;"	f
get_num_edges	driver/dr_loadbalCPP.cpp	/^ZOLTAN_NUM_EDGES_FN get_num_edges;$/;"	v
get_num_edges	driver/dr_loadbalCPP.cpp	/^int get_num_edges(void *data, int num_gid_entries, int num_lid_entries,$/;"	f
get_num_edges	driver_old/dr_loadbal.c	/^LB_NUM_EDGES_FN get_num_edges;$/;"	v
get_num_edges	driver_old/dr_loadbal.c	/^int get_num_edges(void *data, int num_gid_entries, int num_lid_entries,$/;"	f
get_num_edges	fdriver/fdr_loadbal.f90	/^integer(Zoltan_INT) function get_num_edges(/;"	f	module:dr_loadbal
get_num_edges	fdriver_old/fdr_loadbal.f90	/^integer(LB_INT) function get_num_edges(/;"	f	module:dr_loadbal
get_num_edges_multi	driver/dr_loadbal.c	/^ZOLTAN_NUM_EDGES_MULTI_FN get_num_edges_multi;$/;"	v
get_num_edges_multi	driver/dr_loadbal.c	/^void get_num_edges_multi($/;"	f
get_num_edges_multi	driver/dr_loadbalCPP.cpp	/^ZOLTAN_NUM_EDGES_MULTI_FN get_num_edges_multi;$/;"	v
get_num_edges_multi	driver/dr_loadbalCPP.cpp	/^void get_num_edges_multi($/;"	f
get_num_edges_multi	fdriver/fdr_loadbal.f90	/^subroutine get_num_edges_multi /;"	s	module:dr_loadbal
get_num_elements	driver/dr_loadbal.c	/^ZOLTAN_NUM_OBJ_FN get_num_elements;$/;"	v
get_num_elements	driver/dr_loadbal.c	/^int get_num_elements(void *data, int *ierr)$/;"	f
get_num_elements	driver/dr_loadbalCPP.cpp	/^ZOLTAN_NUM_OBJ_FN get_num_elements;$/;"	v
get_num_elements	driver/dr_loadbalCPP.cpp	/^int get_num_elements(void *data, int *ierr)$/;"	f
get_num_elements	driver_old/dr_loadbal.c	/^LB_NUM_OBJ_FN get_num_elements;$/;"	v
get_num_elements	driver_old/dr_loadbal.c	/^int get_num_elements(void *data, int *ierr)$/;"	f
get_num_elements	fdriver/fdr_loadbal.f90	/^integer(Zoltan_INT) function get_num_elements(/;"	f	module:dr_loadbal
get_num_elements	fdriver_old/fdr_loadbal.f90	/^integer(LB_INT) function get_num_elements(/;"	f	module:dr_loadbal
get_num_fixed_obj	driver/dr_loadbal.c	/^ZOLTAN_NUM_FIXED_OBJ_FN get_num_fixed_obj;$/;"	v
get_num_fixed_obj	driver/dr_loadbal.c	/^int get_num_fixed_obj(void *data, int *ierr)$/;"	f
get_num_fixed_obj	driver/dr_loadbalCPP.cpp	/^ZOLTAN_NUM_FIXED_OBJ_FN get_num_fixed_obj;$/;"	v
get_num_fixed_obj	driver/dr_loadbalCPP.cpp	/^int get_num_fixed_obj(void *data, int *ierr)$/;"	f
get_num_geom	driver/dr_loadbal.c	/^ZOLTAN_NUM_GEOM_FN get_num_geom;$/;"	v
get_num_geom	driver/dr_loadbal.c	/^int get_num_geom(void *data, int *ierr)$/;"	f
get_num_geom	driver/dr_loadbalCPP.cpp	/^ZOLTAN_NUM_GEOM_FN get_num_geom;$/;"	v
get_num_geom	driver/dr_loadbalCPP.cpp	/^int get_num_geom(void *data, int *ierr)$/;"	f
get_num_geom	driver_old/dr_loadbal.c	/^LB_NUM_GEOM_FN get_num_geom;$/;"	v
get_num_geom	driver_old/dr_loadbal.c	/^int get_num_geom(void *data, int *ierr)$/;"	f
get_num_geom	fdriver/fdr_loadbal.f90	/^integer(Zoltan_INT) function get_num_geom(/;"	f	module:dr_loadbal
get_num_geom	fdriver_old/fdr_loadbal.f90	/^integer(LB_INT) function get_num_geom(/;"	f	module:dr_loadbal
get_num_levels	driver/dr_param_file.c	/^static int get_num_levels(void *data, int *ierr) {$/;"	f	file:
get_num_levels	driver/dr_param_fileCPP.cpp	/^static int get_num_levels(void *data, int *ierr) {$/;"	f	file:
get_num_levels	fdriver/fdr_param_file.f90	/^function get_num_levels(/;"	f	module:dr_param_file
get_part	driver/dr_loadbal.c	/^ZOLTAN_PART_FN get_part;$/;"	v
get_part	driver/dr_loadbal.c	/^int get_part(void *data, int num_gid_entries, int num_lid_entries,$/;"	f
get_part	driver/dr_loadbalCPP.cpp	/^ZOLTAN_PART_FN get_part;$/;"	v
get_part	driver/dr_loadbalCPP.cpp	/^int get_part(void *data, int num_gid_entries, int num_lid_entries,$/;"	f
get_part	driver/dr_param_fileCPP.cpp	/^static int get_part(void *data, int level, int *ierr) {$/;"	f	file:
get_part	fdriver/fdr_loadbal.f90	/^function get_part(/;"	f	module:dr_loadbal
get_part	fdriver/fdr_param_file.f90	/^function get_part(/;"	f	module:dr_param_file
get_part_multi	driver/dr_loadbal.c	/^ZOLTAN_PART_MULTI_FN get_part_multi;$/;"	v
get_part_multi	driver/dr_loadbal.c	/^void get_part_multi(void *data, int num_gid_entries, int num_lid_entries,$/;"	f
get_part_multi	driver/dr_loadbalCPP.cpp	/^ZOLTAN_PART_MULTI_FN get_part_multi;$/;"	v
get_part_multi	driver/dr_loadbalCPP.cpp	/^void get_part_multi(void *data, int num_gid_entries, int num_lid_entries,$/;"	f
get_part_multi	fdriver/fdr_loadbal.f90	/^subroutine get_part_multi(/;"	s	module:dr_loadbal
get_partition	driver/dr_param_file.c	/^static int get_partition(void *data, int level, int *ierr) {$/;"	f	file:
get_ritzvals	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/eigen/get_ritzvals.c	/^int       get_ritzvals(alpha, beta, j, Anorm, workj, ritz, d, left_goodlim,$/;"	f
get_side_id	driver/dr_elem.c	/^int get_side_id(E_Type etype, const int *connect, const int nsnodes,$/;"	f
get_side_id	driver_old/dr_elem.c	/^int get_side_id(E_Type etype, const int *connect, const int nsnodes,$/;"	f
get_side_id	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_elem.c	/^int get_side_id(const E_Type etype, const int *connect, const int nsnodes,$/;"	f
get_side_id_hex_tet	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_elem.c	/^int get_side_id_hex_tet(const E_Type etype, const int *connect,$/;"	f
get_ss_mirror	driver/dr_elem.c	/^int get_ss_mirror(const E_Type etype, const int *ss_node_list, int side_num,$/;"	f
get_ss_mirror	driver_old/dr_elem.c	/^int get_ss_mirror(const E_Type etype, const int *ss_node_list, int side_num,$/;"	f
get_ss_mirror	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_elem.c	/^int get_ss_mirror(const E_Type etype, const int *ss_node_list, int side_num,$/;"	f
get_starting_local_index	hier/hier.c	/^static int get_starting_local_index(HierPartParams *hpp, ZOLTAN_ID_TYPE gid) {$/;"	f	file:
get_target_dimension	zz/zz_coord.c	/^static int get_target_dimension(double *dist, int *order, $/;"	f	file:
get_time	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_time.c	/^double get_time(void)$/;"	f
get_token	driver/dr_hg_io.c	/^static char *get_token(char *line, int which, int max)$/;"	f	file:
get_tree	phg/phg_tree.c	/^get_tree(ZZ* zz)$/;"	f
get_tree_size	phg/phg_tree.h	105;"	d
get_used_map	zz/zz_map.c	/^static ZOLTAN_MAP *get_used_map(int map_num)$/;"	f	file:
get_zdrive_output_file_name	util/vtk_view.cpp	/^static char *get_zdrive_output_file_name()$/;"	f	file:
get_zz	ZoltanComponent/CCA_Wrapper/BaseLB.h	/^    Zoltan_Struct * get_zz() { return ( my_zz) ; }$/;"	f	class:ZoltanSpace::BaseLB
getsubopt	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/md_getsubopt.c	/^getsubopt (optionp, tokens, valuep)$/;"	f
getwd	fdriver/mmio.f	/^      subroutine getwd(/;"	s
gid	Utilities/DDirectory/DD.h	/^   ZOLTAN_ID_TYPE   gid[1];     \/* gid used as key for update & lookup   *\/$/;"	m	struct:DD_Node
gid	Utilities/DDirectory/DD.h	/^   ZOLTAN_ID_TYPE gid[1];   \/* struct malloc'd to include gid & lid & user *\/$/;"	m	struct:__anon2
gid	Utilities/DDirectory/DD.h	/^   ZOLTAN_ID_TYPE gid[1];  \/* structure malloc'd to include gid    *\/$/;"	m	struct:__anon4
gid	lb/lb_balance.c	/^  ZOLTAN_ID_PTR gid;$/;"	m	struct:Hash_Node	file:
gid	parmetis/third_library_tools.h	/^  ZOLTAN_ID_PTR gid;     \/* Pointer to a Global id *\/$/;"	m	struct:Hash_Node
gid	reftree/reftree.h	/^  ZOLTAN_ID_PTR gid;            \/* Global id *\/$/;"	m	struct:Zoltan_Reftree_hash_node
gid	reftree/reftree.h	/^  ZOLTAN_ID_PTR gid;            \/* Global id *\/$/;"	m	struct:Zoltan_Reftree_inthash_node
gid_length	Utilities/DDirectory/DD.h	/^  int gid_length;         \/* = zz->Num_GID -- avoid needing Zoltan_Struct *\/$/;"	m	struct:Zoltan_DD_Struct
gid_list	ZoltanComponent/CCA_Wrapper/EntityListImpl.h	/^    unsigned int *gid_list, *lid_list, *user_def_list ;$/;"	m	class:ZoltanSpace::EntityListImpl
gid_of_interest_proc	hier/hier.c	/^static int gid_of_interest_proc(HierPartParams *hpp, ZOLTAN_ID_TYPE gid) {$/;"	f	file:
gid_size	ZoltanComponent/CCA_Wrapper/EntityListImpl.h	/^    int proc_size, gid_size, lid_size, user_def_size, ref ;$/;"	m	class:ZoltanSpace::EntityListImpl
gidrank	order/order_const.h	/^  ZOLTAN_ID_PTR gidrank;$/;"	m	struct:Zoltan_Order_Struct
gids	order/order_const.h	/^  ZOLTAN_ID_PTR gids;           \/* ptr to list of global ids *\/$/;"	m	struct:Zoltan_Order_Struct
gids	util/vtk_view.cpp	/^static int *gids=NULL;               \/\/ for message passing$/;"	v	file:
gids_of_interest	hier/hier.h	/^  ZOLTAN_ID_PTR gids_of_interest;    \/* list of gids of interest, used$/;"	m	struct:HierPartParamsStruct
gids_of_interest_procs	hier/hier.h	/^  int *gids_of_interest_procs;       \/* list of procs where gids of interest$/;"	m	struct:HierPartParamsStruct
give_proc	parmetis/preprocessing.c	/^give_proc (indextype vertex, const indextype *vtxdist, int numProc, int *myproc)$/;"	f	file:
glob_id	driver/dr_maps.c	/^  int *glob_id;$/;"	m	struct:map_list_head	file:
glob_id	driver/dr_mapsCPP.cpp	/^  int *glob_id;$/;"	m	struct:map_list_head	file:
glob_id	driver_old/dr_maps.c	/^  int *glob_id;$/;"	m	struct:map_list_head	file:
glob_id	fdriver/fdr_chaco_io.f90	/^  integer(Zoltan_INT), pointer :: glob_id(/;"	k	type:map_list_head
glob_id	fdriver_old/fdr_chaco_io.f90	/^  integer(LB_INT), pointer :: glob_id(/;"	k	type:map_list_head
globalHedges	phg/phg_hypergraph.h	/^  int globalHedges;         \/* global number of hyperedges listed here *\/$/;"	m	struct:Zoltan_HGraph
globalID	driver/dr_const.h	/^  int      globalID;	\/* Global ID of this element, the local ID is the$/;"	m	struct:Element_Description
globalID	driver/dr_migrate.c	/^  int globalID;$/;"	m	struct:New_Elem_Hash_Node	file:
globalID	driver_old/dr_const.h	/^  int      globalID;	\/* Global ID of this element, the local ID is the$/;"	m	struct:Element_Description
globalID	fdriver/fdr_const.f90	/^  integer(Zoltan_INT) :: globalID /;"	k	type:ELEM_INFO
globalID	fdriver_old/lb_user_const.f90	/^  integer(LB_INT) :: globalID /;"	k	type:ELEM_INFO
globalObj	phg/phg_hypergraph.h	/^  int globalObj;            \/* Global number of objects over all procs. *\/$/;"	m	struct:Zoltan_HGraph
globalPins	phg/phg_hypergraph.h	/^  int globalPins;           \/* global number of pins *\/$/;"	m	struct:Zoltan_HGraph
globalX	matrix/matrix.h	/^  int           globalX;       \/* Overall number on X dimension *\/$/;"	m	struct:Zoltan_matrix_
globalY	matrix/matrix.h	/^  int           globalY;       \/* Overall number on Y dimension *\/$/;"	m	struct:Zoltan_matrix_
global_blank_count	driver/dr_const.h	/^  int     global_blank_count;   \/* number of all elements that are blanked   *\/$/;"	m	struct:Mesh_Description
global_id	reftree/reftree.h	/^   ZOLTAN_ID_PTR global_id;  \/* global ID of the corresponding element *\/$/;"	m	struct:Zoltan_Reftree_Struct
global_ids	hier/hier.h	/^  ZOLTAN_ID_PTR global_ids;          \/* \\ for initial partitioning *\/$/;"	m	struct:HierPartParamsStruct
global_mech	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int   global_mech;      \/* true if looking for mechanisms in original mesh   *\/$/;"	m	struct:Problem_Description
global_num_levels	hier/hier.h	/^  int global_num_levels;             \/* max num_levels across all procs *\/$/;"	m	struct:HierPartParamsStruct
globalcomm	phg/phg.h	/^  PHGComm globalcomm;$/;"	m	struct:PHGPartParamsStruct
globalcost	oct/dfs.c	/^static float globalcost;$/;"	v	file:
gnhedges	driver/dr_const.h	/^  int     gnhedges;             \/* for hypergraphs, the number of global$/;"	m	struct:Mesh_Description
gno	coloring/g2l_hash.h	/^    int gno;           \/* Global number *\/$/;"	m	struct:G2L_Hash_Node
gno	lb/lb_balance.c	/^  int gno;$/;"	m	struct:Hash_Node	file:
gno	parmetis/third_library_tools.h	/^  int gno;           \/* Global number *\/$/;"	m	struct:Hash_Node
go	ZoltanComponent/TestComponents/Driver.cpp	/^int ZoltanTestSpace::Driver::go()$/;"	f	class:ZoltanTestSpace::Driver
grad0	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double grad0(coeffs)$/;"	f	file:
grad1	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double grad1(coeffs)$/;"	f	file:
grad2	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double grad2(coeffs)$/;"	f	file:
grad2d	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func2d.c	/^double    grad2d(coeffs, theta)$/;"	f
grad3d	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^void      grad3d(coeffs, grad, theta, phi, gamma2)$/;"	f
gradcon	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^void      gradcon(coeffs2, grad)$/;"	f
gradcon0	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double gradcon0(coeffs2)$/;"	f	file:
gradcon1	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double gradcon1(coeffs2)$/;"	f	file:
gradcon2	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double gradcon2(coeffs2)$/;"	f	file:
graph	parmetis/third_library.h	/^  ZG graph;$/;"	m	struct:ZOLTAN_Third_Graph_
graphLoadMM	postprocessing/ordering/mm_input.c	/^graphLoadMM ($/;"	f
graph_out	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/graph/graph_out.c	/^void      graph_out(graph, nvtxs, using_ewgts, tag, file_name)$/;"	f
graph_type	parmetis/third_library.h	/^  int graph_type;                       \/* Type of the graph *\/$/;"	m	struct:ZOLTAN_Third_Graph_
gray	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/gray.c	/^int       gray(int i)$/;"	f
greedy_grow_part	phg/phg_serialpartition.c	/^static int greedy_grow_part ($/;"	f	file:
group_no	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int  *group_no;$/;"	m	struct:Problem_Description
groups	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  char *groups;$/;"	m	struct:Problem_Description
groupsize	Utilities/DDirectory/DD_Set_Neighbor_Hash_Fn1.c	/^ int groupsize ;$/;"	m	struct:dd_nh1_struct	file:
h	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^	shortint h;$/;"	m	union:Multitype
h	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^	shortint h;$/;"	m	union:Multitype
hanging_nodes	reftree/reftree_coarse_path.c	/^static int hanging_nodes(int *ierr,ZZ *zz)$/;"	f	file:
hash	Utilities/DDirectory/DD.h	/^  DD_Hash_fn *hash;       \/* Hash function used by this DD *\/$/;"	m	struct:Zoltan_DD_Struct
hashValue	phg/phg_coarse.c	/^static unsigned int hashValue(HGraph *hg, int n, int *ar)$/;"	f	file:
hash_table	reftree/reftree.h	/^  struct Zoltan_Reftree_hash_node **hash_table;$/;"	m	struct:Zoltan_Reftree_data_struct	typeref:struct:Zoltan_Reftree_data_struct::Zoltan_Reftree_hash_node
hash_table_size	reftree/reftree.h	/^  int hash_table_size;$/;"	m	struct:Zoltan_Reftree_data_struct
hashdata	Utilities/DDirectory/DD.h	/^  void *hashdata;         \/* Data useful to compute hash *\/$/;"	m	struct:Zoltan_DD_Struct
heNumWgts	driver/dr_const.h	/^  int    heNumWgts;             \/* number of edges for which we have weights *\/$/;"	m	struct:Mesh_Description
heWgtId	driver/dr_const.h	/^  int    *heWgtId;              \/* global edge ID of the heNumWgts edges,$/;"	m	struct:Mesh_Description
heap	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^struct heap {$/;"	s
heap_build	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/connect/heap.c	/^void      heap_build(heap, nvals, map)$/;"	f
heap_extract_max	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/connect/heap.c	/^double    heap_extract_max(heap, nvals, ptag, map)$/;"	f
heap_update_val	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/connect/heap.c	/^void      heap_update_val(heap, index, newval, map)$/;"	f
heapify	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/connect/heap.c	/^void      heapify(heap, index, nvals, map)$/;"	f
heapify	zz/zz_heap.c	/^static void heapify (HEAP *h, int root)$/;"	f	file:
heigavg	postprocessing/ordering/order_eval.h	/^  double                  heigavg;$/;"	m	struct:FactorStat_
heigdlt	postprocessing/ordering/order_eval.h	/^  double                  heigdlt;$/;"	m	struct:FactorStat_
heigmax	postprocessing/ordering/order_eval.h	/^  SCOTCH_Num              heigmax;$/;"	m	struct:FactorStat_
heigmin	postprocessing/ordering/order_eval.h	/^  SCOTCH_Num              heigmin;$/;"	m	struct:FactorStat_
heignbr	postprocessing/ordering/order_eval.h	/^  SCOTCH_Num              heignbr;$/;"	m	struct:FactorStat_
hess00	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double hess00(coeffs)$/;"	f	file:
hess01	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double hess01(coeffs)$/;"	f	file:
hess02	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double hess02(coeffs)$/;"	f	file:
hess11	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double hess11(coeffs)$/;"	f	file:
hess12	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double hess12(coeffs)$/;"	f	file:
hess22	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double hess22(coeffs)$/;"	f	file:
hess2d	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func2d.c	/^double    hess2d(coeffs)$/;"	f
hess3d	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^void      hess3d(coeffs, hess)$/;"	f
hesscon	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^void      hesscon(coeffs2, hess)$/;"	f
hesscon00	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double hesscon00(coeffs2)$/;"	f	file:
hesscon01	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double hesscon01(coeffs2)$/;"	f	file:
hesscon02	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double hesscon02(coeffs2)$/;"	f	file:
hesscon11	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double hesscon11(coeffs2)$/;"	f	file:
hesscon12	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double hesscon12(coeffs2)$/;"	f	file:
hesscon22	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double hesscon22(coeffs2)$/;"	f	file:
hewgt_dim	driver/dr_const.h	/^  int     hewgt_dim;            \/* for hypergraphs, the number of weights per$/;"	m	struct:Mesh_Description
hewgts	driver/dr_const.h	/^  float  *hewgts;               \/* for hypergraphs, an array of hyperedge$/;"	m	struct:Mesh_Description
hewgts	fdriver/fdr_const.f90	/^  integer(Zoltan_FLOAT), pointer :: hewgts(/;"	k	type:MESH_INFO
hex_nshared	reftree/reftree_build.c	/^static int hex_nshared(int elem1, int elem2, int *lvertices, int *vert1)$/;"	f	file:
hg	phg/phg_Vcycle.c	/^    HGraph           *hg;         \/* for finer==NULL, hg and Part contains   *\/$/;"	m	struct:tagVCycle	file:
hgid	driver/dr_const.h	/^  int    *hgid;                 \/* Global number for edges (or pin vertices),$/;"	m	struct:Mesh_Description
hgid	fdriver/fdr_const.f90	/^  integer(Zoltan_INT), pointer :: hgid(/;"	k	type:MESH_INFO
hgraph_method	phg/phg.h	/^  char hgraph_method[MAX_PARAM_STRING_LEN]; \/* Operation(partition,repart,refine)*\/$/;"	m	struct:PHGPartParamsStruct
hgraph_pkg	phg/phg.h	/^  char hgraph_pkg[MAX_PARAM_STRING_LEN];\/* Package (Zoltan,PaToH,ParKway) *\/$/;"	m	struct:PHGPartParamsStruct
hi	matrix/common_sort.c	/^    char *hi;$/;"	m	struct:__anon6	file:
hi	rcb/rcb.h	/^  double    lo[3], hi[3];	\/* xyz lo\/hi bounds *\/$/;"	m	struct:rcb_box
hier_comm	hier/hier.h	/^  MPI_Comm hier_comm;                \/* MPI communicator for each level *\/$/;"	m	struct:HierPartParamsStruct
hier_num_obj	hier/hier.h	/^  int hier_num_obj;                  \/* number of local objects during$/;"	m	struct:HierPartParamsStruct
hier_ranks_of_orig	hier/hier.h	/^  int *hier_ranks_of_orig;           \/* orig ranks of the procs in hier_comm *\/$/;"	m	struct:HierPartParamsStruct
hierzz	hier/hier.h	/^  ZZ *hierzz;                        \/* internal zoltan struct for balancing $/;"	m	struct:HierPartParamsStruct
high	Utilities/DDirectory/DD_Set_Neighbor_Hash_Fn2.c	/^   int high;$/;"	m	struct:__anon1	file:
high_limit	Utilities/DDirectory/DD_Set_Neighbor_Hash_Fn2.c	/^  int high_limit;$/;"	m	struct:dd_nh2_struct	file:
hindex	driver/dr_const.h	/^  int    *hindex;               \/* for hypergraphs, an entry for each $/;"	m	struct:Mesh_Description
hindex	fdriver/fdr_const.f90	/^  integer(Zoltan_INT), pointer :: hindex(/;"	k	type:MESH_INFO
hindex	phg/phg_hypergraph.h	/^  int *hindex;      \/* length nEdge+1 index into hvertex, last is nPins *\/$/;"	m	struct:__anon38
hsfcKey	util/converters_for_JPDC_adaptive_mesh_experiments/chaco2chaco/main.c	/^  double hsfcKey;$/;"	m	struct:KEY	file:
ht	phg/phg_lookup.h	/^  struct Hash_Node **ht;$/;"	m	struct:_GID_lookup	typeref:struct:_GID_lookup::Hash_Node
htTop	phg/phg_lookup.h	/^  struct Hash_Node *htTop;$/;"	m	struct:_GID_lookup	typeref:struct:_GID_lookup::Hash_Node
hvertex	driver/dr_const.h	/^  int    *hvertex;              \/* row storage: global number for each pin$/;"	m	struct:Mesh_Description
hvertex	fdriver/fdr_const.f90	/^  integer(Zoltan_INT), pointer :: hvertex(/;"	k	type:MESH_INFO
hvertex	phg/phg_hypergraph.h	/^  int *hvertex;     \/* length nPins array containing associated vertices *\/$/;"	m	struct:__anon38
hvertex_proc	driver/dr_const.h	/^  int    *hvertex_proc;         \/* row storage: array listing the processor $/;"	m	struct:Mesh_Description
hybrid_keep_factor	phg/phg.h	/^  float hybrid_keep_factor; \/* h-ipm only: keep matches with i.p. values$/;"	m	struct:PHGPartParamsStruct
i	driver/dr_mm_readfile.c	/^  int i, j;$/;"	m	struct:ijv	file:
i	fdriver/fdr_main.f90	/^  in/;"	v	program:fdriver
i	fdriver_old/fdr_main.f90	/^  in/;"	v	program:fdriver
i	fort/lbfn.h	/^   lb_addr(i) = ichar(lb%addr%addr(i:i))$/;"	v
i	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^	integer i;$/;"	m	union:Multitype
i	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^typedef struct { doublereal r, i; } doublecomplex;$/;"	m	struct:__anon19
i	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^typedef struct { real r, i; } complex;$/;"	m	struct:__anon18
i	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^	integer i;$/;"	m	union:Multitype
i	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^typedef struct { doublereal r, i; } doublecomplex;$/;"	m	struct:__anon11
i	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^typedef struct { real r, i; } complex;$/;"	m	struct:__anon10
iciend	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^	flag iciend;$/;"	m	struct:__anon21
iciend	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^	flag iciend;$/;"	m	struct:__anon13
icierr	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^{	flag icierr;$/;"	m	struct:__anon21
icierr	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^{	flag icierr;$/;"	m	struct:__anon13
icifmt	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^	char *icifmt;$/;"	m	struct:__anon21
icifmt	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^	char *icifmt;$/;"	m	struct:__anon13
icilist	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^} icilist;$/;"	t	typeref:struct:__anon21
icilist	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^} icilist;$/;"	t	typeref:struct:__anon13
icirlen	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^	ftnint icirlen;$/;"	m	struct:__anon21
icirlen	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^	ftnint icirlen;$/;"	m	struct:__anon13
icirnum	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^	ftnint icirnum;$/;"	m	struct:__anon21
icirnum	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^	ftnint icirnum;$/;"	m	struct:__anon13
iciunit	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^	char *iciunit;$/;"	m	struct:__anon21
iciunit	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^	char *iciunit;$/;"	m	struct:__anon13
id	Utilities/DDirectory/DD.h	/^   ZOLTAN_ID_TYPE id[1];   \/* allocated as max(Num_GID, Num_LID)    *\/$/;"	m	struct:__anon3
id	oct/migoct.c	/^  int id;              $/;"	m	struct:__anon30	file:
id	oct/octant_const.h	/^  int id;                           \/* octant's id number                   *\/$/;"	m	struct:_Octant
id	oct/octupdate.c	/^  int id;$/;"	m	struct:__anon35	file:
id_size	zz/zz_map.c	/^  int id_size;          \/* size of integer tuple *\/$/;"	m	struct:Zoltan_Map_List	file:
idata2d	hsfc/hsfc_hilbert_const.h	/^static unsigned const int idata2d[] =  \/* 2 dimension to nkey conversion *\/$/;"	v
idata2d	util/converters_for_JPDC_adaptive_mesh_experiments/chaco2chaco/hsfc_hilbert_const.h	/^static unsigned const int idata2d[] =  \/* 2 dimension to nkey conversion *\/$/;"	v
idata3d	hsfc/hsfc_hilbert_const.h	/^static unsigned const idata3d [] = {   \/* 3 dimension to nkey conversion *\/$/;"	v
idata3d	util/converters_for_JPDC_adaptive_mesh_experiments/chaco2chaco/hsfc_hilbert_const.h	/^static unsigned const idata3d [] = {   \/* 3 dimension to nkey conversion *\/$/;"	v
idcompare	oct/octupdate.c	/^static int idcompare(Rootid *i, Rootid *j)$/;"	f	file:
identify_mechanisms	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_loadbal.c	/^int identify_mechanisms($/;"	f
idx	util/converters_for_JPDC_adaptive_mesh_experiments/chaco2chaco/main.c	/^  int idx;$/;"	m	struct:KEY	file:
idxtype	parmetis/third_library_const.h	47;"	d
iget_strided_stats	lb/lb_eval.c	/^static void iget_strided_stats(int *v, int stride, int offset, int len,$/;"	f	file:
ignore_rpp	ha/ha_drum.h	/^  int ignore_rpp;                    \/* should DRUM ignore RPP values from XML? *\/$/;"	m	struct:Zoltan_Drum_Struct
ijv	driver/dr_mm_readfile.c	/^struct ijv$/;"	s	file:
ilists	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^struct ilists {				\/* linked list of integer lists *\/$/;"	s
ilog2i	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_loadbal.c	/^int ilog2i (unsigned int n)$/;"	f
imageHeight	util/vtk_view.cpp	/^static int imageHeight = 300;$/;"	v	file:
imageWidth	util/vtk_view.cpp	/^static int imageWidth= 300;$/;"	v	file:
imbalance	include/zoltan_eval.h	/^  float imbalance;              \/* vertex weight imbalance *\/$/;"	m	struct:_eval_balance_struct
imbalance	include/zoltan_eval.h	/^  float imbalance;              \/* vertex weight imbalance *\/$/;"	m	struct:_eval_graph_struct
imbalance	include/zoltan_eval.h	/^  float imbalance;              \/* vertex weight imbalance *\/$/;"	m	struct:_eval_hg_struct
imp_gids	parmetis/third_library.h	/^  ZOLTAN_ID_PTR* imp_gids;$/;"	m	struct:ZOLTAN_Output_Part_
imp_lids	parmetis/third_library.h	/^  ZOLTAN_ID_PTR* imp_lids;$/;"	m	struct:ZOLTAN_Output_Part_
imp_part	parmetis/third_library.h	/^  int **imp_part;$/;"	m	struct:ZOLTAN_Output_Part_
imp_procs	parmetis/third_library.h	/^  int **imp_procs;$/;"	m	struct:ZOLTAN_Output_Part_
improve_internal	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/internal/improve_internal.c	/^int       improve_internal(graph, nvtxs, assign, goal, int_list, set_list,$/;"	f
in	reftree/reftree_coarse_path.c	/^static int *prev, *next, *in, *out, *onpath;$/;"	v	file:
in_list	driver/dr_util.c	/^int in_list(const int value, const int count, int *vector)$/;"	f
in_list	driver_old/dr_util.c	/^int in_list(const int value, const int count, int *vector)$/;"	f
in_list	fdriver/fdr_chaco_io.f90	/^integer(Zoltan_INT) function in_list(/;"	f	module:dr_chaco_io
in_list	fdriver_old/fdr_chaco_io.f90	/^integer(LB_INT) function in_list(/;"	f	module:dr_chaco_io
in_list	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_util.c	/^int in_list(const int value, const int count, int *vector)$/;"	f
in_vertex	reftree/reftree.h	/^   ZOLTAN_ID_PTR in_vertex; \/* starting vertex for determining the path$/;"	m	struct:Zoltan_Reftree_Struct
inacc	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^	char	*inacc;$/;"	m	struct:__anon25
inacc	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^	char	*inacc;$/;"	m	struct:__anon17
inacclen	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^	ftnlen	inacclen;$/;"	m	struct:__anon25
inacclen	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^	ftnlen	inacclen;$/;"	m	struct:__anon17
inblank	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^	char	*inblank;$/;"	m	struct:__anon25
inblank	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^	char	*inblank;$/;"	m	struct:__anon17
inblanklen	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^	ftnlen	inblanklen;$/;"	m	struct:__anon25
inblanklen	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^	ftnlen	inblanklen;$/;"	m	struct:__anon17
incoming	ZoltanComponent/CCA_Wrapper/BaseLB.h	/^    EntityListImpl *incoming, *outgoing ;$/;"	m	class:ZoltanSpace::BaseLB
increment	util/vtk_view.cpp	/^static int increment=10000;$/;"	v	file:
index	Utilities/DDirectory/DD.h	/^   int        index;       \/* to put things back in order afterward *\/$/;"	m	struct:__anon3
index	hsfc/hsfc.h	/^   int index;           \/* number of "owner" of data in interval *\/$/;"	m	struct:Partition
index	params/params_const.h	/^  int index;$/;"	m	struct:Param_List
index	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^	int index;		\/* position in list of ritz vals (i index) *\/$/;"	m	struct:orthlink
index	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^	int index;		\/* position in list of ritz vals (i index) *\/$/;"	m	struct:orthlink_float
indextype	parmetis/third_library_const.h	26;"	d
indextype	parmetis/third_library_const.h	35;"	d
indextype	parmetis/third_library_const.h	51;"	d
indextype	parmetis/third_library_const.h	63;"	d
indextype	parmetis/third_library_const.h	69;"	d
indices_from	Utilities/Communication/comm.h	/^    int      *indices_from;     \/* indices for where to put arriving data *\/$/;"	m	struct:Zoltan_Comm_Obj
indices_from_ptr	Utilities/Communication/comm.h	/^    int      *indices_from_ptr; \/* where to find items I recv *\/$/;"	m	struct:Zoltan_Comm_Obj
indices_to	Utilities/Communication/comm.h	/^    int      *indices_to;       \/* indices of items I send in my msgs *\/$/;"	m	struct:Zoltan_Comm_Obj
indices_to_ptr	Utilities/Communication/comm.h	/^    int      *indices_to_ptr;   \/* where to find items I send in my msgs *\/$/;"	m	struct:Zoltan_Comm_Obj
indir	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^	char 	*indir;$/;"	m	struct:__anon25
indir	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^	char 	*indir;$/;"	m	struct:__anon17
indirlen	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^	ftnlen	indirlen;$/;"	m	struct:__anon25
indirlen	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^	ftnlen	indirlen;$/;"	m	struct:__anon17
indx	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^	int indx;		\/* index of corresponding entry *\/$/;"	m	struct:scanlink
inerr	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^{	flag inerr;$/;"	m	struct:__anon25
inerr	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^{	flag inerr;$/;"	m	struct:__anon17
inertial	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/inertial/inertial.c	/^void      inertial(graph, nvtxs, cube_or_mesh, nsets, igeom, coords, sets,$/;"	f
inertial1d	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/inertial/inertial1d.c	/^void      inertial1d(graph, nvtxs, cube_or_mesh, nsets, x, sets, goal,$/;"	f
inertial2d	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/inertial/inertial2d.c	/^void      inertial2d(graph, nvtxs, cube_or_mesh, nsets, x, y, sets, goal,$/;"	f
inertial3d	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/inertial/inertial3d.c	/^void      inertial3d(graph, nvtxs, cube_or_mesh, nsets, x, y, z, sets, goal,$/;"	f
inertial_axis_time	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/timing.c	/^double    inertial_axis_time = 0;$/;"	v
inertial_matrix2D	zz/zz_coord.c	/^static void inertial_matrix2D(ZZ *zstruct, double *X, $/;"	f	file:
inertial_matrix3D	zz/zz_coord.c	/^static void inertial_matrix3D(ZZ *zstruct, double *X, $/;"	f	file:
inertial_time	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/timing.c	/^double    inertial_time = 0;$/;"	v
inex	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^	ftnint	*inex;	\/*parameters in standard's order*\/$/;"	m	struct:__anon25
inex	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^	ftnint	*inex;	\/*parameters in standard's order*\/$/;"	m	struct:__anon17
infile	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^	char *infile;$/;"	m	struct:__anon25
infile	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^	char *infile;$/;"	m	struct:__anon17
infilen	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^	ftnlen infilen;$/;"	m	struct:__anon25
infilen	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^	ftnlen infilen;$/;"	m	struct:__anon17
infmt	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^	char	*infmt;$/;"	m	struct:__anon25
infmt	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^	char	*infmt;$/;"	m	struct:__anon17
infmtlen	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^	ftnlen	infmtlen;$/;"	m	struct:__anon25
infmtlen	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^	ftnlen	infmtlen;$/;"	m	struct:__anon17
info	fort/lbif.h	/^! For more info, see the README file in the top-level Zoltan directory.      ! $/;"	v
info	phg/phg_hypergraph.h	/^  int info;             \/* depth of recursion in V-cycle; initially 0 *\/$/;"	m	struct:__anon38
inform	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^	char	*inform;$/;"	m	struct:__anon25
inform	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^	char	*inform;$/;"	m	struct:__anon17
informlen	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^	ftnint	informlen;$/;"	m	struct:__anon25
informlen	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^	ftnint	informlen;$/;"	m	struct:__anon17
init	ZoltanComponent/CCA_Wrapper/BaseLB_prop.cpp	/^void ZoltanSpace::BaseLB::init()$/;"	f	class:ZoltanSpace::BaseLB
init	ZoltanComponent/CCA_Wrapper/HSFC.cpp	/^void ZoltanSpace::HSFC_LB::init()$/;"	f	class:ZoltanSpace::HSFC_LB
init	ZoltanComponent/CCA_Wrapper/OctTree.cpp	/^void ZoltanSpace::OctTree_LB::init()$/;"	f	class:ZoltanSpace::OctTree_LB
init	ZoltanComponent/CCA_Wrapper/ParMetis.cpp	/^void ZoltanSpace::ParMetis_LB::init()$/;"	f	class:ZoltanSpace::ParMetis_LB
init	ZoltanComponent/CCA_Wrapper/PartitonerFactory.cpp	/^void ZoltanSpace::PartitionerFactory_JR::init()$/;"	f	class:ZoltanSpace::PartitionerFactory_JR
init	ZoltanComponent/CCA_Wrapper/RCB.cpp	/^void ZoltanSpace::RCB_LB::init()$/;"	f	class:ZoltanSpace::RCB_LB
init	ZoltanComponent/CCA_Wrapper/RIB.cpp	/^void ZoltanSpace::RIB_LB::init()$/;"	f	class:ZoltanSpace::RIB_LB
init	ZoltanComponent/TestComponents/Driver.cpp	/^void ZoltanTestSpace::Driver::init()$/;"	f	class:ZoltanTestSpace::Driver
init	ZoltanComponent/TestComponents/Mesh.cpp	/^void ZoltanTestSpace::Mesh::init()$/;"	f	class:ZoltanTestSpace::Mesh
init_cube_edata	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/refine_map/init_cube_edata.c	/^void      init_cube_edata(edata, node1, dim, mask)$/;"	f
init_dim	driver/dr_input_const.h	/^  int     init_dim;            \/* For NO_FILE_* (random) input, the $/;"	m	struct:Parallel_IO
init_dist_pins	driver/dr_input_const.h	/^  int     init_dist_pins;      \/* For hypergraphs, how should pins be  $/;"	m	struct:Parallel_IO
init_dist_pins	fdriver/fdr_input.f90	/^  integer(Zoltan_INT) :: init_dist_pins$/;"	k	type:PARIO_INFO
init_dist_procs	driver/dr_input_const.h	/^  int     init_dist_procs;     \/* How many procs to use in $/;"	m	struct:Parallel_IO
init_dist_procs	driver_old/dr_input_const.h	/^  int     init_dist_procs;     \/* How many procs to use in$/;"	m	struct:Parallel_IO
init_dist_type	driver/dr_input_const.h	/^  int     init_dist_type;      \/* Flag indicating how input objects$/;"	m	struct:Parallel_IO
init_dist_type	driver_old/dr_input_const.h	/^  int     init_dist_type;      \/* Flag indicating how input data$/;"	m	struct:Parallel_IO
init_mesh_edata	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/refine_map/init_mesh_edata.c	/^void      init_mesh_edata(edata, mesh_dims)$/;"	f
init_num_obj	hier/hier.h	/^  int init_num_obj;                  \/* number of local objects at start *\/$/;"	m	struct:HierPartParamsStruct
init_size	driver/dr_input_const.h	/^  int     init_size;           \/* For NO_FILE_* (random) input, the $/;"	m	struct:Parallel_IO
init_stack	reftree/reftree_coarse_path.c	/^static int init_stack(ZZ *zz)$/;"	f	file:
init_time	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/timing.c	/^double    init_time = 0;$/;"	v
init_vwgt_dim	driver/dr_input_const.h	/^  int     init_vwgt_dim;       \/* For NO_FILE_* (random) input, the $/;"	m	struct:Parallel_IO
init_weight_struct	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_exo_util.c	/^int init_weight_struct(PROB_INFO_PTR problem,$/;"	f
initial_cycle	reftree/reftree_coarse_path.c	/^static int initial_cycle(ZZ *zz)$/;"	f	file:
initialize_dot	rcb/shared.c	/^static int initialize_dot($/;"	f	file:
initialize_element	driver/dr_elem_util.c	/^void initialize_element(ELEM_INFO *elem)$/;"	f
initialize_element	driver_old/dr_elem_util.c	/^void initialize_element(ELEM_INFO *elem)$/;"	f
initialize_element	fdriver/fdr_chaco_io.f90	/^subroutine initialize_element(/;"	s	module:dr_chaco_io
initialize_element	fdriver_old/fdr_chaco_io.f90	/^subroutine initialize_element(/;"	s	module:dr_chaco_io
initialize_mesh	ZoltanComponent/TestComponents/Mesh.cpp	/^void ZoltanTestSpace::Mesh::initialize_mesh()$/;"	f	class:ZoltanTestSpace::Mesh
initialize_mesh	driver/dr_main.c	/^static void initialize_mesh(MESH_INFO_PTR mesh, int proc)$/;"	f	file:
initialize_mesh	driver/dr_mainCPP.cpp	/^static void initialize_mesh(MESH_INFO_PTR mesh)$/;"	f	file:
initialize_mesh	driver_old/dr_main.c	/^static void initialize_mesh(MESH_INFO_PTR mesh)$/;"	f	file:
initialize_region	oct/octupdate.c	/^static void initialize_region(ZZ *zz, pRegion *ret, ZOLTAN_ID_PTR global_id,$/;"	f	file:
inits2d	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/bpmatch/inits2d.c	/^void      inits2d(graph, xvecs, vals, indices, nvtxs, dist, startvtx, size, sets)$/;"	f
inits3d	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/bpmatch/inits3d.c	/^void      inits3d(graph, xvecs, vals, indices, nvtxs, dist, startvtx, size, sets)$/;"	f
inlist	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^} inlist;$/;"	t	typeref:struct:__anon25
inlist	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^} inlist;$/;"	t	typeref:struct:__anon17
inname	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^	char	*inname;$/;"	m	struct:__anon25
inname	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^	char	*inname;$/;"	m	struct:__anon17
innamed	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^	ftnint	*innamed;$/;"	m	struct:__anon25
innamed	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^	ftnint	*innamed;$/;"	m	struct:__anon17
innamlen	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^	ftnlen	innamlen;$/;"	m	struct:__anon25
innamlen	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^	ftnlen	innamlen;$/;"	m	struct:__anon17
innrec	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^	ftnint	*innrec;$/;"	m	struct:__anon25
innrec	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^	ftnint	*innrec;$/;"	m	struct:__anon17
innum	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^	ftnint	*innum;$/;"	m	struct:__anon25
innum	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^	ftnint	*innum;$/;"	m	struct:__anon17
inopen	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^	ftnint	*inopen;$/;"	m	struct:__anon25
inopen	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^	ftnint	*inopen;$/;"	m	struct:__anon17
input_assign	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/input/input_assign.c	/^int       input_assign(finassign, inassignname, nvtxs, assignment)$/;"	f
input_assign_inv	ch/ch_input_assign.c	/^static int input_assign_inv($/;"	f	file:
input_assign_inv	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/input/input_assign.c	/^static int input_assign_inv(finassign, inassignname, nvtxs, assignment)$/;"	f	file:
input_assign_normal	ch/ch_input_assign.c	/^static int input_assign_normal($/;"	f	file:
input_assign_normal	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/input/input_assign.c	/^static int input_assign_normal(finassign, inassignname, nvtxs, assignment)$/;"	f	file:
input_geom	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/input/input_geom.c	/^int       input_geom(fingeom, geomname, nvtxs, igeom, x, y, z)$/;"	f
input_graph	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/input/input_graph.c	/^int       input_graph(fin, inname, start, adjacency, nvtxs, vweights, eweights)$/;"	f
input_int	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/input_int.c	/^int       input_int(void)$/;"	f
input_part	parmetis/third_library.h	/^  indextype *input_part;$/;"	m	struct:ZOLTAN_Third_Part_
input_part_sizes	parmetis/third_library.h	/^  float     *input_part_sizes;$/;"	m	struct:ZOLTAN_Third_Part_
input_parts	hier/hier.h	/^  int *input_parts;                  \/* Initial partitions for objects. *\/$/;"	m	struct:HierPartParamsStruct
input_queries	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/input/input.c	/^void      input_queries(fin, fingeom, finassign, inname, geomname, inassignname,$/;"	f
input_time	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/timing.c	/^double    input_time = 0;$/;"	v
inrecl	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^	ftnint	*inrecl;$/;"	m	struct:__anon25
inrecl	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^	ftnint	*inrecl;$/;"	m	struct:__anon17
inseq	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^	char	*inseq;$/;"	m	struct:__anon25
inseq	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^	char	*inseq;$/;"	m	struct:__anon17
inseqlen	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^	ftnlen	inseqlen;$/;"	m	struct:__anon25
inseqlen	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^	ftnlen	inseqlen;$/;"	m	struct:__anon17
insert_in_hash	driver/dr_migrate.c	/^void insert_in_hash($/;"	f
insert_unique_gids_of_interest	hier/hier.c	/^static void insert_unique_gids_of_interest(HierPartParams *hpp,$/;"	f	file:
int_elems	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int   **int_elems;$/;"	m	struct:LB_Description
int_nodes	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int    **int_nodes;$/;"	m	struct:LB_Description
int_procname	fdriver/fdr_main.f90	/^  integer(Zoltan_INT) :: int_procname(/;"	v	program:fdriver
int_procname	fdriver_old/fdr_main.f90	/^  integer(LB_INT) :: int_procname(/;"	v	program:fdriver
integer	fort/lbfn.h	/^integer , intent(in) :: communicator$/;"	v
integer	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^typedef long int integer;$/;"	t
integer	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^typedef long int integer;$/;"	t
interface	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/interface.c	/^int       interface(nvtxs, start, adjacency, vwgts, ewgts, x, y, z,$/;"	f
internal_isort_2	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_util.c	/^void internal_isort_2(int *v1, int *v2, int N)$/;"	f
internal_isort_4	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_util.c	/^void internal_isort_4(int *v1, int *v2, int *v3, int *v4, int N)$/;"	f
internal_median3_2	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_util.c	/^int internal_median3_2(int *v1, int *v2, int left, int right)$/;"	f
internal_median3_4	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_util.c	/^int internal_median3_4(int *v1, int *v2, int *v3, int *v4, int left, int right)$/;"	f
internal_qsort_2	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_util.c	/^void internal_qsort_2(int *v1, int *v2, int left, int right)$/;"	f
internal_qsort_4	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_util.c	/^void internal_qsort_4(int *v1, int *v2, int *v3, int *v4, int left, int right)$/;"	f
interpolate	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/coarsen/interpolate.c	/^void      interpolate(vecs, cvecs, ndims, graph, nvtxs, v2cv, using_ewgts)$/;"	f
inunf	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^	char	*inunf;$/;"	m	struct:__anon25
inunf	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^	char	*inunf;$/;"	m	struct:__anon17
inunflen	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^	ftnlen	inunflen;$/;"	m	struct:__anon25
inunflen	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^	ftnlen	inunflen;$/;"	m	struct:__anon17
inunit	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^	ftnint inunit;$/;"	m	struct:__anon25
inunit	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^	ftnint inunit;$/;"	m	struct:__anon17
invperm_value	driver/dr_const.h	/^  int      invperm_value;\/* Value for this element in inverse permutation vector$/;"	m	struct:Element_Description
invperm_value	fdriver/fdr_const.f90	/^  integer(Zoltan_INT) :: invperm_value /;"	k	type:ELEM_INFO
ip	phg/phg_match.c	/^    float ip;           \/* total inner product between candidate and partner *\/$/;"	m	struct:triplet	file:
ipairs	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^struct ipairs {				\/* stores pairs of integers *\/$/;"	s
iperm	order/order_const.h	/^  int *iperm;$/;"	m	struct:Zoltan_Order_Struct
iperm	parmetis/third_library.h	/^  int *iperm;           \/* inverse permutation of rank *\/$/;"	m	struct:ZOLTAN_Output_Order_
is_3d_element	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_loadbal.c	/^int is_3d_element(E_Type etype)$/;"	f
is_an_edge	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/graph/check_graph.c	/^int       is_an_edge(vertex, v2, weight2)$/;"	f
is_gid_local	hier/hier.c	/^static int is_gid_local(HierPartParams *hpp, ZOLTAN_ID_TYPE gid) {$/;"	f	file:
is_hex	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_loadbal.c	/^int is_hex(E_Type etype)$/;"	f
is_init	ZoltanComponent/CCA_Wrapper/BaseLB.h	/^    bool is_init ;$/;"	m	class:ZoltanSpace::BaseLB
is_init	ZoltanComponent/CCA_Wrapper/HSFC.h	/^    bool is_init ;$/;"	m	class:ZoltanSpace::HSFC_LB
is_init	ZoltanComponent/CCA_Wrapper/OctTree.h	/^    bool is_init ;$/;"	m	class:ZoltanSpace::OctTree_LB
is_init	ZoltanComponent/CCA_Wrapper/ParMetis.h	/^    bool is_init ;$/;"	m	class:ZoltanSpace::ParMetis_LB
is_init	ZoltanComponent/CCA_Wrapper/PartitionerFactory.h	/^    bool is_init ;$/;"	m	class:ZoltanSpace::PartitionerFactory_JR
is_init	ZoltanComponent/CCA_Wrapper/RCB.h	/^    bool is_init ;$/;"	m	class:ZoltanSpace::RCB_LB
is_init	ZoltanComponent/CCA_Wrapper/RIB.h	/^    bool is_init ;$/;"	m	class:ZoltanSpace::RIB_LB
is_init	ZoltanComponent/TestComponents/Driver.h	/^    bool is_init ;$/;"	m	class:ZoltanTestSpace::Driver
is_init	ZoltanComponent/TestComponents/Mesh.h	/^    bool is_init, cmd_filename_set ;$/;"	m	class:ZoltanTestSpace::Mesh
is_less_than2	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_util.c	/^int is_less_than2(int ra1,int rb1, int ra2,int rb2)$/;"	f
is_less_than2v	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_util.c	/^int is_less_than2v(int *v1, int *v2, int i, int j)$/;"	f
is_less_than4	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_util.c	/^int is_less_than4(int ra1,int rb1,int rc1,int rd1,$/;"	f
is_less_than4v	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_util.c	/^int is_less_than4v(int *v1, int *v2, int *v3, int *v4, int i, int j)$/;"	f
is_tet	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_loadbal.c	/^int is_tet(E_Type etype)$/;"	f
ispowerof2	postprocessing/ordering/ordering.py	/^def ispowerof2(num):$/;"	f
istate2d	hsfc/hsfc_hilbert_const.h	/^static unsigned const int istate2d[] = \/* 2 dimension to nkey state transitions *\/$/;"	v
istate2d	util/converters_for_JPDC_adaptive_mesh_experiments/chaco2chaco/hsfc_hilbert_const.h	/^static unsigned const int istate2d[] = \/* 2 dimension to nkey state transitions *\/$/;"	v
istate3d	hsfc/hsfc_hilbert_const.h	/^static unsigned const istate3d [] ={ \/* 3 dimension to nkey state transitions *\/$/;"	v
istate3d	util/converters_for_JPDC_adaptive_mesh_experiments/chaco2chaco/hsfc_hilbert_const.h	/^static unsigned const istate3d [] ={ \/* 3 dimension to nkey state transitions *\/$/;"	v
ival	params/params_const.h	/^  int ival;$/;"	m	struct:Param_Utype
j	driver/dr_mm_readfile.c	/^  int i, j;$/;"	m	struct:ijv	file:
j	fdriver_old/fdr_main.f90	/^  integer(LB_INT) :: error, i, j$/;"	v	program:fdriver
keep_distribution	matrix/matrix.h	/^  int keep_distribution;       \/* Conserve the original distribution, cannot work with randomize *\/$/;"	m	struct:Zoltan_matrix_options_
kernel_time	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/timing.c	/^double    kernel_time = 0;$/;"	v
key	zz/zz_map.c	/^  int *key;          \/* a copy of or a pointer to callers key *\/$/;"	m	struct:Zoltan_Map_Entry	file:
key_match	zz/zz_map.c	/^static int key_match(int key_size, int *key1, int *key2)$/;"	f	file:
kl_bucket_time	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/timing.c	/^double    kl_bucket_time = 0;$/;"	v
kl_init	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klspiff/kl_init.c	/^int       kl_init(bucket_ptrs, listspace, dvals, tops, nvtxs, nsets, maxchange)$/;"	f
kl_init_time	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/timing.c	/^double    kl_init_time = 0;$/;"	v
kl_refine	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/refine_part/kl_refine.c	/^int       kl_refine(graph, subgraph, set_list, vtx_elems, new_assign,$/;"	f
kl_total_time	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/timing.c	/^double    kl_total_time = 0;$/;"	v
klspiff	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klspiff/klspiff.c	/^void      klspiff(graph, nvtxs, sets, nsets, hops, goal, term_wgts, max_dev,$/;"	f
klv_init	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klvspiff/klv_init.c	/^int       klv_init(lbucket_ptr, rbucket_ptr, llistspace, rlistspace,$/;"	f
klvspiff	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klvspiff/klvspiff.c	/^void      klvspiff(graph, nvtxs, sets, goal, max_dev,$/;"	f
known_to_me	reftree/reftree.h	/^   int known_to_me;      \/* for coarse grid objects, 1 if it is known to this$/;"	m	struct:Zoltan_Reftree_Struct
kramer3	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/inertial/eigenvec3.c	/^void      kramer3(A, b, x)	\/* Use Kramer's rule to solve 3x3 *\/$/;"	f
kway	phg/phg.h	/^  int kway;                      \/* 1 -> direct kway, 0->recursive bisection *\/$/;"	m	struct:PHGPartParamsStruct
l	hsfc/hsfc.h	/^   double l;            \/* leftmost boundary of partition interval  *\/$/;"	m	struct:Partition
lanc_seconds	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/eigen/lanc_seconds.c	/^double    lanc_seconds()$/;"	f
lanczos_FO	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/eigen/lanczos_FO.c	/^void      lanczos_FO(A, n, d, y, lambda, bound, eigtol, vwsqrt, maxdeg, version)$/;"	f
lanczos_SO	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/eigen/lanczos_SO.c	/^void      lanczos_SO(A, n, d, y, lambda, bound, eigtol, vwsqrt, maxdeg, version,$/;"	f
lanczos_SO_float	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/eigen/lanczos_SO_float.c	/^void      lanczos_SO_float(A, n, d, y, lambda, bound, eigtol, vwsqrt, maxdeg, version,$/;"	f
lanczos_ext	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/eigen/lanczos_ext.c	/^int       lanczos_ext(A, n, d, y, eigtol, vwsqrt, maxdeg, version, gvec, sigma)$/;"	f
lanczos_ext_float	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/eigen/lanczos_ext_float.c	/^int       lanczos_ext_float(A, n, d, y, eigtol, vwsqrt, maxdeg, version, gvec, sigma)$/;"	f
lanczos_time	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/timing.c	/^double    lanczos_time = 0;$/;"	v
lanpause	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/eigen/lanpause.c	/^int       lanpause(j, lastpause, interval, q, n, pausemode, version, beta)$/;"	f
lanpause_float	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/eigen/lanpause.c	/^int       lanpause_float(j, lastpause, interval, q, n, pausemode, version, beta)$/;"	f
lastPartition	util/vtk_view.cpp	/^static int lastPartition = 0; $/;"	v	file:
latency	zz/zz_const.h	/^  int latency;           \/* specify the latency of the topology *\/$/;"	m	struct:__anon37
lb_oct_init	oct/octupdate.c	/^static int lb_oct_init($/;"	f	file:
lb_user_const	fdriver_old/lb_user_const.f90	/^module lb_user_const$/;"	m
lb_user_const	fort/lb_user_const.f90	/^module lb_user_const$/;"	m
lbrotax	postprocessing/ordering/order_eval.h	/^  const SCOTCH_Num *      lbrotax;$/;"	m	struct:FactorStat_
ldadtax	postprocessing/ordering/order_eval.h	/^  const SCOTCH_Num *      ldadtax;$/;"	m	struct:FactorStat_
leaves	order/order_const.h	/^  int *leaves;                  \/* Out: list of all leaves *\/$/;"	m	struct:Zoltan_Order_Struct
left	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/connect/heap.c	5;"	d	file:
left_leaf	rcb/rcb.h	/^  int       left_leaf;          \/* left child of this node in cut tree *\/$/;"	m	struct:rcb_tree
left_leaf	rcb/rib.h	/^    int       left_leaf;        \/* left child of this node in cut tree *\/$/;"	m	struct:rib_tree
lenGID	phg/phg_lookup.h	/^  int lenGID;$/;"	m	struct:_GID_lookup
length	params/params_const.h	/^  int length;			\/* length of vector; 0 if scalar *\/$/;"	m	struct:Param_Vars
lengths_from	Utilities/Communication/comm.h	/^    int      *lengths_from;     \/* # items I recv in my messages *\/$/;"	m	struct:Zoltan_Comm_Obj
lengths_to	Utilities/Communication/comm.h	/^    int      *lengths_to;       \/* # items I send in my messages *\/$/;"	m	struct:Zoltan_Comm_Obj
level	driver/dr_err_const.h	/^  int   level;$/;"	m	struct:error_message
level	driver_old/dr_err_const.h	/^  int   level;$/;"	m	struct:error_message
level	hier/hier.h	/^  int level;                         \/* level currently being processed *\/$/;"	m	struct:HierPartParamsStruct
level	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_err_const.h	/^  int   level;$/;"	m	struct:error_message
levelCount	par/par_median_randomized.c	/^static int levelCount[DEPTHMAX+1];$/;"	v	file:
levelValues	par/par_median_randomized.c	/^static int levelValues[DEPTHMAX][MAXLENGTH];$/;"	v	file:
libshared	ZoltanComponent/CCA_Wrapper/Makefile	/^libshared = ZoltanLB$(CCA_SHLIB_SUFFIX)$/;"	m
libshared_driver	ZoltanComponent/TestComponents/Makefile	/^libshared_driver = Driver$(CCA_SHLIB_SUFFIX)$/;"	m
libshared_mesh	ZoltanComponent/TestComponents/Makefile	/^libshared_mesh = Mesh$(CCA_SHLIB_SUFFIX)$/;"	m
lid	reftree/reftree.h	/^  int lid;                      \/* integer corresponding to the gid *\/$/;"	m	struct:Zoltan_Reftree_inthash_node
lid_flag	Utilities/DDirectory/DD.h	/^   char lid_flag;          \/* indicates if LID data are present            *\/$/;"	m	struct:__anon2
lid_length	Utilities/DDirectory/DD.h	/^  int lid_length;         \/* = zz->Num_LID -- avoid needing Zoltan_Struct *\/$/;"	m	struct:Zoltan_DD_Struct
lid_list	ZoltanComponent/CCA_Wrapper/EntityListImpl.h	/^    unsigned int *gid_list, *lid_list, *user_def_list ;$/;"	m	class:ZoltanSpace::EntityListImpl
lid_size	ZoltanComponent/CCA_Wrapper/EntityListImpl.h	/^    int proc_size, gid_size, lid_size, user_def_size, ref ;$/;"	m	class:ZoltanSpace::EntityListImpl
lids	order/order_const.h	/^  ZOLTAN_ID_PTR lids;           \/* ptr to list of local ids *\/$/;"	m	struct:Zoltan_Order_Struct
line	Utilities/Memory/mem.c	/^  int       line;                       \/* line number *\/$/;"	m	struct:malloc_debug_data	file:
line	ch/ch_input_read.c	/^static char line[LINE_LENGTH];	\/* space to hold values *\/$/;"	v	file:
line	driver/dr_input_const.h	/^  char line[UNDEFINED_LIST_MAX][UNDEFINED_LENGTH_MAX];$/;"	m	struct:ParameterList
line	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/input/read_val.c	/^static char line[LINE_LENGTH];	\/* space to hold values *\/$/;"	v	file:
line_no	driver/dr_err_const.h	/^  int   line_no;$/;"	m	struct:error_message
line_no	driver_old/dr_err_const.h	/^  int   line_no;$/;"	m	struct:error_message
line_no	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_err_const.h	/^  int   line_no;$/;"	m	struct:error_message
linkbro	postprocessing/ordering/order_eval.h	/^  struct C_FactorNode_ *    linkbro;              \/*+ Brother of node   +*\/$/;"	m	struct:C_FactorNode_	typeref:struct:C_FactorNode_::C_FactorNode_
linkdad	postprocessing/ordering/order_eval.h	/^  struct C_FactorNode_ *    linkdad;              \/*+ Father of node    +*\/$/;"	m	struct:C_FactorNode_	typeref:struct:C_FactorNode_::C_FactorNode_
linkson	postprocessing/ordering/order_eval.h	/^  struct C_FactorNode_ *    linkson;              \/*+ First son of node +*\/$/;"	m	struct:C_FactorNode_	typeref:struct:C_FactorNode_::C_FactorNode_
list	oct/octant_const.h	/^  pRegion list;                     \/* list of regions associated to octant *\/$/;"	m	struct:_Octant
list	oct/octree_const.h	/^  pRList list;$/;"	m	struct:__anon31
list	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^	float *list;			$/;"	m	struct:flists
list	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^	int *list;			$/;"	m	struct:ilists
list	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^struct list {				\/* linked list of integers *\/$/;"	s
listMax	util/vtk_view.cpp	/^static int listMax=0;$/;"	v	file:
listSize	util/vtk_view.cpp	/^static int listSize=0;$/;"	v	file:
list_size	driver/dr_input_const.h	/^  int list_size;$/;"	m	struct:ParameterList
lists	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^struct lists {				\/* linked list of lists *\/$/;"	s
lno	coloring/g2l_hash.h	/^    int lno;           \/* Mapped id of gno*\/$/;"	m	struct:G2L_Hash_Node
lo	matrix/common_sort.c	/^    char *lo;$/;"	m	struct:__anon6	file:
lo	rcb/rcb.h	/^  double    lo[3], hi[3];	\/* xyz lo\/hi bounds *\/$/;"	m	struct:rcb_box
local	matrix/matrix.h	/^  int local;                   \/* If only local edges have to be kept *\/$/;"	m	struct:Zoltan_matrix_options_
localID	driver/dr_migrate.c	/^  int localID;$/;"	m	struct:New_Elem_Hash_Node	file:
local_HEs_from_export_lists	lb/lb_remap.c	/^static int local_HEs_from_export_lists($/;"	f	file:
local_HEs_from_import_lists	lb/lb_remap.c	/^static int local_HEs_from_import_lists($/;"	f	file:
local_coarse_partitioner	phg/phg_serialpartition.c	/^static int local_coarse_partitioner($/;"	f	file:
local_id	reftree/reftree.h	/^   ZOLTAN_ID_PTR local_id;   \/* local ID of the corresponding element *\/$/;"	m	struct:Zoltan_Reftree_Struct
local_ids	hier/hier.h	/^  ZOLTAN_ID_PTR local_ids;           \/* \/ lists of local ids and global ids *\/$/;"	m	struct:HierPartParamsStruct
local_mech	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int   local_mech;       \/* true if looking for mechanisms in subdivided mesh *\/$/;"	m	struct:Problem_Description
logical	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^typedef long int logical;$/;"	t
logical	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^typedef long int logical;$/;"	t
low	Utilities/DDirectory/DD_Set_Neighbor_Hash_Fn2.c	/^   int low;$/;"	m	struct:__anon1	file:
low	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^	short low[3];		\/* low limit for grid dimensions if mesh *\/$/;"	m	struct:set_info
low_limit	Utilities/DDirectory/DD_Set_Neighbor_Hash_Fn2.c	/^  int low_limit;$/;"	m	struct:dd_nh2_struct	file:
lowerc	fdriver/mmio.f	/^      subroutine lowerc(/;"	s
lowercase	fdriver/fdr_input.f90	/^function lowercase(/;"	f	module:dr_input
lowercase	fdriver_old/fdr_input.f90	/^function lowercase(/;"	f	module:dr_input
lsontax	postprocessing/ordering/order_eval.h	/^  const SCOTCH_Num *      lsontax;$/;"	m	struct:FactorStat_
lval	params/params_const.h	/^  long lval;$/;"	m	struct:Param_Utype
machine_params	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/machine_params.c	/^void      machine_params(double *double_epsilon, double *double_max, int *rand_max)$/;"	f
main	driver/dr_main.c	/^int main(int argc, char *argv[])$/;"	f
main	driver/dr_mainCPP.cpp	/^int main(int argc, char *argv[])$/;"	f
main	driver_old/dr_main.c	/^int main(int argc, char *argv[])$/;"	f
main	postprocessing/bin/toscotchperm.py	/^def main(argv=None):$/;"	f
main	postprocessing/ordering/order_eval.c	/^main ($/;"	f
main	postprocessing/ordering/ordering.py	/^def main(argv=None):$/;"	f
main	postprocessing/ordering/toscotchperm.py	/^def main(argv=None):$/;"	f
main	util/converters_for_JPDC_adaptive_mesh_experiments/chaco2chaco/main.c	/^main(int argc, char *argv[])$/;"	f
main	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/main.c	/^int       main()$/;"	f
main	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_main.c	/^int main (int argc, char *argv[])$/;"	f
main	util/memory_usage/commdup.c	/^main(int argc, char *argv[])$/;"	f
main	util/memory_usage/commsplit.c	/^main(int argc, char *argv[])$/;"	f
main	util/memory_usage/rcblike.c	/^main(int argc, char *argv[])$/;"	f
main	util/vtk_view.cpp	/^int main(int argc, char **argv)$/;"	f
make_bndy_list	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klspiff/make_bndy_list.c	/^void      make_bndy_list(graph, movelist, buckets, listspace, sets, nsets, bspace,$/;"	f
make_bpgraph	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klvspiff/make_bpgraph.c	/^void      make_bpgraph(graph, sets, bndy_list, sep_size, set_match,$/;"	f
make_cgraph_time	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/timing.c	/^double    make_cgraph_time = 0;$/;"	v
make_comm_graph	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/refine_map/make_comm_graph.c	/^int       make_comm_graph(pcomm_graph, graph, nvtxs, using_ewgts, assign, nsets_tot)$/;"	f
make_connected	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/connect/connected.c	/^void      make_connected(graph, nvtxs, nedges, mark, vtxlist, cdata, using_ewgts)$/;"	f
make_kl_list	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klspiff/make_kl_list.c	/^int       make_kl_list(graph, movelist, buckets, listspace, sets, nsets, bspace, dvals,$/;"	f
make_maps	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/make_maps.c	/^int       make_maps(setlists, list_ptrs, set, glob2loc, loc2glob)$/;"	f
make_maps2	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/make_maps.c	/^void      make_maps2(assignment, nvtxs, set, glob2loc, loc2glob)$/;"	f
make_maps_ref	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/refine_part/make_maps_ref.c	/^void      make_maps_ref(graph, set_list, vtx_elems, assignment, sub_assign,$/;"	f
make_sep_list	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klvspiff/make_sep_list.c	/^int       make_sep_list(bspace, list_length, sets)$/;"	f
make_setlists	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/make_setlists.c	/^void      make_setlists(setlists, list_ptrs, nsets, subsets, subassign,$/;"	f
make_string	driver/dr_hg_io.c	/^static void make_string(char *buf, char *str)$/;"	f	file:
make_subgeom	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/inertial/make_subgeom.c	/^void      make_subgeom(igeom, coords, subcoords, subnvtxs, loc2glob)$/;"	f
make_subgoal	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/make_subgoal.c	/^void      make_subgoal(goal, subgoal, nsets, cube_or_mesh, nsets_tot,$/;"	f
make_subgraph	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/graph/subgraph.c	/^void      make_subgraph(graph, subgraph, subnvtxs, psubnedges, assignment, set,$/;"	f
make_subvector	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/makevwsqrt.c	/^void      make_subvector(double *vec, double *subvec, int subnvtxs, int *loc2glob)$/;"	f
make_term_props	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/make_term_props.c	/^void      make_term_props(graph, sub_nvtxs, loc2glob, assignment, architecture,$/;"	f
make_terms_ref	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/refine_part/make_terms_ref.c	/^void      make_terms_ref(graph, using_ewgts, subnvtxs, loc2glob, set0, set1,$/;"	f
make_unconnected	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/connect/connected.c	/^void      make_unconnected(graph, nedges, cdata, using_ewgts)$/;"	f
makeccoords	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/coarsen/makeccoords.c	/^void      makeccoords(graph, cnvtxs, cv2v_ptrs, cv2v_vals,$/;"	f
makecgraph	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/coarsen/makecgraph.c	/^void      makecgraph(graph, nvtxs, pcgraph, pcnvtxs, pcnedges, mflag,$/;"	f
makecgraph2	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/coarsen/makecgraph2.c	/^void      makecgraph2(graph, nvtxs, nedges, pcgraph, pcnvtxs, pcnedges, mflag,$/;"	f
makecv2v	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/coarsen/makefgraph.c	/^static void makecv2v(nvtxs, cnvtxs, v2cv, cv2v_vals, cv2v_ptrs)$/;"	f	file:
makefgraph	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/coarsen/makefgraph.c	/^void      makefgraph(graph, nvtxs, nedges, pcgraph, cnvtxs, pcnedges, v2cv,$/;"	f
makeorthlnk	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/eigen/makeorthlnk.c	/^struct orthlink *makeorthlnk()$/;"	f
makeorthlnk_float	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/eigen/makeorthlnk.c	/^struct orthlink_float *makeorthlnk_float()$/;"	f
makev2cv	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/coarsen/makev2cv.c	/^void      makev2cv(mflag, nvtxs, v2cv)$/;"	f
makevwsqrt	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/makevwsqrt.c	/^void      makevwsqrt(double *vwsqrt, struct vtx_data **graph, int nvtxs)$/;"	f
malloc_HEinfo	lb/lb_remap.c	/^static int malloc_HEinfo($/;"	f	file:
malloc_debug_data	Utilities/Memory/mem.c	/^static struct malloc_debug_data {$/;"	s	file:
malloc_new_objects	oct/migtags.c	/^static int malloc_new_objects(ZZ *zz, int nsentags, pRegion exported_tags, $/;"	f	file:
map	oct/octree_const.h	/^  Map    *map;$/;"	m	struct:__anon32
map2d	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/bpmatch/map2d.c	/^void      map2d(graph, xvecs, nvtxs, sets, goal, vwgt_max)$/;"	f
map3d	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/bpmatch/map3d.c	/^void      map3d(graph, xvecs, nvtxs, sets, goal, vwgt_max)$/;"	f
map_alloc_size	driver/dr_maps.c	/^  int map_alloc_size;$/;"	m	struct:map_list_head	file:
map_alloc_size	driver/dr_mapsCPP.cpp	/^  int map_alloc_size;$/;"	m	struct:map_list_head	file:
map_alloc_size	driver_old/dr_maps.c	/^  int map_alloc_size;$/;"	m	struct:map_list_head	file:
map_alloc_size	fdriver/fdr_chaco_io.f90	/^  integer(Zoltan_INT) :: map_alloc_size$/;"	k	type:map_list_head
map_alloc_size	fdriver_old/fdr_chaco_io.f90	/^  integer(LB_INT) :: map_alloc_size$/;"	k	type:map_list_head
map_array	zz/zz_map.c	/^static ZOLTAN_MAP map_array[ZOLTAN_MAX_MAP];$/;"	v	file:
map_list_head	driver/dr_maps.c	/^struct map_list_head {$/;"	s	file:
map_list_head	driver/dr_mapsCPP.cpp	/^struct map_list_head {$/;"	s	file:
map_list_head	driver_old/dr_maps.c	/^struct map_list_head {$/;"	s	file:
map_list_head	fdriver/fdr_chaco_io.f90	/^type map_list_head$/;"	t	function:build_elem_comm_maps
map_list_head	fdriver_old/fdr_chaco_io.f90	/^type map_list_head$/;"	t	function:build_elem_comm_maps
mapidx	oct/migoct.c	/^  int mapidx;$/;"	m	struct:__anon30	file:
mapidx	oct/octant_const.h	/^  int mapidx;$/;"	m	struct:_Octant
mapper	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/assign/mapper.c	/^void      mapper(graph, xvecs, nvtxs, active, sets, ndims, cube_or_mesh, nsets,$/;"	f
mapsize	oct/octree_const.h	/^  int mapsize;$/;"	m	struct:__anon32
mark_lo_and_hi	par/par_median_randomized.c	/^static void mark_lo_and_hi(double loBound, double hiBound,$/;"	f	file:
mark_median	par/par_median_randomized.c	/^static int mark_median(int *dotlist, int *dotmark, $/;"	f	file:
master	ZoltanComponent/CCA_Wrapper/BaseLB.h	/^    int my_index, rank, master ;$/;"	m	class:ZoltanSpace::BaseLB
match	phg/phg_tree.h	/^  int match;   \/* Matching time *\/$/;"	m	struct:phg_timer_indices
match_array_type	phg/phg.h	/^  int  match_array_type;         \/* interpretation of match array:$/;"	m	struct:PHGPartParamsStruct
match_size	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klvspiff/matching.c	/^int match_size(matching, nleft)$/;"	f
match_time	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/timing.c	/^double    match_time = 0;$/;"	v
matching	phg/phg.h	/^  ZOLTAN_PHG_MATCHING_FN *matching;    \/* Pointers to Matching function *\/$/;"	m	struct:PHGPartParamsStruct
matching_ipm	phg/phg_match.c	/^static int matching_ipm(ZZ *zz, HGraph *hg, PHGPartParams *hgp,$/;"	f	file:
matching_pgm	lb/lb_remap.c	/^static int matching_pgm (ZZ *zz, HGraph *hg, int *match, int *limit)$/;"	f	file:
matchstage	phg/phg_tree.h	/^  int matchstage[7];  \/* Matching stages *\/$/;"	m	struct:phg_timer_indices
matrix_get_edges	matrix/matrix_build.c	/^matrix_get_edges(ZZ *zz, Zoltan_matrix *matrix, ZOLTAN_ID_PTR *yGID, ZOLTAN_ID_PTR *pinID, int nX,$/;"	f	file:
matrix_obj	driver/dr_input_const.h	/^  int     matrix_obj;          \/* What are the objects to be balanced$/;"	m	struct:Parallel_IO
max	oct/migoct.c	/^  double max[3];$/;"	m	struct:__anon30	file:
max	oct/octant_const.h	/^  COORD  max;                       \/* max bounds of an octant              *\/$/;"	m	struct:_Octant
max	oct/octree_const.h	/^  COORD max;$/;"	m	struct:__anon31
max	rcb/inertial2d.c	32;"	d	file:
max	rcb/inertial3d.c	32;"	d	file:
max	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/defs.h	1;"	d
max	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	149;"	d
max	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	149;"	d
max_entries	zz/zz_map.c	/^  int max_entries;      \/* size of top array, or 0 if dynamicEntries == 1 *\/$/;"	m	struct:Zoltan_Map_List	file:
max_gid	Utilities/DDirectory/DD_Set_Neighbor_Hash_Fn1.c	/^ int max_gid ;$/;"	m	struct:dd_nh1_struct	file:
max_id_length	Utilities/DDirectory/DD.h	/^  int max_id_length;      \/* max (gid_length, lid_length)           *\/$/;"	m	struct:Zoltan_DD_Struct
max_index	zz/zz_map.c	/^  int max_index;        \/* hash number range *\/$/;"	m	struct:Zoltan_Map_List	file:
max_np_elem	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int     max_np_elem;$/;"	m	struct:Mesh_Description
max_nsur	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int      max_nsur;$/;"	m	struct:Graph_Description
max_send_size	Utilities/Communication/comm.h	/^    int       max_send_size;	\/* size of longest message I send (w\/o self) *\/$/;"	m	struct:Zoltan_Comm_Obj
max_thresh	matrix/common_sort.c	47;"	d	file:
maxed_recvs	Utilities/Communication/comm.h	/^    int       maxed_recvs;      \/* do I have to many receives to post all$/;"	m	struct:Zoltan_Comm_Obj
maxmatch	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/coarsen/maxmatch.c	/^int       maxmatch(graph, nvtxs, nedges, mflag, using_ewgts, igeom, coords)$/;"	f
maxmatch1	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/coarsen/maxmatch1.c	/^int       maxmatch1(graph, nvtxs, mflag, using_ewgts)$/;"	f
maxmatch2	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/coarsen/maxmatch2.c	/^int       maxmatch2(graph, nvtxs, mflag, using_ewgts)$/;"	f
maxmatch3	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/coarsen/maxmatch3.c	/^int       maxmatch3(graph, nvtxs, mflag, using_ewgts)$/;"	f
maxmatch4	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/coarsen/maxmatch4.c	/^int       maxmatch4(graph, nvtxs, nedges, mflag, using_ewgts)$/;"	f
maxmatch5	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/coarsen/maxmatch5.c	/^int       maxmatch5(graph, nvtxs, mflag, igeom, coords)$/;"	f
maxmatch9	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/coarsen/maxmatch9.c	/^int       maxmatch9(graph, nvtxs, mflag, using_ewgts)$/;"	f
maxsize	coloring/g2l_hash.h	/^    int   maxsize;$/;"	m	struct:G2L_Hash
mc68010	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	192;"	d
mc68010	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	192;"	d
mc68020	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	193;"	d
mc68020	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	193;"	d
measure_stays	lb/lb_remap.c	/^static float measure_stays($/;"	f	file:
mech_add_procs	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int   mech_add_procs;   \/* adds processors in cases of mechanisms       *\/$/;"	m	struct:Problem_Description
med3	par/par_median_randomized.c	/^static int med3(double *v, int a, int b, int c)$/;"	f	file:
median	par/par_median.c	/^struct median {          \/* median cut info *\/$/;"	s	file:
median	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/assign/median.c	/^void      median(graph, vals, nvtxs, active, goal, using_vwgts, sets)$/;"	f
median_assign	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/assign/median.c	/^void      median_assign(graph, vals, nvtxs, goal, using_vwgts, sets,$/;"	f
median_time	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/timing.c	/^double    median_time = 0;$/;"	v
mem_wgt	driver/dr_const.h	/^  float    mem_wgt;	\/* the memory weight associated with the elem *\/$/;"	m	struct:Element_Description
mem_wgt	driver_old/dr_const.h	/^  float    mem_wgt;	\/* the memory weight associated with the elem *\/$/;"	m	struct:Element_Description
mem_wgt	fdriver/fdr_const.f90	/^  real(Zoltan_FLOAT)  :: mem_wgt /;"	k	type:ELEM_INFO
mem_wgt	fdriver_old/lb_user_const.f90	/^  real(LB_FLOAT)  :: mem_wgt /;"	k	type:ELEM_INFO
memory	zz/zz_const.h	/^  int memory;            \/* if (nnodes == 1) specify memory of the processor *\/$/;"	m	struct:__anon37
merge	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/mergesort.c	/^static void merge(double *vals, int *indices, int length1, int length2, int *space)$/;"	f	file:
merge_assignments	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/assign/merge_assign.c	/^void      merge_assignments(assignment, subassign, subsets, subnvtxs, loc2glob)$/;"	f
merge_gids	zz/zz_gen_files.c	/^static int merge_gids(ZZ *zz, ZOLTAN_ID_PTR *merged_egids, int size_merged,$/;"	f	file:
merge_goals	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/merge_goals.c	/^void      merge_goals(goal, merged_goal, set_info, subsets, nsets,$/;"	f
mergesort	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/mergesort.c	/^void      mergesort(double *vals, int nvals, int *indices, int *space)$/;"	f
mesh	ZoltanComponent/TestComponents/Mesh.h	/^    MESH_INFO mesh ;$/;"	m	class:ZoltanTestSpace::Mesh
message	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/smalloc.c	/^void message(char *msg, size_t n, FILE *ofile)$/;"	f
message_receive	lb/low_mem_lb_migrate.c	/^static int message_receive(MPI_Comm comm, int src, char *buf, int len)$/;"	f	file:
message_send	lb/low_mem_lb_migrate.c	/^static int message_send(MPI_Comm comm, int dest, char *buf, int len)$/;"	f	file:
message_wait	lb/low_mem_lb_migrate.c	/^static int message_wait(int len)$/;"	f	file:
method	driver/dr_const.h	/^  char   method[32];                 \/* this is the method string that will$/;"	m	struct:Problem_Description
method	driver_old/dr_const.h	/^  char   method[32];                 \/* this is the method string that will$/;"	m	struct:Problem_Description
method	fdriver/fdr_const.f90	/^  character(len=32) :: method /;"	k	type:PROB_INFO
method	fdriver_old/fdr_const.f90	/^  character(len=32) :: method /;"	k	type:PROB_INFO
method	order/order_const.h	/^  char method[MAX_PARAM_STRING_LEN+1];	   \/* In: Ordering method. *\/$/;"	m	struct:Zoltan_Order_Options
method	order/order_const.h	/^  char method[MAX_PARAM_STRING_LEN+1]; \/* Ordering method used *\/$/;"	m	struct:Zoltan_Order_Struct
migrate_elem_size	driver/dr_migrate.c	/^int migrate_elem_size(void *data, int num_gid_entries, int num_lid_entries,$/;"	f
migrate_elem_size	driver/dr_migrateCPP.cpp	/^int migrate_elem_size(void *data, int num_gid_entries, int num_lid_entries,$/;"	f
migrate_elem_size	driver_old/dr_migrate.c	/^LB_OBJ_SIZE_FN migrate_elem_size;$/;"	v
migrate_elem_size	driver_old/dr_migrate.c	/^int migrate_elem_size(void *data, int num_gid_entries, int num_lid_entries,$/;"	f
migrate_elem_size	fdriver/fdr_migrate.f90	/^integer(Zoltan_INT) function migrate_elem_size(/;"	f	module:dr_migrate
migrate_elem_size	fdriver_old/fdr_migrate.f90	/^integer(LB_INT) function migrate_elem_size(/;"	f	module:dr_migrate
migrate_elem_size_multi	driver/dr_migrate.c	/^void migrate_elem_size_multi($/;"	f
migrate_elem_size_multi	driver/dr_migrateCPP.cpp	/^void migrate_elem_size_multi($/;"	f
migrate_elem_size_multi	fdriver/fdr_migrate.f90	/^subroutine migrate_elem_size_multi(/;"	s	module:dr_migrate
migrate_elements	driver/dr_migrate.c	/^int migrate_elements($/;"	f
migrate_elements	driver/dr_migrateCPP.cpp	/^int migrate_elements($/;"	f
migrate_elements	driver_old/dr_migrate.c	/^int migrate_elements($/;"	f
migrate_elements	fdriver/fdr_migrate.f90	/^logical function migrate_elements(/;"	f	module:dr_migrate
migrate_elements	fdriver_old/fdr_migrate.f90	/^logical function migrate_elements(/;"	f	module:dr_migrate
migrate_pack_elem	driver/dr_migrate.c	/^ZOLTAN_PACK_OBJ_FN migrate_pack_elem;$/;"	v
migrate_pack_elem	driver/dr_migrate.c	/^void migrate_pack_elem(void *data, int num_gid_entries, int num_lid_entries,$/;"	f
migrate_pack_elem	driver/dr_migrateCPP.cpp	/^ZOLTAN_PACK_OBJ_FN migrate_pack_elem;$/;"	v
migrate_pack_elem	driver/dr_migrateCPP.cpp	/^void migrate_pack_elem(void *data, int num_gid_entries, int num_lid_entries,$/;"	f
migrate_pack_elem	driver_old/dr_migrate.c	/^LB_PACK_OBJ_FN migrate_pack_elem;$/;"	v
migrate_pack_elem	driver_old/dr_migrate.c	/^void migrate_pack_elem(void *data, int num_gid_entries, int num_lid_entries,$/;"	f
migrate_pack_elem	fdriver/fdr_migrate.f90	/^subroutine migrate_pack_elem(/;"	s	module:dr_migrate
migrate_pack_elem	fdriver_old/fdr_migrate.f90	/^subroutine migrate_pack_elem(/;"	s	module:dr_migrate
migrate_pack_elem_multi	driver/dr_migrate.c	/^ZOLTAN_PACK_OBJ_MULTI_FN migrate_pack_elem_multi;$/;"	v
migrate_pack_elem_multi	driver/dr_migrate.c	/^void migrate_pack_elem_multi($/;"	f
migrate_pack_elem_multi	driver/dr_migrateCPP.cpp	/^ZOLTAN_PACK_OBJ_MULTI_FN migrate_pack_elem_multi;$/;"	v
migrate_pack_elem_multi	driver/dr_migrateCPP.cpp	/^void migrate_pack_elem_multi($/;"	f
migrate_pack_elem_multi	fdriver/fdr_migrate.f90	/^subroutine migrate_pack_elem_multi(/;"	s	module:dr_migrate
migrate_post_process	driver/dr_migrate.c	/^ZOLTAN_POST_MIGRATE_PP_FN migrate_post_process;$/;"	v
migrate_post_process	driver/dr_migrate.c	/^void migrate_post_process(void *data, int num_gid_entries, int num_lid_entries,$/;"	f
migrate_post_process	driver/dr_migrateCPP.cpp	/^ZOLTAN_POST_MIGRATE_PP_FN migrate_post_process;$/;"	v
migrate_post_process	driver/dr_migrateCPP.cpp	/^void migrate_post_process(void *data, int num_gid_entries, int num_lid_entries,$/;"	f
migrate_post_process	driver_old/dr_migrate.c	/^LB_POST_MIGRATE_FN migrate_post_process;$/;"	v
migrate_post_process	driver_old/dr_migrate.c	/^void migrate_post_process(void *data, int num_gid_entries, int num_lid_entries,$/;"	f
migrate_post_process	fdriver/fdr_migrate.f90	/^subroutine migrate_post_process(/;"	s	module:dr_migrate
migrate_post_process	fdriver_old/fdr_migrate.f90	/^subroutine migrate_post_process(/;"	s	module:dr_migrate
migrate_pre_process	driver/dr_migrate.c	/^ZOLTAN_PRE_MIGRATE_PP_FN migrate_pre_process;$/;"	v
migrate_pre_process	driver/dr_migrate.c	/^void migrate_pre_process(void *data, int num_gid_entries, int num_lid_entries, $/;"	f
migrate_pre_process	driver/dr_migrateCPP.cpp	/^ZOLTAN_PRE_MIGRATE_PP_FN migrate_pre_process;$/;"	v
migrate_pre_process	driver/dr_migrateCPP.cpp	/^void migrate_pre_process(void *data, int num_gid_entries, int num_lid_entries, $/;"	f
migrate_pre_process	driver_old/dr_migrate.c	/^LB_PRE_MIGRATE_FN migrate_pre_process;$/;"	v
migrate_pre_process	driver_old/dr_migrate.c	/^void migrate_pre_process(void *data, int num_gid_entries, int num_lid_entries, $/;"	f
migrate_pre_process	fdriver/fdr_migrate.f90	/^subroutine migrate_pre_process(/;"	s	module:dr_migrate
migrate_pre_process	fdriver_old/fdr_migrate.f90	/^subroutine migrate_pre_process(/;"	s	module:dr_migrate
migrate_unpack_elem	driver/dr_migrate.c	/^ZOLTAN_UNPACK_OBJ_FN migrate_unpack_elem;$/;"	v
migrate_unpack_elem	driver/dr_migrate.c	/^void migrate_unpack_elem(void *data, int num_gid_entries, ZOLTAN_ID_PTR elem_gid, $/;"	f
migrate_unpack_elem	driver/dr_migrateCPP.cpp	/^ZOLTAN_UNPACK_OBJ_FN migrate_unpack_elem;$/;"	v
migrate_unpack_elem	driver/dr_migrateCPP.cpp	/^void migrate_unpack_elem(void *data, int num_gid_entries, ZOLTAN_ID_PTR elem_gid, $/;"	f
migrate_unpack_elem	driver_old/dr_migrate.c	/^LB_UNPACK_OBJ_FN migrate_unpack_elem;$/;"	v
migrate_unpack_elem	driver_old/dr_migrate.c	/^void migrate_unpack_elem(void *data, int num_gid_entries, LB_ID_PTR elem_gid, $/;"	f
migrate_unpack_elem	fdriver/fdr_migrate.f90	/^subroutine migrate_unpack_elem(/;"	s	module:dr_migrate
migrate_unpack_elem	fdriver_old/fdr_migrate.f90	/^subroutine migrate_unpack_elem(/;"	s	module:dr_migrate
migrate_unpack_elem_multi	driver/dr_migrate.c	/^ZOLTAN_UNPACK_OBJ_MULTI_FN migrate_unpack_elem_multi;$/;"	v
migrate_unpack_elem_multi	driver/dr_migrate.c	/^void migrate_unpack_elem_multi($/;"	f
migrate_unpack_elem_multi	driver/dr_migrateCPP.cpp	/^ZOLTAN_UNPACK_OBJ_MULTI_FN migrate_unpack_elem_multi;$/;"	v
migrate_unpack_elem_multi	driver/dr_migrateCPP.cpp	/^void migrate_unpack_elem_multi($/;"	f
migrate_unpack_elem_multi	fdriver/fdr_migrate.f90	/^subroutine migrate_unpack_elem_multi(/;"	s	module:dr_migrate
migrated	hier/hier.h	/^  char *migrated;                    \/* array of flags indicating whether$/;"	m	struct:HierPartParamsStruct
migrated_in_data	hier/hier.h	/^  void **migrated_in_data;           \/* data migrated in, parallel array to$/;"	m	struct:HierPartParamsStruct
migrated_in_gids	hier/hier.h	/^  ZOLTAN_ID_PTR migrated_in_gids;    \/* ordered array of gids migrated in *\/$/;"	m	struct:HierPartParamsStruct
migrated_in_index_of_gid	hier/hier.c	/^static int migrated_in_index_of_gid(HierPartParams *hpp, ZOLTAN_ID_TYPE gid) {$/;"	f	file:
min	matrix/common_sort.c	213;"	d	file:
min	oct/migoct.c	/^  double min[3];$/;"	m	struct:__anon30	file:
min	oct/octant_const.h	/^  COORD  min;                       \/* minimum bounds of an octant          *\/$/;"	m	struct:_Octant
min	oct/octree_const.h	/^  COORD min;$/;"	m	struct:__anon31
min	rcb/inertial2d.c	33;"	d	file:
min	rcb/inertial3d.c	33;"	d	file:
min	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/defs.h	2;"	d
min	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	148;"	d
min	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	148;"	d
mips	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	194;"	d
mips	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	194;"	d
mkeigvecs	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/eigen/mkeigvecs.c	/^void      mkeigvecs(scanlist, lambda, bound, index, bj, d, Sres_max,$/;"	f
mkscanlist	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/eigen/mkscanlist.c	/^struct scanlink *mkscanlist(depth)$/;"	f
mkvec	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/mkvec.c	/^double   *mkvec(int nl, int nh)$/;"	f
mkvec_float	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/mkvec.c	/^float   *mkvec_float(int nl, int nh)$/;"	f
mkvec_ret	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/mkvec.c	/^double   *mkvec_ret(int nl, int nh)$/;"	f
mkvec_ret_float	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/mkvec.c	/^float   *mkvec_ret_float(int nl, int nh)$/;"	f
mm_clear_typecode	driver/dr_mmio.h	72;"	d
mm_initialize_typecode	driver/dr_mmio.h	75;"	d
mm_is_array	driver/dr_mmio.h	38;"	d
mm_is_complex	driver/dr_mmio.h	40;"	d
mm_is_coordinate	driver/dr_mmio.h	36;"	d
mm_is_dense	driver/dr_mmio.h	37;"	d
mm_is_general	driver/dr_mmio.h	46;"	d
mm_is_hermitian	driver/dr_mmio.h	48;"	d
mm_is_integer	driver/dr_mmio.h	43;"	d
mm_is_matrix	driver/dr_mmio.h	33;"	d
mm_is_pattern	driver/dr_mmio.h	42;"	d
mm_is_real	driver/dr_mmio.h	41;"	d
mm_is_skew	driver/dr_mmio.h	47;"	d
mm_is_sparse	driver/dr_mmio.h	35;"	d
mm_is_symmetric	driver/dr_mmio.h	45;"	d
mm_is_valid	driver/dr_mmio.c	/^int mm_is_valid(MM_typecode matcode)$/;"	f
mm_out	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/graph/mm_out.c	/^void      mm_out(graph, nvtxs, using_ewgts, tag, file_name)$/;"	f
mm_read_banner	driver/dr_mmio.c	/^int mm_read_banner(ZOLTAN_FILE* f, MM_typecode *matcode)$/;"	f
mm_read_mtx_array_size	driver/dr_mmio.c	/^int mm_read_mtx_array_size(ZOLTAN_FILE* f, int *M, int *N)$/;"	f
mm_read_mtx_crd	driver/dr_mmio.c	/^int mm_read_mtx_crd(char *fname, int *M, int *N, int *nz, int **I, int **J,$/;"	f
mm_read_mtx_crd_data	driver/dr_mmio.c	/^int mm_read_mtx_crd_data(ZOLTAN_FILE* f, int M, int N, int nz, int I[], int J[],$/;"	f
mm_read_mtx_crd_entry	driver/dr_mmio.c	/^int mm_read_mtx_crd_entry(ZOLTAN_FILE* f, int *I, int *J,$/;"	f
mm_read_mtx_crd_size	driver/dr_mmio.c	/^int mm_read_mtx_crd_size(ZOLTAN_FILE* f, int *M, int *N, int *nz )$/;"	f
mm_read_unsymmetric_sparse	driver/dr_mmio.c	/^int mm_read_unsymmetric_sparse(const char *fname, int *M_, int *N_, int *nz_,$/;"	f
mm_set_array	driver/dr_mmio.h	57;"	d
mm_set_complex	driver/dr_mmio.h	61;"	d
mm_set_coordinate	driver/dr_mmio.h	56;"	d
mm_set_dense	driver/dr_mmio.h	58;"	d
mm_set_general	driver/dr_mmio.h	68;"	d
mm_set_hermitian	driver/dr_mmio.h	70;"	d
mm_set_integer	driver/dr_mmio.h	64;"	d
mm_set_matrix	driver/dr_mmio.h	55;"	d
mm_set_pattern	driver/dr_mmio.h	63;"	d
mm_set_real	driver/dr_mmio.h	62;"	d
mm_set_skew	driver/dr_mmio.h	69;"	d
mm_set_sparse	driver/dr_mmio.h	59;"	d
mm_set_symmetric	driver/dr_mmio.h	67;"	d
mm_typecode_to_str	driver/dr_mmio.c	/^char  *mm_typecode_to_str(MM_typecode matcode)$/;"	f
mm_write_banner	driver/dr_mmio.c	/^int mm_write_banner(FILE *f, MM_typecode matcode)$/;"	f
mm_write_mtx_array_size	driver/dr_mmio.c	/^int mm_write_mtx_array_size(FILE *f, int M, int N)$/;"	f
mm_write_mtx_crd	driver/dr_mmio.c	/^int mm_write_mtx_crd(char fname[], int M, int N, int nz, int I[], int J[],$/;"	f
mm_write_mtx_crd_size	driver/dr_mmio.c	/^int mm_write_mtx_crd_size(FILE *f, int M, int N, int nz)$/;"	f
mminfo	fdriver/mmio.f	/^      subroutine mminfo(/;"	s
mmread	fdriver/mmio.f	/^      subroutine mmread(/;"	s
mmwrite	fdriver/mmio.f	/^      subroutine mmwrite(/;"	s
monitor_memory	ha/ha_drum.h	/^  int monitor_memory;                \/* should DRUM monitor memory usage? *\/$/;"	m	struct:Zoltan_Drum_Struct
monitoring_frequency	ha/ha_drum.h	/^  int monitoring_frequency;          \/* DRUM monitoring frequency *\/$/;"	m	struct:Zoltan_Drum_Struct
move_all_p	par/par_median_randomized.c	/^static int move_all_p(double *vals, int len, double p, int *idxList)$/;"	f	file:
movebilist	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klspiff/bilistops.c	/^void      movebilist(lptr, oldlist, newlist)$/;"	f
movevtxs	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/bpmatch/movevtxs.c	/^void      movevtxs(graph, nvtxs, nsets, dist, indices, vals, startvtx, sets,$/;"	f
mpi_h	fdriver/mpi_h.f	/^      module mpi_h$/;"	m
mpi_h	fdriver_old/mpi_h.f	/^      module mpi_h$/;"	m
mpir_getarg	fdriver/farg_nagf95.f	/^      subroutine mpir_getarg(/;"	s
mpir_getarg	fdriver/farg_typical.f	/^      subroutine mpir_getarg(/;"	s
mpir_getarg	fdriver_old/farg_nagf90.f	/^      subroutine mpir_getarg(/;"	s
mpir_getarg	fdriver_old/farg_nagf95.f	/^      subroutine mpir_getarg(/;"	s
mpir_getarg	fdriver_old/farg_nas.f	/^      subroutine mpir_getarg(/;"	s
mpir_getarg	fdriver_old/farg_typical.f	/^      subroutine mpir_getarg(/;"	s
mpir_iargc	fdriver/farg_nagf95.f	/^      integer function mpir_iargc(/;"	f
mpir_iargc	fdriver/farg_typical.f	/^      integer function mpir_iargc(/;"	f
mpir_iargc	fdriver_old/farg_nagf90.f	/^      integer function mpir_iargc(/;"	f
mpir_iargc	fdriver_old/farg_nagf95.f	/^      integer function mpir_iargc(/;"	f
mpir_iargc	fdriver_old/farg_nas.f	/^      integer function mpir_iargc(/;"	f
mpir_iargc	fdriver_old/farg_typical.f	/^      integer function mpir_iargc(/;"	f
msgBuf	par/par_median_randomized.c	/^static double *msgBuf=NULL;$/;"	v	file:
msg_abort	oct/msg.c	/^static void msg_abort(MPI_Comm communicator, int proc, int errcode)$/;"	f	file:
msg_data	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^struct msg_data{$/;"	s
msolve_	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/msolve.c	/^int       msolve_(lnvtxs, x, y, dA, vwsqrt, work)$/;"	f
mtx	graph/graph.h	/^  Zoltan_matrix_2d mtx;$/;"	m	struct:ZG_
mtx	matrix/matrix.h	/^  Zoltan_matrix   mtx;          \/* The "matrix" *\/$/;"	m	struct:Zoltan_matrix_2d_
myProc	phg/phg_comm.h	/^  int myProc;     \/* my processor's rank within Communicator. *\/$/;"	m	struct:PHGCommStruct
myProc_x	phg/phg_comm.h	/^  int myProc_x;   \/* my processor's row block number in [0,nProc_x-1] *\/$/;"	m	struct:PHGCommStruct
myProc_y	phg/phg_comm.h	/^  int myProc_y;   \/* my processor's column block number in [0,nProc_y-1] *\/$/;"	m	struct:PHGCommStruct
my_get_processor_name_	fdriver/mpistring.c	/^void my_get_processor_name_(int *int_name, int *namelen, int *ierr)$/;"	f
my_get_processor_name_	fdriver_old/mpistring.c	/^void my_get_processor_name_(int *int_name, int *namelen, int *ierr)$/;"	f
my_gid	parmetis/third_library_tools.h	/^  ZOLTAN_ID_PTR my_gid;  \/* Pointer to the Global id of local vtx *\/$/;"	m	struct:Edge_Info
my_gno	parmetis/third_library_tools.h	/^  int my_gno;        \/* Global number of local vtx *\/$/;"	m	struct:Edge_Info
my_index	ZoltanComponent/CCA_Wrapper/BaseLB.h	/^    int my_index, rank, master ;$/;"	m	class:ZoltanSpace::BaseLB
my_lbs	ZoltanComponent/CCA_Wrapper/PartitionerFactory.h	/^    ::std::vector< ::LoadPartitionerSpace::LoadBalancer * > my_lbs ;$/;"	m	class:ZoltanSpace::PartitionerFactory_JR
my_part	driver/dr_const.h	/^  int      my_part;     \/* Partition to which the element is assigned; $/;"	m	struct:Element_Description
my_part	fdriver/fdr_const.f90	/^  integer(Zoltan_INT) :: my_part /;"	k	type:ELEM_INFO
my_pin	driver/dr_hg_io.c	/^static int my_pin(int eid, int vid, int proc,$/;"	f	file:
my_proc	Utilities/DDirectory/DD.h	/^  int my_proc;            \/* My identity in MPI Comm                *\/$/;"	m	struct:Zoltan_DD_Struct
my_proc_list	ZoltanComponent/CCA_Wrapper/BaseLB.h	/^    int *my_proc_list ;$/;"	m	class:ZoltanSpace::BaseLB
my_sum_weight	reftree/reftree.h	/^   float *my_sum_weight; \/* sum of weights of nodes assigned to this proc *\/$/;"	m	struct:Zoltan_Reftree_Struct
my_vtx	driver/dr_hg_io.c	/^static int my_vtx(int proc, int vtx, int mymin, int mymax,$/;"	f	file:
my_zz	ZoltanComponent/CCA_Wrapper/BaseLB.h	/^    struct Zoltan_Struct *my_zz ;$/;"	m	class:ZoltanSpace::BaseLB	typeref:struct:ZoltanSpace::BaseLB::Zoltan_Struct
mylog2	parmetis/parmetis_interface.c	/^int mylog2(int x)$/;"	f
myname	ZoltanComponent/CCA_Wrapper/HSFC.h	/^    string myname ;$/;"	m	class:ZoltanSpace::HSFC_LB
myname	ZoltanComponent/CCA_Wrapper/OctTree.h	/^    string myname ;$/;"	m	class:ZoltanSpace::OctTree_LB
myname	ZoltanComponent/CCA_Wrapper/ParMetis.h	/^    string myname ;$/;"	m	class:ZoltanSpace::ParMetis_LB
myname	ZoltanComponent/CCA_Wrapper/RCB.h	/^    string myname ;$/;"	m	class:ZoltanSpace::RCB_LB
myname	ZoltanComponent/CCA_Wrapper/RIB.h	/^    string myname ;$/;"	m	class:ZoltanSpace::RIB_LB
myread	fdriver/fdr_param_file.f90	/^subroutine myread(/;"	s	module:dr_param_file
n	zz/zz_heap.h	/^   int    n;$/;"	m	struct:__anon36
nCand	phg/phg.h	/^  int nCand;                     \/* Maximum number of candidates per round;$/;"	m	struct:PHGPartParamsStruct
nDim	phg/phg_hypergraph.h	/^  int nDim;         \/* number of coordinate dimensions for a vertex *\/$/;"	m	struct:__anon38
nEdge	phg/phg_hypergraph.h	/^  int nEdge;            \/* number of hyperedges on this processor *\/$/;"	m	struct:__anon38
nHedges	phg/phg_hypergraph.h	/^  int nHedges;              \/* # of hyperedges *\/$/;"	m	struct:Zoltan_HGraph
nHedges	phg/phg_lookup.h	/^  int           nHedges;    \/* number of (partial) hyperedges *\/$/;"	m	struct:_myPin
nObj	phg/phg_hypergraph.h	/^  int nObj;                 \/* Number of on-processor objects. *\/$/;"	m	struct:Zoltan_HGraph
nPins	matrix/matrix.h	/^  int           nPins;         \/* Local number of Pins *\/$/;"	m	struct:Zoltan_matrix_
nPins	phg/phg_hypergraph.h	/^  int nPins;                \/* total number of pins in listed edges *\/$/;"	m	struct:Zoltan_HGraph
nPins	phg/phg_hypergraph.h	/^  int nPins;            \/* number of pins (nonzeros) on this processor *\/$/;"	m	struct:__anon38
nProc	phg/phg_comm.h	/^  int nProc;      \/* number of proc in Communicator.$/;"	m	struct:PHGCommStruct
nProc_x	phg/phg_comm.h	/^  int nProc_x;    \/* number of processors in x-direction of 2D data distrib.  *\/$/;"	m	struct:PHGCommStruct
nProc_x_req	phg/phg.h	/^  int nProc_x_req;  \/* user's request for nProc_x (PHG_NPROC_X)$/;"	m	struct:PHGPartParamsStruct
nProc_y	phg/phg_comm.h	/^  int nProc_y;    \/* number of processors in y-direction of 2D data distrib.  *\/$/;"	m	struct:PHGCommStruct
nProc_y_req	phg/phg.h	/^  int nProc_y_req;  \/* user's request for nProc_y (PHG_NPROC_Y)$/;"	m	struct:PHGPartParamsStruct
nRecv_GNOs	phg/phg_hypergraph.h	/^  int nRecv_GNOs;           \/* Number of GNOs in Recv_GNOs. *\/$/;"	m	struct:Zoltan_HGraph
nRepartEdge	phg/phg_hypergraph.h	/^  int nRepartEdge;      \/* number of repartition edges added $/;"	m	struct:__anon38
nRepartPin	phg/phg_hypergraph.h	/^  int nRepartPin;       \/* number of repartition pins added $/;"	m	struct:__anon38
nRepartVtx	phg/phg_hypergraph.h	/^  int nRepartVtx;       \/* number of repartition vertices added $/;"	m	struct:__anon38
nVtx	phg/phg_hypergraph.h	/^  int nVtx;             \/* number of vertices on this processor *\/$/;"	m	struct:__anon38
nY	matrix/matrix.h	/^  int           nY;            \/* Local number in Y dimension *\/$/;"	m	struct:Zoltan_matrix_
nY_ori	matrix/matrix.h	/^  int           nY_ori;        \/* nY in the initial (user ?) distribution *\/$/;"	m	struct:Zoltan_matrix_
nadj	driver/dr_const.h	/^  int      nadj;	\/* number of entries in adj *\/$/;"	m	struct:Element_Description
nadj	driver_old/dr_const.h	/^  int      nadj;	\/* number of entries in adj *\/$/;"	m	struct:Element_Description
nadj	fdriver/fdr_const.f90	/^  integer(Zoltan_INT) :: nadj /;"	k	type:ELEM_INFO
nadj	fdriver_old/lb_user_const.f90	/^  integer(LB_INT) :: nadj /;"	k	type:ELEM_INFO
nadj	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  long     nadj;$/;"	m	struct:Graph_Description
name	params/params_const.h	/^  char *name;			\/* Parameter variable name (all CAPS) *\/$/;"	m	struct:Param_Vars
name	params/params_const.h	/^  char *name;$/;"	m	struct:Param_List
name	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^	char *name;$/;"	m	struct:Namelist
name	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^	char *name;$/;"	m	struct:Vardesc
name	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^	char *name;$/;"	m	struct:Namelist
name	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^	char *name;$/;"	m	struct:Vardesc
namelen	fdriver/fdr_main.f90	/^  integer(Zoltan_INT) :: namelen$/;"	v	program:fdriver
namelen	fdriver_old/fdr_main.f90	/^  integer(LB_INT) :: namelen$/;"	v	program:fdriver
nbor_proc	parmetis/third_library_tools.h	/^  int nbor_proc;     \/* Proc id for the neighboring proc *\/$/;"	m	struct:Edge_Info
nbr_blocks	order/order_const.h	/^  int nbr_blocks;               \/* Out: number of ordering blocks *\/$/;"	m	struct:Zoltan_Order_Struct
nbr_leaves	order/order_const.h	/^  int nbr_leaves;               \/* Number of leaves *\/$/;"	m	struct:Zoltan_Order_Struct
nbr_objects	order/order_const.h	/^  int nbr_objects;              \/* # of objects (local) *\/$/;"	m	struct:Zoltan_Order_Struct
ncoupled	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/bpmatch/movevtxs.c	/^static int ncoupled = 0;$/;"	v	file:
ndimension	hsfc/hsfc.h	/^   int        ndimension;        \/* number of dimensions in problem (2 or 3) *\/$/;"	m	struct:HSFC_Data
ndims	hier/hier.h	/^  int ndims;                         \/* number of dimensions for geom data *\/$/;"	m	struct:HierPartParamsStruct
ndims	parmetis/third_library.h	/^  int ndims;                            \/* Number of dimensions *\/$/;"	m	struct:ZOLTAN_Third_Geom_
ndims	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^	short ndims;		\/* log of # processors if hypercube *\/$/;"	m	struct:set_info
ndims	zz/zz_const.h	/^  int ndims;           \/* Number of dimensions of the mesh *\/$/;"	m	struct:__anon37
ndot	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_loadbal.c	/^  int ndot;             \/* Length of x, y, z, and part (== # of elements) *\/$/;"	m	struct:__anon9	file:
necmap	driver/dr_const.h	/^  int     necmap;               \/* number of elemental communication maps.   *\/$/;"	m	struct:Mesh_Description
necmap	driver_old/dr_const.h	/^  int     necmap;               \/* number of elemental communication maps.   *\/$/;"	m	struct:Mesh_Description
necmap	fdriver/fdr_const.f90	/^  integer(Zoltan_INT) :: necmap /;"	k	type:MESH_INFO
necmap	fdriver_old/lb_user_const.f90	/^  integer(LB_INT) :: necmap /;"	k	type:MESH_INFO
nedges	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^	int nedges;		\/* number of neighbors of vertex in subgraph *\/$/;"	m	struct:vtx_data
needfree	order/order_const.h	/^  int needfree;$/;"	m	struct:Zoltan_Order_Struct
neigh	reftree/reftree_coarse_path.c	/^static int ***neigh;$/;"	v	file:
neigh_dim	reftree/reftree_coarse_path.c	/^static int **neigh_dim;$/;"	v	file:
neigh_id	driver/dr_maps.c	/^  int *neigh_id;$/;"	m	struct:map_list_head	file:
neigh_id	driver/dr_mapsCPP.cpp	/^  int *neigh_id;$/;"	m	struct:map_list_head	file:
neigh_id	driver_old/dr_maps.c	/^  int *neigh_id;$/;"	m	struct:map_list_head	file:
neigh_id	fdriver/fdr_chaco_io.f90	/^  integer(Zoltan_INT), pointer :: neigh_id(/;"	k	type:map_list_head
neigh_id	fdriver_old/fdr_chaco_io.f90	/^  integer(LB_INT), pointer :: neigh_id(/;"	k	type:map_list_head
newProc	oct/octant_const.h	/^  int newProc;$/;"	m	struct:Region_Node
newVCycle	phg/phg_Vcycle.c	/^static VCycle *newVCycle(ZZ *zz, HGraph *hg, Partition part, VCycle *finer,$/;"	f	file:
new_edges	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^	struct edgeslist *new_edges;	\/* list of new edges *\/$/;"	m	struct:connect_data	typeref:struct:connect_data::edgeslist
new_val	params/params_const.h	/^  char *new_val;$/;"	m	struct:Param_List
newpid	oct/migoct.c	/^  int     newpid;             \/* New pid for child or parent *\/$/;"	m	struct:__anon29	file:
newptr	oct/migoct.c	/^  pOctant newptr;             \/* New pointer for child or parent *\/$/;"	m	struct:__anon29	file:
next	Utilities/DDirectory/DD.h	/^   struct DD_Node  *next;       \/* Next DD_Node in linked list or NULL   *\/$/;"	m	struct:DD_Node	typeref:struct:DD_Node::DD_Node
next	Utilities/Memory/mem.c	/^  struct malloc_debug_data *next;	\/* pointer to next element *\/$/;"	m	struct:malloc_debug_data	typeref:struct:malloc_debug_data::malloc_debug_data	file:
next	coloring/g2l_hash.h	/^    struct G2L_Hash_Node * next;$/;"	m	struct:G2L_Hash_Node	typeref:struct:G2L_Hash_Node::G2L_Hash_Node
next	driver/dr_migrate.c	/^  int next;$/;"	m	struct:New_Elem_Hash_Node	file:
next	driver/dr_param_file.c	/^  struct zoltanParams_list_entry *next;$/;"	m	struct:zoltanParams_list_entry	typeref:struct:zoltanParams_list_entry::zoltanParams_list_entry	file:
next	driver/dr_param_fileCPP.cpp	/^  struct zoltanParams_list_entry *next;$/;"	m	struct:zoltanParams_list_entry	typeref:struct:zoltanParams_list_entry::zoltanParams_list_entry	file:
next	fdriver/fdr_param_file.f90	/^   type (ztnPrm_list_entry), pointer :: next$/;"	k	type:ztnPrm_list_entry
next	lb/lb_balance.c	/^  struct Hash_Node * next;$/;"	m	struct:Hash_Node	typeref:struct:Hash_Node::Hash_Node	file:
next	oct/octant_const.h	/^  struct Region_Node *next;           \/* pointer to next region in list     *\/$/;"	m	struct:Region_Node	typeref:struct:Region_Node::Region_Node
next	oct/rootlist_const.h	/^  struct RL_Node *next;                 \/* pointer to next node in the list  *\/$/;"	m	struct:RL_Node	typeref:struct:RL_Node::RL_Node
next	params/params_const.h	/^  struct Param_List *next;$/;"	m	struct:Param_List	typeref:struct:Param_List::Param_List
next	parmetis/third_library_tools.h	/^  struct Hash_Node * next;$/;"	m	struct:Hash_Node	typeref:struct:Hash_Node::Hash_Node
next	reftree/reftree.h	/^  struct Zoltan_Reftree_hash_node *next;$/;"	m	struct:Zoltan_Reftree_hash_node	typeref:struct:Zoltan_Reftree_hash_node::Zoltan_Reftree_hash_node
next	reftree/reftree.h	/^  struct Zoltan_Reftree_inthash_node *next;$/;"	m	struct:Zoltan_Reftree_inthash_node	typeref:struct:Zoltan_Reftree_inthash_node::Zoltan_Reftree_inthash_node
next	reftree/reftree_coarse_path.c	/^static int *prev, *next, *in, *out, *onpath;$/;"	v	file:
next	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/internal/internal.h	/^    struct bidint *next;$/;"	m	struct:bidint	typeref:struct:bidint::bidint
next	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^	 struct edgeslist *next; \/* pointer to next element in list *\/$/;"	m	struct:edgeslist	typeref:struct:edgeslist::edgeslist
next	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^	struct bilist *next;		\/* ptr to next element in list *\/$/;"	m	struct:bilist	typeref:struct:bilist::bilist
next	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^	struct flists *next;$/;"	m	struct:flists	typeref:struct:flists::flists
next	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^	struct ilists *next;$/;"	m	struct:ilists	typeref:struct:ilists::ilists
next	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^	struct list *next;		\/* ptr to next element in list *\/$/;"	m	struct:list	typeref:struct:list::list
next	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^	struct set_info *next;	\/* pointer to next element in linked list *\/$/;"	m	struct:set_info	typeref:struct:set_info::set_info
next	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/refine_map/refine_map.h	/^	struct refine_edata *next;	\/* pointer to next guy in list *\/$/;"	m	struct:refine_edata	typeref:struct:refine_edata::refine_edata
next	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/smalloc.c	/^  struct smalloc_debug_data *next;	\/* pointer to next element *\/$/;"	m	struct:smalloc_debug_data	typeref:struct:smalloc_debug_data::smalloc_debug_data	file:
next	zz/zz_map.c	/^  struct Zoltan_Map_Entry *next;$/;"	m	struct:Zoltan_Map_Entry	typeref:struct:Zoltan_Map_Entry::Zoltan_Map_Entry	file:
next_insert_index	hier/hier.c	/^static int next_insert_index(HierPartParams *hpp, int start) {$/;"	f	file:
next_line	driver/dr_hg_io.c	/^static char *next_line(char *buf, int max, char *str)$/;"	f	file:
next_query_2d	hsfc/hsfc_box_assign.c	/^static double next_query_2d (ZZ *zz, double *lquerybox, double *hquerybox,$/;"	f	file:
next_query_3d	hsfc/hsfc_box_assign.c	/^static double next_query_3d (ZZ *zz, double *lquerybox, double *hquerybox,$/;"	f	file:
nextlist	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^	struct lists *nextlist;		\/* next list header *\/$/;"	m	struct:lists	typeref:struct:lists::lists
nextmove	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/bpmatch/movevtxs.c	/^static void nextmove(nvtxs, nsets, vals, indices, startvtx, dist, sets,$/;"	f	file:
nextstr	driver/dr_hg_readfile.c	/^static int nextstr (ZOLTAN_FILE* f, char *string)$/;"	f	file:
nfree	Utilities/Memory/mem.c	/^static int nfree = 0;           \/* number of calls to free *\/$/;"	v	file:
nfree	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/smalloc.c	/^static int nfree = 0;		\/* number of calls to free *\/$/;"	v	file:
nhedges	driver/dr_const.h	/^  int     nhedges;              \/* # local edges (if cols: # pin vertices) *\/$/;"	m	struct:Mesh_Description
nhedges	fdriver/fdr_const.f90	/^  integer(Zoltan_INT) :: nhedges /;"	k	type:MESH_INFO
nindices_from	Utilities/Communication/comm.h	/^    int       nindices_from;$/;"	m	struct:Zoltan_Comm_Obj
nindices_to	Utilities/Communication/comm.h	/^    int       nindices_to;$/;"	m	struct:Zoltan_Comm_Obj
nlvtx	coloring/g2l_hash.h	/^    int   nlvtx;         \/* it is #localy owened vertices: simply equal to "baseend-base+1" *\/$/;"	m	struct:G2L_Hash
nmalloc	Utilities/Memory/mem.c	/^static int nmalloc = 0;         \/* number of calls to malloc *\/$/;"	v	file:
nmalloc	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/smalloc.c	/^static int nmalloc = 0;		\/* number of calls to malloc *\/$/;"	v	file:
nnborparts	include/zoltan_eval.h	/^  float nnborparts[EVAL_SIZE];  \/* The number of neighboring partitions *\/$/;"	m	struct:_eval_graph_struct
nnodes	zz/zz_const.h	/^  int nnodes;           \/* the number of subnodes *\/$/;"	m	struct:__anon37
no_sph	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int   no_sph;$/;"	m	struct:Problem_Description
nobj	include/zoltan_eval.h	/^  float nobj[EVAL_SIZE];        \/* number of partition vertices *\/$/;"	m	struct:_eval_balance_struct
nobj	include/zoltan_eval.h	/^  float nobj[EVAL_SIZE];        \/* number of partition vertices *\/$/;"	m	struct:_eval_graph_struct
nobj	include/zoltan_eval.h	/^  float nobj[EVAL_SIZE];        \/* number of partition vertices *\/$/;"	m	struct:_eval_hg_struct
nodal_dist	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_loadbal.c	/^int nodal_dist(LB_INFO_PTR lb,$/;"	f
node1	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/refine_map/refine_map.h	/^	short node1, node2;	\/* nodes in mesh connected by this edge *\/$/;"	m	struct:refine_edata
node2	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/refine_map/refine_map.h	/^	short node1, node2;	\/* nodes in mesh connected by this edge *\/$/;"	m	struct:refine_edata
node_size	Utilities/DDirectory/DD.h	/^  int node_size;          \/* Malloc'd to include GID & LID storage  *\/$/;"	m	struct:Zoltan_DD_Struct
nodes	coloring/g2l_hash.h	/^    G2LHashNode *nodes;$/;"	m	struct:G2L_Hash
norm	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/norm.c	/^double    norm(double *vec, int beg, int end)$/;"	f
norm_float	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/norm.c	/^double    norm_float(float *vec, int beg, int end)$/;"	f
normalize	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/normalize.c	/^double    normalize(double *vec, int beg, int end)$/;"	f
normalize_float	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/normalize.c	/^double    normalize_float(float *vec, int beg, int end)$/;"	f
notPartitionNumber	util/vtk_view.cpp	/^static int notPartitionNumber = -1;$/;"	v	file:
npid	oct/migreg.h	/^  int npid;$/;"	m	struct:__anon34
npid	oct/octant_const.h	/^  int npid;                         \/* where to migrate to                  *\/$/;"	m	struct:_Octant
npid	oct/octree_const.h	/^  int npid;$/;"	m	struct:__anon31
nproc	Utilities/DDirectory/DD.h	/^  int nproc;              \/* Number of processors in MPI Comm       *\/$/;"	m	struct:Zoltan_DD_Struct
nproc	Utilities/DDirectory/DD_Set_Neighbor_Hash_Fn2.c	/^  int nproc;$/;"	m	struct:dd_nh2_struct	file:
nrecvs	Utilities/Communication/comm.h	/^    int       nrecvs;		\/* number of msgs I'll recv (w\/o self_msg) *\/$/;"	m	struct:Zoltan_Comm_Obj
ns_list_len	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int     ns_list_len;$/;"	m	struct:Mesh_Description
nsends	Utilities/Communication/comm.h	/^    int       nsends;		\/* number of msgs I'll send (w\/o self_msg) *\/$/;"	m	struct:Zoltan_Comm_Obj
nsur_elem	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int     *nsur_elem;$/;"	m	struct:Graph_Description
nteger	fort/lbif.h	/^! KDD:  Such assignment works for integer, but for user-defined types$/;"	v
ntypes	zz/zz_const.h	/^  int ntypes;           \/* the number of different types of subnodes *\/$/;"	m	struct:__anon37
num	oct/migoct.c	/^  int num;           \/* requestor's number for this request *\/$/;"	m	struct:__anon28	file:
num	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^	int num;			\/* element number *\/$/;"	m	struct:list
num	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int   num;$/;"	m	struct:Sphere_Info
numChild	oct/octant_const.h	/^  int numChild;                     \/* number of children, 0 == terminal    *\/$/;"	m	struct:_Octant
numGIDs	phg/phg_lookup.h	/^  int numGIDs;$/;"	m	struct:_GID_lookup
numHEdges	phg/phg_hypergraph.h	/^  int *numHEdges;           \/* number of hyperedges containing object *\/$/;"	m	struct:Zoltan_HGraph
numNemesisFiles	util/vtk_view.cpp	/^static int numNemesisFiles = 0; $/;"	v	file:
numParts	phg/phg_tree.c	/^  int numParts;$/;"	m	struct:Zoltan_PHG_LB_Data_	file:
numPins	phg/phg_lookup.h	/^  int           numPins;    \/* sum of esizes array *\/$/;"	m	struct:_myPin
num_adj	hier/hier.c	/^  int num_adj;$/;"	m	struct:HierGIDInfo	file:
num_bor_elems	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int    *num_bor_elems;$/;"	m	struct:LB_Description
num_bor_nodes	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int     *num_bor_nodes;$/;"	m	struct:LB_Description
num_boundary	include/zoltan_eval.h	/^  float num_boundary[EVAL_SIZE];\/* the number of objects with a remote neighbor *\/$/;"	m	struct:_eval_graph_struct
num_boxes	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int num_boxes;     \/* added for cluster type machines *\/$/;"	m	struct:Machine_Description
num_child	reftree/reftree.h	/^   int num_child;        \/* number of children *\/$/;"	m	struct:Zoltan_Reftree_Struct
num_coarse_iter	phg/phg.h	/^  int num_coarse_iter;  \/* Number of coarse partitions to try on each proc. *\/$/;"	m	struct:PHGPartParamsStruct
num_dims	driver/dr_const.h	/^  int     num_dims;		\/* number of dimensions for the mesh         *\/$/;"	m	struct:Mesh_Description
num_dims	driver_old/dr_const.h	/^  int     num_dims;		\/* number of dimensions for the mesh         *\/$/;"	m	struct:Mesh_Description
num_dims	fdriver/fdr_const.f90	/^  integer(Zoltan_INT) :: num_dims /;"	k	type:MESH_INFO
num_dims	fdriver_old/lb_user_const.f90	/^  integer(LB_INT) :: num_dims /;"	k	type:MESH_INFO
num_dims	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int	  num_dims;$/;"	m	struct:Mesh_Description
num_dims	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int num_dims;$/;"	m	struct:Machine_Description
num_dsk_ctrlrs	driver/dr_input_const.h	/^  int     num_dsk_ctrlrs;            \/* The number of disk controllers.     *\/$/;"	m	struct:Parallel_IO
num_dsk_ctrlrs	driver_old/dr_input_const.h	/^  int     num_dsk_ctrlrs;            \/* The number of disk controllers.     *\/$/;"	m	struct:Parallel_IO
num_dsk_ctrlrs	fdriver/fdr_input.f90	/^  integer(Zoltan_INT) :: num_dsk_ctrlrs /;"	k	type:PARIO_INFO
num_dsk_ctrlrs	fdriver_old/fdr_input.f90	/^  integer(LB_INT) :: num_dsk_ctrlrs /;"	k	type:PARIO_INFO
num_ebw	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int   num_ebw;$/;"	m	struct:Weight_Description
num_edges	hier/hier.h	/^  int num_edges;                     \/* number of edges in graph rep *\/$/;"	m	struct:HierPartParamsStruct
num_edges	parmetis/third_library.h	/^  int num_edges;                        \/* Number of edges *\/$/;"	m	struct:ZOLTAN_Third_Graph_
num_el_blks	driver/dr_const.h	/^  int     num_el_blks;		\/* number of element blocks in the mesh      *\/$/;"	m	struct:Mesh_Description
num_el_blks	driver_old/dr_const.h	/^  int     num_el_blks;		\/* number of element blocks in the mesh      *\/$/;"	m	struct:Mesh_Description
num_el_blks	fdriver/fdr_const.f90	/^  integer(Zoltan_INT) :: num_el_blks /;"	k	type:MESH_INFO
num_el_blks	fdriver_old/lb_user_const.f90	/^  integer(LB_INT) :: num_el_blks /;"	k	type:MESH_INFO
num_el_blks	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int     num_el_blks;$/;"	m	struct:Mesh_Description
num_elem	reftree/reftree_coarse_path.c	/^static int *num_elem;$/;"	v	file:
num_elems	driver/dr_const.h	/^  int     num_elems;		\/* number of elements on this processor.     *\/$/;"	m	struct:Mesh_Description
num_elems	driver_old/dr_const.h	/^  int     num_elems;		\/* number of elements on this processor      *\/$/;"	m	struct:Mesh_Description
num_elems	fdriver/fdr_const.f90	/^  integer(Zoltan_INT) :: num_elems /;"	k	type:MESH_INFO
num_elems	fdriver_old/lb_user_const.f90	/^  integer(LB_INT) :: num_elems /;"	k	type:MESH_INFO
num_elems	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int     num_elems;$/;"	m	struct:Mesh_Description
num_exp	parmetis/third_library.h	/^  int  num_exp;$/;"	m	struct:ZOLTAN_Output_Part_
num_ext_nodes	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int     *num_ext_nodes;$/;"	m	struct:LB_Description
num_gid_entries	ZoltanComponent/TestComponents/Driver.h	/^    int Proc, Num_Procs, num_gid_entries, num_lid_entries ;$/;"	m	class:ZoltanTestSpace::Driver
num_gids_of_interest	hier/hier.h	/^  int num_gids_of_interest;          \/* num gids in gids_of_interest *\/$/;"	m	struct:HierPartParamsStruct
num_graph_edges_of_gid	hier/hier.c	/^static int num_graph_edges_of_gid(HierPartParams *hpp, ZOLTAN_ID_TYPE gid,$/;"	f	file:
num_groups	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int   num_groups;$/;"	m	struct:Problem_Description
num_imp	parmetis/third_library.h	/^  int  num_imp;$/;"	m	struct:ZOLTAN_Output_Part_
num_int_elems	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int    *num_int_elems;$/;"	m	struct:LB_Description
num_int_nodes	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int     *num_int_nodes;$/;"	m	struct:LB_Description
num_levels	driver/dr_param_file.c	/^static int num_levels = 0;$/;"	v	file:
num_levels	driver/dr_param_fileCPP.cpp	/^static int num_levels = 0;$/;"	v	file:
num_levels	fdriver/fdr_param_file.f90	/^integer :: num_levels /;"	v	module:dr_param_file
num_levels	hier/hier.h	/^  int num_levels;                    \/* number of levels of hierarchy to be$/;"	m	struct:HierPartParamsStruct
num_lid_entries	ZoltanComponent/TestComponents/Driver.h	/^    int Proc, Num_Procs, num_gid_entries, num_lid_entries ;$/;"	m	class:ZoltanTestSpace::Driver
num_migrated_in_gids	hier/hier.h	/^  int num_migrated_in_gids;          \/* number of gids migrated to this proc *\/$/;"	m	struct:HierPartParamsStruct
num_neigh	reftree/reftree_coarse_path.c	/^static int **num_neigh;$/;"	v	file:
num_node_sets	driver/dr_const.h	/^  int     num_node_sets;	\/* number of node sets in the mesh           *\/$/;"	m	struct:Mesh_Description
num_node_sets	driver_old/dr_const.h	/^  int     num_node_sets;	\/* number of node sets in the mesh           *\/$/;"	m	struct:Mesh_Description
num_node_sets	fdriver/fdr_const.f90	/^  integer(Zoltan_INT) :: num_node_sets /;"	k	type:MESH_INFO
num_node_sets	fdriver_old/lb_user_const.f90	/^  integer(LB_INT) :: num_node_sets /;"	k	type:MESH_INFO
num_node_sets	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int     num_node_sets;$/;"	m	struct:Mesh_Description
num_nodes	driver/dr_const.h	/^  int     num_nodes;		\/* number of nodes on this processor.        *\/$/;"	m	struct:Mesh_Description
num_nodes	driver_old/dr_const.h	/^  int     num_nodes;		\/* number of nodes on this processor         *\/$/;"	m	struct:Mesh_Description
num_nodes	fdriver/fdr_const.f90	/^  integer(Zoltan_INT) :: num_nodes /;"	k	type:MESH_INFO
num_nodes	fdriver_old/lb_user_const.f90	/^  integer(LB_INT) :: num_nodes /;"	k	type:MESH_INFO
num_nodes	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int	  num_nodes;$/;"	m	struct:Mesh_Description
num_obj	parmetis/third_library.h	/^  int num_obj;                          \/* Number of vertices *\/$/;"	m	struct:ZOLTAN_Third_Graph_
num_obj	reftree/reftree_coarse_path.c	/^static int num_obj, path_length;$/;"	v	file:
num_obj_orig	parmetis/third_library.h	/^  int num_obj_orig;                     \/* Number of vertices in original graph *\/$/;"	m	struct:ZOLTAN_Third_Graph_
num_params	driver/dr_const.h	/^  int num_params;                    \/* number of parameters read.           *\/$/;"	m	struct:Problem_Description
num_params	driver_old/dr_const.h	/^  int num_params;                    \/* number of parameters read.           *\/$/;"	m	struct:Problem_Description
num_params	fdriver/fdr_const.f90	/^  integer(Zoltan_INT) :: num_params /;"	k	type:PROB_INFO
num_params	fdriver_old/fdr_const.f90	/^  integer(LB_INT) :: num_params /;"	k	type:PROB_INFO
num_part	parmetis/third_library.h	/^  int num_part;$/;"	m	struct:ZOLTAN_Output_Order_
num_parts	hier/hier.h	/^  int num_parts;                     \/* number of partitions to compute *\/$/;"	m	struct:HierPartParamsStruct
num_procs	par/par_median_randomized.c	/^  int num_procs;$/;"	m	struct:_commStruct	file:
num_procs	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int num_procs;$/;"	m	struct:Machine_Description
num_sects	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int      num_sects;$/;"	m	struct:LB_Description
num_separators	order/order_const.h	/^  int  num_separators;          \/* Optional: # of separators. *\/$/;"	m	struct:Zoltan_Order_Struct
num_side_sets	driver/dr_const.h	/^  int     num_side_sets;	\/* number of side sets in the mesh           *\/$/;"	m	struct:Mesh_Description
num_side_sets	driver_old/dr_const.h	/^  int     num_side_sets;	\/* number of side sets in the mesh           *\/$/;"	m	struct:Mesh_Description
num_side_sets	fdriver/fdr_const.f90	/^  integer(Zoltan_INT) :: num_side_sets /;"	k	type:MESH_INFO
num_side_sets	fdriver_old/lb_user_const.f90	/^  integer(LB_INT) :: num_side_sets /;"	k	type:MESH_INFO
num_side_sets	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int     num_side_sets;$/;"	m	struct:Mesh_Description
num_vertex	reftree/reftree.h	/^   int num_vertex;       \/* the number of vertices in the corresponding$/;"	m	struct:Zoltan_Reftree_Struct
num_vertices	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int   num_vertices;$/;"	m	struct:Problem_Description
numbermatch	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_elem.c	/^int numbermatch(int* sidenodes, int i, int j, int k, int value )$/;"	f
numerote	phg/phg_tree.c	/^numerote(Zoltan_PHG_Tree *tree, int node, int part, int *partnumber)$/;"	f	file:
nvals	Utilities/Communication/comm.h	/^    int       nvals;		\/* number of values I own to start *\/$/;"	m	struct:Zoltan_Comm_Obj
nvals	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int    nvals;$/;"	m	struct:Weight_Description
nvals_recv	Utilities/Communication/comm.h	/^    int       nvals_recv;	\/* number of values I own after remapping *\/$/;"	m	struct:Zoltan_Comm_Obj
nvars	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^	int nvars;$/;"	m	struct:Namelist
nvars	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^	int nvars;$/;"	m	struct:Namelist
nway_kl	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klspiff/nway_kl.c	/^int       nway_kl(graph, nvtxs, buckets, listspace, tops, dvals, sets,$/;"	f
nway_kl_time	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/timing.c	/^double    nway_kl_time = 0;$/;"	v
nway_klv	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klvspiff/nway_klv.c	/^int       nway_klv(graph, nvtxs, lbuckets, rbuckets, llistspace, rlistspace,$/;"	f
nwgts	par/par_bisect.c	/^  int       nwgts;              \/* number of weights (per dot) *\/$/;"	m	struct:bisector	file:
nws_method	ha/ha_drum.h	/^  int nws_method;                    \/* what NWS method should DRUM use? *\/$/;"	m	struct:Zoltan_Drum_Struct
oacc	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^	char *oacc;$/;"	m	struct:__anon22
oacc	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^	char *oacc;$/;"	m	struct:__anon14
objGID	phg/phg_hypergraph.h	/^  ZOLTAN_ID_PTR objGID;     \/* user's object global ID *\/$/;"	m	struct:Zoltan_HGraph
objGNO	phg/phg_hypergraph.h	/^  int *objGNO;              \/* object global number *\/$/;"	m	struct:Zoltan_HGraph
objLID	phg/phg_hypergraph.h	/^  ZOLTAN_ID_PTR objLID;     \/* user's object local ID *\/$/;"	m	struct:Zoltan_HGraph
objWeight	phg/phg_hypergraph.h	/^  float *objWeight;         \/* weight *\/$/;"	m	struct:Zoltan_HGraph
objWeightDim	phg/phg_hypergraph.h	/^  int objWeightDim;         \/* Number of weights per object (incl ADD_OBJ_WEIGHT) *\/$/;"	m	struct:Zoltan_HGraph
obj_imbalance	include/zoltan_eval.h	/^  float obj_imbalance;          \/* vertex number imbalance *\/$/;"	m	struct:_eval_balance_struct
obj_imbalance	include/zoltan_eval.h	/^  float obj_imbalance;          \/* vertex number imbalance *\/$/;"	m	struct:_eval_graph_struct
obj_imbalance	include/zoltan_eval.h	/^  float obj_imbalance;          \/* vertex number imbalance *\/$/;"	m	struct:_eval_hg_struct
obj_wgt	include/zoltan_eval.h	/^  float obj_wgt[EVAL_SIZE];     \/* partition vertex weights *\/$/;"	m	struct:_eval_balance_struct
obj_wgt	include/zoltan_eval.h	/^  float obj_wgt[EVAL_SIZE];     \/* partition vertex weights *\/$/;"	m	struct:_eval_graph_struct
obj_wgt	include/zoltan_eval.h	/^  float obj_wgt[EVAL_SIZE];     \/* partition vertex weights *\/$/;"	m	struct:_eval_hg_struct
obj_wgt_dim	hier/hier.h	/^  int obj_wgt_dim, edge_wgt_dim;     \/* object and edge weight dimensions *\/$/;"	m	struct:HierPartParamsStruct
obj_wgt_dim	parmetis/third_library.h	/^  int obj_wgt_dim;                      \/* Number of weights by vertex *\/$/;"	m	struct:ZOLTAN_Third_Graph_
object_metrics	lb/lb_eval.c	/^object_metrics(ZZ *zz, int num_obj, int *parts, float *part_sizes, int req_nparts, $/;"	f	file:
objects_by_part	lb/lb_eval.c	/^objects_by_part(ZZ *zz, int num_obj, int *part, int *nparts, int *nonempty)$/;"	f	file:
oblnk	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^	char *oblnk;$/;"	m	struct:__anon22
oblnk	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^	char *oblnk;$/;"	m	struct:__anon14
oct	oct/migoct.c	/^  pOctant oct;                \/* Update link of oct *\/$/;"	m	struct:__anon29	file:
oct	oct/rootlist_const.h	/^  pOctant oct;                          \/* pointer to the root octant        *\/$/;"	m	struct:RL_Node
oct_ncoarse	oct/octupdate.c	/^static int oct_ncoarse=0;                          \/* number of coarsenings *\/$/;"	v	file:
oct_nref	oct/octupdate.c	/^static int oct_nref=0;                             \/* number of refinements *\/$/;"	v	file:
oerr	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^{	flag oerr;$/;"	m	struct:__anon22
oerr	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^{	flag oerr;$/;"	m	struct:__anon14
offset	ch/ch_input_read.c	/^static int offset = 0;		\/* offset into line for next data *\/$/;"	v	file:
offset	matrix/matrix.h	/^    int offset;$/;"	m	struct:Zoltan_Arc_
offset	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/input/read_val.c	/^static int offset = 0;		\/* offset into line for next data *\/$/;"	v	file:
offsetY	matrix/matrix.h	/^  int           offsetY;       \/* Used for bipartite graph: GNO >= offsetY are edges *\/$/;"	m	struct:Zoltan_matrix_
ofm	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^	char *ofm;$/;"	m	struct:__anon22
ofm	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^	char *ofm;$/;"	m	struct:__anon14
ofnm	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^	char *ofnm;$/;"	m	struct:__anon22
ofnm	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^	char *ofnm;$/;"	m	struct:__anon14
ofnmlen	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^	ftnlen ofnmlen;$/;"	m	struct:__anon22
ofnmlen	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^	ftnlen ofnmlen;$/;"	m	struct:__anon14
old_edges	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^	struct ilists *old_edges;	\/* overwritten old edges *\/$/;"	m	struct:connect_data	typeref:struct:connect_data::ilists
old_ewgts	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klspiff/compress_ewgts.c	/^static float *old_ewgts;	\/* space for old edge weights *\/$/;"	v	file:
old_ewgts	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^	struct flists *old_ewgts;	\/* overwritten old weights *\/$/;"	m	struct:connect_data	typeref:struct:connect_data::flists
old_nedges	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^	int old_nedges;		\/* original number of edges in graph *\/$/;"	m	struct:connect_data
olist	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^} olist;$/;"	t	typeref:struct:__anon22
olist	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^} olist;$/;"	t	typeref:struct:__anon14
omitCaption	util/vtk_view.cpp	/^static int omitCaption = 0;$/;"	v	file:
omitScalarBar	util/vtk_view.cpp	/^static int omitScalarBar = 0;$/;"	v	file:
onemcg	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double onemcg;		\/* intermediate value *\/$/;"	v	file:
onpath	reftree/reftree_coarse_path.c	/^static int *prev, *next, *in, *out, *onpath;$/;"	v	file:
opcextract	postprocessing/ordering/ordering.py	/^def opcextract(filename, procnbr, algorithm):$/;"	f
operator =	include/zoltan_comm_cpp.h	/^  Zoltan_Comm & operator= (const Zoltan_Comm &plan) \/\/ Copy operator$/;"	f	class:Zoltan_Comm
operator =	include/zoltan_cpp.h	/^  Zoltan & operator= (const Zoltan &zz)$/;"	f	class:Zoltan
operator =	include/zoltan_dd_cpp.h	/^  Zoltan_DD & operator= (const Zoltan_DD &dd) \/\/ Copy operator$/;"	f	class:Zoltan_DD
operator =	include/zoltan_timer_cpp.h	/^  Zoltan_Timer_Object & operator= (const Zoltan_Timer_Object &zt)$/;"	f	class:Zoltan_Timer_Object
opt2d	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/opt2d.c	/^double    opt2d(graph, yvecs, nvtxs, nmyvtxs)$/;"	f
opt3d	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/opt3d.c	/^void      opt3d(graph, yvecs, nvtxs, nmyvtxs, vwsqrt, ptheta, pphi, pgamma, using_vwgts)$/;"	f
optcost	oct/dfs.c	/^static float optcost;              \/* Optimal partition cost *\/$/;"	v	file:
option_add_caption	util/vtk_view.cpp	/^      option_add_caption,$/;"	e	enum:__anon27	file:
option_end	util/vtk_view.cpp	/^      option_end};$/;"	e	enum:__anon27	file:
option_format	util/vtk_view.cpp	/^      option_format,$/;"	e	enum:__anon27	file:
option_frame_start	util/vtk_view.cpp	/^      option_frame_start,$/;"	e	enum:__anon27	file:
option_frame_stop	util/vtk_view.cpp	/^      option_frame_stop,$/;"	e	enum:__anon27	file:
option_frame_stride	util/vtk_view.cpp	/^      option_frame_stride,$/;"	e	enum:__anon27	file:
option_height	util/vtk_view.cpp	/^      option_height,$/;"	e	enum:__anon27	file:
option_name	util/vtk_view.cpp	/^      option_name,$/;"	e	enum:__anon27	file:
option_omit_caption	util/vtk_view.cpp	/^      option_omit_caption,$/;"	e	enum:__anon27	file:
option_omit_scalar_bar	util/vtk_view.cpp	/^      option_omit_scalar_bar,$/;"	e	enum:__anon27	file:
option_partition_number	util/vtk_view.cpp	/^      option_partition_number,$/;"	e	enum:__anon27	file:
option_view_up	util/vtk_view.cpp	/^      option_view_up,$/;"	e	enum:__anon27	file:
option_width	util/vtk_view.cpp	/^      option_width,$/;"	e	enum:__anon27	file:
option_zdrive_count	util/vtk_view.cpp	/^enum {option_zdrive_count,$/;"	e	enum:__anon27	file:
opts	matrix/matrix.h	/^  Zoltan_matrix_options opts;  \/* How to build the matrix *\/$/;"	m	struct:Zoltan_matrix_
optsize	oct/dfs.c	/^static float optsize;$/;"	v	file:
order	Utilities/Memory/mem.c	/^  int       order;			\/* which malloc call is it? *\/$/;"	m	struct:malloc_debug_data	file:
order	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/smalloc.c	/^  int      order;		\/* which smalloc call is it? *\/$/;"	m	struct:smalloc_debug_data	file:
order_decreasing	zz/zz_coord.c	/^static void order_decreasing(double *d, int *order)$/;"	f	file:
order_hex3d_oct	reftree/reftree_build.c	/^static int order_hex3d_oct(ZZ *zz, int *vert1, int *order,$/;"	f	file:
order_info	parmetis/third_library.h	/^  ZOS *order_info;	\/* ordering info *\/$/;"	m	struct:ZOLTAN_Output_Order_
order_opt	parmetis/third_library.h	/^  ZOOS *order_opt;	\/* ordering options *\/$/;"	m	struct:ZOLTAN_Output_Order_
order_other_ref	reftree/reftree_build.c	/^static int order_other_ref(ZZ *zz, ZOLTAN_REFTREE *parent, int num_child, $/;"	f	file:
order_other_ref_recur	reftree/reftree_build.c	/^static void order_other_ref_recur(int new_entry, int level, int *order, $/;"	f	file:
order_quad_quad	reftree/reftree_build.c	/^static int order_quad_quad(ZZ *zz, int *vert1, int *order,$/;"	f	file:
order_tri_bisect	reftree/reftree_build.c	/^static int order_tri_bisect(ZZ *zz, int *vert1, int *order, $/;"	f	file:
order_type	order/order_const.h	/^  char order_type[MAX_PARAM_STRING_LEN+1]; \/* Ordering method used *\/$/;"	m	struct:Zoltan_Order_Struct
orig_rank_to_hier_rank	hier/hier.c	/^static int orig_rank_to_hier_rank(HierPartParams *hpp, int origrank) {$/;"	f	file:
origzz	hier/hier.h	/^  ZZ *origzz;                        \/* Zoltan struct passed into top level *\/$/;"	m	struct:HierPartParamsStruct
orl	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^	ftnint orl;$/;"	m	struct:__anon22
orl	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^	ftnint orl;$/;"	m	struct:__anon14
orthlink	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^struct orthlink {$/;"	s
orthlink_float	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^struct orthlink_float {$/;"	s
orthog1	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/eigen/orthog1.c	/^void      orthog1(x, beg, end)$/;"	f
orthog1_float	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/eigen/orthog1.c	/^void      orthog1_float(x, beg, end)$/;"	f
orthog_time	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/timing.c	/^double    orthog_time = 0;$/;"	v
orthogonalize	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/eigen/orthogonalize.c	/^void      orthogonalize(vec, n, orthlist)$/;"	f
orthogvec	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/eigen/orthogvec.c	/^void      orthogvec(vec1, beg, end, vec2)$/;"	f
orthogvec_float	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/eigen/orthogvec.c	/^void      orthogvec_float(vec1, beg, end, vec2)$/;"	f
osta	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^	char *osta;$/;"	m	struct:__anon22
osta	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^	char *osta;$/;"	m	struct:__anon14
ounit	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^	ftnint ounit;$/;"	m	struct:__anon22
ounit	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^	ftnint ounit;$/;"	m	struct:__anon14
out	reftree/reftree_coarse_path.c	/^static int *prev, *next, *in, *out, *onpath;$/;"	v	file:
out_vertex	reftree/reftree.h	/^   ZOLTAN_ID_PTR out_vertex; \/* ending vertex for determining the path$/;"	m	struct:Zoltan_Reftree_Struct
outfile	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int      outfile;$/;"	m	struct:LB_Description
outgoing	ZoltanComponent/CCA_Wrapper/BaseLB.h	/^    EntityListImpl *incoming, *outgoing ;$/;"	m	class:ZoltanSpace::BaseLB
outputFormat	util/vtk_view.cpp	/^static int outputFormat = TIFF_FORMAT;$/;"	v	file:
outputName	util/vtk_view.cpp	/^static char outputName[ZMAXPATH] = "outfile";$/;"	v	file:
outputStart	util/vtk_view.cpp	/^static int outputStart = 0;$/;"	v	file:
outputStop	util/vtk_view.cpp	/^static int outputStop = 0;$/;"	v	file:
outputStride	util/vtk_view.cpp	/^static int outputStride = 1;$/;"	v	file:
outputViewUp	util/vtk_view.cpp	/^static float outputViewUp[3] = {0, 1, 0};$/;"	v	file:
output_gnu	driver/dr_gnuplot.c	/^int output_gnu(const char *cmd_file,$/;"	f
output_gnu	driver_old/dr_gnuplot.c	/^int output_gnu(char *cmd_file,$/;"	f
output_level	hier/hier.h	/^  int output_level;                  \/* flag indicating amount of debugging$/;"	m	struct:HierPartParamsStruct
output_level	phg/phg.h	/^  int output_level;     \/* Flag indicating amount of output from HG algorithms.$/;"	m	struct:PHGPartParamsStruct
output_results	driver/dr_output.c	/^int output_results(const char *cmd_file,$/;"	f
output_results	driver_old/dr_output.c	/^int output_results(char *cmd_file,$/;"	f
output_results	fdriver/fdr_main.f90	/^logical function output_results(/;"	f
output_results	fdriver_old/fdr_main.f90	/^logical function output_results(/;"	f
ow	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int   *ow;$/;"	m	struct:Weight_Description
ow_read	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int   ow_read; \/* 1 if element block settings overwrite exodus file read *\/$/;"	m	struct:Weight_Description
owner	Utilities/DDirectory/DD.h	/^   int              owner;      \/* processor hosting global ID object    *\/$/;"	m	struct:DD_Node
owner	Utilities/DDirectory/DD.h	/^   int        owner;       \/* range [0, nproc-1] or -1             *\/$/;"	m	struct:__anon4
owner	Utilities/DDirectory/DD.h	/^   int owner;              \/* range [0, nproc-1] or -1                     *\/$/;"	m	struct:__anon2
p1bucket	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klspiff/kl_output.c	/^\/*static*\/ void p1bucket(bucket, lptr, maxdeg)$/;"	f
pDLP	ZoltanComponent/TestComponents/Driver.h	/^    ::LoadPartitionerSpace::DataLocationPort *pDLP ;$/;"	m	class:ZoltanTestSpace::Driver
pDataMig	ZoltanComponent/CCA_Wrapper/PartitionerFactory.h	/^    ::LoadPartitionerSpace::DataMigrationPort *pDataMig ;$/;"	m	class:ZoltanSpace::PartitionerFactory_JR
pDataMigPort	ZoltanComponent/CCA_Wrapper/ZoltanApplQueryFunc.cpp	/^    ::LoadPartitionerSpace::DataMigrationPort *pDataMigPort = 0 ;$/;"	v
pEdgeInfo	ZoltanComponent/CCA_Wrapper/PartitionerFactory.h	/^    ::LoadPartitionerSpace::EdgeInfo *pEdgeInfo ;$/;"	m	class:ZoltanSpace::PartitionerFactory_JR
pEdgeInfo	ZoltanComponent/CCA_Wrapper/ZoltanApplQueryFunc.cpp	/^    ::LoadPartitionerSpace::EdgeInfo *pEdgeInfo = 0;$/;"	v
pEntityInfo	ZoltanComponent/CCA_Wrapper/PartitionerFactory.h	/^    ::LoadPartitionerSpace::EntityInfo *pEntityInfo ;$/;"	m	class:ZoltanSpace::PartitionerFactory_JR
pEntityInfo	ZoltanComponent/CCA_Wrapper/ZoltanApplQueryFunc.cpp	/^    ::LoadPartitionerSpace::EntityInfo *pEntityInfo = 0;$/;"	v
pFac	ZoltanComponent/CCA_Wrapper/BaseLB.h	/^    PartitionerFactory_JR *pFac ;$/;"	m	class:ZoltanSpace::BaseLB
pGeomInfo	ZoltanComponent/CCA_Wrapper/PartitionerFactory.h	/^    ::LoadPartitionerSpace::GeomInfo *pGeomInfo ;$/;"	m	class:ZoltanSpace::PartitionerFactory_JR
pGeomInfo	ZoltanComponent/CCA_Wrapper/ZoltanApplQueryFunc.cpp	/^    ::LoadPartitionerSpace::GeomInfo *pGeomInfo = 0;$/;"	v
pIO	ZoltanComponent/TestComponents/Driver.h	/^    ::ZoltanTestSpace::IOPort *pIO;$/;"	m	class:ZoltanTestSpace::Driver
pInpFile	ZoltanComponent/TestComponents/Driver.h	/^    StringParameter *pInpFile ;$/;"	m	class:ZoltanTestSpace::Driver
pIterate	ZoltanComponent/CCA_Wrapper/PartitionerFactory.h	/^    BoolParameter *pIterate ;$/;"	m	class:ZoltanSpace::PartitionerFactory_JR
pLBF	ZoltanComponent/TestComponents/Driver.h	/^    ::LoadPartitionerSpace::LoadBalancerFactory *pLBF;$/;"	m	class:ZoltanTestSpace::Driver
pOctant	oct/octant_const.h	/^typedef struct _Octant* pOctant;    \/* typedef for a pointer to an octant   *\/$/;"	t	typeref:struct:_Octant
pRList	oct/rootlist_const.h	/^typedef struct RL_Node *pRList;         \/* typedef for a pointer to rootlist *\/$/;"	t	typeref:struct:RL_Node
pRegion	oct/octant_const.h	/^typedef struct Region_Node* pRegion;  \/* typedef for a pointer to a region  *\/$/;"	t	typeref:struct:Region_Node
pSvc	ZoltanComponent/CCA_Wrapper/PartitionerFactory.h	/^    CONV_NS(Services) *pSvc;$/;"	m	class:ZoltanSpace::PartitionerFactory_JR
pSvc	ZoltanComponent/TestComponents/Driver.h	/^    CONV_NS(Services) *pSvc ;$/;"	m	class:ZoltanTestSpace::Driver
pSvc	ZoltanComponent/TestComponents/Mesh.h	/^    CONV_NS(Services) *pSvc ;$/;"	m	class:ZoltanTestSpace::Mesh
pTreeInfo	ZoltanComponent/CCA_Wrapper/PartitionerFactory.h	/^    ::LoadPartitionerSpace::TreeInfo *pTreeInfo ;$/;"	m	class:ZoltanSpace::PartitionerFactory_JR
pTreeInfo	ZoltanComponent/CCA_Wrapper/ZoltanApplQueryFunc.cpp	/^    ::LoadPartitionerSpace::TreeInfo *pTreeInfo = 0;$/;"	v
pack_message_for_proc	lb/low_mem_lb_migrate.c	/^static int pack_message_for_proc(ZZ *zz, int dest_proc, int num,$/;"	f	file:
par_median_accumulate_counts	par/par_median_randomized.c	/^void par_median_accumulate_counts(int nprocs,      \/* number processes in application *\/$/;"	f
par_median_print_counts	par/par_median_randomized.c	/^void par_median_print_counts(MPI_Comm comm, int print_proc)$/;"	f
parallelIterations	par/par_median_randomized.c	/^static int parallelIterations=0;$/;"	v	file:
param	driver/dr_param_file.c	/^  char param[MAX_PARAM_STRING_LEN+1];$/;"	m	struct:zoltanParams_list_entry	file:
param	driver/dr_param_fileCPP.cpp	/^  char *param;$/;"	m	struct:zoltanParams_list_entry	file:
param	fdriver/fdr_param_file.f90	/^   character(len=MAX_CHAR_LEN) :: param$/;"	k	type:ztnPrm_list_entry
params	driver/dr_const.h	/^  Parameter_Pair *params;            \/* parameter array to be passed to$/;"	m	struct:Problem_Description
params	driver_old/dr_const.h	/^  Parameter_Pair *params;            \/* parameter array to be passed to$/;"	m	struct:Problem_Description
params	fdriver/fdr_const.f90	/^  type(Parameter_Pair), pointer :: params(/;"	k	type:PROB_INFO
params	fdriver_old/fdr_const.f90	/^  type(Parameter_Pair), pointer :: params(/;"	k	type:PROB_INFO
parent	oct/migoct.c	/^  pOctant parent;$/;"	m	struct:__anon30	file:
parent	oct/octant_const.h	/^  struct _Octant *parent;           \/* parent of the octant                 *\/$/;"	m	struct:_Octant	typeref:struct:_Octant::_Octant
parent	rcb/rcb.h	/^  int       parent;             \/* parent of this node in cut tree *\/$/;"	m	struct:rcb_tree
parent	rcb/rib.h	/^    int       parent;           \/* parent of this node in cut tree *\/$/;"	m	struct:rib_tree
parent	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/connect/heap.c	7;"	d	file:
parkway	phg/phg_tree.h	/^  int parkway;  \/* ParKway time *\/$/;"	m	struct:phg_timer_indices
parkway_serpart	phg/phg.h	/^  char parkway_serpart[MAX_PARAM_STRING_LEN];  \/* SerialPartitioner for parKway. *\/$/;"	m	struct:PHGPartParamsStruct
parse_groups	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_groups.c	/^int parse_groups(int *el_blk_ids,$/;"	f
part	hsfc/hsfc.h	/^   int   part;          \/* partition to which dot is assigned     *\/$/;"	m	struct:Dots
part	parmetis/third_library.h	/^  indextype *part;                      \/* Current partition *\/$/;"	m	struct:ZOLTAN_Third_Part_
partTree	phg/phg_tree.c	/^  int * partTree; \/* Not used yet *\/$/;"	m	struct:Zoltan_PHG_LB_Data_	file:
part_orig	parmetis/third_library.h	/^  indextype *part_orig;$/;"	m	struct:ZOLTAN_Third_Part_
part_sizes	parmetis/third_library.h	/^  float     *part_sizes;$/;"	m	struct:ZOLTAN_Third_Part_
part_sizes	phg/phg.h	/^  float *part_sizes;             \/* Pointer to part_sizes array passed to$/;"	m	struct:PHGPartParamsStruct
part_to_compute	hier/hier.h	/^  int part_to_compute;               \/* partition to compute at each level *\/$/;"	m	struct:HierPartParamsStruct
partial_adj	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int   partial_adj;      \/* true id allowing partial (3\/4) of nodes to *\/$/;"	m	struct:Problem_Description
partition	Utilities/DDirectory/DD.h	/^   int              partition;  \/* Optional data                         *\/$/;"	m	struct:DD_Node
partition	Utilities/DDirectory/DD.h	/^   int        partition;$/;"	m	struct:__anon3
partition	Utilities/DDirectory/DD.h	/^   int partition;$/;"	m	struct:__anon2
partition	driver/dr_param_file.c	/^  int partition;$/;"	m	struct:zoltanParams_hier_struct	file:
partition	driver/dr_param_fileCPP.cpp	/^  int partition;$/;"	m	struct:zoltanParams_hier_struct	file:
partition	fdriver/fdr_param_file.f90	/^   integer :: partition$/;"	k	type:ztnPrm_hier_struct
partition	oct/dfs.c	/^static int partition;              \/* Partition number we are working on *\/$/;"	v	file:
partition	reftree/reftree.h	/^   int partition;        \/* partition to which this node is assigned;$/;"	m	struct:Zoltan_Reftree_Struct
partitionMap	util/vtk_view.cpp	/^static map<int, int> partitionMap;   \/\/ for searching$/;"	v	file:
partition_flag	Utilities/DDirectory/DD.h	/^   char partition_flag;    \/* indicates if optional partition data present *\/$/;"	m	struct:__anon2
partition_stats	hsfc/hsfc.c	/^static int partition_stats(ZZ *zz, int ndots, $/;"	f	file:
partition_time	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/timing.c	/^double    partition_time = 0;$/;"	v
partner	phg/phg_match.c	/^    int partner;        \/* gno of best match found so far *\/$/;"	m	struct:triplet	file:
pass_along_zdrive_output	util/vtk_view.cpp	/^static int pass_along_zdrive_output(int sndr, int recvr)$/;"	f	file:
path_length	reftree/reftree_coarse_path.c	/^static int num_obj, path_length;$/;"	v	file:
patoh	phg/phg_tree.h	/^  int patoh;  \/* PaToH time *\/$/;"	m	struct:phg_timer_indices
patoh_alloc_pool0	phg/phg.h	/^  int patoh_alloc_pool0,   \/* to adjust patoh's memory pre-allocation amount *\/$/;"	m	struct:PHGPartParamsStruct
patoh_alloc_pool1	phg/phg.h	/^      patoh_alloc_pool1;    $/;"	m	struct:PHGPartParamsStruct
pause_time	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/timing.c	/^double    pause_time = 0;$/;"	v
pbuckets	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klspiff/kl_output.c	/^void      pbuckets(buckets, listspace, maxdeg, nsets)$/;"	f
pcoord	oct/dfs.c	/^static double pcoord[3];           \/* Sum of octant position-volume products *\/$/;"	v	file:
pcost	oct/dfs.c	/^static float pcost;                \/* Current partition cost *\/$/;"	v	file:
pdp11	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	195;"	d
pdp11	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	195;"	d
pdsk_add_fact	driver/dr_input_const.h	/^  int     pdsk_add_fact;             \/* The offset from zero used by the    *\/$/;"	m	struct:Parallel_IO
pdsk_add_fact	driver_old/dr_input_const.h	/^  int     pdsk_add_fact;             \/* The offset from zero used by the    *\/$/;"	m	struct:Parallel_IO
pdsk_add_fact	fdriver/fdr_input.f90	/^  integer(Zoltan_INT) :: pdsk_add_fact /;"	k	type:PARIO_INFO
pdsk_add_fact	fdriver_old/fdr_input.f90	/^  integer(LB_INT) :: pdsk_add_fact /;"	k	type:PARIO_INFO
pdsk_root	driver/dr_input_const.h	/^  char    pdsk_root[FILENAME_MAX+1];$/;"	m	struct:Parallel_IO
pdsk_root	driver_old/dr_input_const.h	/^  char    pdsk_root[FILENAME_MAX+1];$/;"	m	struct:Parallel_IO
pdsk_root	fdriver/fdr_input.f90	/^  character(len=FILENAME_MAX+1) :: pdsk_root$/;"	k	type:PARIO_INFO
pdsk_root	fdriver_old/fdr_input.f90	/^  character(len=FILENAME_MAX+1) :: pdsk_root$/;"	k	type:PARIO_INFO
pdsk_subdir	driver/dr_input_const.h	/^  char    pdsk_subdir[FILENAME_MAX+1];$/;"	m	struct:Parallel_IO
pdsk_subdir	driver_old/dr_input_const.h	/^  char    pdsk_subdir[FILENAME_MAX+1];$/;"	m	struct:Parallel_IO
pdsk_subdir	fdriver/fdr_input.f90	/^  character(len=FILENAME_MAX+1) :: pdsk_subdir$/;"	k	type:PARIO_INFO
pdsk_subdir	fdriver_old/fdr_input.f90	/^  character(len=FILENAME_MAX+1) :: pdsk_subdir$/;"	k	type:PARIO_INFO
pedges	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/perturb.c	/^static struct ipairs *pedges;	\/* perturbed edges *\/$/;"	v	typeref:struct:ipairs	file:
perm_value	driver/dr_const.h	/^  int      perm_value;  \/* Value for this element in permutation vector $/;"	m	struct:Element_Description
perm_value	fdriver/fdr_const.f90	/^  integer(Zoltan_INT) :: perm_value /;"	k	type:ELEM_INFO
perturb	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/perturb.c	/^void      perturb(result, vec)$/;"	f
perturb_clear	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/perturb.c	/^void      perturb_clear()$/;"	f
perturb_float	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/perturb.c	/^void      perturb_float(result, vec)$/;"	f
perturb_init	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/perturb.c	/^void      perturb_init(n)$/;"	f
pexo_fname	driver/dr_input_const.h	/^  char    pexo_fname[FILENAME_MAX+1];$/;"	m	struct:Parallel_IO
pexo_fname	driver_old/dr_input_const.h	/^  char    pexo_fname[FILENAME_MAX+1];$/;"	m	struct:Parallel_IO
pexo_fname	fdriver/fdr_input.f90	/^  character(len=FILENAME_MAX+1) :: pexo_fname$/;"	k	type:PARIO_INFO
pexo_fname	fdriver_old/fdr_input.f90	/^  character(len=FILENAME_MAX+1) :: pexo_fname$/;"	k	type:PARIO_INFO
phasethreereduce	phg/phg_match.c	/^static void phasethreereduce ($/;"	f	file:
phg_GID_lookup	phg/phg_lookup.h	/^}phg_GID_lookup;$/;"	t	typeref:struct:_GID_lookup
phg_create_GID_lookup_table	phg/phg_lookup.c	/^phg_GID_lookup *phg_create_GID_lookup_table(ZOLTAN_ID_PTR gids, int size, int lenGID)$/;"	f
phg_create_GID_lookup_table2	phg/phg_lookup.c	/^phg_GID_lookup *phg_create_GID_lookup_table2(ZOLTAN_ID_PTR gids, int ngids, int lenGID)$/;"	f
phg_free_GID_lookup_table	phg/phg_lookup.c	/^void phg_free_GID_lookup_table(phg_GID_lookup **lu)$/;"	f
phg_free_ews	phg/phg_lookup.c	/^void phg_free_ews(zoltan_ews *zew)$/;"	f
phg_free_objects	phg/phg_lookup.c	/^void phg_free_objects(zoltan_objects *zo)$/;"	f
phg_free_pins	phg/phg_lookup.c	/^void phg_free_pins(zoltan_pins *zp)$/;"	f
phg_free_temp_edges	phg/phg_lookup.c	/^void phg_free_temp_edges(zoltan_temp_edges *zte)$/;"	f
phg_free_temp_vertices	phg/phg_lookup.c	/^void phg_free_temp_vertices(zoltan_temp_vertices *ztv)$/;"	f
phg_lookup_GID	phg/phg_lookup.c	/^int phg_lookup_GID(phg_GID_lookup *lu, ZOLTAN_ID_PTR gid)$/;"	f
phg_map_GIDs_to_processes	phg/phg_lookup.c	/^int phg_map_GIDs_to_processes(ZZ *zz, ZOLTAN_ID_PTR eid, int size, $/;"	f
phg_timer_indices	phg/phg_tree.h	/^struct phg_timer_indices {$/;"	s
pick_best	phg/phg_serialpartition.c	/^static int pick_best($/;"	f	file:
pids	util/vtk_view.cpp	/^static int *pids=NULL;$/;"	v	file:
pinGID	phg/phg_lookup.h	/^  ZOLTAN_ID_PTR pinGID;     \/* global ID of pin vertex *\/$/;"	m	struct:_myPin
pinGID	phg/phg_lookup.h	/^  ZOLTAN_ID_PTR pinGID;     \/* vertex ID of each pin*\/$/;"	m	struct:_hshEdge
pinGNO	matrix/matrix.h	/^    int pinGNO;$/;"	m	struct:Zoltan_Arc_
pinGNO	matrix/matrix.h	/^  int          *pinGNO;        \/* array of gno of other extremtiy *\/$/;"	m	struct:Zoltan_matrix_
pinGNO	phg/phg_hypergraph.h	/^  int *pinGNO;             \/* pin global number NEW *\/$/;"	m	struct:Zoltan_HGraph
pinHash	phg/phg_lookup.h	/^  int           *pinHash;   \/* process to which pin vertex is hashed *\/$/;"	m	struct:_hshEdge
pinwgt	matrix/matrix.h	/^  float        *pinwgt;        \/* Wgt for pins *\/$/;"	m	struct:Zoltan_matrix_
pinwgt	matrix/matrix.h	/^  int pinwgt;                  \/* Do we want pinwgt ? *\/$/;"	m	struct:Zoltan_matrix_options_
pinwgtdim	matrix/matrix.h	/^  int           pinwgtdim;     \/* Wgt dimensions for pins *\/$/;"	m	struct:Zoltan_matrix_
pinwgtop	matrix/matrix.h	/^  WgtOp pinwgtop;              \/* How to deal with duplicate arcs *\/$/;"	m	struct:Zoltan_matrix_options_
pio_info	ZoltanComponent/TestComponents/Driver.h	/^    PARIO_INFO pio_info ;$/;"	m	class:ZoltanTestSpace::Driver
pio_info	ZoltanComponent/TestComponents/Mesh.h	/^    PARIO_INFO pio_info ;$/;"	m	class:ZoltanTestSpace::Mesh
pio_info	fdriver/fdr_main.f90	/^  type(PARIO_INFO) :: pio_info$/;"	v	program:fdriver
pio_info	fdriver_old/fdr_main.f90	/^  type(PARIO_INFO) :: pio_info$/;"	v	program:fdriver
plan_reverse	Utilities/Communication/comm.h	/^    ZOLTAN_COMM_OBJ* plan_reverse;   \/* to support POST & WAIT *\/$/;"	m	struct:Zoltan_Comm_Obj
pmass	oct/dfs.c	/^static float pmass;                \/* octant volume for partition *\/$/;"	v	file:
pmatching_agg_ipm	phg/phg_match.c	/^static ZOLTAN_PHG_MATCHING_FN pmatching_agg_ipm;     \/* agglomerative IPM *\/$/;"	v	file:
pmatching_agg_ipm	phg/phg_match.c	/^static int pmatching_agg_ipm (ZZ *zz,$/;"	f	file:
pmatching_alt_ipm	phg/phg_match.c	/^static ZOLTAN_PHG_MATCHING_FN pmatching_alt_ipm;     \/* alternating ipm *\/$/;"	v	file:
pmatching_alt_ipm	phg/phg_match.c	/^static int pmatching_alt_ipm($/;"	f	file:
pmatching_hybrid_ipm	phg/phg_match.c	/^static ZOLTAN_PHG_MATCHING_FN pmatching_hybrid_ipm;  \/* hybrid ipm *\/$/;"	v	file:
pmatching_hybrid_ipm	phg/phg_match.c	/^static int pmatching_hybrid_ipm($/;"	f	file:
pmatching_ipm	phg/phg_match.c	/^static ZOLTAN_PHG_MATCHING_FN pmatching_ipm;         \/* inner product matching *\/$/;"	v	file:
pmatching_ipm	phg/phg_match.c	/^static int pmatching_ipm (ZZ *zz,$/;"	f	file:
pmatching_local_ipm	phg/phg_match.c	/^static ZOLTAN_PHG_MATCHING_FN pmatching_local_ipm;   \/* local ipm *\/$/;"	v	file:
pmatching_local_ipm	phg/phg_match.c	/^static int pmatching_local_ipm($/;"	f	file:
pmpi_wtick	fdriver_old/lampmpi.f90	/^      subroutine pmpi_wtick(/;"	s
pmpi_wtime	fdriver_old/lampmpi.f90	/^      subroutine pmpi_wtime(/;"	s
pmv3method	parmetis/parmetis_interface.c	/^static int pmv3method( char *alg)$/;"	f	file:
pntr	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^	struct msg_data *pntr;	\/* pointer to next outgoing message from this set *\/$/;"	m	struct:msg_data	typeref:struct:msg_data::msg_data
pntr	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^	struct orthlink *pntr;	\/* pointer to next link *\/$/;"	m	struct:orthlink	typeref:struct:orthlink::orthlink
pntr	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^	struct orthlink_float *pntr;	\/* pointer to next link *\/$/;"	m	struct:orthlink_float	typeref:struct:orthlink_float::orthlink_float
pntr	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^	struct scanlink *pntr;	\/* pointer to next link *\/$/;"	m	struct:scanlink	typeref:struct:scanlink::scanlink
pop	reftree/reftree_coarse_path.c	/^static int pop(int list)$/;"	f	file:
pos	driver/dr_compress_const.h	/^  int pos;$/;"	m	struct:ZOLTAN_FILE_
pos	zz/zz_heap.h	/^   int   *pos;$/;"	m	struct:__anon36
pow_dd	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/pow_dd.c	/^double    pow_dd(ap, bp)$/;"	f
power	zz/zz_const.h	/^  int power;             \/* if (nnodes == 1) specify power of the processor *\/$/;"	m	struct:__anon37
power_filename	ha/ha_drum.h	/^  char power_filename[256];          \/* file name to use to print power file *\/$/;"	m	struct:Zoltan_Drum_Struct
pp	ZoltanComponent/CCA_Wrapper/PartitionerFactory.h	/^    ConfigurableParameterPort *pp;$/;"	m	class:ZoltanSpace::PartitionerFactory_JR
pp	ZoltanComponent/TestComponents/Driver.h	/^    ConfigurableParameterPort *pp ;$/;"	m	class:ZoltanTestSpace::Driver
ppid	oct/migoct.c	/^  int ppid;$/;"	m	struct:__anon30	file:
ppid	oct/octant_const.h	/^  int ppid;                         \/* parent pid, -1 mean a local root     *\/$/;"	m	struct:_Octant
prePartition	util/converters_for_JPDC_adaptive_mesh_experiments/chaco2chaco/prepartition.c	/^static void prePartition(MESH_INFO_PTR mesh, MESH_INFO_PTR oldMesh, char *fileName)$/;"	f	file:
pref_part	phg/phg_hypergraph.h	/^  int *pref_part;   \/* parallel to fixed array with size of |V| containing the$/;"	m	struct:__anon38
prev	reftree/reftree_coarse_path.c	/^static int *prev, *next, *in, *out, *onpath;$/;"	v	file:
prev	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/internal/internal.h	/^    struct bidint *prev;$/;"	m	struct:bidint	typeref:struct:bidint::bidint
prev	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^	struct bilist *prev;		\/* pointer to previous element *\/$/;"	m	struct:bilist	typeref:struct:bilist::bilist
prev	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/refine_map/refine_map.h	/^	struct refine_edata *prev;	\/* pointer to previous guy in list *\/$/;"	m	struct:refine_edata	typeref:struct:refine_edata::refine_edata
prev	zz/zz_map.c	/^  ZOLTAN_ENTRY *prev;   \/* pointer to previous returned element *\/$/;"	m	struct:Zoltan_Map_List	file:
prev_hash_index	zz/zz_map.c	/^  int prev_hash_index;  \/* hash index of previous returned element *\/$/;"	m	struct:Zoltan_Map_List	file:
prev_index	zz/zz_map.c	/^  int prev_index;       \/* index of top element returned in iterator *\/$/;"	m	struct:Zoltan_Map_List	file:
prevtau	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^	double prevtau;		\/* from orthogonality recursion *\/$/;"	m	struct:orthlink
prevtau	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^	double prevtau;		\/* from orthogonality recursion *\/$/;"	m	struct:orthlink_float
print_assign_time	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/timing.c	/^double    print_assign_time = 0;$/;"	v
print_bpgraph	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klvspiff/make_bpgraph.c	/^void print_bpgraph(nleft, nright, pointers, indices, vwgts)$/;"	f
print_connected	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/connect/connected.c	/^void      print_connected(cdata)$/;"	f
print_distributed_mesh	driver/dr_output.c	/^void print_distributed_mesh($/;"	f
print_distributed_mesh	driver_old/dr_output.c	/^void print_distributed_mesh($/;"	f
print_hypergraph	phg/phg_verbose.c	/^void print_hypergraph(ZZ *zz, ZHG *zhg, int sumWeight)$/;"	f
print_input	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_main.c	/^void print_input($/;"	f
print_input_info	driver/dr_main.c	/^static void print_input_info(FILE *fp, int Num_Proc, PROB_INFO_PTR prob, $/;"	f	file:
print_input_info	driver/dr_mainCPP.cpp	/^static void print_input_info(ostream &os, int Num_Proc, PROB_INFO_PTR prob, $/;"	f	file:
print_input_info	driver_old/dr_main.c	/^static void print_input_info(FILE *fp, int Num_Proc, PROB_INFO_PTR prob)$/;"	f	file:
print_input_info	fdriver/fdr_main.f90	/^subroutine print_input_info(/;"	s
print_input_info	fdriver_old/fdr_main.f90	/^subroutine print_input_info(/;"	s
print_mesh	driver/dr_main.c	/^static void print_mesh(int proc, MESH_INFO_PTR m, int *tp, int *the, int *tv)$/;"	f	file:
print_rcb_tree	rcb/rcb.c	/^static void print_rcb_tree(ZZ *zz, int np, int fp, struct rcb_tree *treept_arr)$/;"	f	file:
print_rib_tree	rcb/rib.c	/^static void print_rib_tree(ZZ *zz, int np, int fp, struct rib_tree *treept_arr)$/;"	f	file:
print_sep_size	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klvspiff/coarsen_klv.c	/^void      print_sep_size(list, graph)$/;"	f
print_sync_end	driver/dr_par_util.c	/^void print_sync_end(int proc, int nprocs, int do_print_line)$/;"	f
print_sync_end	driver_old/dr_par_util.c	/^void print_sync_end(int proc, int nprocs, int do_print_line)$/;"	f
print_sync_start	driver/dr_par_util.c	/^void print_sync_start(int proc, int do_print_line)$/;"	f
print_sync_start	driver_old/dr_par_util.c	/^void print_sync_start(int proc, int do_print_line)$/;"	f
print_usage	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_main.c	/^void print_usage(void)$/;"	f
print_zoltan_pins	phg/phg_verbose.c	/^void print_zoltan_pins(zoltan_pins *z, int me, int ewgt_dim)$/;"	f
printobj	lb/low_mem_lb_migrate.c	/^static void printobj(int me, int nprocs, $/;"	f	file:
prob	ZoltanComponent/TestComponents/Driver.h	/^    PROB_INFO prob ;$/;"	m	class:ZoltanTestSpace::Driver
prob	ZoltanComponent/TestComponents/Mesh.h	/^    PROB_INFO prob ;$/;"	m	class:ZoltanTestSpace::Mesh
prob	fdriver/fdr_main.f90	/^  type(PROB_INFO) :: prob$/;"	v	program:fdriver
prob	fdriver_old/fdr_main.f90	/^  type(PROB_INFO) :: prob$/;"	v	program:fdriver
prob_opts	util/vtk_view.cpp	/^static PROB_INFO prob_opts;$/;"	v	file:
proc	Utilities/DDirectory/DD.h	/^   int        proc;        \/* destination or location               *\/$/;"	m	struct:__anon3
proc	Utilities/DDirectory/DD_Set_Neighbor_Hash_Fn2.c	/^   int proc;$/;"	m	struct:__anon1	file:
proc	driver/dr_const.h	/^  int    proc;        \/* my rank, want to know if adj elements are on my proc *\/$/;"	m	struct:Mesh_Description
proc	par/par_median_randomized.c	/^  int proc;$/;"	m	struct:_commStruct	file:
proc_list	ZoltanComponent/CCA_Wrapper/EntityListImpl.h	/^    int *proc_list ;$/;"	m	class:ZoltanSpace::EntityListImpl
proc_size	ZoltanComponent/CCA_Wrapper/EntityListImpl.h	/^    int proc_size, gid_size, lid_size, user_def_size, ref ;$/;"	m	class:ZoltanSpace::EntityListImpl
process_mtxp_file	driver/dr_hg_io.c	/^static int process_mtxp_file(PARIO_INFO_PTR pio_info,$/;"	f	file:
prochi	par/par_bisect.c	/^  int       proclo, prochi;     \/* unique proc who owns a nearest dot *\/$/;"	m	struct:bisector	file:
prochi	par/par_median.c	/^  int       proclo, prochi;     \/* unique proc who owns a nearest dot *\/$/;"	m	struct:median	file:
prochi	rcb/rcb.h	/^  int       proclo, prochi;	\/* unique proc who owns a nearest dot *\/$/;"	m	struct:rcb_median
proclo	par/par_bisect.c	/^  int       proclo, prochi;     \/* unique proc who owns a nearest dot *\/$/;"	m	struct:bisector	file:
proclo	par/par_median.c	/^  int       proclo, prochi;     \/* unique proc who owns a nearest dot *\/$/;"	m	struct:median	file:
proclo	rcb/rcb.h	/^  int       proclo, prochi;	\/* unique proc who owns a nearest dot *\/$/;"	m	struct:rcb_median
proclower	par/par_median_randomized.c	/^  int proclower;$/;"	m	struct:_commStruct	file:
procname	fdriver/fdr_main.f90	/^  character(len=MAX_PROCNAME_LEN) :: procname$/;"	v	program:fdriver
procname	fdriver_old/fdr_main.f90	/^  character(len=MAX_PROCNAME_LEN) :: procname$/;"	v	program:fdriver
procred	phg/phg_tree.h	/^  int procred;    \/* Processor reduction *\/$/;"	m	struct:phg_timer_indices
procs_from	Utilities/Communication/comm.h	/^    int      *procs_from;       \/* processors I'll receive from*\/$/;"	m	struct:Zoltan_Comm_Obj
procs_per_box	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int procs_per_box; \/* added for cluster type machines, if there is only$/;"	m	struct:Machine_Description
procs_to	Utilities/Communication/comm.h	/^    int      *procs_to;         \/* processors I'll send to *\/$/;"	m	struct:Zoltan_Comm_Obj
project	phg/phg_tree.h	/^  int project;    \/* Project coarse-to-fine *\/$/;"	m	struct:phg_timer_indices
projected_distances	zz/zz_coord.c	/^static void projected_distances(ZZ *zz, double *coords, int num_obj,$/;"	f	file:
prop	ZoltanComponent/CCA_Wrapper/HSFC.h	/^    map<string, string> prop ;$/;"	m	class:ZoltanSpace::HSFC_LB
prop	ZoltanComponent/CCA_Wrapper/OctTree.h	/^    map<string, string> prop ;$/;"	m	class:ZoltanSpace::OctTree_LB
prop	ZoltanComponent/CCA_Wrapper/ParMetis.h	/^    map<string, string> prop ;$/;"	m	class:ZoltanSpace::ParMetis_LB
prop	ZoltanComponent/CCA_Wrapper/RCB.h	/^    map<string, string> prop ;$/;"	m	class:ZoltanSpace::RCB_LB
prop	ZoltanComponent/CCA_Wrapper/RIB.h	/^    map<string, string> prop ;$/;"	m	class:ZoltanSpace::RIB_LB
props	ZoltanComponent/CCA_Wrapper/BaseLB.h	/^    map<string, string> props ;$/;"	m	class:ZoltanSpace::BaseLB
ptr	Utilities/DDirectory/DD_Set_Neighbor_Hash_Fn2.c	/^  Range_Info *ptr;$/;"	m	struct:dd_nh2_struct	file:
ptr	Utilities/Memory/mem.c	/^  double   *ptr;			\/* memory location returned *\/$/;"	m	struct:malloc_debug_data	file:
ptr	fdriver_old/lb_user_const.f90	/^   type(ELEM_INFO), pointer :: ptr(/;"	k	type:LB_User_Data_1
ptr	fdriver_old/lb_user_const.f90	/^   type(MESH_INFO), pointer :: ptr$/;"	k	type:LB_User_Data_2
ptr	oct/migoct.c	/^  pOctant ptr;            \/* New location *\/$/;"	m	struct:__anon30	file:
ptr	oct/migoct.c	/^  pOctant ptr;       \/* pointer that requestor asked for *\/$/;"	m	struct:__anon28	file:
ptr	oct/octupdate.c	/^  pOctant ptr;$/;"	m	struct:__anon35	file:
ptr	params/params_const.h	/^  void *ptr;			\/* Pointer to parameter variable *\/$/;"	m	struct:Param_Vars
ptr	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/smalloc.c	/^  double  *ptr;			\/* memory location returned *\/$/;"	m	struct:smalloc_debug_data	file:
ptrcompare	fort/ztypes.f90	/^function ptrcompare(/;"	f	module:zoltan_types
push	reftree/reftree_coarse_path.c	/^static int push(int elem, int list, ZZ *zz)$/;"	f	file:
pvals	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/perturb.c	/^static double *pvals;		\/* perturbed values *\/$/;"	v	file:
pythag	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/pythag.f	/^      double precision function pythag(/;"	f
pythag_	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/pythag.c	/^doublereal pythag_(a, b)$/;"	f
ql	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/eigen/ql.c	/^int       ql(d, e, n)$/;"	f
ql_time	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/timing.c	/^double    ql_time = 0;$/;"	v
qsort2	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_util.c	/^void qsort2(int *v1, int *v2, int N)$/;"	f
qsort4	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_util.c	/^void qsort4(int *v1, int *v2, int *v3, int *v4, int N)$/;"	f
quickpart_list_inc_double	util/converters_for_JPDC_adaptive_mesh_experiments/chaco2chaco/main.c	/^static void quickpart_list_inc_double($/;"	f	file:
quickpart_list_inc_int	zz/zz_sort.c	/^static void quickpart_list_inc_int ($/;"	f	file:
quickpart_pointer_dec_double	zz/zz_sort.c	/^static void quickpart_pointer_dec_double ($/;"	f	file:
quickpart_pointer_dec_float	zz/zz_sort.c	/^static void quickpart_pointer_dec_float ($/;"	f	file:
quickpart_pointer_dec_float_int	zz/zz_sort.c	/^static void quickpart_pointer_dec_float_int ($/;"	f	file:
quickpart_pointer_inc_int_int	zz/zz_sort.c	/^static void quickpart_pointer_inc_int_int ($/;"	f	file:
r	hsfc/hsfc.h	/^   double r;            \/* rightmost boundary of partition interval *\/$/;"	m	struct:Partition
r	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^	real r;$/;"	m	union:Multitype
r	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^typedef struct { doublereal r, i; } doublecomplex;$/;"	m	struct:__anon19
r	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^typedef struct { real r, i; } complex;$/;"	m	struct:__anon18
r	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^	real r;$/;"	m	union:Multitype
r	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^typedef struct { doublereal r, i; } doublecomplex;$/;"	m	struct:__anon11
r	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^typedef struct { real r, i; } complex;$/;"	m	struct:__anon10
randomize	matrix/matrix.h	/^  int randomize;               \/* Do we have to randomize input ? *\/$/;"	m	struct:Zoltan_matrix_options_
randomize	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/randomize.c	/^void      randomize(int *array, int n)$/;"	f
rank	ZoltanComponent/CCA_Wrapper/BaseLB.h	/^    int my_index, rank, master ;$/;"	m	class:ZoltanSpace::BaseLB
rank	order/order_const.h	/^  int *rank;		\/* rank[i] is the rank of gids[i] *\/$/;"	m	struct:Zoltan_Order_Struct
rank	par/par_median_randomized.c	/^  int rank;$/;"	m	struct:_commStruct	file:
rank	parmetis/third_library.h	/^  int *rank;            \/* rank[i] is the rank of gids[i] *\/$/;"	m	struct:ZOLTAN_Output_Order_
ratio	phg/phg_hypergraph.h	/^  double ratio;     \/* split when recursively dividing for p > 2 *\/$/;"	m	struct:__anon38
rb_sort_doubles_increasing	par/par_median_randomized.c	/^int rb_sort_doubles_increasing(const void *a, const void *b)$/;"	f
rcb_box	rcb/rcb.h	/^struct rcb_box {       	     \/* bounding box *\/$/;"	s
rcb_fn	rcb/rcb.c	/^static int rcb_fn($/;"	f	file:
rcb_median	rcb/rcb.h	/^struct rcb_median {          \/* RCB cut info *\/$/;"	s
rcb_tree	rcb/rcb.h	/^struct rcb_tree {	     \/* tree of RCB cuts *\/$/;"	s
rdafter	phg/phg_tree.h	/^  int rdafter;    \/* Part of Rdivide *\/$/;"	m	struct:phg_timer_indices
rdbefore	phg/phg_tree.h	/^  int rdbefore;   \/* Part of Rdivide *\/$/;"	m	struct:phg_timer_indices
rdisk	driver/dr_input_const.h	/^  int     rdisk;$/;"	m	struct:Parallel_IO
rdisk	driver_old/dr_input_const.h	/^  int     rdisk;$/;"	m	struct:Parallel_IO
rdisk	fdriver/fdr_input.f90	/^  integer(Zoltan_INT) :: rdisk$/;"	k	type:PARIO_INFO
rdisk	fdriver_old/fdr_input.f90	/^  integer(LB_INT) :: rdisk$/;"	k	type:PARIO_INFO
rdivide_and_prepsend	phg/phg_rdivide.c	/^static int rdivide_and_prepsend(int lo, int hi, Partition final, ZZ *zz,$/;"	f	file:
rdrdivide	phg/phg_tree.h	/^  int rdrdivide;  \/* Rdivide time. *\/$/;"	m	struct:phg_timer_indices
rdredist	phg/phg_tree.h	/^  int rdredist;    \/* Part of Rdivide *\/$/;"	m	struct:phg_timer_indices
rdsend	phg/phg_tree.h	/^  int rdsend;    \/* Part of Rdivide *\/$/;"	m	struct:phg_timer_indices
rdsplit	phg/phg_tree.h	/^  int rdsplit;    \/* Part of Rdivide *\/$/;"	m	struct:phg_timer_indices
rdwait	phg/phg_tree.h	/^  int rdwait;    \/* Part of Rdivide *\/$/;"	m	struct:phg_timer_indices
reachability	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klvspiff/flow.c	/^static void reachability(n_left, n_right, pointers, indices, resid, flow, touched)$/;"	f	file:
reachability	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klvspiff/matching.c	/^static void reachability(n_left, n_right, pointers, indices, matching, touched)$/;"	f	file:
readMMHeader	postprocessing/ordering/mm_input.c	/^readMMHeader($/;"	f
readPrePartition	util/converters_for_JPDC_adaptive_mesh_experiments/chaco2chaco/prepartition.c	/^static int readPrePartition(MESH_INFO_PTR mesh, MESH_INFO_PTR oldMesh, FILE *preFile)$/;"	f	file:
read_broadcast_input_options	util/vtk_view.cpp	/^int read_broadcast_input_options(int &argc, char **argv)$/;"	f
read_chaco_file	driver/dr_chaco_io.c	/^int read_chaco_file(int Proc,$/;"	f
read_chaco_mesh	driver_old/dr_chaco_io.c	/^int read_chaco_mesh(int Proc,$/;"	f
read_chaco_mesh	fdriver/fdr_chaco_io.f90	/^logical function read_chaco_mesh(/;"	f	module:dr_chaco_io
read_chaco_mesh	fdriver_old/fdr_chaco_io.f90	/^logical function read_chaco_mesh(/;"	f	module:dr_chaco_io
read_cmd_file	driver/dr_input.c	/^int read_cmd_file ($/;"	f
read_cmd_file	driver_old/dr_input.c	/^int read_cmd_file(char *filename, PROB_INFO_PTR prob,$/;"	f
read_cmd_file	fdriver/fdr_input.f90	/^logical function read_cmd_file(/;"	f	module:dr_input
read_cmd_file	fdriver_old/fdr_input.f90	/^logical function read_cmd_file(/;"	f	module:dr_input
read_cmd_file	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_inp.c	/^int read_cmd_file($/;"	f
read_comm_map_info	driver/dr_exoII_io.c	/^static int read_comm_map_info(int pexoid, int Proc, PROB_INFO_PTR prob,$/;"	f	file:
read_comm_map_info	driver/dr_exoII_ioCPP.cpp	/^static int read_comm_map_info(int pexoid, int Proc, PROB_INFO_PTR prob,$/;"	f	file:
read_comm_map_info	driver_old/dr_exoII_io.c	/^static int read_comm_map_info(int pexoid, int Proc, PROB_INFO_PTR prob,$/;"	f	file:
read_coords	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int   read_coords;$/;"	m	struct:Problem_Description
read_double	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/input/read_params.c	/^static int read_double(ptr, val)$/;"	f	file:
read_elem_info	driver/dr_exoII_io.c	/^static int read_elem_info(int pexoid, int Proc, PROB_INFO_PTR prob,$/;"	f	file:
read_elem_info	driver/dr_exoII_ioCPP.cpp	/^static int read_elem_info(int pexoid, int Proc, PROB_INFO_PTR prob,$/;"	f	file:
read_elem_info	driver_old/dr_exoII_io.c	/^static int read_elem_info(int pexoid, int Proc, PROB_INFO_PTR prob,$/;"	f	file:
read_exoII_file	driver/dr_exoII_io.c	/^int read_exoII_file(int Proc,$/;"	f
read_exoII_file	driver/dr_exoII_ioCPP.cpp	/^int read_exoII_file(int Proc,$/;"	f
read_exoII_mesh	driver_old/dr_exoII_io.c	/^int read_exoII_mesh(int Proc,$/;"	f
read_exo_weights	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_exo_util.c	/^int read_exo_weights(PROB_INFO_PTR prob,$/;"	f
read_graph_line	fdriver/fdr_chaco_io.f90	/^subroutine read_graph_line(/;"	s	module:dr_chaco_io
read_graph_line	fdriver_old/fdr_chaco_io.f90	/^subroutine read_graph_line(/;"	s	module:dr_chaco_io
read_hypergraph_file	driver/dr_hg_io.c	/^int read_hypergraph_file($/;"	f
read_int	ch/ch_input_read.c	/^int       read_int($/;"	f
read_int	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/input/read_val.c	/^int       read_int(infile, end_flag)$/;"	f
read_intTF	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/input/read_params.c	/^static int read_intTF(ptr, val)$/;"	f	file:
read_long	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/input/read_params.c	/^static int read_long(ptr, val)$/;"	f	file:
read_mesh	ZoltanComponent/TestComponents/Mesh.cpp	/^void ZoltanTestSpace::Mesh::read_mesh()$/;"	f	class:ZoltanTestSpace::Mesh
read_mesh	driver/dr_main.c	/^static int read_mesh($/;"	f	file:
read_mesh	driver/dr_mainCPP.cpp	/^static int read_mesh($/;"	f	file:
read_mesh	driver_old/dr_main.c	/^static int read_mesh($/;"	f	file:
read_mesh	fdriver/fdr_main.f90	/^logical function read_mesh(/;"	f
read_mesh	fdriver_old/fdr_main.f90	/^logical function read_mesh(/;"	f
read_mesh	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_exo_util.c	/^int read_mesh(char exo_file[],$/;"	f
read_mesh	util/vtk_view.cpp	/^static int read_mesh(vtkUnstructuredGrid *ug)$/;"	f	file:
read_mesh_params	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_exo_util.c	/^int read_mesh_params(char exo_file[],$/;"	f
read_mm_file	driver/dr_hg_io.c	/^int read_mm_file($/;"	f
read_mm_file	fdriver/fdr_mm_io.f90	/^logical function read_mm_file(/;"	f	module:dr_mm_io
read_mtxplus_file	driver/dr_hg_io.c	/^int read_mtxplus_file($/;"	f
read_params	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/input/read_params.c	/^void      read_params(pfile)$/;"	f
read_real_line	fdriver/fdr_chaco_io.f90	/^subroutine read_real_line(/;"	s	module:dr_chaco_io
read_real_line	fdriver_old/fdr_chaco_io.f90	/^subroutine read_real_line(/;"	s	module:dr_chaco_io
read_string	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/input/read_params.c	/^static int read_string(ptr, val)$/;"	f	file:
read_val	ch/ch_input_read.c	/^double    read_val($/;"	f
read_val	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/input/read_val.c	/^double    read_val(infile, end_flag)$/;"	f
read_zdrive_output	util/vtk_view.cpp	/^static int read_zdrive_output(int from, int to)$/;"	f	file:
readfile	driver/dr_hg_readfile.c	/^static int readfile ($/;"	f	file:
readfile	util/converters_for_JPDC_adaptive_mesh_experiments/chaco2chaco/main.c	/^void readfile($/;"	f
real	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^typedef float real;$/;"	t
real	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^typedef float real;$/;"	t
realloc	fdriver/fdr_chaco_io.f90	/^subroutine realloc(/;"	s	module:dr_chaco_io
realloc	fdriver_old/fdr_chaco_io.f90	/^subroutine realloc(/;"	s	module:dr_chaco_io
realloc	util/vtk_view.cpp	/^static int *realloc(int *buf, int newsize, int oldsize)$/;"	f	file:
rec_median_1	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/assign/rec_median.c	/^void      rec_median_1(graph, vals, nvtxs, active, cube_or_mesh, nsets,$/;"	f
rec_median_k	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/assign/rec_median.c	/^void      rec_median_k(graph, vals, nvtxs, active, ndims, cube_or_mesh,$/;"	f
recursesort	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/mergesort.c	/^static void recursesort(double *vals, int nvals, int *indices, int *space)$/;"	f	file:
recv_buff	Utilities/Communication/comm.h	/^    char*     recv_buff;  \/* To support POST & WAIT *\/    $/;"	m	struct:Zoltan_Comm_Obj
redist	matrix/matrix.h	/^  int           redist;        \/* HG queries have been used or matrix distribution has changed*\/$/;"	m	struct:Zoltan_matrix_
redl	phg/phg.h	/^  int redl;                      \/* Reduction limit (constant). *\/$/;"	m	struct:PHGPartParamsStruct
redl	phg/phg_hypergraph.h	/^  int redl;         \/* working reduction limit *\/$/;"	m	struct:__anon38
redm_fast	phg/phg.h	/^  char redm_fast[MAX_PARAM_STRING_LEN]; \/* Fast reduction method string. *\/$/;"	m	struct:PHGPartParamsStruct
redm_str	phg/phg.h	/^  char redm_str[MAX_PARAM_STRING_LEN];  \/* Reduction method string. *\/$/;"	m	struct:PHGPartParamsStruct
redmo_str	phg/phg.h	/^  char redmo_str[MAX_PARAM_STRING_LEN]; \/* Matching optimization string*\/$/;"	m	struct:PHGPartParamsStruct
ref	ZoltanComponent/CCA_Wrapper/BaseLB.h	/^    int ref ;$/;"	m	class:ZoltanSpace::BaseLB
ref	ZoltanComponent/CCA_Wrapper/EntityListImpl.h	/^    int proc_size, gid_size, lid_size, user_def_size, ref ;$/;"	m	class:ZoltanSpace::EntityListImpl
refine	phg/phg_tree.h	/^  int refine; \/* Refinement time *\/$/;"	m	struct:phg_timer_indices
refine	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int      refine;$/;"	m	struct:LB_Description
refine_cube	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/refine_map/refine_cube.c	/^int       refine_cube(comm_graph, ndims_tot, maxdesire, vtx2node, node2vtx)$/;"	f
refine_edata	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/refine_map/refine_map.h	/^struct refine_edata {$/;"	s
refine_fm2	phg/phg_refinement.c	/^static ZOLTAN_PHG_REFINEMENT_FN refine_fm2;$/;"	v	file:
refine_fm2	phg/phg_refinement.c	/^static int refine_fm2 (ZZ *zz,$/;"	f	file:
refine_map	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/refine_map/refine_map.c	/^void      refine_map(graph, nvtxs, using_ewgts, assign, cube_or_mesh, ndims_tot,$/;"	f
refine_mesh	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/refine_map/refine_mesh.c	/^int       refine_mesh(comm_graph, cube_or_mesh, mesh_dims, maxdesire,$/;"	f
refine_no	phg/phg_refinement.c	/^static ZOLTAN_PHG_REFINEMENT_FN refine_no;$/;"	v	file:
refine_no	phg/phg_refinement.c	/^static int refine_no (ZZ *zz,     \/* Zoltan data structure *\/$/;"	f	file:
refine_part	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/refine_part/refine_part.c	/^int       refine_part(graph, nvtxs, using_ewgts, assign, architecture,$/;"	f
refine_time	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/timing.c	/^double    refine_time = 0;$/;"	v
refine_vdata	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/refine_map/refine_map.h	/^struct refine_vdata {$/;"	s
refinement_quality	phg/phg.h	/^  float refinement_quality; \/* Adjustment to refinement parameter settings; $/;"	m	struct:PHGPartParamsStruct
refinement_str	phg/phg.h	/^  char refinement_str[MAX_PARAM_STRING_LEN]; \/* Refinement string and *\/$/;"	m	struct:PHGPartParamsStruct
reflect_input	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/input/reflect_input.c	/^void      reflect_input(nvtxs, nedges, igeom, graphname, geomname,$/;"	f
reflect_params	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/input/reflect_input.c	/^static void reflect_params(tempfile, global_method, local_method,$/;"	f	file:
reformat	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/graph/reformat.c	/^int       reformat(start, adjacency, nvtxs, pnedges, vwgts, ewgts, pgraph)$/;"	f
reformat_time	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/timing.c	/^double    reformat_time = 0;$/;"	v
reftree_node	reftree/reftree.h	/^  ZOLTAN_REFTREE *reftree_node; \/* pointer to a node of the refinement tree *\/$/;"	m	struct:Zoltan_Reftree_hash_node
reftree_root	reftree/reftree.h	/^  ZOLTAN_REFTREE *reftree_root;$/;"	m	struct:Zoltan_Reftree_data_struct
region	oct/migreg.h	/^  pRegion region;$/;"	m	struct:__anon34
remainder	Utilities/DDirectory/DD_Set_Neighbor_Hash_Fn3.c	/^  int remainder;$/;"	m	struct:dd_nh3_struct	file:
remake_graph	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/graph/subgraph.c	/^void      remake_graph(subgraph, subnvtxs, loc2glob, degree, using_ewgts)$/;"	f
remoteptr	oct/octant_const.h	/^  struct _Octant *remoteptr;        \/* parent of the octant                 *\/$/;"	m	struct:_Octant	typeref:struct:_Octant::_Octant
removeLB	ZoltanComponent/CCA_Wrapper/PartitionerFactory.h	/^    void removeLB(int i) { my_lbs[i] = 0 ; }$/;"	f	class:ZoltanSpace::PartitionerFactory_JR
remove_dense_edges	phg/phg_build.c	/^static int remove_dense_edges(ZZ *zz, $/;"	f	file:
remove_from_hash	driver/dr_migrate.c	/^void remove_from_hash($/;"	f
remove_msg_size	Utilities/DDirectory/DD.h	/^  int remove_msg_size;    \/* Total allocation for DD_REMOVE_MSG     *\/$/;"	m	struct:Zoltan_DD_Struct
remove_param	params/set_param.c	/^static int remove_param($/;"	f	file:
remove_random_vertices	driver/dr_main.c	/^static void remove_random_vertices(MESH_INFO_PTR mesh, int iteration, $/;"	f	file:
remove_trailing_junk	util/vtk_view.cpp	/^static void remove_trailing_junk(char *cbegin)$/;"	f	file:
removebilist	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klspiff/bilistops.c	/^void      removebilist(lptr, list)$/;"	f
reorder_list	par/par_median_randomized.c	/^static int reorder_list(double *vals, int len, int *pivotIdx, int *idxList)$/;"	f	file:
request	Utilities/Communication/comm.h	/^    MPI_Request *request;       \/* MPI requests for posted recvs *\/$/;"	m	struct:Zoltan_Comm_Obj
reset_arrays	lb/low_mem_lb_migrate.c	/^static void reset_arrays()$/;"	f	file:
restore_ewgts	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klspiff/compress_ewgts.c	/^void      restore_ewgts(graph, nvtxs)$/;"	f
retlist	phg/phg_tree.h	/^  int retlist;  \/* Building return lists time *\/$/;"	m	struct:phg_timer_indices
return_args	order/order_const.h	/^  int return_args;		\/* Out: What return arguments were computed? *\/$/;"	m	struct:Zoltan_Order_Options
rfgain	phg/phg_tree.h	/^  int rfgain;   \/* Part of Refinement *\/$/;"	m	struct:phg_timer_indices
rfheap	phg/phg_tree.h	/^  int rfheap;   \/* Part of Refinement *\/$/;"	m	struct:phg_timer_indices
rfiso	phg/phg_tree.h	/^  int rfiso;   \/* Part of Refinement *\/$/;"	m	struct:phg_timer_indices
rfnonroot	phg/phg_tree.h	/^  int rfnonroot;   \/* Part of Refinement *\/$/;"	m	struct:phg_timer_indices
rfpass	phg/phg_tree.h	/^  int rfpass;   \/* Part of Refinement *\/$/;"	m	struct:phg_timer_indices
rfpins	phg/phg_tree.h	/^  int rfpins;   \/* Part of Refinement *\/$/;"	m	struct:phg_timer_indices
rfrefine	phg/phg_tree.h	/^  int rfrefine;    \/* Refinement time *\/$/;"	m	struct:phg_timer_indices
rfroll	phg/phg_tree.h	/^  int rfroll;   \/* Part of Refinement *\/$/;"	m	struct:phg_timer_indices
rib_fn	rcb/rib.c	/^static int rib_fn($/;"	f	file:
rib_tree	rcb/rib.h	/^struct rib_tree {               \/* tree of rib method cuts *\/$/;"	s
right	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/connect/heap.c	6;"	d	file:
right_leaf	rcb/rcb.h	/^  int       right_leaf;         \/* right child of this node in cut tree *\/$/;"	m	struct:rcb_tree
right_leaf	rcb/rib.h	/^    int       right_leaf;       \/* right child of this node in cut tree *\/$/;"	m	struct:rib_tree
ritz_time	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/timing.c	/^double    ritz_time = 0;$/;"	v
ritzval	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^	double ritzval;		\/* good ritz value *\/		$/;"	m	struct:orthlink
ritzval	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^	double ritzval;		\/* good ritz value *\/		$/;"	m	struct:orthlink_float
rotate2d	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/assign/rotate.c	/^void      rotate2d(yvecs, nmyvtxs, theta)$/;"	f
rotate3d	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/assign/rotate.c	/^void      rotate3d(yvecs, nmyvtxs, theta, phi, gamma2)$/;"	f
roundfloat	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_util.c	/^int roundfloat(const float value)$/;"	f
route	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^	struct list *route;	\/* linked list of ints stores message route *\/$/;"	m	struct:msg_data	typeref:struct:msg_data::list
row_comm	phg/phg_comm.h	/^  MPI_Comm row_comm; \/* my processor's row communicator *\/$/;"	m	struct:PHGCommStruct
rqi	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/eigen/rqi.c	/^void      rqi(A, yvecs, index, n, r1, r2, v, w, x, y, work, tol, initshift, evalest,$/;"	f
rqi_ext	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/eigen/rqi_ext.c	/^void      rqi_ext()$/;"	f
rqi_flag	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int    rqi_flag;$/;"	m	struct:Solver_Description
rqi_symmlq_time	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/timing.c	/^double    rqi_symmlq_time = 0;$/;"	v
run_zoltan	driver/dr_loadbal.c	/^int run_zoltan(struct Zoltan_Struct *zz, int Proc, PROB_INFO_PTR prob,$/;"	f
run_zoltan	driver/dr_loadbalCPP.cpp	/^int run_zoltan(Zoltan &zz, int Proc, PROB_INFO_PTR prob,$/;"	f
run_zoltan	driver_old/dr_loadbal.c	/^int run_zoltan(struct LB_Struct *lb, int Proc, PROB_INFO_PTR prob,$/;"	f
run_zoltan	fdriver/fdr_loadbal.f90	/^logical function run_zoltan(/;"	f	module:dr_loadbal
run_zoltan	fdriver_old/fdr_loadbal.f90	/^logical function run_zoltan(/;"	f	module:dr_loadbal
s	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func2d.c	/^static double s, c;		\/* sign and cosine of angle *\/$/;"	v	file:
s2	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func2d.c	/^static double s2, cos2;		\/* squares of sign and cosine of angle *\/$/;"	v	file:
safe_free	driver/dr_util.c	/^void safe_free(void **ptr) {$/;"	f
safe_free	driver_old/dr_util.c	/^void safe_free(void **ptr) {$/;"	f
same	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/refine_map/refine_map.h	/^	float same;		\/* sum of edge weights keeping me here *\/$/;"	m	struct:refine_vdata
sample_partition	par/par_median_randomized.c	/^static void sample_partition(int numlist, int *dotlist, double *dots, $/;"	f	file:
sassigned	reftree/reftree_build.c	/^static int *sassigned;         \/* 1 if the element is assigned to this proc *\/$/;"	v	file:
save_pnt	ch/ch_input_read.c	/^static int save_pnt;		\/* place in sequence to save *\/$/;"	v	file:
save_pnt	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/input/read_val.c	/^static int save_pnt;		\/* place in sequence to save *\/$/;"	v	file:
scadd	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/scadd.c	/^void      scadd(double *vec1, int beg, int end, double fac, double *vec2)$/;"	f
scadd_float	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/scadd.c	/^void      scadd_float(float *vec1, int beg, int end, float fac, float *vec2)$/;"	f
scadd_mixed	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/scadd.c	/^void      scadd_mixed(double *vec1, int beg, int end, double fac, float *vec2)$/;"	f
scale_diag	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/eigen/scale_diag.c	/^void      scale_diag(vec, beg, end, diag)$/;"	f
scale_diag_float	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/eigen/scale_diag.c	/^void      scale_diag_float(vec, beg, end, diag)$/;"	f
scale_round_weights	parmetis/preprocessing.c	/^static int scale_round_weights(float *fwgts, indextype *iwgts, int n, int dim,$/;"	f	file:
scale_round_weights	phg/phg_parkway.c	/^static int scale_round_weights($/;"	f	file:
scan_time	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/timing.c	/^double    scan_time = 0;$/;"	v
scandescriptor	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_groups.c	/^static void scandescriptor(const char *d, int *blkids, int n, int nblks,$/;"	f	file:
scanlink	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^struct scanlink {$/;"	s
scanmax	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/eigen/scanmax.c	/^void      scanmax(vec, beg, end, scanlist)$/;"	f
scanmin	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/eigen/scanmin.c	/^void      scanmin(vec, beg, end, scanlist)$/;"	f
scatter	parmetis/third_library.h	/^  int scatter;                          \/* Graph has been scattered *\/$/;"	m	struct:ZOLTAN_Third_Graph_
scatter_min	parmetis/third_library.h	/^  int scatter_min;                      \/* Minimum level of scatter *\/$/;"	m	struct:ZOLTAN_Third_Graph_
search_by_global_id	driver/dr_loadbal.c	/^ELEM_INFO *search_by_global_id(MESH_INFO *mesh, int global_id, int *idx)$/;"	f
search_by_global_id	driver/dr_loadbalCPP.cpp	/^ELEM_INFO *search_by_global_id(MESH_INFO *mesh, int global_id, int *idx)$/;"	f
search_by_global_id	driver_old/dr_loadbal.c	/^ELEM_INFO *search_by_global_id(MESH_INFO *mesh, int global_id, int *idx)$/;"	f
search_by_global_id	fdriver/fdr_migrate.f90	/^function search_by_global_id(/;"	f	module:dr_migrate
search_by_global_id	fdriver_old/fdr_migrate.f90	/^function search_by_global_id(/;"	f	module:dr_migrate
search_hash_table	lb/lb_balance.c	/^static int search_hash_table(ZZ *zz, ZOLTAN_ID_PTR gid,$/;"	f	file:
seconds	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/seconds.c	/^double    seconds(void)$/;"	f
self_msg	Utilities/Communication/comm.h	/^    int       self_msg;		\/* do I have data for myself? *\/$/;"	m	struct:Zoltan_Comm_Obj
sendNextStepsForbiddenColors	coloring/coloring.c	/^static int sendNextStepsForbiddenColors(ZZ *zz, G2LHash *hash, int nlvtx, int p, int **srp, int *xadj, int *adj, int *xadjnl, int *adjnl,$/;"	f	file:
sep_cost	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klvspiff/bpm_improve.c	/^static double sep_cost(size1, size2, size_sep, max_dev)$/;"	f	file:
sep_sizes	order/order_const.h	/^  int *sep_sizes;               \/* Optional: Separator sizes. *\/$/;"	m	struct:Zoltan_Order_Struct
sep_sizes	parmetis/third_library.h	/^  indextype *sep_sizes;$/;"	m	struct:ZOLTAN_Output_Order_
seq_part	phg/phg_serialpartition.c	/^static int seq_part ($/;"	f	file:
sequence	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/sequence.c	/^void      sequence(graph, nvtxs, nedges, using_ewgts, vwsqrt,$/;"	f
sequence_time	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/timing.c	/^double 	  sequence_time = 0;$/;"	v
serialIterations	par/par_median_randomized.c	/^static int serialIterations=0;$/;"	v	file:
serial_find_median2	par/par_median_randomized.c	/^static double serial_find_median2(double *dots, double *wgts, int *dotidx, int dotnum, int *count)$/;"	f	file:
serial_fm2	phg/phg_refinement.c	/^static int serial_fm2 (ZZ *zz,$/;"	f	file:
serial_rcb	rcb/rcb.c	/^static int serial_rcb($/;"	f	file:
serial_rib	rcb/rib.c	/^static int serial_rib($/;"	f	file:
set_hier_part_sizes	hier/hier.c	/^static int set_hier_part_sizes(HierPartParams *hpp, float *part_sizes) {$/;"	f	file:
set_info	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^struct set_info {$/;"	s
set_neigh	reftree/reftree_coarse_path.c	/^static int set_neigh(ZOLTAN_ID_PTR vertices, int *num_vert,$/;"	f	file:
set_nemesis_file_names_or_pattern	util/vtk_view.cpp	/^static int set_nemesis_file_names_or_pattern(char *baseName,$/;"	f	file:
set_number_of_zdrive_processes	util/vtk_view.cpp	/^static int set_number_of_zdrive_processes(char *fname, char **disks)$/;"	f	file:
set_preset_dir	rcb/rcb.c	/^static int set_preset_dir($/;"	f	file:
set_remap_type	lb/lb_remap.c	/^static int set_remap_type($/;"	f	file:
setnum	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^	short setnum;		\/* assignment value for this set *\/$/;"	m	struct:set_info
setrandom	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/randomize.c	/^void      setrandom(long int seed)$/;"	f
setup_fixed_obj	driver/dr_setfixed.c	/^void setup_fixed_obj(MESH_INFO_PTR mesh, int Num_Global_Parts)$/;"	f
setup_zoltan	driver/dr_loadbal.c	/^int setup_zoltan(struct Zoltan_Struct *zz, int Proc, PROB_INFO_PTR prob,$/;"	f
setup_zoltan	driver/dr_loadbalCPP.cpp	/^int setup_zoltan(Zoltan &zz, int Proc, PROB_INFO_PTR prob,$/;"	f
setup_zoltan	driver_old/dr_loadbal.c	/^int setup_zoltan(struct LB_Struct *lb, int Proc, PROB_INFO_PTR prob,$/;"	f
setupvmap	phg/phg_tree.h	/^  int setupvmap;$/;"	m	struct:phg_timer_indices
setvec	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/setvec.c	/^void      setvec(double *vec, int beg, int end, double setval)$/;"	f
setvec_float	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/setvec.c	/^void      setvec_float(float *vec, int beg, int end, float setval)$/;"	f
sfc_coarse_grid_path	reftree/reftree_coarse_path.c	/^static int sfc_coarse_grid_path(int nobj, int *num_vert, ZOLTAN_ID_PTR vertices,$/;"	f	file:
sfree	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/smalloc.c	/^void sfree(void *ptr)$/;"	f
sgamma	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double sgamma, cgamma;	\/* squares of sign and cosine of angle *\/$/;"	v	file:
sgi	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	196;"	d
sgi	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	196;"	d
shared_vert	reftree/reftree_coarse_path.c	/^static int ****shared_vert;$/;"	v	file:
shell_sort	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/shell_sort.c	/^void      shell_sort(int n, double *arr)$/;"	f
shortint	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^typedef short int shortint;$/;"	t
shortint	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^typedef short int shortint;$/;"	t
shortlogical	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^typedef short int shortlogical;$/;"	t
shortlogical	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^typedef short int shortlogical;$/;"	t
showMoveVol	parmetis/third_library.h	/^  int showMoveVol;                      \/* How works the final output *\/$/;"	m	struct:ZOLTAN_Third_Graph_
showMoveVol	phg/phg_hypergraph.h	/^  int showMoveVol;          \/* compute and show move (migration) volume *\/$/;"	m	struct:Zoltan_HGraph
showPartitionNumber	util/vtk_view.cpp	/^static int showPartitionNumber = -1;$/;"	v	file:
show_edges	phg/phg_verbose.c	/^void show_edges(char *s, ZZ *zz, int num_lists, int num_pins,$/;"	f
side_id	driver/dr_maps.c	/^  int *side_id;$/;"	m	struct:map_list_head	file:
side_id	driver/dr_mapsCPP.cpp	/^  int *side_id;$/;"	m	struct:map_list_head	file:
side_id	driver_old/dr_maps.c	/^  int *side_id;$/;"	m	struct:map_list_head	file:
side_id	fdriver/fdr_chaco_io.f90	/^  integer(Zoltan_INT), pointer :: side_id(/;"	k	type:map_list_head
side_id	fdriver_old/fdr_chaco_io.f90	/^  integer(LB_INT), pointer :: side_id(/;"	k	type:map_list_head
sier2d	reftree/reftree_coarse_path.c	/^static double sier2d(double x, double y, int state, int level, double addf,$/;"	f	file:
sign	rcb/inertial2d.c	34;"	d	file:
sign	rcb/inertial3d.c	34;"	d	file:
sign	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/defs.h	3;"	d
sign_normalize	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/normalize.c	/^double    sign_normalize(double *vec, int beg, int end, int k)$/;"	f
sim_time	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/timing.c	/^double    sim_time = 0;$/;"	v
simple_part	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/simple_part.c	/^void      simple_part(graph, nvtxs, sets, nsets, simple_type, goal)$/;"	f
sin_vertex	reftree/reftree_build.c	/^static ZOLTAN_ID_PTR sin_vertex; \/* "in" vertex for each coarse element *\/$/;"	v	file:
size	Utilities/Memory/mem.c	/^  size_t    size;			\/* size of malloc invocation *\/$/;"	m	struct:malloc_debug_data	file:
size	coloring/g2l_hash.h	/^    int   size;          \/* number of ids stored in the hash *\/$/;"	m	struct:G2L_Hash
size	driver/dr_compress_const.h	/^  int size;$/;"	m	struct:ZOLTAN_FILE_
size	phg/phg_lookup.h	/^  int           size;       \/* number of edges *\/$/;"	m	struct:_myEW
size	phg/phg_lookup.h	/^  int           size;      \/* number of vertices assigned to this process *\/$/;"	m	struct:_hshVtx
size	phg/phg_tree.h	/^  int size;$/;"	m	struct:Zoltan_PHG_Tree_
size	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/smalloc.c	/^  size_t   size;		\/* size of malloc invocation *\/$/;"	m	struct:smalloc_debug_data	file:
sizeParts	phg/phg_tree.c	/^  int sizeParts;$/;"	m	struct:Zoltan_PHG_LB_Data_	file:
sizeTag	lb/low_mem_lb_migrate.c	/^static int ackTag = 10000, dataTag = 20000, sizeTag=30000;$/;"	v	file:
sizes	Utilities/Communication/comm.h	/^    int      *sizes;            \/* size of each item to send (if items vary) *\/$/;"	m	struct:Zoltan_Comm_Obj
sizes_from	Utilities/Communication/comm.h	/^    int      *sizes_from;       \/* size of each msg to recv (if items vary) *\/$/;"	m	struct:Zoltan_Comm_Obj
sizes_to	Utilities/Communication/comm.h	/^    int      *sizes_to;         \/* size of each msg to send (if items vary) *\/$/;"	m	struct:Zoltan_Comm_Obj
skipLine	postprocessing/ordering/mm_input.c	/^int skipLine(FILE * const stream)$/;"	f
skip_checks	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int   skip_checks;      \/* put in to skip some error checks for some meshes  *\/$/;"	m	struct:Problem_Description
slocal_gids	reftree/reftree_build.c	/^static ZOLTAN_ID_PTR slocal_gids;  \/* coarse element Global IDs from user *\/$/;"	v	file:
slocal_lids	reftree/reftree_build.c	/^static ZOLTAN_ID_PTR slocal_lids;  \/* coarse element Local IDs from user *\/$/;"	v	file:
smalloc	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/smalloc.c	/^void *smalloc(size_t n)$/;"	f
smalloc	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_allo.c	/^static void *smalloc (size_t n)$/;"	f	file:
smalloc_debug_data	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/smalloc.c	/^static struct smalloc_debug_data {$/;"	s	file:
smalloc_num	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/smalloc.c	/^int       smalloc_num(void)$/;"	f
smalloc_ret	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/smalloc.c	/^void *smalloc_ret(size_t n)$/;"	f
smalloc_stats	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/smalloc.c	/^void smalloc_stats(void)$/;"	f
snum_vert	reftree/reftree_build.c	/^static int *snum_vert;         \/* number of vertices for each coarse element *\/$/;"	v	file:
solistout	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/eigen/solistout.c	/^void      solistout(solist, n, ngood, j)$/;"	f
solistout_float	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/eigen/solistout.c	/^void      solistout_float(solist, n, ngood, j)$/;"	f
sorder	reftree/reftree_build.c	/^static int *sorder;            \/* order of the children *\/$/;"	v	file:
sort2_index	driver/dr_util.c	/^void sort2_index(int n, int ra[], int sa[], int indx[])$/;"	f
sort2_index	driver_old/dr_util.c	/^void sort2_index(int n, int ra[], int sa[], int indx[])$/;"	f
sort2_index	fdriver/fdr_chaco_io.f90	/^subroutine sort2_index(/;"	s	module:dr_chaco_io
sort2_index	fdriver_old/fdr_chaco_io.f90	/^subroutine sort2_index(/;"	s	module:dr_chaco_io
sort2_int_int	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_util.c	/^void sort2_int_int(int n, int *ra, int *rb)$/;"	f
sort3_int_int_int	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_util.c	/^void sort3_int_int_int(int n, int *ra, int *rb, int *rc)$/;"	f
sort4_iiii	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_util.c	/^void sort4_iiii(int n, int *ra, int *rb, int *rc, int *rd)$/;"	f
sort_and_compare_maps	driver/dr_maps.c	/^static void sort_and_compare_maps($/;"	f	file:
sort_and_compare_maps	driver/dr_mapsCPP.cpp	/^static void sort_and_compare_maps($/;"	f	file:
sort_and_compare_maps	driver_old/dr_maps.c	/^static void sort_and_compare_maps($/;"	f	file:
sort_gids_ptrs	hier/hier.c	/^static int sort_gids_ptrs($/;"	f	file:
sort_index	driver/dr_util.c	/^void sort_index(int n, int ra[], int indx[])$/;"	f
sort_index	reftree/reftree_coarse_path.c	/^static void sort_index(int n, double ra[], int indx[])$/;"	f	file:
sort_int	driver_old/dr_util.c	/^void sort_int(int n, int ra[])$/;"	f
sort_int	fdriver_old/fdr_main.f90	/^subroutine sort_int(/;"	s
sorthog	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/eigen/sorthog.c	/^void      sorthog(vec, n, solist, ngood)$/;"	f
sorthog_float	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/eigen/sorthog.c	/^void      sorthog_float(vec, n, solist, ngood)$/;"	f
sorts2d	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/bpmatch/sorts2d.c	/^void      sorts2d(vals, indices, nvtxs)$/;"	f
sorts3d	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/bpmatch/sorts3d.c	/^void      sorts3d(vals, indices, nvtxs)$/;"	f
sout_vertex	reftree/reftree_build.c	/^static ZOLTAN_ID_PTR sout_vertex; \/* "out" vertex for each coarse element *\/$/;"	v	file:
space	zz/zz_heap.h	/^   int    space;$/;"	m	struct:__anon36
span	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^	short span[3];		\/* size of grid dimensions if mesh *\/$/;"	m	struct:set_info
sparc	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	197;"	d
sparc	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	197;"	d
specialSingleFile	util/vtk_view.cpp	/^static int specialSingleFile = 0;$/;"	v	file:
speed	matrix/matrix.h	/^  SpeedOpt speed;$/;"	m	struct:Zoltan_matrix_options_
sphi	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double sphi, cphi;	\/* sign and cosine of angle *\/$/;"	v	file:
splarax	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/eigen/splarax.c	/^void      splarax(result, mat, n, vec, vwsqrt, work)$/;"	f
splarax_float	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/eigen/splarax.c	/^void      splarax_float(result, mat, n, vec, vwsqrt, work)$/;"	f
splarax_time	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/timing.c	/^double    splarax_time = 0;$/;"	v
split_comm	hier/hier.c	/^static int split_comm(HierPartParams *hpp) {$/;"	f	file:
split_hypergraph	phg/phg_rdivide.c	/^static int split_hypergraph (int *pins[2], HGraph *ohg, HGraph *nhg, $/;"	f	file:
srealloc	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/smalloc.c	/^void *srealloc(void *ptr, size_t n)$/;"	f
srealloc_ret	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/smalloc.c	/^void *srealloc_ret(void *ptr, size_t n)$/;"	f
ss_to_node_list	driver/dr_elem.c	/^int ss_to_node_list(const E_Type etype, const int *connect, int side_num,$/;"	f
ss_to_node_list	driver_old/dr_elem.c	/^int ss_to_node_list(const E_Type etype, const int *connect, int side_num,$/;"	f
ss_to_node_list	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_elem.c	/^int ss_to_node_list(const E_Type etype, const int *connect, int side_num,$/;"	f
ssize	reftree/reftree_build.c	/^static int ssize;$/;"	v	file:
stack_node	matrix/common_sort.c	/^  } stack_node;$/;"	t	typeref:struct:__anon6	file:
start	order/order_const.h	/^  int *start;                   \/* Out: start[i] is the first vertex of block i *\/$/;"	m	struct:Zoltan_Order_Struct
start	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int     *start;$/;"	m	struct:Graph_Description
start_index	order/order_const.h	/^  int  start_index;$/;"	m	struct:Zoltan_Order_Struct
start_index	order/order_const.h	/^  int start_index;		\/* In: Permutations start at 0 or 1? *\/$/;"	m	struct:Zoltan_Order_Options
start_index	parmetis/third_library.h	/^  int start_index;$/;"	m	struct:ZOLTAN_Output_Order_
start_monitors	ha/ha_drum.h	/^  int start_monitors;                \/* should Zoltan start\/stop monitors? *\/$/;"	m	struct:Zoltan_Drum_Struct
start_time	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/timing.c	/^double    start_time = -1;$/;"	v
starts_from	Utilities/Communication/comm.h	/^    int      *starts_from;	\/* where in item lists each recv starts *\/$/;"	m	struct:Zoltan_Comm_Obj
starts_from_ptr	Utilities/Communication/comm.h	/^    int      *starts_from_ptr;	\/* where in dense each recv starts *\/$/;"	m	struct:Zoltan_Comm_Obj
starts_to	Utilities/Communication/comm.h	/^    int      *starts_to;	\/* where in item lists each send starts *\/$/;"	m	struct:Zoltan_Comm_Obj
starts_to_ptr	Utilities/Communication/comm.h	/^    int      *starts_to_ptr;	\/* where in dense array sends starts *\/$/;"	m	struct:Zoltan_Comm_Obj
state2d	hsfc/hsfc_hilbert_const.h	/^static unsigned const int state2d[] = \/* nkey to 2 dimension state transitions *\/$/;"	v
state2d	util/converters_for_JPDC_adaptive_mesh_experiments/chaco2chaco/hsfc_hilbert_const.h	/^static unsigned const int state2d[] = \/* nkey to 2 dimension state transitions *\/$/;"	v
state3d	hsfc/hsfc_hilbert_const.h	/^static unsigned const state3d [] = { \/* nkey to 3 dimension state transitions *\/$/;"	v
state3d	util/converters_for_JPDC_adaptive_mesh_experiments/chaco2chaco/hsfc_hilbert_const.h	/^static unsigned const state3d [] = { \/* nkey to 3 dimension state transitions *\/$/;"	v
status	Utilities/Communication/comm.h	/^    MPI_Status *status;		\/* MPI status for those recvs *\/$/;"	m	struct:Zoltan_Comm_Obj
stderr	fdriver/fdr_param_file.f90	/^integer, parameter :: stderr /;"	v	module:dr_param_file
stderr	fort/fwrap.f90	/^integer, parameter :: stderr /;"	v	module:zoltan
stdout	fdriver/fdr_param_file.f90	/^integer, parameter :: stderr = 0, stdout /;"	v	module:dr_param_file
stheta	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/optimize/func3d.c	/^static double stheta, ctheta;	\/* sign and cosine of angle *\/$/;"	v	file:
str	fdriver/fdr_const.f90	/^   character(len=MAX_PARAMETER_LEN) :: str(/;"	k	type:Parameter_Pair
str	fdriver_old/fdr_const.f90	/^   character(len=MAX_PARAMETER_LEN) :: str(/;"	k	type:Parameter_Pair
string_to_lower	driver/dr_util.c	/^void string_to_lower(char in_string[], const char cval)$/;"	f
string_to_lower	driver_old/dr_util.c	/^void string_to_lower(char in_string[], const char cval)$/;"	f
string_to_lower	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_util.c	/^void string_to_lower(char in_string[], const char cval)$/;"	f
strip_string	driver/dr_util.c	/^void strip_string(char inp_str[], const char *tokens)$/;"	f
strip_string	driver_old/dr_util.c	/^void strip_string(char inp_str[], const char *tokens)$/;"	f
strip_string	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_util.c	/^void strip_string(char inp_str[], const char *tokens)$/;"	f
strm	driver/dr_compress_const.h	/^  } strm ;$/;"	m	struct:ZOLTAN_FILE_	typeref:union:ZOLTAN_FILE_::__anon39
strout	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/strout.c	/^void      strout(char *msg)$/;"	f
sturmcnt	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/eigen/sturmcnt.c	/^int       sturmcnt(alpha, beta, j, mu, p)$/;"	f
submain	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/submain/submain.c	/^int       submain(graph, nvtxs, nedges, using_vwgts, using_ewgts, igeom, coords,$/;"	f
suffix	util/vtk_view.cpp	/^static char *suffix[6] = {$/;"	v	file:
summed_weight	reftree/reftree.h	/^   float *summed_weight; \/* sum of the weights in the subtree rooted at$/;"	m	struct:Zoltan_Reftree_Struct
sun	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	198;"	d
sun	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	198;"	d
sun2	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	199;"	d
sun2	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	199;"	d
sun3	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	200;"	d
sun3	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	200;"	d
sun4	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	201;"	d
sun4	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	201;"	d
sur_elem	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int    **sur_elem;$/;"	m	struct:Graph_Description
sval	params/params_const.h	/^  char sval[MAX_PARAM_STRING_LEN + 1];$/;"	m	struct:Param_Utype
svc	ZoltanComponent/CCA_Wrapper/PartitionerFactory.h	/^    virtual void setServices( CONV_NS(Services) *svc) ;$/;"	m	class:ZoltanSpace::PartitionerFactory_JR
svc	ZoltanComponent/TestComponents/Driver.h	/^    virtual void setServices( CONV_NS(Services) *svc) ;$/;"	m	class:ZoltanTestSpace::Driver
svc	ZoltanComponent/TestComponents/Mesh.h	/^    virtual void setServices( CONV_NS(Services) *svc) ;$/;"	m	class:ZoltanTestSpace::Mesh
svert1	reftree/reftree_build.c	/^static int *svert1;        \/* array containing the first vertex for each child*\/$/;"	v	file:
svertices	reftree/reftree_build.c	/^static ZOLTAN_ID_PTR svertices; \/* vertices for the coarse elements *\/$/;"	v	file:
swap2	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_util.c	/^void swap2(int *v1, int *v2, int i, int j)$/;"	f
swap4	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_util.c	/^void swap4(int *v1, int *v2, int *v3, int *v4, int i, int j)$/;"	f
swap_desire	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/refine_map/refine_map.h	/^	float swap_desire;	\/* reduction in hops if edge is flipped *\/$/;"	m	struct:refine_edata
symmetrize	matrix/matrix.h	/^  int symmetrize;              \/* What kind of symmetry we have to apply, not used yet *\/$/;"	m	struct:Zoltan_matrix_options_
symmlq	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/symmlq.f	/^      subroutine symmlq(/;"	s
symmlq_	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/symmlq.c	/^\/* Subroutine *\/ int symmlq_(n, b, r1, r2, v, w, x, y, work, checka, goodb, $/;"	f
table	Utilities/DDirectory/DD.h	/^  DD_Node *table[1];      \/* Hash table, heads of the link lists    *\/$/;"	m	struct:Zoltan_DD_Struct
table	coloring/g2l_hash.h	/^    G2LHashNode **table;$/;"	m	struct:G2L_Hash
table_length	Utilities/DDirectory/DD.h	/^  int table_length;       \/* # of heads of linked lists             *\/$/;"	m	struct:Zoltan_DD_Struct
table_size	phg/phg_lookup.h	/^  int table_size;$/;"	m	struct:_GID_lookup
tag	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^	int    tag;             \/* info associated with value *\/$/;"	m	struct:heap
tagVCycle	phg/phg_Vcycle.c	/^typedef struct tagVCycle {$/;"	s	file:
tag_regions	oct/migtags.c	/^static int tag_regions(ZZ *zz,$/;"	f	file:
tau	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^	double tau;		\/* from orthogonality recursion *\/$/;"	m	struct:orthlink
tau	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^	double tau;		\/* from orthogonality recursion *\/$/;"	m	struct:orthlink_float
tempInt	par/par_median_randomized.c	/^static int tempInt;$/;"	v	file:
tempVal	par/par_median_randomized.c	/^static double tempVal;$/;"	v	file:
temp_incoming	ZoltanComponent/CCA_Wrapper/PartitionerFactory.h	/^    EntityListImpl *temp_incoming, *temp_outgoing ;$/;"	m	class:ZoltanSpace::PartitionerFactory_JR
temp_outgoing	ZoltanComponent/CCA_Wrapper/PartitionerFactory.h	/^    EntityListImpl *temp_incoming, *temp_outgoing ;$/;"	m	class:ZoltanSpace::PartitionerFactory_JR
test_box_drops	driver/dr_loadbal.c	/^static void test_box_drops($/;"	f	file:
test_box_drops	driver/dr_loadbalCPP.cpp	/^static void test_box_drops($/;"	f	file:
test_box_drops	fdriver/fdr_loadbal.f90	/^subroutine test_box_drops(/;"	s	module:dr_loadbal
test_candidate	par/par_median_randomized.c	/^static int test_candidate(int *numlist, int *dotlist, double *dots, int *dotmark, $/;"	f	file:
test_drops	driver/dr_loadbal.c	/^static void test_drops($/;"	f	file:
test_drops	driver/dr_loadbalCPP.cpp	/^static void test_drops($/;"	f	file:
test_drops_rtn	fdriver/fdr_loadbal.f90	/^subroutine test_drops_rtn(/;"	s	module:dr_loadbal
test_function	util/memory_usage/commdup.c	/^void test_function()$/;"	f
test_function	util/memory_usage/commsplit.c	/^void test_function()$/;"	f
test_function	util/memory_usage/rcblike.c	/^void test_function()$/;"	f
test_point_drops	driver/dr_loadbal.c	/^static void test_point_drops($/;"	f	file:
test_point_drops	driver/dr_loadbalCPP.cpp	/^static void test_point_drops($/;"	f	file:
test_point_drops	fdriver/fdr_loadbal.f90	/^subroutine test_point_drops(/;"	s	module:dr_loadbal
tevec_time	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/timing.c	/^double    tevec_time = 0;$/;"	v
time_kernels	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/time_kernels.c	/^void      time_kernels(A, n, vwsqrt)$/;"	f
time_out	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/timing.c	/^void      time_out(outfile)$/;"	f
timer	phg/phg_Vcycle.c	/^    struct Zoltan_Timer *timer;   \/* timer for this level of the V-cycle *\/$/;"	m	struct:tagVCycle	typeref:struct:tagVCycle::Zoltan_Timer	file:
timer_coarse	phg/phg_Vcycle.c	/^    int timer_coarse;             \/* Declared static so we can accumulate *\/$/;"	m	struct:tagVCycle	file:
timer_match	phg/phg_Vcycle.c	/^    int timer_match;              \/* Timers for various stages *\/$/;"	m	struct:tagVCycle	file:
timer_project	phg/phg_Vcycle.c	/^    int timer_project;$/;"	m	struct:tagVCycle	file:
timer_refine	phg/phg_Vcycle.c	/^    int timer_refine;             \/* times over calls to Zoltan_PHG_Partition *\/$/;"	m	struct:tagVCycle	file:
timers	phg/phg_tree.c	/^  struct phg_timer_indices * timers;$/;"	m	struct:Zoltan_PHG_LB_Data_	typeref:struct:Zoltan_PHG_LB_Data_::phg_timer_indices	file:
tinvit	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/tinvit.f	/^      subroutine tinvit(/;"	s
tinvit_	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/tinvit.c	/^\/* Subroutine *\/ int tinvit_(nm, n, d, e, e2, m, w, ind, z, ierr, rv1, rv2, $/;"	f
title	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  char    title[MAX_LINE_LENGTH+1];$/;"	m	struct:Mesh_Description
tmpcost	oct/dfs.c	/^static float tmpcost;$/;"	v	file:
to_add	reftree/reftree_coarse_path.c	/^static int **to_add;$/;"	v	file:
to_add_dim	reftree/reftree_coarse_path.c	/^static int *to_add_dim;$/;"	v	file:
to_add_ptr	reftree/reftree_coarse_path.c	/^static int *to_add_ptr;$/;"	v	file:
token_compare	driver/dr_util.c	/^int token_compare(char *token, const char *key)$/;"	f
token_compare	driver_old/dr_util.c	/^int token_compare(char *token, const char *key)$/;"	f
token_compare	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_util.c	/^int token_compare(char *token, const char *key)$/;"	f
tolerance	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  double tolerance;$/;"	m	struct:Solver_Description
top	Utilities/Memory/mem.c	/^} *top = NULL;$/;"	v	typeref:struct:malloc_debug_data	file:
top	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/smalloc.c	/^}        *top = NULL;$/;"	v	typeref:struct:smalloc_debug_data	file:
top	zz/zz_map.c	/^  ZOLTAN_ENTRY *top;      \/* if dynamicEntries==0, entries are here *\/$/;"	m	struct:Zoltan_Map_List	file:
top_id	zz/zz_const.h	/^  int top_id;          \/* See `topology types' defined below *\/$/;"	m	struct:__anon37
total	oct/dfs.c	/^static float total;                \/* Cost of all complete partitions so far *\/$/;"	v	file:
total_	Utilities/DDirectory/DD_Set_Neighbor_Hash_Fn3.c	/^  int total_;};$/;"	m	struct:dd_nh3_struct	file:
total_leak	util/memory_usage/commdup.c	/^size_t total_leak = 0;$/;"	v
total_leak	util/memory_usage/commsplit.c	/^size_t total_leak = 0;$/;"	v
total_recv_size	Utilities/Communication/comm.h	/^    int       total_recv_size;	\/* total amount of data I'll recv (w\/ self) *\/$/;"	m	struct:Zoltan_Comm_Obj
total_time	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/misc/timing.c	/^double    total_time = 0;$/;"	v
totalhi	par/par_bisect.c	/^  double  totalhi[MAX_BISECT_WGTS]; \/* weight in upper half of active partition *\/$/;"	m	struct:bisector	file:
totalhi	par/par_median.c	/^  double    totallo, totalhi;   \/* weight in each half of active partition *\/$/;"	m	struct:median	file:
totalhi	rcb/rcb.h	/^  double    totallo, totalhi;   \/* weight in each half of active partition *\/$/;"	m	struct:rcb_median
totallo	par/par_bisect.c	/^  double  totallo[MAX_BISECT_WGTS]; \/* weight in lower half of active partition *\/$/;"	m	struct:bisector	file:
totallo	par/par_median.c	/^  double    totallo, totalhi;   \/* weight in each half of active partition *\/$/;"	m	struct:median	file:
totallo	rcb/rcb.h	/^  double    totallo, totalhi;   \/* weight in each half of active partition *\/$/;"	m	struct:rcb_median
touch	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klvspiff/flow.c	/^static void touch(node, pointers, indices, resid, flow, touched, flow1, seen, nseen)$/;"	f	file:
touch	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klvspiff/matching.c	/^static int touch(node, pointers, indices, matching, touched, seen, nseen)$/;"	f	file:
touch2	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klvspiff/flow.c	/^static int touch2(node, pointers, indices, flow, touched)$/;"	f	file:
touch2	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klvspiff/matching.c	/^static int touch2(node, pointers, indices, matching, touched)$/;"	f	file:
tqli	zz/zz_coord.c	/^static int tqli(double *d,     \/* input from tred2, output is eigenvalues *\/$/;"	f	file:
tran	hsfc/hsfc.h	/^   ZZ_Transform tran;            \/* transformation for degenerate geometry *\/$/;"	m	struct:HSFC_Data
transform_coordinates	zz/zz_coord.c	/^static void transform_coordinates(double *coords, int num_obj, int d,$/;"	f	file:
translation	ZoltanComponent/CCA_Wrapper/BaseLB.h	/^    map<string, string> translation ;$/;"	m	class:ZoltanSpace::BaseLB
tred2	zz/zz_coord.c	/^static void tred2(double (*a)[3],  \/* Q on output *\/$/;"	f	file:
tree	phg/phg_tree.c	/^  Zoltan_PHG_Tree * tree;$/;"	m	struct:Zoltan_PHG_LB_Data_	file:
tri_prod	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/tri_prod.c	/^double    tri_prod(double *v1, double *v2, double *v3, double *wsqrt, int n)$/;"	f
tri_solve	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/eigen/tri_solve.c	/^void      tri_solve(alpha, beta, j, lambda, v, b, d, e)$/;"	f
triplet	phg/phg_match.c	/^typedef struct triplet {$/;"	s	file:
true_or_false	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/true_or_false.c	/^char     *true_or_false(int flag)$/;"	f
try_adding_all	reftree/reftree_coarse_path.c	/^static int try_adding_all(int *ierr, ZZ *zz)$/;"	f	file:
turn_off_reduce_dimensions	zz/zz_gen_files.c	/^static int turn_off_reduce_dimensions(ZZ *zz)$/;"	f	file:
type	driver/dr_compress_const.h	/^  ZOLTAN_FILETYPE type;$/;"	m	struct:ZOLTAN_FILE_
type	oct/octant_const.h	/^  OctType type;$/;"	m	struct:_Octant
type	params/params_const.h	/^  char *type;			\/* type of parameter: *\/$/;"	m	struct:Param_Vars
type	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^	int  type;$/;"	m	struct:Vardesc
type	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^	int  type;$/;"	m	struct:Vardesc
type	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int      type;$/;"	m	struct:LB_Description
type	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int   type;  \/* See weight type below for possible types *\/$/;"	m	struct:Weight_Description
type	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int   type;$/;"	m	struct:Problem_Description
type	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int type;$/;"	m	struct:Machine_Description
type	zz/zz_const.h	/^  int *type;            \/* type[i] is the `node type pointer' of subnode i *\/$/;"	m	struct:__anon37
u370	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	202;"	d
u370	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	202;"	d
u3b	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	203;"	d
u3b	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	203;"	d
u3b2	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	204;"	d
u3b2	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	204;"	d
u3b5	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	205;"	d
u3b5	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	205;"	d
uMe	phg/phg_util.h	29;"	d
undo_coupling	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/bpmatch/movevtxs.c	/^static void undo_coupling(graph, sets, nsets, from, to, toobig, badset, size)$/;"	f	file:
unix	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	206;"	d
unix	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	206;"	d
update	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/update.c	/^void      update(double *vec1, int beg, int end, double *vec2, double fac, double *vec3)$/;"	f
update_cube_edata	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/refine_map/update_cube_edata.c	/^void      update_cube_edata(vertex, dim, edata, vdata, comm_graph,$/;"	f
update_cube_vdata	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/refine_map/update_cube_vdata.c	/^void      update_cube_vdata(old_side, mask, neighbor_node, ewgt, vdata)$/;"	f
update_elem_dd	driver/dr_dd.c	/^int update_elem_dd(MESH_INFO_PTR mesh)$/;"	f
update_elem_dd	driver/dr_ddCPP.cpp	/^int update_elem_dd(MESH_INFO_PTR mesh)$/;"	f
update_float	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/update.c	/^void      update_float(float *vec1, int beg, int end, float *vec2, float fac, float *vec3)$/;"	f
update_hvertex_proc	driver/dr_dd.c	/^int update_hvertex_proc(MESH_INFO_PTR mesh)$/;"	f
update_hvertex_proc	driver/dr_ddCPP.cpp	/^int update_hvertex_proc(MESH_INFO_PTR mesh)$/;"	f
update_mesh_edata	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/refine_map/update_mesh_edata.c	/^void      update_mesh_edata(vertex, dim, edata, vdata, comm_graph, mesh_dims,$/;"	f
update_mesh_vdata	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/refine_map/update_mesh_vdata.c	/^void      update_mesh_vdata(old_loc, new_loc, dim, ewgt, vdata, mesh_dims,$/;"	f
update_msg_size	Utilities/DDirectory/DD.h	/^  int update_msg_size;    \/* Total allocation for DD_UPDATE_MSG     *\/$/;"	m	struct:Zoltan_DD_Struct
update_partition_id_map	util/vtk_view.cpp	/^static void update_partition_id_map()$/;"	f	file:
update_partition_ids	util/vtk_view.cpp	/^static void update_partition_ids(int *eltIds, vtkIntArray *partids)$/;"	f	file:
uprintf	phg/phg_util.h	30;"	d
uqsorti	phg/phg_coarse.c	/^static void uqsorti(int n, int *arr)$/;"	f	file:
usage	postprocessing/bin/toscotchperm.py	/^def usage():$/;"	f
usage	postprocessing/ordering/ordering.py	/^def usage():$/;"	f
usage	postprocessing/ordering/toscotchperm.py	/^def usage():$/;"	f
usage	util/vtk_view.cpp	/^static void usage()$/;"	f	file:
useMultilevel	phg/phg.h	/^  int useMultilevel;             \/* Flag indicating whether to use multilevel$/;"	m	struct:PHGPartParamsStruct
use_drum	ha/ha_drum.h	/^  int use_drum;                      \/* is DRUM to be used? *\/$/;"	m	struct:Zoltan_Drum_Struct
use_flat_model	ha/ha_drum.h	/^  int use_flat_model;                \/* should DRUM build a flat network model? *\/$/;"	m	struct:Zoltan_Drum_Struct
use_geom	hier/hier.h	/^  int use_geom, use_graph;           \/* flags for whether methods to be$/;"	m	struct:HierPartParamsStruct
use_graph	hier/hier.h	/^  int use_geom, use_graph;           \/* flags for whether methods to be$/;"	m	struct:HierPartParamsStruct
use_kstat	ha/ha_drum.h	/^  int use_kstat;                     \/* should DRUM use kstat for monitoring? *\/$/;"	m	struct:Zoltan_Drum_Struct
use_network_powers	ha/ha_drum.h	/^  int use_network_powers;            \/* include network powers? *\/$/;"	m	struct:Zoltan_Drum_Struct
use_nws	ha/ha_drum.h	/^  int use_nws;                       \/* should DRUM use NWS for monitoring? *\/$/;"	m	struct:Zoltan_Drum_Struct
use_order_info	order/order_const.h	/^  int use_order_info;		\/* In: Put order info into ZOS? *\/$/;"	m	struct:Zoltan_Order_Options
use_snmp	ha/ha_drum.h	/^  int use_snmp;                      \/* should DRUM use SNMP for monitoring? *\/$/;"	m	struct:Zoltan_Drum_Struct
use_timers	phg/phg.h	/^  int use_timers;       \/* Flag indicating whether to time the PHG code. *\/$/;"	m	struct:PHGPartParamsStruct
used	zz/zz_map.c	/^  int used;             \/* 1 - this map is being used, 0 - it's free *\/$/;"	m	struct:Zoltan_Map_List	file:
user_data_length	Utilities/DDirectory/DD.h	/^  int user_data_length;   \/* Optional user data stored as ZOLTAN_ID_PTR *\/$/;"	m	struct:Zoltan_DD_Struct
user_def_list	ZoltanComponent/CCA_Wrapper/EntityListImpl.h	/^    unsigned int *gid_list, *lid_list, *user_def_list ;$/;"	m	class:ZoltanSpace::EntityListImpl
user_def_size	ZoltanComponent/CCA_Wrapper/EntityListImpl.h	/^    int proc_size, gid_size, lid_size, user_def_size, ref ;$/;"	m	class:ZoltanSpace::EntityListImpl
user_flag	Utilities/DDirectory/DD.h	/^   char user_flag;         \/* indicates if USER data are present           *\/$/;"	m	struct:__anon2
v	driver/dr_mm_readfile.c	/^  float v;$/;"	m	struct:ijv	file:
val	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/internal/internal.h	/^    int       val;$/;"	m	struct:bidint
val	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^	double val;		\/* value of vector entry *\/$/;"	m	struct:scanlink
val	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^	double val;             \/* value being kept in a heap *\/$/;"	m	struct:heap
val1	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^	int val1;$/;"	m	struct:ipairs
val2	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^	int val2;$/;"	m	struct:ipairs
value	driver/dr_param_file.c	/^  char value[MAX_PARAM_STRING_LEN+1];$/;"	m	struct:zoltanParams_list_entry	file:
value	driver/dr_param_fileCPP.cpp	/^  char *value;$/;"	m	struct:zoltanParams_list_entry	file:
value	fdriver/fdr_param_file.f90	/^   character(len=MAX_CHAR_LEN) :: value$/;"	k	type:ztnPrm_list_entry
value	zz/zz_heap.h	/^   float *value;$/;"	m	struct:__anon36
valuehi	par/par_bisect.c	/^  double    valuelo, valuehi;   \/* position of dot(s) nearest to cut *\/$/;"	m	struct:bisector	file:
valuehi	par/par_median.c	/^  double    valuelo, valuehi;   \/* position of dot(s) nearest to cut *\/$/;"	m	struct:median	file:
valuehi	rcb/rcb.h	/^  double    valuelo, valuehi;	\/* position of dot(s) nearest to cut *\/$/;"	m	struct:rcb_median
valuelo	par/par_bisect.c	/^  double    valuelo, valuehi;   \/* position of dot(s) nearest to cut *\/$/;"	m	struct:bisector	file:
valuelo	par/par_median.c	/^  double    valuelo, valuehi;   \/* position of dot(s) nearest to cut *\/$/;"	m	struct:median	file:
valuelo	rcb/rcb.h	/^  double    valuelo, valuehi;	\/* position of dot(s) nearest to cut *\/$/;"	m	struct:rcb_median
vars	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^	Vardesc **vars;$/;"	m	struct:Namelist
vars	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^	Vardesc **vars;$/;"	m	struct:Namelist
vax	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	207;"	d
vax	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	207;"	d
vcycle	phg/phg_tree.h	/^  int vcycle;    \/* Vcycle time *\/$/;"	m	struct:phg_timer_indices
vdest	phg/phg_Vcycle.c	/^    int              *vdest;      \/* necessary to unredistribute             *\/$/;"	m	struct:tagVCycle	file:
vec	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^	double *vec;		\/* vector to orthogonalize against *\/$/;"	m	struct:orthlink
vec	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^	float *vec;		\/* vector to orthogonalize against *\/$/;"	m	struct:orthlink_float
vecout	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/vecout.c	/^void      vecout(double *vec, int beg, int end, char *tag, char *file_name)$/;"	f
vecran	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/vecran.c	/^void      vecran(double *vec, int beg, int end)$/;"	f
vecran_float	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/vecran.c	/^void      vecran_float(float *vec, int beg, int end)$/;"	f
vecscale	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/vecscale.c	/^void      vecscale(double *vec1, int beg, int end, double alpha, double *vec2)$/;"	f
vecscale_float	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/util/vecscale.c	/^void      vecscale_float(float *vec1, int beg, int end, float alpha, float *vec2)$/;"	f
vector_add	oct/octree_const.h	49;"	d
vector_cmult	oct/octree_const.h	55;"	d
vector_dist	oct/octree_const.h	63;"	d
vector_divc	oct/octree_const.h	59;"	d
vector_eq	oct/octree_const.h	43;"	d
vector_gt	oct/octree_const.h	47;"	d
vector_lt	oct/octree_const.h	45;"	d
vector_set	oct/octree_const.h	41;"	d
vector_set_comp	oct/octree_const.h	53;"	d
vedge	phg/phg_hypergraph.h	/^  int *vedge;       \/* length nPins array containing associated hyperedges *\/$/;"	m	struct:__anon38
version	fdriver/fdr_main.f90	/^  real(Zoltan_FLOAT) :: version$/;"	v	program:fdriver
version	fdriver_old/fdr_main.f90	/^  real(LB_FLOAT) :: version$/;"	v	program:fdriver
vert	postprocessing/ordering/mm_input.h	/^  SCOTCH_Num vert[2];$/;"	m	struct:GraphEdge_
vertex2proc	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  short   *vertex2proc;$/;"	m	struct:LB_Description
vertex_gid	reftree/reftree_coarse_path.c	/^ZOLTAN_ID_PTR vertex_gid;$/;"	v
vertex_swap	reftree/reftree_coarse_path.c	/^static int vertex_swap(int *ierr, ZZ *zz)$/;"	f	file:
vertices	reftree/reftree.h	/^   ZOLTAN_ID_PTR vertices; \/* the vertices of the corresponding element;$/;"	m	struct:Zoltan_Reftree_Struct
vertices	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int   *vertices;$/;"	m	struct:Weight_Description
view_option_ignored	util/vtk_view.cpp	/^static void view_option_ignored(int option)$/;"	f	file:
view_usage	util/vtk_view.cpp	/^static void view_usage()$/;"	f	file:
vindex	phg/phg_hypergraph.h	/^  int *vindex;      \/* length nVtx+1 index into vedge, last is nPins *\/$/;"	m	struct:__anon38
vis_opt_names	util/vtk_view.cpp	/^static char *vis_opt_names[UNDEFINED_LIST_MAX]={$/;"	v	file:
vis_opt_values	util/vtk_view.cpp	/^static char vis_opt_values[UNDEFINED_LIST_MAX][UNDEFINED_LENGTH_MAX];$/;"	v	file:
vis_out	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int   vis_out;$/;"	m	struct:Problem_Description
visible_nvtx	driver/dr_const.h	/^  int    visible_nvtx;          \/* #vertices to use, may be < num_elems *\/$/;"	m	struct:Mesh_Description
visit_order	phg/phg.h	/^  int visit_order;      \/* Vertex visit order. *\/$/;"	m	struct:PHGPartParamsStruct
visited	reftree/reftree_coarse_path.c	/^static int *visited;$/;"	v	file:
vlno	phg/phg_Vcycle.c	/^    int              *vlno;       \/* vlno size = hg->nVtx $/;"	m	struct:tagVCycle	file:
vmap	phg/phg_hypergraph.h	/^  int *vmap;        \/* used when recursively dividing for p > 2 *\/$/;"	m	struct:__anon38
vmax	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_const.h	/^  int    vmax;$/;"	m	struct:Solver_Description
vsize	parmetis/third_library.h	/^  indextype *vsize;$/;"	m	struct:ZOLTAN_Third_Vsize_
vsizeBACKUP	parmetis/third_library.h	/^  indextype *vsizeBACKUP;$/;"	m	struct:ZOLTAN_Third_Vsize_
vsize_malloc	parmetis/third_library.h	/^  int vsize_malloc;$/;"	m	struct:ZOLTAN_Third_Vsize_
vt_handle	Utilities/Timer/zoltan_timer.c	/^  int vt_handle;          \/* state handle for vampir traces *\/$/;"	m	struct:TimeStruct	file:
vtx1	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^	 int vtx1;               \/* first vertex in edge *\/$/;"	m	struct:edgeslist
vtx2	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^	 int vtx2;               \/* second vertex in edge *\/$/;"	m	struct:edgeslist
vtxGID	phg/phg_lookup.h	/^  ZOLTAN_ID_PTR vtxGID;    \/* vertex global IDs  *\/$/;"	m	struct:_hshVtx
vtxGNO	phg/phg_lookup.h	/^  int           *vtxGNO;   \/* vertex global number *\/$/;"	m	struct:_hshVtx
vtxHash	phg/phg_lookup.h	/^  int    *vtxHash;      \/* Process to which GID hashes, temporary owner *\/$/;"	m	struct:_myObj
vtxOwner	phg/phg_lookup.h	/^  int           *vtxOwner; \/* process that returned vtx in Get_Obj_List  *\/$/;"	m	struct:_hshVtx
vtx_data	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^struct vtx_data {$/;"	s
vtx_scal	phg/phg.h	/^  float *vtx_scal;                     \/* vtx scaling array *\/$/;"	m	struct:PHGPartParamsStruct
vtx_scal_size	phg/phg.h	/^  int vtx_scal_size;                   \/* size of vtx_scal array *\/$/;"	m	struct:PHGPartParamsStruct
vtx_scaling	phg/phg.h	/^  int vtx_scaling;               \/* type of vertex scaling for inner product *\/$/;"	m	struct:PHGPartParamsStruct
vtxdist	hier/hier.h	/^  indextype *vtxdist, *xadj;           \/* intermediate graph structure storage *\/$/;"	m	struct:HierPartParamsStruct
vtxdist	order/order_const.h	/^  int *vtxdist;                 \/* How vertices are distributed accross processors *\/$/;"	m	struct:Zoltan_Order_Struct
vtxdist	parmetis/third_library.h	/^  indextype * vtxdist;                  \/* How vertices are distributed *\/$/;"	m	struct:ZOLTAN_Third_Graph_
vwgt	hier/hier.h	/^  float *vwgt;                       \/* vector of vertex weights *\/$/;"	m	struct:HierPartParamsStruct
vwgt	parmetis/third_library.h	/^  weighttype * vwgt;                    \/* Array of vertex weights *\/$/;"	m	struct:ZOLTAN_Third_Graph_
vwgt	phg/phg_hypergraph.h	/^  float *vwgt;    \/* weights of vertices, nVtx long by VtxWeightDim *\/$/;"	m	struct:__anon38
vwgt	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/main/structs.h	/^	int vwgt;		\/* weight of vertex *\/$/;"	m	struct:vtx_data
vwgt	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_loadbal.c	/^  int *vwgt;            \/* vertex weights *\/$/;"	m	struct:__anon9	file:
vwgt_dim	driver/dr_const.h	/^  int     vwgt_dim;             \/* number of weights per element.            *\/$/;"	m	struct:Mesh_Description
waitPtrAndForbiddenColors	coloring/coloring.c	/^static int waitPtrAndForbiddenColors(ZZ *zz, int rreqcntFx, MPI_Request *rreqsFx, int *rreqfromFx, MPI_Status *stats, int *forbsize, int **xforbidden, int **forbidden, int **xfp, MPI_Request *rreqsF)$/;"	f	file:
warnings	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/eigen/warnings.c	/^void      warnings(workn, A, y, n, lambda, vwsqrt, Ares, bound,$/;"	f
wbpcover	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/klvspiff/flow.c	/^void      wbpcover(n_left, n_right, pointers, indices, vweight,$/;"	f
weight	hsfc/hsfc.h	/^   float weight;        \/* scalar computed from weight vector     *\/$/;"	m	struct:Dots
weight	reftree/reftree.h	/^   float *weight;        \/* weight of the node; dimension Obj_Weight_Dim *\/$/;"	m	struct:Zoltan_Reftree_Struct
weighttype	parmetis/third_library_const.h	36;"	d
weighttype	parmetis/third_library_const.h	52;"	d
weighttype	parmetis/third_library_const.h	64;"	d
weighttype	parmetis/third_library_const.h	70;"	d
wgt	phg/phg_lookup.h	/^  float         *wgt;       \/* weights supplied by query function for edge *\/$/;"	m	struct:_myEW
wgtFctAdd	matrix/matrix_operations.c	/^wgtFctAdd(float* current, float* new, int dim)$/;"	f	file:
wgtFctCmp	matrix/matrix_operations.c	/^wgtFctCmp(float* current, float* new, int dim)$/;"	f	file:
wgtFctMax	matrix/matrix_operations.c	/^wgtFctMax(float* current, float* new, int dim)$/;"	f	file:
wgts	hier/hier.c	/^  float *wgts;$/;"	m	struct:HierGIDInfo	file:
which	oct/octant_const.h	/^  int which;                        \/* which child of parent                *\/$/;"	m	struct:_Octant
wrap_around	zz/zz_const.h	/^  int wrap_around[3];  \/* Wrap around in each dimension? (y\/n) *\/$/;"	m	struct:__anon37
write_elem_vars	driver/dr_exoII_io.c	/^int write_elem_vars($/;"	f
write_elem_vars	driver/dr_exoII_ioCPP.cpp	/^int write_elem_vars($/;"	f
write_nemesis	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_output.c	/^int write_nemesis(char *nemI_out_file,$/;"	f
write_option_ignored	util/vtk_view.cpp	/^static void write_option_ignored(int option)$/;"	f	file:
write_usage	util/vtk_view.cpp	/^static void write_usage()$/;"	f	file:
write_vis	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_output.c	/^int write_vis(char *nemI_out_file,$/;"	f
wthi	par/par_bisect.c	/^  double  wthi[MAX_BISECT_WGTS];    \/* total weight of dot(s) on hi boundary *\/$/;"	m	struct:bisector	file:
wthi	par/par_median.c	/^  double    wtlo, wthi;         \/* total weight of dot(s) at that position *\/$/;"	m	struct:median	file:
wthi	rcb/rcb.h	/^  double    wtlo, wthi;         \/* total weight of dot(s) at that position *\/$/;"	m	struct:rcb_median
wtlo	par/par_bisect.c	/^  double  wtlo[MAX_BISECT_WGTS];    \/* total weight of dot(s) on lo boundary *\/$/;"	m	struct:bisector	file:
wtlo	par/par_median.c	/^  double    wtlo, wthi;         \/* total weight of dot(s) at that position *\/$/;"	m	struct:median	file:
wtlo	rcb/rcb.h	/^  double    wtlo, wthi;         \/* total weight of dot(s) at that position *\/$/;"	m	struct:rcb_median
x	hsfc/hsfc.h	/^   double x[3];         \/* dots coordinates in problem domain     *\/$/;"	m	struct:Dots
x	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_loadbal.c	/^  float *x;             \/* x-coordinates *\/$/;"	m	struct:__anon9	file:
x2y	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/assign/y2x.c	/^void      x2y(yvecs, ndims, nmyvtxs, wsqrt)$/;"	f
xadj	hier/hier.h	/^  indextype *vtxdist, *xadj;           \/* intermediate graph structure storage *\/$/;"	m	struct:HierPartParamsStruct
xadj	parmetis/third_library.h	/^  indextype * xadj;                     \/* Indexes on adjency array *\/$/;"	m	struct:ZOLTAN_Third_Graph_
xadj	zz/zz_const.h	/^  int *xadj;           \/* pointer to link list *\/$/;"	m	struct:__anon37
xtra_cut_wgt	include/zoltan_eval.h	/^  float xtra_cut_wgt[EVAL_MAX_XTRA_EWGTS][EVAL_SIZE];$/;"	m	struct:_eval_graph_struct
xtra_imbalance	include/zoltan_eval.h	/^  float xtra_imbalance[EVAL_MAX_XTRA_VWGTS];$/;"	m	struct:_eval_balance_struct
xtra_imbalance	include/zoltan_eval.h	/^  float xtra_imbalance[EVAL_MAX_XTRA_VWGTS];$/;"	m	struct:_eval_graph_struct
xtra_imbalance	include/zoltan_eval.h	/^  float xtra_imbalance[EVAL_MAX_XTRA_VWGTS];$/;"	m	struct:_eval_hg_struct
xtra_obj_wgt	include/zoltan_eval.h	/^  float xtra_obj_wgt[EVAL_MAX_XTRA_VWGTS][EVAL_SIZE];$/;"	m	struct:_eval_balance_struct
xtra_obj_wgt	include/zoltan_eval.h	/^  float xtra_obj_wgt[EVAL_MAX_XTRA_VWGTS][EVAL_SIZE];$/;"	m	struct:_eval_graph_struct
xtra_obj_wgt	include/zoltan_eval.h	/^  float xtra_obj_wgt[EVAL_MAX_XTRA_VWGTS][EVAL_SIZE];$/;"	m	struct:_eval_hg_struct
xyz	parmetis/third_library.h	/^  float *xyz;                           \/* Coordinates *\/$/;"	m	struct:ZOLTAN_Third_Geom_
y	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_loadbal.c	/^  float *y;             \/* y-coordinates *\/$/;"	m	struct:__anon9	file:
y2x	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/assign/y2x.c	/^void      y2x(xvecs, ndims, nmyvtxs, wsqrt)$/;"	f
yGID	matrix/matrix.h	/^  ZOLTAN_ID_PTR yGID;           \/* Local Y GID *\/$/;"	m	struct:Zoltan_matrix_
yGNO	matrix/matrix.h	/^    int yGNO;$/;"	m	struct:Zoltan_Arc_
yGNO	matrix/matrix.h	/^  int          *yGNO;          \/* Local edges gnos *\/$/;"	m	struct:Zoltan_matrix_
yend	matrix/matrix.h	/^  int          *yend;          \/* end of local pins, usually ystart+1$/;"	m	struct:Zoltan_matrix_
ystart	matrix/matrix.h	/^  int          *ystart;        \/* Indirection array to describe a column *\/$/;"	m	struct:Zoltan_matrix_
ywgt	matrix/matrix.h	/^  float        *ywgt;           \/* Wgt for local Y *\/$/;"	m	struct:Zoltan_matrix_
ywgtdim	matrix/matrix.h	/^  int           ywgtdim;       \/* Wgt dimensions for Y *\/$/;"	m	struct:Zoltan_matrix_
z	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/symmlq/f2c.h	/^	doublecomplex z;$/;"	m	union:Multitype
z	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/chaco/tinvit/f2c.h	/^	doublecomplex z;$/;"	m	union:Multitype
z	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_loadbal.c	/^  float *z;             \/* z-coordinates *\/$/;"	m	struct:__anon9	file:
zdriveCount	util/vtk_view.cpp	/^static int zdriveCount = 0; $/;"	v	file:
zero_out_lists	ZoltanComponent/CCA_Wrapper/EntityListImpl.h	/^    int zero_out_lists() $/;"	f	class:ZoltanSpace::EntityListImpl
zeros	driver/dr_input_const.h	/^  int     zeros;        \/* 1 - if the target machine uses leading zeros when *\/$/;"	m	struct:Parallel_IO
zeros	driver_old/dr_input_const.h	/^  int     zeros;        \/* 1 - if the target machine uses leading zeros when *\/$/;"	m	struct:Parallel_IO
zeros	fdriver/fdr_input.f90	/^  integer(Zoltan_INT) :: zeros$/;"	k	type:PARIO_INFO
zeros	fdriver_old/fdr_input.f90	/^  integer(LB_INT) :: zeros$/;"	k	type:PARIO_INFO
zidum	zz/zz_rand.c	/^static unsigned int zidum = ZOLTAN_RAND_INIT;$/;"	v	file:
zoltan	fort/fwrap.f90	/^module zoltan$/;"	m
zoltanParams_file	driver/dr_const.h	/^  char zoltanParams_file[FILENAME_MAX]; \/* file name to get more$/;"	m	struct:Problem_Description
zoltanParams_hier_free	driver/dr_param_file.c	/^void zoltanParams_hier_free() {$/;"	f
zoltanParams_hier_free	driver/dr_param_fileCPP.cpp	/^void zoltanParams_hier_free() {$/;"	f
zoltanParams_hier_get_num_levels	driver/dr_param_file.c	/^int zoltanParams_hier_get_num_levels() {$/;"	f
zoltanParams_hier_get_num_levels	driver/dr_param_fileCPP.cpp	/^int zoltanParams_hier_get_num_levels() {$/;"	f
zoltanParams_hier_get_part	driver/dr_param_fileCPP.cpp	/^int zoltanParams_hier_get_part(int level) {$/;"	f
zoltanParams_hier_get_partition	driver/dr_param_file.c	/^int zoltanParams_hier_get_partition(int level) {$/;"	f
zoltanParams_hier_set_num_levels	driver/dr_param_file.c	/^void zoltanParams_hier_set_num_levels(int levels) {$/;"	f
zoltanParams_hier_set_num_levels	driver/dr_param_fileCPP.cpp	/^void zoltanParams_hier_set_num_levels(int levels) {$/;"	f
zoltanParams_hier_set_param	driver/dr_param_file.c	/^void zoltanParams_hier_set_param(int level, char *param, char *value) {$/;"	f
zoltanParams_hier_set_param	driver/dr_param_fileCPP.cpp	/^void zoltanParams_hier_set_param(int level, char *param, char *value) {$/;"	f
zoltanParams_hier_set_partition	driver/dr_param_file.c	/^void zoltanParams_hier_set_partition(int level, int partition) {$/;"	f
zoltanParams_hier_set_partition	driver/dr_param_fileCPP.cpp	/^void zoltanParams_hier_set_partition(int level, int partition) {$/;"	f
zoltanParams_hier_setup	driver/dr_param_file.c	/^void zoltanParams_hier_setup(struct Zoltan_Struct *zz) {$/;"	f
zoltanParams_hier_setup	driver/dr_param_fileCPP.cpp	/^void zoltanParams_hier_setup(Zoltan &zz) {$/;"	f
zoltanParams_hier_struct	driver/dr_param_file.c	/^struct zoltanParams_hier_struct {$/;"	s	file:
zoltanParams_hier_struct	driver/dr_param_fileCPP.cpp	/^struct zoltanParams_hier_struct {$/;"	s	file:
zoltanParams_hier_use_params	driver/dr_param_file.c	/^void zoltanParams_hier_use_params(int level, struct Zoltan_Struct *zz, int *ierr) {$/;"	f
zoltanParams_hier_use_params	driver/dr_param_fileCPP.cpp	/^void zoltanParams_hier_use_params(int level, struct Zoltan_Struct *zz, int *ierr) {$/;"	f
zoltanParams_list_entry	driver/dr_param_file.c	/^struct zoltanParams_list_entry {$/;"	s	file:
zoltanParams_list_entry	driver/dr_param_fileCPP.cpp	/^struct zoltanParams_list_entry {$/;"	s	file:
zoltanParams_read_file	driver/dr_param_file.c	/^void zoltanParams_read_file(struct Zoltan_Struct *lb, char *file, $/;"	f
zoltanParams_read_file	driver/dr_param_fileCPP.cpp	/^void zoltanParams_read_file(Zoltan &lb, char *file, $/;"	f
zoltanParams_set_comm	driver/dr_param_file.c	/^void zoltanParams_set_comm(MPI_Comm thecomm) {$/;"	f
zoltanParams_set_comm	driver/dr_param_fileCPP.cpp	/^void zoltanParams_set_comm(MPI_Comm thecomm) {$/;"	f
zoltan_ews	phg/phg_lookup.h	/^}zoltan_ews;$/;"	t	typeref:struct:_myEW
zoltan_geom	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_loadbal.c	/^static void zoltan_geom(void *data, int ngid_ent, int nlid_ent, int nobj,$/;"	f	file:
zoltan_lb_eval_sort_increasing	lb/lb_eval.c	/^int zoltan_lb_eval_sort_increasing(const void *a, const void *b)$/;"	f
zoltan_num_dim	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_loadbal.c	/^static int zoltan_num_dim(void *data, int *ierr)$/;"	f	file:
zoltan_num_obj	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_loadbal.c	/^static int zoltan_num_obj(void *data, int *ierr)$/;"	f	file:
zoltan_obj_list	util/converters_for_JPDC_adaptive_mesh_experiments/exo2chaco/elb_loadbal.c	/^static void zoltan_obj_list(void *data, int ngid_ent, int nlid_ent,$/;"	f	file:
zoltan_objects	phg/phg_lookup.h	/^}zoltan_objects;$/;"	t	typeref:struct:_myObj
zoltan_pins	phg/phg_lookup.h	/^}zoltan_pins;$/;"	t	typeref:struct:_myPin
zoltan_temp_edges	phg/phg_lookup.h	/^}zoltan_temp_edges;$/;"	t	typeref:struct:_hshEdge
zoltan_temp_vertices	phg/phg_lookup.h	/^}zoltan_temp_vertices;$/;"	t	typeref:struct:_hshVtx
zoltan_types	fort/ztypes.f90	/^module zoltan_types$/;"	m
zoltan_user_data	fort/zoltan_user_data.f90	/^module zoltan_user_data$/;"	m
zph	driver/dr_param_file.c	/^static struct zoltanParams_hier_struct **zph = NULL;$/;"	v	typeref:struct:zoltanParams_hier_struct	file:
zph	driver/dr_param_fileCPP.cpp	/^static struct zoltanParams_hier_struct **zph = NULL;$/;"	v	typeref:struct:zoltanParams_hier_struct	file:
zph	fdriver/fdr_param_file.f90	/^type(ztnPrm_hier_struct), save, allocatable :: zph(/;"	v	module:dr_param_file
ztnPrm_file	fdriver/fdr_const.f90	/^  character(len=FILENAME_MAX) :: ztnPrm_file /;"	k	type:PROB_INFO
ztnPrm_hier_free	fdriver/fdr_param_file.f90	/^subroutine ztnPrm_hier_free(/;"	s	module:dr_param_file
ztnPrm_hier_get_num_levels	fdriver/fdr_param_file.f90	/^function ztnPrm_hier_get_num_levels(/;"	f	module:dr_param_file
ztnPrm_hier_get_part	fdriver/fdr_param_file.f90	/^function ztnPrm_hier_get_part(/;"	f	module:dr_param_file
ztnPrm_hier_set_num_levels	fdriver/fdr_param_file.f90	/^subroutine ztnPrm_hier_set_num_levels(/;"	s	module:dr_param_file
ztnPrm_hier_set_param	fdriver/fdr_param_file.f90	/^subroutine ztnPrm_hier_set_param(/;"	s	module:dr_param_file
ztnPrm_hier_set_partition	fdriver/fdr_param_file.f90	/^subroutine ztnPrm_hier_set_partition(/;"	s	module:dr_param_file
ztnPrm_hier_setup	fdriver/fdr_param_file.f90	/^subroutine ztnPrm_hier_setup(/;"	s	module:dr_param_file
ztnPrm_hier_struct	fdriver/fdr_param_file.f90	/^type ztnPrm_hier_struct$/;"	t	module:dr_param_file
ztnPrm_hier_use_params	fdriver/fdr_param_file.f90	/^subroutine ztnPrm_hier_use_params(/;"	s	module:dr_param_file
ztnPrm_list_entry	fdriver/fdr_param_file.f90	/^type ztnPrm_list_entry$/;"	t	module:dr_param_file
ztnPrm_read_file	fdriver/fdr_param_file.f90	/^subroutine ztnPrm_read_file(/;"	s	module:dr_param_file
ztnPrm_set_comm	fdriver/fdr_param_file.f90	/^subroutine ztnPrm_set_comm(/;"	s	module:dr_param_file
zz	phg/phg_comm.h	/^  ZZ  *zz;        \/* for debugging purpose *\/$/;"	m	struct:PHGCommStruct
~BaseLB	ZoltanComponent/CCA_Wrapper/BaseLB.h	/^    virtual ~BaseLB()$/;"	f	class:ZoltanSpace::BaseLB
~DataLocationPort	ZoltanComponent/ZoltanPorts/DataLocationPort.h	/^    virtual ~DataLocationPort() {}$/;"	f	class:LoadPartitionerSpace::DataLocationPort
~DataMigrationPort	ZoltanComponent/ZoltanPorts/DataMigrationPort.h	/^    virtual ~DataMigrationPort() {}$/;"	f	class:LoadPartitionerSpace::DataMigrationPort
~DistDataDirectoryPort	ZoltanComponent/ZoltanPorts/DistDataDirectoryPort.h	/^    virtual ~DistDataDirectoryPort() {}$/;"	f	class:LoadPartitionerSpace::DistDataDirectoryPort
~Driver	ZoltanComponent/TestComponents/Driver.cpp	/^ZoltanTestSpace::Driver::~Driver()$/;"	f	class:ZoltanTestSpace::Driver
~EdgeInfo	ZoltanComponent/ZoltanPorts/EdgeInfoPort.h	/^    virtual ~EdgeInfo() {} $/;"	f	class:LoadPartitionerSpace::EdgeInfo
~EntityInfo	ZoltanComponent/ZoltanPorts/EntityInfoPort.h	/^    virtual ~EntityInfo() {} $/;"	f	class:LoadPartitionerSpace::EntityInfo
~EntityList	ZoltanComponent/ZoltanPorts/EntityList.h	/^    virtual ~EntityList() {}$/;"	f	class:LoadPartitionerSpace::EntityList
~EntityListImpl	ZoltanComponent/CCA_Wrapper/EntityListImpl.h	/^    ~EntityListImpl() $/;"	f	class:ZoltanSpace::EntityListImpl
~GeomInfo	ZoltanComponent/ZoltanPorts/GeomInfoPort.h	/^    virtual ~GeomInfo() {} $/;"	f	class:LoadPartitionerSpace::GeomInfo
~HSFC_LB	ZoltanComponent/CCA_Wrapper/HSFC.h	/^    virtual ~HSFC_LB() { is_init = false ; }$/;"	f	class:ZoltanSpace::HSFC_LB
~IOPort	ZoltanComponent/TestComponents/IOPort.h	/^   virtual ~IOPort() {}$/;"	f	class:ZoltanTestSpace::IOPort
~LoadBalancer	ZoltanComponent/ZoltanPorts/LoadBalancer.h	/^     virtual ~LoadBalancer() {}$/;"	f	class:LoadPartitionerSpace::LoadBalancer
~LoadBalancerFactory	ZoltanComponent/ZoltanPorts/LoadBalancerFactoryPort.h	/^    virtual ~LoadBalancerFactory() {} $/;"	f	class:LoadPartitionerSpace::LoadBalancerFactory
~Mesh	ZoltanComponent/TestComponents/Mesh.cpp	/^ZoltanTestSpace::Mesh::~Mesh()$/;"	f	class:ZoltanTestSpace::Mesh
~OctTree_LB	ZoltanComponent/CCA_Wrapper/OctTree.h	/^    virtual ~OctTree_LB() { is_init = false ; }$/;"	f	class:ZoltanSpace::OctTree_LB
~ParMetis_LB	ZoltanComponent/CCA_Wrapper/ParMetis.h	/^    virtual ~ParMetis_LB() { is_init = false ; }$/;"	f	class:ZoltanSpace::ParMetis_LB
~PartitionerFactory_JR	ZoltanComponent/CCA_Wrapper/PartitonerFactory.cpp	/^ZoltanSpace::PartitionerFactory_JR::~PartitionerFactory_JR()$/;"	f	class:ZoltanSpace::PartitionerFactory_JR
~RCB_LB	ZoltanComponent/CCA_Wrapper/RCB.h	/^    virtual ~RCB_LB() { is_init = false ; }$/;"	f	class:ZoltanSpace::RCB_LB
~RIB_LB	ZoltanComponent/CCA_Wrapper/RIB.h	/^    virtual ~RIB_LB() { is_init = false ; }$/;"	f	class:ZoltanSpace::RIB_LB
~TreeInfo	ZoltanComponent/ZoltanPorts/TreeInfoPort.h	/^    virtual ~TreeInfo() {} $/;"	f	class:LoadPartitionerSpace::TreeInfo
~Zoltan	include/zoltan_cpp.h	/^  ~Zoltan()$/;"	f	class:Zoltan
~Zoltan_Comm	include/zoltan_comm_cpp.h	/^  ~Zoltan_Comm()$/;"	f	class:Zoltan_Comm
~Zoltan_DD	include/zoltan_dd_cpp.h	/^  ~Zoltan_DD()$/;"	f	class:Zoltan_DD
~Zoltan_Timer_Object	include/zoltan_timer_cpp.h	/^  ~Zoltan_Timer_Object() {$/;"	f	class:Zoltan_Timer_Object
