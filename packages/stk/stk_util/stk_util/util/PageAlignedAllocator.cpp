
#include <stk_util/util/PageAlignedAllocator.hpp>
#include <stddef.h>                     // for size_t
#include <sys/mman.h>                   // for mmap, munmap, MAP_ANON, etc
#include <unistd.h>                     // for sysconf, _SC_PAGE_SIZE
#include <cstdlib>                      // for NULL
#include <new>                          // for bad_alloc

namespace stk { namespace detail {

const size_t page_aligned_allocator_impl::half_page_size = (sysconf( _SC_PAGE_SIZE ) >> 1);
const int page_aligned_allocator_impl::m_mmap_flags = MAP_PRIVATE | MAP_ANON;
const int page_aligned_allocator_impl::m_mmap_protection = PROT_READ | PROT_WRITE;


void * page_aligned_allocator_impl::allocate(size_t num_bytes)
{
  void * ptr = mmap(NULL, num_bytes, m_mmap_protection, m_mmap_flags, -1 /*file descriptor*/, 0 /*offset*/);
  // TODO - Is it OK to throw here? Having a throw will change
  // the code generated by the compiler to be slower, but will allow
  // this allocator to behave the same as new (you'll get an
  // exception when you run out of memory).
  if (ptr == MAP_FAILED) {
    throw std::bad_alloc();
  }

  return ptr;
}

void page_aligned_allocator_impl::deallocate( void * ptr, size_t num_bytes)
{
  munmap(ptr,num_bytes);
}


}} // namespace stk::detail

