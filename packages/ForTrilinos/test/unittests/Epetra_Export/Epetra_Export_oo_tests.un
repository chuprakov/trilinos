#include "ForTrilinos_config.h"
#include "runtime_macros.h"

FORTRILINOS_UNITTEST_MODULE_DEF(CLASS_BEING_TESTED)
!    use ForTrilinos_oo_unittest_util
#ifdef HAVE_MPI
    use mpi, only: MPI_COMM_WORLD
    use FEpetra_MpiComm,only:Epetra_MpiComm
#else
    use FEpetra_SerialComm,only:Epetra_SerialComm
#endif
    use FEpetra_Comm,only:Epetra_Comm
    use FEpetra_Map,only:Epetra_Map
    use FEpetra_Vector,only:Epetra_Vector
    use FEpetra_Export, only:Epetra_Export
    use FEpetra_OffsetIndex, only:Epetra_OffsetIndex
    use FEpetra_CrsGraph, only:Epetra_CrsGraph
    use iso_c_binding,only:c_int,c_double,c_char,c_long
    use ForTrilinos_oo_unittest_utils
    use ForTrilinos_error
    use ForTrilinos_enum_wrappers
    use ForTrilinos_enums
FORTRILINOS_UNITTEST_MODULE_BEGIN(CLASS_BEING_TESTED)

  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED, Create)
  FORTRILINOS_UNITTEST_BEGIN
    implicit none 
#ifdef HAVE_MPI
    type(Epetra_MpiComm):: comm
#else
    type(Epetra_SerialComm):: comm
#endif
    type(Epetra_Map) :: map_source, map_target
    type(Epetra_Export) :: exporter
    type(FT_Epetra_Export_ID_t) :: Export_ID
    integer(c_int),parameter::IndexBase=1
    integer(c_int) :: NumGlobalElements_source = 8, NumGlobalElements_target
    integer(c_int) :: Export_Elements=4, NumMyElements_target
    success = .TRUE.
    ECHO(comm = UnitTest_EpetraComm_Create())
    ECHO(map_source = Epetra_Map(NumGlobalElements_source,IndexBase,comm))
    ECHO(NumMyElements_target=map_source%NumMyElements()+Export_Elements)
    ECHO(map_target = Epetra_Map(-1_c_int,NumMyElements_target,IndexBase,comm))
    ECHO(exporter = Epetra_Export(map_source,map_target))
    ECHO(Export_ID = exporter%get_EpetraExport_ID())
    TEST_EQUALITY(Export_ID%table, FT_Epetra_Export_ID)
    TEST_EQUALITY(Export_ID%index, 0)
    TEST_EQUALITY(Export_ID%is_const, FT_False)
    call exporter%force_finalize()
    call map_target%force_finalize()
    call map_source%force_finalize()
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END

  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED, ExportVector)
  FORTRILINOS_UNITTEST_BEGIN
    implicit none 
#ifdef HAVE_MPI
    type(Epetra_MpiComm):: comm
#else
    type(Epetra_SerialComm):: comm
#endif
    type(Epetra_Map) :: map_source, map_target
    type(Epetra_Vector) :: x,y
    type(Epetra_Export) :: exporter
    type(Epetra_OffsetIndex) :: index
    integer(FT_Epetra_CombineMode_E_t) :: combine_mode=FT_Epetra_CombineMode_E_Insert
    integer(FT_Epetra_DataAccess_E_t) :: CV = FT_Epetra_DataAccess_E_Copy
    type(Epetra_CrsGraph) :: graph_source, graph_target
    type(error) :: err
    integer(c_int),parameter::IndexBase=1
    integer(c_int) :: NumGlobalElements_source = 8, NumGlobalElements_target,i
    integer(c_int) :: Export_Elements=4, NumMyElements_target, NumMyElements_source
    real(c_double),dimension(:),allocatable :: x_values,y_values
    integer(c_int),dimension(:),allocatable :: MyGlobalElements_source
    success = .TRUE.
    ECHO(comm = UnitTest_EpetraComm_Create())
    ! Creating source map and vector
    ECHO(map_source = Epetra_Map(NumGlobalElements_source,IndexBase,comm))
    ECHO(allocate(MyGlobalElements_source(map_source%NumMyElements())))
    ECHO(MyGlobalElements_source=map_source%MyGlobalElements())
    ECHO(NumMyElements_source=map_source%NumMyElements())
    ECHO(x=Epetra_Vector(map_source))
    ECHO(allocate(x_values(map_source%NumMyElements())))
    do i=1,map_source%NumMyElements()
     x_values(i)=2.0*MyGlobalElements_source(i)
    enddo
    ECHO(call x%ReplaceGlobalValues(NumMyElements_source,x_values,MyGlobalElements_source))
    ! Creating target map, Export object and new vector
    ECHO(NumMyElements_target=map_source%NumMyElements()+Export_Elements)
    ECHO(map_target = Epetra_Map(-1_c_int,NumMyElements_target,IndexBase,comm))
    ECHO(exporter = Epetra_Export(map_source,map_target))
    ECHO(graph_source = Epetra_CrsGraph(CV,map_source,NumMyElements_source,.false.))
    ECHO(graph_target = Epetra_CrsGraph(CV,map_target,NumMyElements_target,.false.))
    ECHO(index=Epetra_OffsetIndex(graph_source,graph_target,exporter))
    ECHO(y=Epetra_Vector(map_target))
    !ECHO(call y%export(x,exporter,combine_mode,index))
    !ECHO(allocate(y_values(map_target%NumMyElements())))
    !ECHO(y_values=y%ExtractCopy(err))
    !TEST_EQUALITY(err%error_code(),0)
    do i=1,map_target%NumMyElements()
     TEST_EQUALITY(y_values(i),0.0_c_double)
    enddo
    call exporter%force_finalize()
    call x%force_finalize()
    call y%force_finalize()
    call graph_target%force_finalize()
    call graph_source%force_finalize()
    call map_target%force_finalize()
    call map_source%force_finalize()
    call comm%force_finalize()

  FORTRILINOS_UNITTEST_END

FORTRILINOS_UNITTEST_MODULE_END(CLASS_BEING_TESTED)
