#include "ForTrilinos_config.h"
#include "runtime_macros.h"

FORTRILINOS_UNITTEST_MODULE_DEF(CLASS_BEING_TESTED)
#ifdef HAVE_MPI
    use mpi
    use FEpetra_MpiComm,only:Epetra_MpiComm
#else
    use FEpetra_SerialComm,only:Epetra_SerialComm
#endif
    use FEpetra_Comm,only:Epetra_Comm
    use FEpetra_Map,only:Epetra_Map
    use FEpetra_CrsMatrix,only:Epetra_CrsMatrix
    use iso_c_binding,only:c_int,c_double,c_char,c_long
    use ForTrilinos_error
    use ForTrilinos_enum_wrappers
FORTRILINOS_UNITTEST_MODULE_BEGIN(CLASS_BEING_TESTED)
FORTRILINOS_UNITTEST_SWITCH_BEGIN(CLASS_BEING_TESTED)

  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED, Create_VarPerRow)
  FORTRILINOS_UNITTEST_BEGIN
    use ForTrilinos_enums
    implicit none 
#ifdef HAVE_MPI
    type(Epetra_MpiComm):: comm
#else
    type(Epetra_SerialComm):: comm
#endif
    type(Epetra_Map) :: map
    type(Epetra_CrsMatrix) :: A
    type(FT_Epetra_CrsMatrix_ID_t) :: CrsMatrix_ID
    type(FT_Epetra_RowMatrix_ID_t) :: RowMatrix_ID
    integer(c_int),parameter::IndexBase=1
    integer(c_int) :: NumGlobalElements = 4
    integer(c_int),dimension(:),allocatable :: NumIndicesPerRow
    NumIndicesPerRow=(/3,2,6,4/)
    success = .TRUE.
#ifdef HAVE_MPI
    ECHO(comm = Epetra_MpiComm(MPI_COMM_WORLD))
#else
    ECHO(comm = Epetra_SerialComm())
#endif
    ECHO(map = Epetra_Map(NumGlobalElements,IndexBase,comm)
    ECHO(A = Epetra_CrsMatrix(FT_Epetra_DataAccess_E_Copy,map,NumIndicesPerRow,FT_FALSE))
    ECHO(CrsMatrix_ID = A%get_EpetraCrsMatrix_ID())
    ECHO(RowMatrix_ID = A%get_EpetraRowMatrix_ID())
    TEST_EQUALITY(CrsMatrix_ID%table, FT_Epetra_CrsMatrix_ID)
    TEST_EQUALITY(CrsMatrix_ID%index, 0)
    TEST_EQUALITY(CrsMatrix_ID%is_const, FT_False)
    TEST_EQUALITY(RowMatrix_ID%table, FT_Epetra_RowMatrix_ID)
    TEST_EQUALITY(RowMatrix_ID%index, 0)
    TEST_EQUALITY(RowMatrix_ID%is_const, FT_False)
    call A%force_finalize()
    call map%force_finalize()
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END

  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED, Create)
  FORTRILINOS_UNITTEST_BEGIN
    use ForTrilinos_enums
    implicit none
#ifdef HAVE_MPI
    type(Epetra_MpiComm):: comm
#else
    type(Epetra_SerialComm):: comm
#endif
    type(Epetra_Map) :: map
    type(Epetra_CrsMatrix) :: A
    type(FT_Epetra_CrsMatrix_ID_t) :: CrsMatrix_ID
    type(FT_Epetra_RowMatrix_ID_t) :: RowMatrix_ID
    type(FT_Epetra_DataAccess_E_t) :: CV
    integer(c_int),parameter::IndexBase=1
    integer(c_int) :: NumGlobalElements = 5
    integer(c_int) :: NumIndicesPerRow=7
    success = .TRUE.
#ifdef HAVE_MPI
    ECHO(comm = Epetra_MpiComm(MPI_COMM_WORLD))
#else
    ECHO(comm = Epetra_SerialComm())
#endif
    ECHO(map = Epetra_Map(NumGlobalElements,IndexBase,comm)
    ECHO(A = Epetra_CrsMatrix(FT_Epetra_DataAccess_E_Copy,map,NumIndicesPerRow,FT_FALSE))
    ECHO(CrsMatrix_ID = A%get_EpetraCrsMatrix_ID())
    ECHO(RowMatrix_ID = A%get_EpetraRowMatrix_ID())
    TEST_EQUALITY(CrsMatrix_ID%table, FT_Epetra_CrsMatrix_ID)
    TEST_EQUALITY(CrsMatrix_ID%index, 0)
    TEST_EQUALITY(CrsMatrix_ID%is_const, FT_False)
    TEST_EQUALITY(RowMatrix_ID%table, FT_Epetra_RowMatrix_ID)
    TEST_EQUALITY(RowMatrix_ID%index, 0)
    TEST_EQUALITY(RowMatrix_ID%is_const, FT_False)
    call A%force_finalize()
    call map%force_finalize()
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END


  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED, Duplicate)
  FORTRILINOS_UNITTEST_BEGIN
 use ForTrilinos_enums
    implicit none
#ifdef HAVE_MPI
    type(Epetra_MpiComm):: comm
#else
    type(Epetra_SerialComm):: comm
#endif
    type(error) :: err
    type(Epetra_Map) :: map
    type(Epetra_CrsMatrix) :: A,A1
    type(FT_Epetra_CrsMatrix_ID_t) :: CrsMatrix_ID
    type(FT_Epetra_RowMatrix_ID_t) :: RowMatrix_ID
    type(FT_Epetra_DataAccess_E_t) :: CV
    integer(c_int),parameter::IndexBase=1
    integer(c_int) :: NumGlobalElements = 4
    integer(c_int),dimension(:),allocatable :: NumIndicesPerRow
    NumIndicesPerRow=(/3,2,6,4/)
    success = .TRUE.
#ifdef HAVE_MPI
    ECHO(comm = Epetra_MpiComm(MPI_COMM_WORLD))
#else
    ECHO(comm = Epetra_SerialComm())
#endif
    ECHO(map = Epetra_Map(NumGlobalElements,IndexBase,comm)
    ECHO(A = Epetra_CrsMatrix(FT_Epetra_DataAccess_E_Copy,map,NumIndicesPerRow,FT_FALSE))
    ECHO(call A%PutScalar(1.0_c_double,err))
    TEST_EQUALITY(err%code(),0)
    ECHO(call A%FillComplete(err))
    TEST_EQUALITY(err%code(),0)
    ECHO(A1 = Epetra_CrsMatrix(A))
    ECHO(CrsMatrix_ID = A1%get_EpetraCrsMatrix_ID())
    ECHO(RowMatrix_ID = A1%get_EpetraRowMatrix_ID())
    TEST_EQUALITY(CrsMatrix_ID%table, FT_Epetra_CrsMatrix_ID)
    TEST_EQUALITY(CrsMatrix_ID%index, 1)
    TEST_EQUALITY(CrsMatrix_ID%is_const, FT_False)
    TEST_EQUALITY(RowMatrix_ID%table, FT_Epetra_RowMatrix_ID)
    TEST_EQUALITY(RowMatrix_ID%index, 1)
    TEST_EQUALITY(RowMatrix_ID%is_const, FT_False)
    call A1%force_finalize()
    call A%force_finalize()
    call map%force_finalize()
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END
  
  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED, Destroy)
  FORTRILINOS_UNITTEST_BEGIN
    use ForTrilinos_enums
    use ForTrilinos_enums
    implicit none
#ifdef HAVE_MPI
    type(Epetra_MpiComm):: comm
#else
    type(Epetra_SerialComm):: comm
#endif
    type(Epetra_Map) :: map
    type(Epetra_CrsMatrix) :: A
    type(FT_Epetra_CrsMatrix_ID_t) :: CrsMatrix_ID
    type(FT_Epetra_RowMatrix_ID_t) :: RowMatrix_ID
    type(FT_Epetra_DataAccess_E_t) :: CV
    integer(c_int),parameter::IndexBase=1
    integer(c_int) :: NumGlobalElements = 4
    integer(c_int),dimension(:),allocatable :: NumIndicesPerRow
    NumIndicesPerRow=(/3,2,6,4/)
    success = .TRUE.
#ifdef HAVE_MPI
    ECHO(comm = Epetra_MpiComm(MPI_COMM_WORLD))
#else
    ECHO(comm = Epetra_SerialComm())
#endif
    ECHO(map = Epetra_Map(NumGlobalElements,IndexBase,comm)
    ECHO(A = Epetra_CrsMatrix(FT_Epetra_DataAccess_E_Copy,map,NumIndicesPerRow,FT_FALSE))
    ECHO(call A%force_finalize())
    ECHO(CrsMatrix_ID = A%get_EpetraCrsMatrix_ID())
    ECHO(RowMatrix_ID = A%get_EpetraRowMatrix_ID())
    TEST_EQUALITY(CrsMatrix_ID%table, FT_Invalid_ID)
    TEST_EQUALITY(CrsMatrix_ID%index, -1)
    TEST_EQUALITY(RowMatrix_ID%table, FT_Invalid_ID)
    TEST_EQUALITY(RowMatrix_ID%index, -1)
    call map%force_finalize()
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END


FORTRILINOS_UNITTEST_MODULE_END(CLASS_BEING_TESTED)
