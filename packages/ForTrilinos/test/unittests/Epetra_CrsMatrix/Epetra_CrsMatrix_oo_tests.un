#include "ForTrilinos_config.h"
#include "runtime_macros.h"

FORTRILINOS_UNITTEST_MODULE_DEF(CLASS_BEING_TESTED)
#ifdef HAVE_MPI
    use mpi
    use FEpetra_MpiComm,only:Epetra_MpiComm
#else
    use FEpetra_SerialComm,only:Epetra_SerialComm
#endif
    use FEpetra_Comm,only:Epetra_Comm
    use FEpetra_Map,only:Epetra_Map
    use FEpetra_Vector,only:Epetra_Vector
    use FEpetra_CrsMatrix,only:Epetra_CrsMatrix
    use iso_c_binding,only:c_int,c_double,c_char,c_long
    use ForTrilinos_oo_unittest_utils
    use ForTrilinos_error
    use ForTrilinos_enum_wrappers
FORTRILINOS_UNITTEST_MODULE_BEGIN(CLASS_BEING_TESTED)
FORTRILINOS_UNITTEST_SWITCH_BEGIN(CLASS_BEING_TESTED)

  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED, Create_VarPerRow)
  FORTRILINOS_UNITTEST_BEGIN
    use ForTrilinos_enums
    implicit none 
#ifdef HAVE_MPI
    type(Epetra_MpiComm):: comm
#else
    type(Epetra_SerialComm):: comm
#endif
    type(Epetra_Map) :: map
    type(Epetra_CrsMatrix) :: A
    type(FT_Epetra_CrsMatrix_ID_t) :: CrsMatrix_ID
    type(FT_Epetra_RowMatrix_ID_t) :: RowMatrix_ID
    integer(c_int),parameter::IndexBase=1
    integer(c_int) :: NumGlobalElements = 4
    integer(c_int),dimension(:),allocatable :: NumIndicesPerRow
    NumIndicesPerRow=(/3,2,1,4/)
    success = .TRUE.
    ECHO(comm = UnitTest_EpetraComm_Create())
    ECHO(map = Epetra_Map(NumGlobalElements,IndexBase,comm))
    ECHO(A = Epetra_CrsMatrix(FT_Epetra_DataAccess_E_Copy,map,NumIndicesPerRow,.false.))
    ECHO(CrsMatrix_ID = A%get_EpetraCrsMatrix_ID())
    ECHO(RowMatrix_ID = A%get_EpetraRowMatrix_ID())
    TEST_EQUALITY(CrsMatrix_ID%table, FT_Epetra_CrsMatrix_ID)
    TEST_EQUALITY(CrsMatrix_ID%index, 0)
    TEST_EQUALITY(CrsMatrix_ID%is_const, FT_False)
    TEST_EQUALITY(RowMatrix_ID%table, FT_Epetra_RowMatrix_ID)
    TEST_EQUALITY(RowMatrix_ID%index, 0)
    TEST_EQUALITY(RowMatrix_ID%is_const, FT_False)
    call A%force_finalize()
    call map%force_finalize()
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END

  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED, Create)
  FORTRILINOS_UNITTEST_BEGIN
    use ForTrilinos_enums
    implicit none
#ifdef HAVE_MPI
    type(Epetra_MpiComm):: comm
#else
    type(Epetra_SerialComm):: comm
#endif
    type(Epetra_Map) :: map
    type(Epetra_CrsMatrix) :: A
    type(FT_Epetra_CrsMatrix_ID_t) :: CrsMatrix_ID
    type(FT_Epetra_RowMatrix_ID_t) :: RowMatrix_ID
    integer(c_int),parameter::IndexBase=1
    integer(c_int) :: NumGlobalElements = 5
    integer(c_int) :: NumIndicesPerRow=3
    success = .TRUE.
    ECHO(comm = UnitTest_EpetraComm_Create())
    ECHO(map = Epetra_Map(NumGlobalElements,IndexBase,comm))
    ECHO(A = Epetra_CrsMatrix(FT_Epetra_DataAccess_E_Copy,map,NumIndicesPerRow,.false.))
    ECHO(CrsMatrix_ID = A%get_EpetraCrsMatrix_ID())
    ECHO(RowMatrix_ID = A%get_EpetraRowMatrix_ID())
    TEST_EQUALITY(CrsMatrix_ID%table, FT_Epetra_CrsMatrix_ID)
    TEST_EQUALITY(CrsMatrix_ID%index, 0)
    TEST_EQUALITY(CrsMatrix_ID%is_const, FT_False)
    TEST_EQUALITY(RowMatrix_ID%table, FT_Epetra_RowMatrix_ID)
    TEST_EQUALITY(RowMatrix_ID%index, 0)
    TEST_EQUALITY(RowMatrix_ID%is_const, FT_False)
    call A%force_finalize()
    call map%force_finalize()
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END


  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED, Duplicate)
  FORTRILINOS_UNITTEST_BEGIN
 use ForTrilinos_enums
    implicit none
#ifdef HAVE_MPI
    type(Epetra_MpiComm):: comm
#else
    type(Epetra_SerialComm):: comm
#endif
    type(error) :: err
    type(Epetra_Map) :: map
    type(Epetra_CrsMatrix) :: A,A1
    type(FT_Epetra_CrsMatrix_ID_t) :: CrsMatrix_ID
    type(FT_Epetra_RowMatrix_ID_t) :: RowMatrix_ID
    integer(c_int),parameter::IndexBase=1
    integer(c_int) :: NumGlobalElements = 4
    integer(c_int),dimension(:),allocatable :: NumIndicesPerRow
    NumIndicesPerRow=(/3,2,1,4/)
    success = .TRUE.
    ECHO(comm = UnitTest_EpetraComm_Create())
    ECHO(map = Epetra_Map(NumGlobalElements,IndexBase,comm))
    ECHO(A = Epetra_CrsMatrix(FT_Epetra_DataAccess_E_Copy,map,NumIndicesPerRow,.false.))
    ECHO(call A%PutScalar(1._c_double,err))
    TEST_EQUALITY(err%error_code(),0)
    ECHO(call A%FillComplete(.true.,err))
    TEST_EQUALITY(err%error_code(),0)
    ECHO(A1 = Epetra_CrsMatrix(A))
    ECHO(CrsMatrix_ID = A1%get_EpetraCrsMatrix_ID())
    ECHO(RowMatrix_ID = A1%get_EpetraRowMatrix_ID())
    TEST_EQUALITY(CrsMatrix_ID%table, FT_Epetra_CrsMatrix_ID)
    TEST_EQUALITY(CrsMatrix_ID%index, 1)
    TEST_EQUALITY(CrsMatrix_ID%is_const, FT_False)
    TEST_EQUALITY(RowMatrix_ID%table, FT_Epetra_RowMatrix_ID)
    TEST_EQUALITY(RowMatrix_ID%index, 1)
    TEST_EQUALITY(RowMatrix_ID%is_const, FT_False)
    call A1%force_finalize()
    call A%force_finalize()
    call map%force_finalize()
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END
  
  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED, Destroy)
  FORTRILINOS_UNITTEST_BEGIN
    use ForTrilinos_enums
    use ForTrilinos_enums
    implicit none
#ifdef HAVE_MPI
    type(Epetra_MpiComm):: comm
#else
    type(Epetra_SerialComm):: comm
#endif
    type(Epetra_Map) :: map
    type(Epetra_CrsMatrix) :: A
    type(FT_Epetra_CrsMatrix_ID_t) :: CrsMatrix_ID
    type(FT_Epetra_RowMatrix_ID_t) :: RowMatrix_ID
    integer(c_int),parameter::IndexBase=1
    integer(c_int) :: NumGlobalElements = 4
    integer(c_int),dimension(:),allocatable :: NumIndicesPerRow
    NumIndicesPerRow=(/3,2,1,4/)
    success = .TRUE.
    ECHO(comm = UnitTest_EpetraComm_Create())
    ECHO(map = Epetra_Map(NumGlobalElements,IndexBase,comm))
    ECHO(A = Epetra_CrsMatrix(FT_Epetra_DataAccess_E_Copy,map,NumIndicesPerRow,.false.))
    ECHO(call A%force_finalize())
    ECHO(CrsMatrix_ID = A%get_EpetraCrsMatrix_ID())
    ECHO(RowMatrix_ID = A%get_EpetraRowMatrix_ID())
    TEST_EQUALITY(CrsMatrix_ID%table, FT_Invalid_ID)
    TEST_EQUALITY(CrsMatrix_ID%index, -1)
    TEST_EQUALITY(RowMatrix_ID%table, FT_Invalid_ID)
    TEST_EQUALITY(RowMatrix_ID%index, -1)
    call map%force_finalize()
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END

  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED, RowMap)
  FORTRILINOS_UNITTEST_BEGIN
    use ForTrilinos_enums
    implicit none
#ifdef HAVE_MPI
    type(Epetra_MpiComm):: comm
#else
    type(Epetra_SerialComm):: comm
#endif
    type(Epetra_Map) :: map,row_map
    type(Epetra_CrsMatrix) :: A
    type(FT_Epetra_Map_ID_t) :: Map_ID,RowMap_ID
    type(FT_Epetra_BlockMap_ID_t) :: BlockMap_ID,RowBlockMap_ID
    type(Epetra_Vector) :: vec
    type(FT_Epetra_Vector_ID_t) :: Vec_ID
    type(FT_Epetra_MultiVector_ID_t) :: MVec_ID
    integer(c_int),parameter::IndexBase=1
    integer(c_int) :: NumGlobalElements = 4
    integer(c_int),dimension(:),allocatable :: NumIndicesPerRow
    NumIndicesPerRow=(/3,2,1,4/)
    success = .TRUE.
    ECHO(comm = UnitTest_EpetraComm_Create())
    ECHO(map = Epetra_Map(NumGlobalElements,IndexBase,comm))
    ECHO(A = Epetra_CrsMatrix(FT_Epetra_DataAccess_E_Copy,map,NumIndicesPerRow,.false.))
    ECHO(row_map=A%RowMap())
    ECHO(Map_ID=map%get_EpetraMap_ID())
    ECHO(BlockMap_ID=map%get_EpetraBlockMap_ID())
    ECHO(RowMap_ID=row_map%get_EpetraMap_ID())
    ECHO(RowBlockMap_ID=row_map%get_EpetraBlockMap_ID())
    TEST_EQUALITY(Map_ID%table,FT_Epetra_Map_ID)
    TEST_EQUALITY(Map_ID%index,0)
    TEST_EQUALITY(Map_ID%is_const,FT_FALSE)
    TEST_EQUALITY(BlockMap_ID%table,FT_Epetra_BlockMap_ID)
    TEST_EQUALITY(BlockMap_ID%index,0)
    TEST_EQUALITY(BlockMap_ID%is_const,FT_FALSE)
    TEST_EQUALITY(RowMap_ID%table,FT_Epetra_Map_ID)
    TEST_EQUALITY(RowMap_ID%index,0)
    TEST_EQUALITY(RowMap_ID%is_const,FT_TRUE)
    TEST_EQUALITY(RowBlockMap_ID%table,FT_Epetra_BlockMap_ID)
    TEST_EQUALITY(RowBlockMap_ID%index,0)
    TEST_EQUALITY(RowBlockMap_ID%is_const,FT_TRUE)
    call row_map%force_finalize()
    ECHO(vec=Epetra_Vector(A%RowMap()))
    ECHO(Vec_ID=vec%get_EpetraVector_ID())
    ECHO(MVec_ID=vec%get_EpetraMultiVector_ID())
    TEST_EQUALITY(Vec_ID%table,FT_Epetra_Vector_ID)
    TEST_EQUALITY(Vec_ID%index,0)
    TEST_EQUALITY(MVec_ID%table,FT_Epetra_MultiVector_ID)
    TEST_EQUALITY(MVec_ID%index,0)
    call vec%force_finalize()
    call A%force_finalize()
    call map%force_finalize()
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END

  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED, ExtractGlobalRowCopy)
  FORTRILINOS_UNITTEST_BEGIN
 use ForTrilinos_enums
    implicit none
#ifdef HAVE_MPI
    type(Epetra_MpiComm):: comm
#else
    type(Epetra_SerialComm):: comm
#endif
    type(error) :: err
    type(Epetra_Map) :: map
    type(Epetra_CrsMatrix) :: A
    integer(c_int),parameter::IndexBase=1
    integer(c_int) :: NumGlobalElements = 4 
    integer(c_int) :: i, NumIndicesPerRow
    integer(c_int) :: NumMyElements
    integer(c_int), dimension(:), allocatable :: MyGlobalElements 
    real(c_double), dimension(2)  :: scalar
    real(c_double), dimension(2)  :: values
    integer(c_int), dimension(2)  :: col
    integer(c_int), dimension(2)  :: indices
    integer(c_int) :: global_row, length, num_entries
    NumIndicesPerRow=3
    success = .TRUE.
    ECHO(comm = UnitTest_EpetraComm_Create())
    ECHO(map = Epetra_Map(NumGlobalElements,IndexBase,comm))
    ECHO(A = Epetra_CrsMatrix(FT_Epetra_DataAccess_E_Copy,map,NumIndicesPerRow,.false.))
    scalar(1) = -1.0
    scalar(2) = 1.0
    col(1)=2
    col(2)=3
    num_entries=2
    NumMyElements=map%NumMyElements()
    Allocate (MyGlobalElements(NumMyElements))
    MyGlobalElements=map%MyGlobalElements()
    do i=1,NumMyElements
      ECHO(call A%InsertGlobalValues(MyGlobalElements(i),num_entries,scalar, col
,err))
      TEST_EQUALITY(err%error_code(),0)
    end do
    ECHO(call A%FillComplete(.true.,err))
    TEST_EQUALITY(err%error_code(),0)
    global_row=4
    length=2
    num_entries=2
    ECHO(call A%ExtractGlobalRowCopy(global_row,length,num_entries,values, indices,err))
    TEST_EQUALITY(scalar(1), values(1))
    TEST_EQUALITY(scalar(2), values(2))
    TEST_EQUALITY(col(1), indices(1)) 
    TEST_EQUALITY(col(2), indices(2))
    call A%force_finalize()
    call map%force_finalize()
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END

  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED,MaxNumEntries) 
  FORTRILINOS_UNITTEST_BEGIN
 use ForTrilinos_enums
    implicit none
#ifdef HAVE_MPI
    type(Epetra_MpiComm):: comm
#else
    type(Epetra_SerialComm):: comm
#endif
    type(error) :: err
    type(Epetra_CrsMatrix) :: A
    type(Epetra_Map) :: map
    integer(c_int),parameter::IndexBase=1
    integer(c_int) :: NumGlobalElements = 4
    integer(c_int) :: i
    integer(c_int),dimension(:),allocatable :: NumIndicesPerRow
    integer(c_int) :: max_entries
    integer(c_int) :: NumMyElements
    integer(c_int), dimension(:), allocatable :: MyGlobalElements
    real(c_double), dimension(3)  :: scalar
    integer(c_int), dimension(3)  :: col
    integer(c_int) :: num_entries
    NumIndicesPerRow=(/3,2,1,3/) 
    success = .TRUE.
    ECHO(comm = UnitTest_EpetraComm_Create())
    ECHO(map = Epetra_Map(NumGlobalElements,IndexBase,comm))
    ECHO(A = Epetra_CrsMatrix(FT_Epetra_DataAccess_E_Copy,map,NumIndicesPerRow,.false.))
    scalar(1) = -1.0
    scalar(2) = 1.0
    scalar(3) = 2.0
    col(1)=2
    col(2)=3
    col(3)=4
    NumMyElements=map%NumMyElements()
    Allocate (MyGlobalElements(NumMyElements))
    MyGlobalElements=map%MyGlobalElements()
    do i=1,NumMyElements
      num_entries=NumIndicesPerRow(MyGlobalElements(i))
      ECHO(call A%InsertGlobalValues(MyGlobalElements(i),num_entries,scalar, col, err))
      TEST_EQUALITY(err%error_code(),0)
    end do
    ECHO(call A%FillComplete(.true.,err))
    TEST_EQUALITY(err%error_code(),0)
    max_entries = A%MaxNumEntries()
    TEST_EQUALITY(max_entries,3)
    call A%force_finalize()
    call map%force_finalize()
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END

  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED, ReplaceGlobalValues)
  FORTRILINOS_UNITTEST_BEGIN
 use ForTrilinos_enums
    implicit none
#ifdef HAVE_MPI
    type(Epetra_MpiComm):: comm
#else
    type(Epetra_SerialComm):: comm
#endif
    type(error) :: err
    type(Epetra_Map) :: map
    type(Epetra_CrsMatrix) :: A
    integer(c_int),parameter::IndexBase=1
    integer(c_int) :: NumGlobalElements = 4
    integer(c_int) :: i, NumIndicesPerRow, NumMyElements
    integer(c_int), dimension(:), allocatable :: MyGlobalElements
    real(c_double), dimension(2)  :: scalar
    real(c_double), dimension(2)  :: values
    integer(c_int), dimension(2)  :: col
    integer(c_int), dimension(2)  :: indices
    integer(c_int) :: global_row, length, num_entries
    NumIndicesPerRow=3
    success = .TRUE.
    ECHO(comm = UnitTest_EpetraComm_Create())
    ECHO(map = Epetra_Map(NumGlobalElements,IndexBase,comm))
    ECHO(A = Epetra_CrsMatrix(FT_Epetra_DataAccess_E_Copy,map,NumIndicesPerRow,.false.))
    scalar(1) = -1.0
    scalar(2) = 1.0
    col(1)=2
    col(2)=3
    num_entries=2
    NumMyElements=map%NumMyElements()
    Allocate (MyGlobalElements(NumMyElements))
    MyGlobalElements=map%MyGlobalElements()
    do i=1,NumMyElements
      ECHO(call A%InsertGlobalValues(MyGlobalElements(i),num_entries,scalar, col,err))
      TEST_EQUALITY(err%error_code(),0)
    end do
    scalar(1)=3.0 
    scalar(2)=-4.0
    col(1)=2
    col(2)=3
    num_entries=2.0
    global_row=3
    ECHO(call A%ReplaceGlobalValues(global_row,num_entries,scalar,col,err)) 
    TEST_EQUALITY(err%error_code(),0)
    ECHO(call A%FillComplete(.true.,err))
    TEST_EQUALITY(err%error_code(),0)
    length=2
    num_entries=2
    ECHO(call A%ExtractGlobalRowCopy(global_row,length,num_entries,values, indices,err))
    TEST_EQUALITY(scalar(1), values(1))
    TEST_EQUALITY(scalar(2), values(2))
    TEST_EQUALITY(col(1), indices(1))
    TEST_EQUALITY(col(2), indices(2))
    call A%force_finalize()
    call map%force_finalize()
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END

  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED, PutScalar)
  FORTRILINOS_UNITTEST_BEGIN
 use ForTrilinos_enums
    implicit none
#ifdef HAVE_MPI
    type(Epetra_MpiComm):: comm
#else
    type(Epetra_SerialComm):: comm
#endif
    type(error) :: err
    type(Epetra_Map) :: map
    type(Epetra_CrsMatrix) :: A
    integer(c_int),parameter::IndexBase=1
    integer(c_int) :: NumGlobalElements = 4
    integer(c_int) :: i, NumIndicesPerRow, NumMyElements
    integer(c_int), dimension(:), allocatable :: MyGlobalElements
    real(c_double), dimension(2)  :: values, scalar
    integer(c_int), dimension(2)  :: col, indices 
    integer(c_int) :: global_row, length, num_entries
    NumIndicesPerRow=2
    success = .TRUE.
    ECHO(comm = UnitTest_EpetraComm_Create())
    ECHO(map = Epetra_Map(NumGlobalElements,IndexBase,comm))
    ECHO(A = Epetra_CrsMatrix(FT_Epetra_DataAccess_E_Copy,map, NumIndicesPerRow,.false.))
    scalar=2.0
    col(1)=1
    col(2)=3 
    num_entries=2
    NumMyElements=map%NumMyElements()
    Allocate (MyGlobalElements(NumMyElements))
    MyGlobalElements=map%MyGlobalElements()
    do i=1,NumMyElements
      ECHO(call A%InsertGlobalValues(MyGlobalElements(i),num_entries,scalar, col,err))
      TEST_EQUALITY(err%error_code(),0)
    end do
    ECHO(call A%PutScalar(1.0_c_double,err))
    TEST_EQUALITY(err%error_code(),0)
    ECHO(call A%FillComplete(.true.,err))
    TEST_EQUALITY(err%error_code(),0)
    global_row=4
    length=2
    num_entries=2
    ECHO(call A%ExtractGlobalRowCopy(global_row,length,num_entries,values, indices,err))
    TEST_EQUALITY(1.0_c_double, values(1))
    TEST_EQUALITY(1.0_c_double, values(2))
    TEST_EQUALITY(col(1), indices(1))
    TEST_EQUALITY(col(2), indices(2))
    call A%force_finalize()
    call map%force_finalize()
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END

FORTRILINOS_UNITTEST_MODULE_END(CLASS_BEING_TESTED)
