#include "../all_build_macros.h"
#include "../runtime_macros.h"
#define CLASS_BEING_TESTED Epetra_SerialComm 

FORTRILINOS_UNITTEST_MODULE_DEF(CLASS_BEING_TESTED)
    use FEpetra_SerialComm,only:Epetra_SerialComm
    use FEpetra_Comm,only:Epetra_Comm
    use iso_c_binding,only:c_int,c_double,c_char,c_long
    use ForTrilinos_error
FORTRILINOS_UNITTEST_MODULE_BEGIN(CLASS_BEING_TESTED)
FORTRILINOS_UNITTEST_SWITCH_BEGIN(CLASS_BEING_TESTED)

  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED, Create)
  FORTRILINOS_UNITTEST_BEGIN
    use ForTrilinos_enums
    implicit none 
    type(Epetra_SerialComm):: comm
    type(FT_Epetra_SerialComm_ID_t):: serial_commID
    type(FT_Epetra_Comm_ID_t) ::commID
    success = .TRUE.
    ECHO(comm = Epetra_SerialComm())
    ECHO(serial_commID = comm%get_EpetraSerialComm_ID())
    ECHO(commID = comm%get_EpetraComm_ID())
    TEST_EQUALITY(serial_commID%table, FT_Epetra_SerialComm_ID)
    TEST_EQUALITY(serial_commID%index, 0)
    TEST_EQUALITY(serial_commID%is_const, FT_False)
    TEST_EQUALITY(commID%table, FT_Epetra_Comm_ID)
    TEST_EQUALITY(commID%index, 0)
    TEST_EQUALITY(commID%is_const, FT_False)
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END

  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED, Duplicate)
  FORTRILINOS_UNITTEST_BEGIN
    use ForTrilinos_enums
    implicit none 
    type(Epetra_SerialComm):: comm,comm2
    type(FT_Epetra_SerialComm_ID_t):: serial_comm2ID
    type(FT_Epetra_Comm_ID_t) ::comm2ID
    success = .TRUE.
    ECHO(comm = Epetra_SerialComm())
    ECHO(comm2 = Epetra_SerialComm(comm))
    ECHO(serial_comm2ID = comm2%get_EpetraSerialComm_ID())
    ECHO(comm2ID = comm2%get_EpetraComm_ID())
    TEST_EQUALITY(serial_comm2ID%table, FT_Epetra_SerialComm_ID)
    TEST_EQUALITY(serial_comm2ID%index, 1)
    TEST_EQUALITY(comm2ID%table, FT_Epetra_Comm_ID)
    TEST_EQUALITY(comm2ID%index, 1)
    call comm%force_finalize()
    call comm2%force_finalize()
  FORTRILINOS_UNITTEST_END
  
  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED, Destroy)
  FORTRILINOS_UNITTEST_BEGIN
    use ForTrilinos_enums
    implicit none 
    type(Epetra_SerialComm):: comm
    type(FT_Epetra_SerialComm_ID_t):: serial_commID
    type(FT_Epetra_Comm_ID_t) ::commID
    success = .TRUE.
    ECHO(comm = Epetra_SerialComm())
    ECHO(call comm%force_finalize())
    ECHO(serial_commID = comm%get_EpetraSerialComm_ID())
    ECHO(commID = comm%get_EpetraComm_ID())
    TEST_EQUALITY(serial_commID%table, FT_Invalid_ID)
    TEST_EQUALITY(serial_commID%index, -1)
    TEST_EQUALITY(commID%table, FT_Invalid_ID)
    TEST_EQUALITY(commID%index, -1)
  FORTRILINOS_UNITTEST_END

  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED, Barrier)
  FORTRILINOS_UNITTEST_BEGIN
    use ForTrilinos_enums
    implicit none 
    type(Epetra_SerialComm):: comm
    success = .TRUE.
    ECHO(comm = Epetra_SerialComm())
    ECHO(call comm%barrier())
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END

  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED, Broadcast_Double)
  FORTRILINOS_UNITTEST_BEGIN
    use ForTrilinos_enums
    implicit none 
    type(Epetra_SerialComm):: comm
    integer(c_int):: root,count
    real(c_double),allocatable :: MyVals(:)
    type(error) :: ierror
    success = .TRUE.
    ECHO(comm = Epetra_SerialComm())
    ECHO(root = comm%MyPID())
    ECHO(count = 6)
    ECHO(MyVals = (/4.6,2.6,3.1,7.7,-0.5,1.0/))
    ECHO(call comm%broadcast(MyVals,count,root,ierror))
    TEST_EQUALITY(ierror%error_code(),0) 
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END


  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED, Broadcast_Int)
  FORTRILINOS_UNITTEST_BEGIN
    use ForTrilinos_enums
    implicit none 
    type(Epetra_SerialComm):: comm
    integer(c_int):: root,count
    integer(c_int),allocatable :: MyVals(:)
    type(error) :: ierror
    success = .TRUE.
    ECHO(comm = Epetra_SerialComm())
    ECHO(root = comm%MyPID())
    ECHO(count = 6)
    ECHO(MyVals = (/4,2,3,7,-5,1/))
    ECHO(call comm%broadcast(MyVals,count,root,ierror))
    TEST_EQUALITY(ierror%error_code(),0) 
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END

  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED, Broadcast_Long)
  FORTRILINOS_UNITTEST_BEGIN
    implicit none 
    type(Epetra_SerialComm):: comm
    integer(c_int):: root,count
    integer(c_long),allocatable :: MyVals(:)
    type(error) :: ierror
    success = .TRUE.
    ECHO(comm = Epetra_SerialComm())
    ECHO(root = comm%MyPID())
    ECHO(count = 6)
    ECHO(MyVals = (/46,26,31,77,-50,10/))
    ECHO(call comm%broadcast_long(MyVals,count,root,ierror))
    TEST_EQUALITY(ierror%error_code(),0) 
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END

  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED, Broadcast_Char)
  FORTRILINOS_UNITTEST_BEGIN
    implicit none 
    type(Epetra_SerialComm):: comm
    integer(c_int):: root,count
    character(kind=c_char),allocatable :: MyVals(:)
    type(error) :: ierror
    success = .TRUE.
    ECHO(comm = Epetra_SerialComm())
    ECHO(root = comm%MyPID())
    ECHO(count = 6)
    ECHO(MyVals = (/'a','b','c','d','o','i'/))
    ECHO(call comm%broadcast(MyVals,count,root,ierror))
    TEST_EQUALITY(ierror%error_code(),0) 
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END

  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED, GatherAll_Double)
  FORTRILINOS_UNITTEST_BEGIN
    implicit none 
    type(Epetra_SerialComm):: comm
    integer(c_int):: count,i
    real(c_double),allocatable :: MyVals(:)
    real(c_double),allocatable :: AllVals(:)
    type(error) :: ierror
    success = .TRUE.
    ECHO(comm = Epetra_SerialComm())
    ECHO(count = 6)
    ECHO(MyVals = (/4.6,2.6,3.1,7.7,-0.5,1.0/))
    ECHO(allocate(AllVals(size(MyVals))))
    ECHO(call comm%GatherAll(MyVals,AllVals,count,ierror))
    TEST_EQUALITY(ierror%error_code(),0) 
    do i=1,count
      if (MyVals(i) /= AllVals(i)) success=.false.
    enddo
    call comm%force_finalize()
  FORTRILINOS_UNITTEST_END


FORTRILINOS_UNITTEST_SWITCH_END(CLASS_BEING_TESTED)
FORTRILINOS_UNITTEST_MODULE_END(CLASS_BEING_TESTED)
