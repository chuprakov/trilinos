#include "ForTrilinos_config.h"
#include "runtime_macros.h"

FORTRILINOS_UNITTEST_MODULE_DEF(CLASS_BEING_TESTED)
FORTRILINOS_UNITTEST_MODULE_BEGIN(CLASS_BEING_TESTED)

  FORTRILINOS_UNITTEST_DEF(CLASS_BEING_TESTED, Create_FromArray)
  FORTRILINOS_UNITTEST_BEGIN
    use ForTrilinos_enums
    use forepetra
    use ForTrilinos_external_utils
    implicit none 
    type(FT_Epetra_Comm_ID_t) CommID
    type(FT_Epetra_BlockMap_ID_t) MapID
    type(FT_Epetra_Vector_ID_t) VecID
    integer(c_int) :: NumGlobalElements, ElementSize, IndexBase, i
    real(c_double),dimension(6) :: V
    real(c_double) :: val
    success = .TRUE.

#ifdef HAVE_MPI
    ECHO(CommID = Epetra_Comm_Degeneralize(Epetra_MpiComm_Generalize(Epetra_MpiComm_Fortran_Create(MPI_COMM_WORLD))))
#else
    ECHO(CommID = Epetra_Comm_Degeneralize(Epetra_SerialComm_Generalize(Epetra_SerialComm_Create())))
#endif

    ECHO(NumGlobalElements = 6)
    ECHO(ElementSize = 1)
    ECHO(IndexBase = 0)
    ECHO(MapID = Epetra_BlockMap_Create(NumGlobalElements, ElementSize, IndexBase, CommID))
    do i = 1,6
      v(i) = i*2.43+i*i*0.89
    end do
    ECHO(VecID = Epetra_Vector_Create_FromArray(FT_Epetra_DataAccess_E_Copy, MapID, V))
    TEST_EQUALITY(VecID%table, FT_Epetra_Vector_ID)
    TEST_EQUALITY(VecID%index, 0)
    TEST_EQUALITY(VecID%is_const, FT_False);
#ifndef HAVE_MPI
    do i = 1,6
      ECHO(val = Epetra_Vector_getElement(VecID, i-1))
      ! this should be switched over to a tolerance test when Salvatore adds one
      TEST_EQUALITY(val, V(i))
    end do
#endif
  FORTRILINOS_UNITTEST_END

FORTRILINOS_UNITTEST_MODULE_END(CLASS_BEING_TESTED)
