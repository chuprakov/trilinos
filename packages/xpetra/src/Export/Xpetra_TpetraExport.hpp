#ifndef XPETRA_TPETRAEXPORT_HPP
#define XPETRA_TPETRAEXPORT_HPP

/* this file is automatically generated - do not edit (see script/tpetra.py) */

#include "Xpetra_TpetraConfigDefs.hpp"

#include "Xpetra_Export.hpp"
#include "Xpetra_Exceptions.hpp"

#include "Xpetra_TpetraMap.hpp"
#include "Tpetra_Export.hpp"

// Note: 'export' is a reserved keyword in C++. Do not use 'export' as a variable name.

namespace Xpetra {

  // TODO: move that elsewhere
  template <class LocalOrdinal, class GlobalOrdinal, class Node>
  const Tpetra::Export<LocalOrdinal,GlobalOrdinal,Node> & toTpetra(const Export<LocalOrdinal,GlobalOrdinal,Node> &);
  //

  template <class LocalOrdinal, class GlobalOrdinal = LocalOrdinal, class Node = Kokkos::DefaultNode::DefaultNodeType>
  class TpetraExport
    : public Export<LocalOrdinal, GlobalOrdinal, Node>
  {

  public:

    //! @name Constructor/Destructor Methods
    //@{

    //! Construct a Export object from the source and target Map.
    TpetraExport(const RCP< const Map< LocalOrdinal, GlobalOrdinal, Node > > &source, const RCP< const Map< LocalOrdinal, GlobalOrdinal, Node > > &target)
      : export_(Teuchos::rcp(new Tpetra::Export< LocalOrdinal, GlobalOrdinal, Node >(toTpetra(source), toTpetra(target)))) { }

    //! Copy constructor.
    TpetraExport(const Export< LocalOrdinal, GlobalOrdinal, Node > &rhs)
      : export_(Teuchos::rcp(new Tpetra::Export< LocalOrdinal, GlobalOrdinal, Node >(toTpetra(rhs)))) { }

    //! Destructor.
    ~TpetraExport() { }

    //@}

    //! @name Export Attribute Methods
    //@{

    //! The number of entries that are identical between the source and target maps, up to the first different ID.
    size_t getNumSameIDs() const { return export_->getNumSameIDs(); }

    //! The number of entries that are local to the calling image, but not part of the first getNumSameIDs() entries.
    size_t getNumPermuteIDs() const { return export_->getNumPermuteIDs(); }

    //! List of entries in the source Map that are permuted. (non-persisting view).
    ArrayView< const LocalOrdinal > getPermuteFromLIDs() const { return export_->getPermuteFromLIDs(); }

    //! List of entries in the target Map that are permuted. (non-persisting view).
    ArrayView< const LocalOrdinal > getPermuteToLIDs() const { return export_->getPermuteToLIDs(); }

    //! The number of entries that are not on the calling image.
    size_t getNumRemoteIDs() const { return export_->getNumRemoteIDs(); }

    //! List of entries in the target Map that are coming from other images. (non-persisting view).
    ArrayView< const LocalOrdinal > getRemoteLIDs() const { return export_->getRemoteLIDs(); }

    //! The number of entries that must be sent by the calling image to other images.
    size_t getNumExportIDs() const { return export_->getNumExportIDs(); }

    //! List of entries in the source Map that will be sent to other images. (non-persisting view).
    ArrayView< const LocalOrdinal > getExportLIDs() const { return export_->getExportLIDs(); }

    //! List of images to which entries will be sent, getExportLIDs() [i] will be sent to image getExportImageIDs() [i]. (non-persisting view).
    ArrayView< const int > getExportImageIDs() const { return export_->getExportImageIDs(); }

    //! The source Map used to construct this exporter.
    const RCP< const Map< LocalOrdinal, GlobalOrdinal, Node > >  getSourceMap() const { return toXpetra(export_->getSourceMap()); }

    //! The target Map used to construct this exporter.
    const RCP< const Map< LocalOrdinal, GlobalOrdinal, Node > >  getTargetMap() const { return toXpetra(export_->getTargetMap()); }

    //@}

    //! @name I/O Methods
    //@{

    //! Print the Export's data to the given output stream.
    void print(std::ostream &os) const { export_->print(os); }

    //@}

    //! @name Xpetra specific
    //@{

    //! TpetraExport constructor to wrap a Tpetra::Export object
    TpetraExport(const RCP<const Tpetra::Export< LocalOrdinal, GlobalOrdinal, Node > > &exp) : export_(exp) {  }

    RCP< const Tpetra::Export< LocalOrdinal, GlobalOrdinal, Node > > getTpetra_Export() const { return export_; }

    //@}
    
  private:
    
    RCP<const Tpetra::Export< LocalOrdinal, GlobalOrdinal, Node > > export_;

  }; // TpetraExport class

  // TODO: move that elsewhere
  template <class LocalOrdinal, class GlobalOrdinal, class Node>
  const Tpetra::Export<LocalOrdinal,GlobalOrdinal,Node> & toTpetra(const Export<LocalOrdinal,GlobalOrdinal,Node> &exp) {
    // TODO: throw exception
    const TpetraExport<LocalOrdinal,GlobalOrdinal,Node> & tpetraExport = dynamic_cast<const TpetraExport<LocalOrdinal,GlobalOrdinal,Node> &>(exp);
    return *tpetraExport.getTpetra_Export();
  }
  //

} // Xpetra namespace

#define XPETRA_TPETRAEXPORT_SHORT
#endif // XPETRA_TPETRAEXPORT_HPP
