#ifndef XPETRA_DISTOBJECT_HPP
#define XPETRA_DISTOBJECT_HPP

/* this file is automatically generated - do not edit (see script/interfaces.py) */

#include "Xpetra_ConfigDefs.hpp"
#include "Xpetra_Map.hpp"
#include "Xpetra_Import.hpp"
#include "Xpetra_Export.hpp"
#include <Kokkos_DefaultNode.hpp>
#include <Teuchos_Describable.hpp>

namespace Xpetra {

  template <class Packet, class LocalOrdinal = int, class GlobalOrdinal = LocalOrdinal, class Node = Kokkos::DefaultNode::DefaultNodeType>
  class DistObject
    : virtual public Teuchos::Describable
  {

  public:

    //! @name Constructor/Destructor Methods
    //@{ 

    //! Destructor.
    virtual ~DistObject() { }

   //@}

    //! @name Import/Export Methods
    //@{

    //! Import.
    virtual void doImport(const DistObject< Packet, LocalOrdinal, GlobalOrdinal, Node > &source, const Import< LocalOrdinal, GlobalOrdinal, Node > &importer, CombineMode CM)= 0;

    //! Export.
    virtual void doExport(const DistObject< Packet, LocalOrdinal, GlobalOrdinal, Node > &dest, const Export< LocalOrdinal, GlobalOrdinal, Node > &exporter, CombineMode CM)= 0;

    //! Import (using an Exporter).
    virtual void doImport(const DistObject< Packet, LocalOrdinal, GlobalOrdinal, Node > &source, const Export< LocalOrdinal, GlobalOrdinal, Node > &exporter, CombineMode CM)= 0;

    //! Export (using an Importer).
    virtual void doExport(const DistObject< Packet, LocalOrdinal, GlobalOrdinal, Node > &dest, const Import< LocalOrdinal, GlobalOrdinal, Node > &importer, CombineMode CM)= 0;

    //@}

    //! @name Attribute Accessor Methods
    //@{

    //! The Map with which this DistObject was constructed.
    virtual const Teuchos::RCP< const Map< LocalOrdinal, GlobalOrdinal, Node > >  getMap() const = 0;

    //@}

  }; // DistObject class

} // Xpetra namespace

#define XPETRA_DISTOBJECT_SHORT
#endif // XPETRA_DISTOBJECT_HPP
