#ifndef XPETRA_TPETRAIMPORT_HPP
#define XPETRA_TPETRAIMPORT_HPP

/* this file is automatically generated - do not edit (see script/tpetra.py) */

#include "Xpetra_TpetraConfigDefs.hpp"

#include "Xpetra_Import.hpp"
#include "Xpetra_Exceptions.hpp"

#include "Xpetra_TpetraMap.hpp"
#include "Tpetra_Import.hpp"

namespace Xpetra {

  // TODO: move that elsewhere
  template <class LocalOrdinal, class GlobalOrdinal, class Node>
  const Tpetra::Import<LocalOrdinal,GlobalOrdinal,Node> & toTpetra(const Import<LocalOrdinal,GlobalOrdinal,Node> &);

  template <class LocalOrdinal, class GlobalOrdinal, class Node>
  RCP< const Import< LocalOrdinal, GlobalOrdinal, Node > > toXpetra(const RCP< const Tpetra::Import< LocalOrdinal, GlobalOrdinal, Node > > &);
  //

  template <class LocalOrdinal, class GlobalOrdinal = LocalOrdinal, class Node = Kokkos::DefaultNode::DefaultNodeType>
  class TpetraImport
    : public Import<LocalOrdinal, GlobalOrdinal, Node>
  {

  public:

    //! @name Constructor/Destructor Methods
    //@{

    //! Constructs a Import object from the source and target Maps.
    TpetraImport(const RCP< const Map< LocalOrdinal, GlobalOrdinal, Node > > &source, const RCP< const Map< LocalOrdinal, GlobalOrdinal, Node > > &target)
      : import_(Teuchos::rcp(new Tpetra::Import< LocalOrdinal, GlobalOrdinal, Node >(toTpetra(source), toTpetra(target)))) { }

    //! copy constructor.
    TpetraImport(const Import< LocalOrdinal, GlobalOrdinal, Node > &import)
      : import_(Teuchos::rcp(new Tpetra::Import< LocalOrdinal, GlobalOrdinal, Node >(toTpetra(import)))) { }

    //! destructor.
    ~TpetraImport() { }

    //@}

    //! @name Export Attribute Methods
    //@{

    //! Returns the number of entries that are identical between the source and target maps, up to the first different ID.
    size_t getNumSameIDs() const { return import_->getNumSameIDs(); }

    //! Returns the number of entries that are local to the calling image, but not part of the first getNumSameIDs() entries.
    size_t getNumPermuteIDs() const { return import_->getNumPermuteIDs(); }

    //! List of entries in the source Map that are permuted. (non-persisting view).
    ArrayView< const LocalOrdinal > getPermuteFromLIDs() const { return import_->getPermuteFromLIDs(); }

    //! List of entries in the target Map that are permuted. (non-persisting view).
    ArrayView< const LocalOrdinal > getPermuteToLIDs() const { return import_->getPermuteToLIDs(); }

    //! Returns the number of entries that are not on the calling image.
    size_t getNumRemoteIDs() const { return import_->getNumRemoteIDs(); }

    //! List of entries in the target Map that are coming from other images. (non-persisting view).
    ArrayView< const LocalOrdinal > getRemoteLIDs() const { return import_->getRemoteLIDs(); }

    //! Returns the number of entries that must be sent by the calling image to other images.
    size_t getNumExportIDs() const { return import_->getNumExportIDs(); }

    //! List of entries in the source Map that will be sent to other images. (non-persisting view).
    ArrayView< const LocalOrdinal > getExportLIDs() const { return import_->getExportLIDs(); }

    //! List of images to which entries will be sent, getExportLIDs() [i] will be sent to image getExportImageIDs() [i]. (non-persisting view).
    ArrayView< const int > getExportImageIDs() const { return import_->getExportImageIDs(); }

    //! Returns the Source Map used to construct this importer.
    const RCP< const Map< LocalOrdinal, GlobalOrdinal, Node > >  getSourceMap() const { return toXpetra(import_->getSourceMap()); }

    //! Returns the Target Map used to construct this importer.
    const RCP< const Map< LocalOrdinal, GlobalOrdinal, Node > >  getTargetMap() const { return toXpetra(import_->getTargetMap()); }

    //@}

    //! @name I/O Methods
    //@{

    //! Print method.
    void print(std::ostream &os) const { import_->print(os); }

    //@}

    //! @name Xpetra specific
    //@{

    //! TpetraImport constructor to wrap a Tpetra::Import object
    TpetraImport(const RCP<const Tpetra::Import< LocalOrdinal, GlobalOrdinal, Node > > &import) : import_(import) {  }

    RCP< const Tpetra::Import< LocalOrdinal, GlobalOrdinal, Node > > getTpetra_Import() const { return import_; }

    //@}
    
  private:
    
    RCP<const Tpetra::Import< LocalOrdinal, GlobalOrdinal, Node > > import_;

  }; // TpetraImport class

  // TODO: move that elsewhere
  template <class LocalOrdinal, class GlobalOrdinal, class Node>
  const Tpetra::Import<LocalOrdinal,GlobalOrdinal,Node> & toTpetra(const Import<LocalOrdinal,GlobalOrdinal,Node> &import) {
    // TODO: throw exception
    const TpetraImport<LocalOrdinal,GlobalOrdinal,Node> & tpetraImport = dynamic_cast<const TpetraImport<LocalOrdinal,GlobalOrdinal,Node> &>(import);
    return *tpetraImport.getTpetra_Import();
  }

  template <class LocalOrdinal, class GlobalOrdinal, class Node>
  RCP< const Import< LocalOrdinal, GlobalOrdinal, Node > > toXpetra(const RCP< const Tpetra::Import< LocalOrdinal, GlobalOrdinal, Node > > &import) {
    return rcp( new TpetraImport<LocalOrdinal, GlobalOrdinal, Node>(import));
  }
  //

} // Xpetra namespace

#define XPETRA_TPETRAIMPORT_SHORT
#endif // XPETRA_TPETRAIMPORT_HPP
