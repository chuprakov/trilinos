$TMPL_HEADERS

#include "Cthulhu_EpetraConfigDefs.hpp"

#include "Cthulhu_Vector.hpp"
#include "Cthulhu_EpetraMultiVector.hpp"
#include "Cthulhu_EpetraMap.hpp" //TMP
#include "Cthulhu_Utils.hpp"
#include "Cthulhu_EpetraImport.hpp"
#include "Cthulhu_EpetraExport.hpp"
#include "Cthulhu_Exceptions.hpp"

#include <Epetra_Vector.h>

namespace Cthulhu {

  // TODO: move that elsewhere
  Epetra_Vector & toEpetra(Vector<double, int, int> &);

  const Epetra_Vector & toEpetra(const Vector<double, int, int> &);
  //

  class $TMPL_CLASS
  $TMPL_INHERITANCE
  {

    typedef double Scalar;
    typedef int LocalOrdinal;
    typedef int GlobalOrdinal;
    typedef Kokkos::DefaultNode::DefaultNodeType Node;

  public:

    using EpetraMultiVector::dot;          // overloading, not hiding
    using EpetraMultiVector::norm1;        // overloading, not hiding
    using EpetraMultiVector::norm2;        // overloading, not hiding
    using EpetraMultiVector::normInf;      // overloading, not hiding
    using EpetraMultiVector::normWeighted; // overloading, not hiding
    using EpetraMultiVector::meanValue;    // overloading, not hiding

$TMPL_PUBLIC_FUNCTIONS

    //! @name Cthulhu specific
    //@{

    //! EpetraMultiVector constructor to wrap a Epetra_Vector object
    EpetraVector(const Teuchos::RCP<Epetra_Vector> &vec) : EpetraMultiVector(vec) { } // TODO: removed const of Epetra::Vector

    //! Get the underlying Epetra vector
    Epetra_Vector * getEpetra_Vector() const {  return (*this->EpetraMultiVector::getEpetra_MultiVector())(0); }
    //RCP<Epetra_Vector> getEpetra_Vector() const { return this->EpetraMultiVector::getEpetra_MultiVector()->getVectorNonConst(0); }

    //@}
    
  }; // EpetraVector class

} // Cthulhu namespace

$TMPL_FOOTERS
