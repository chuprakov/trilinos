$TMPL_HEADERS

#include "Xpetra_EpetraConfigDefs.hpp"

#include "Xpetra_CrsGraph.hpp"

#include "Xpetra_EpetraMap.hpp"
#include "Xpetra_EpetraImport.hpp"
#include "Xpetra_EpetraUtils.hpp"

#include <Epetra_CrsGraph.h>

namespace Xpetra {

  // TODO: move that elsewhere
  RCP< const CrsGraph<int, int> > toXpetra(const Epetra_CrsGraph& graph);
  //

#ifndef DOXYGEN_SHOULD_SKIP_THIS
  // forward declaration
  template <class S, class LO, class GO, class N, class SpMatOps>
  class CrsMatrix;
#endif
  
  class $TMPL_CLASS
  $TMPL_INHERITANCE
  {

    typedef int LocalOrdinal;
    typedef int GlobalOrdinal;
    typedef Kokkos::DefaultNode::DefaultNodeType Node;

  public:

$TMPL_PUBLIC_FUNCTIONS

    //! @name Xpetra specific
    //@{

    //! EpetraCrsGraph constructor to wrap a Epetra_CrsGraph object
    EpetraCrsGraph(const Teuchos::RCP<Epetra_CrsGraph> &graph) : graph_(graph) { }

    //! Get the underlying Epetra graph
    RCP< const Epetra_CrsGraph> getEpetra_CrsGraph() const { return graph_; }
    
    //@}
    
  private:
    
    RCP<Epetra_CrsGraph> graph_;

  }; // $TMPL_CLASS class

} // Xpetra namespace

$TMPL_FOOTERS
