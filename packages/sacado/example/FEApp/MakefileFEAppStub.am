## $Id$ 
## $Source$ 
# @HEADER
# ************************************************************************
# 
#                           Sacado Package
#                 Copyright (2006) Sandia Corporation
# 
# Under the terms of Contract DE-AC04-94AL85000 with Sandia Corporation,
# the U.S. Government retains certain rights in this software.
# 
# This library is free software; you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation; either version 2.1 of the
# License, or (at your option) any later version.
#  
# This library is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#  
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
# USA
# Questions? Contact David M. Gay (dmgay@sandia.gov) or Eric T. Phipps
# (etphipp@sandia.gov).
# 
# ************************************************************************
# @HEADER

# ------------------------------------------------------------------------
# FEApp Sources
# ------------------------------------------------------------------------

FEAPP_PATH = $(top_srcdir)/../sacado/example/FEApp

ELEMENT_H = \
	$(FEAPP_PATH)/FEApp_AbstractElement.hpp \
	$(FEAPP_PATH)/FEApp_LinearElement.hpp \
	$(FEAPP_PATH)/FEApp_ElementFactory.hpp

ELEMENT = \
	$(FEAPP_PATH)/FEApp_LinearElement.cpp \
	$(FEAPP_PATH)/FEApp_ElementFactory.cpp

QUADRATURE_H = \
	$(FEAPP_PATH)/FEApp_AbstractQuadrature.hpp \
	$(FEAPP_PATH)/FEApp_GaussianQuadrature2.hpp \
	$(FEAPP_PATH)/FEApp_QuadratureFactory.hpp

QUADRATURE = \
	$(FEAPP_PATH)/FEApp_GaussianQuadrature2.cpp \
	$(FEAPP_PATH)/FEApp_QuadratureFactory.cpp

SOURCE_H = \
	$(FEAPP_PATH)/FEApp_AbstractSourceFunction.hpp \
	$(FEAPP_PATH)/FEApp_QuadraticSourceFunction.hpp \
	$(FEAPP_PATH)/FEApp_CubicSourceFunction.hpp \
	$(FEAPP_PATH)/FEApp_ExponentialSourceFunction.hpp \
	$(FEAPP_PATH)/FEApp_MultiVariateExponentialSourceFunction.hpp \
	$(FEAPP_PATH)/FEApp_SourceFunctionFactory.hpp \
	$(FEAPP_PATH)/FEApp_SourceFunctionFactoryImpl.hpp

SOURCE = \
	$(FEAPP_PATH)/FEApp_SourceFunctionFactory.cpp

FUNC_H = \
	$(FEAPP_PATH)/FEApp_AbstractFunction.hpp \
	$(FEAPP_PATH)/FEApp_ConstantFunction.hpp \
	$(FEAPP_PATH)/FEApp_FunctionFactory.hpp \
	$(FEAPP_PATH)/FEApp_FunctionFactoryImpl.hpp

FUNC = \
	$(FEAPP_PATH)/FEApp_FunctionFactory.cpp

PDE_H = \
	$(FEAPP_PATH)/FEApp_AbstractPDE_NTBase.hpp \
	$(FEAPP_PATH)/FEApp_AbstractPDE.hpp \
	$(FEAPP_PATH)/FEApp_HeatNonlinearSourcePDE.hpp \
	$(FEAPP_PATH)/FEApp_HeatNonlinearSourcePDEImpl.hpp \
	$(FEAPP_PATH)/FEApp_BrusselatorPDE.hpp \
	$(FEAPP_PATH)/FEApp_BrusselatorPDEImpl.hpp

PDE = \
	$(FEAPP_PATH)/FEApp_HeatNonlinearSourcePDE.cpp \
	$(FEAPP_PATH)/FEApp_BrusselatorPDE.cpp

BC_H = \
	$(FEAPP_PATH)/FEApp_AbstractNodeBCStrategy_NTBase.hpp \
	$(FEAPP_PATH)/FEApp_AbstractNodeBCStrategy.hpp \
	$(FEAPP_PATH)/FEApp_NodeBC.hpp \
	$(FEAPP_PATH)/FEApp_BrusselatorNodeBCStrategy.hpp \
	$(FEAPP_PATH)/FEApp_BrusselatorNodeBCStrategyImpl.hpp \
	$(FEAPP_PATH)/FEApp_ConstantNodeBCStrategy.hpp \
	$(FEAPP_PATH)/FEApp_ConstantNodeBCStrategyImpl.hpp

BC = \
	$(FEAPP_PATH)/FEApp_BrusselatorNodeBCStrategy.cpp \
	$(FEAPP_PATH)/FEApp_ConstantNodeBCStrategy.cpp

PROBLEM_H = \
	$(FEAPP_PATH)/FEApp_TemplateTypes.hpp \
	$(FEAPP_PATH)/FEApp_AbstractProblem.hpp \
	$(FEAPP_PATH)/FEApp_BrusselatorProblem.hpp \
	$(FEAPP_PATH)/FEApp_HeatNonlinearSourceProblem.hpp \
	$(FEAPP_PATH)/FEApp_ProblemFactory.hpp \
	$(FEAPP_PATH)/FEApp_BrusselatorParameters.hpp

PROBLEM = \
	$(FEAPP_PATH)/FEApp_BrusselatorProblem.cpp \
	$(FEAPP_PATH)/FEApp_HeatNonlinearSourceProblem.cpp \
	$(FEAPP_PATH)/FEApp_ProblemFactory.cpp

RESPONSE_H = \
	$(FEAPP_PATH)/FEApp_AbstractResponseFunction.hpp \
	$(FEAPP_PATH)/FEApp_BoundaryFlux1DResponseFunction.hpp \
	$(FEAPP_PATH)/FEApp_SolutionAverageResponseFunction.hpp \
	$(FEAPP_PATH)/FEApp_SolutionTwoNormResponseFunction.hpp

RESPONSE = \
	$(FEAPP_PATH)/FEApp_BoundaryFlux1DResponseFunction.cpp \
	$(FEAPP_PATH)/FEApp_SolutionAverageResponseFunction.cpp \
	$(FEAPP_PATH)/FEApp_SolutionTwoNormResponseFunction.cpp

MESH_H = \
	$(FEAPP_PATH)/FEApp_Mesh.hpp

MESH = \
	$(FEAPP_PATH)/FEApp_Mesh.cpp

FILL_H = \
	$(FEAPP_PATH)/FEApp_AbstractInitPostOp.hpp \
	$(FEAPP_PATH)/FEApp_InitPostOps.hpp \
	$(FEAPP_PATH)/FEApp_GlobalFill.hpp \
	$(FEAPP_PATH)/FEApp_GlobalFillImpl.hpp \
	$(FEAPP_PATH)/FEApp_SGGaussQuadResidualGlobalFill.hpp \
	$(FEAPP_PATH)/FEApp_SGGaussQuadJacobianGlobalFill.hpp

FILL = \
	$(FEAPP_PATH)/FEApp_InitPostOps.cpp \
	$(FEAPP_PATH)/FEApp_GlobalFill.cpp \
	$(FEAPP_PATH)/FEApp_SGGaussQuadResidualGlobalFill.cpp \
	$(FEAPP_PATH)/FEApp_SGGaussQuadJacobianGlobalFill.cpp

DISC_H = \
	$(FEAPP_PATH)/FEApp_AbstractDiscretization.hpp \
	$(FEAPP_PATH)/FEApp_CZeroDiscretization.hpp \
	$(FEAPP_PATH)/FEApp_DiscretizationFactory.hpp

DISC = \
	$(FEAPP_PATH)/FEApp_CZeroDiscretization.cpp \
	$(FEAPP_PATH)/FEApp_DiscretizationFactory.cpp

APP_H = \
	$(FEAPP_PATH)/FEApp_Application.hpp \
	$(FEAPP_PATH)/FEApp_ModelEvaluator.hpp 

APP = \
	$(FEAPP_PATH)/FEApp_Application.cpp \
	$(FEAPP_PATH)/FEApp_ModelEvaluator.cpp 

FEAPP_H = \
	$(ELEMENT_H) \
	$(QUADRATURE_H) \
	$(FUNC_H) \
	$(SOURCE_H) \
	$(PDE_H) \
	$(BC_H) \
	$(PROBLEM_H) \
	$(RESPONSE_H) \
	$(MESH_H) \
	$(FILL_H) \
	$(DISC_H) \
	$(APP_H)

FEAPP = \
	$(ELEMENT) \
	$(QUADRATURE) \
	$(FUNC) \
	$(SOURCE) \
	$(PDE) \
	$(BC) \
	$(PROBLEM) \
	$(RESPONSE) \
	$(MESH) \
	$(FILL) \
	$(DISC) \
	$(APP)
