# $Header$

INCLUDE(Trilinos_Add_Executable)

INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/MVOPTester)
INCLUDE_DIRECTORIES(${Anasazi_BINARY_DIR}/src)
INCLUDE_DIRECTORIES(${Anasazi_SOURCE_DIR}/src)
INCLUDE_DIRECTORIES(${Anasazi_SOURCE_DIR}/util/ModeLaplace)
INCLUDE_DIRECTORIES(${Teuchos_BINARY_DIR}/src)
INCLUDE_DIRECTORIES(${Teuchos_SOURCE_DIR}/src)
INCLUDE_DIRECTORIES(${Epetra_BINARY_DIR}/src)
INCLUDE_DIRECTORIES(${Epetra_SOURCE_DIR}/src)

# 2008/06/09: rabartl: Above: You should not be listing include directories
# for your or any other package.  This just creates a maintainance problem and
# is not scalable.  NO DUPLICATION!

LINK_LIBRARIES(anasazi-mode-laplace anasazi teuchos epetra ${TRILINOS_LAPACK_LIBRARY} ${TRILINOS_BLAS_LIBRARY})

# 2008/06/09: rabartl: Above: epetra already lists LAPACK and BLAS as link
# libraries, why do you have to list them again?

IF(TRILINOS_ENABLE_MPI)
	INCLUDE_DIRECTORIES(${MPI_INCLUDE_PATH})
	LINK_LIBRARIES(${MPI_LIBRARY} ${MPI_EXTRA_LIBRARY})
	SET(TEST_ARGUMENTS TEST MPITEST)
ELSE(TRILINOS_ENABLE_MPI)
	SET(TEST_ARGUMENTS TEST)
ENDIF(TRILINOS_ENABLE_MPI)

TRILINOS_ADD_EXECUTABLE(ARPACKExamples NAME ARPACKDDriver ${TEST_ARGUMENTS} SOURCES ddriver.cpp)
TRILINOS_ADD_EXECUTABLE(BlockDavidson NAME BlockDavidson ${TEST_ARGUMENTS} SOURCES cxx_main.cpp)
TRILINOS_ADD_EXECUTABLE(BlockDavidson NAME BlockDavidsonSolver ${TEST_ARGUMENTS} SOURCES cxx_main_solvertest.cpp)
TRILINOS_ADD_EXECUTABLE(BlockDavidson NAME BlockDavidsonAux ${TEST_ARGUMENTS} SOURCES cxx_main_auxtest.cpp)
TRILINOS_ADD_EXECUTABLE(BlockKrylovSchur NAME BlockKrylovSchur ${TEST_ARGUMENTS} SOURCES cxx_main.cpp)
TRILINOS_ADD_EXECUTABLE(BlockKrylovSchur NAME BlockKrylovSchurNH ${TEST_ARGUMENTS} SOURCES cxx_main_nh.cpp)
TRILINOS_ADD_EXECUTABLE(BlockKrylovSchur NAME BlockKrylovSchurSolver ${TEST_ARGUMENTS} SOURCES cxx_main_solvertest.cpp)
TRILINOS_ADD_EXECUTABLE(LOBPCG NAME LOBPCG ${TEST_ARGUMENTS} SOURCES cxx_main.cpp)
TRILINOS_ADD_EXECUTABLE(LOBPCG NAME LOBPCGSimple ${TEST_ARGUMENTS} SOURCES cxx_simple.cpp)
TRILINOS_ADD_EXECUTABLE(LOBPCG NAME LOBPCGSolver ${TEST_ARGUMENTS} SOURCES cxx_main_solvertest.cpp)
TRILINOS_ADD_EXECUTABLE(LOBPCG NAME LOBPCGAux ${TEST_ARGUMENTS} SOURCES cxx_main_auxtest.cpp)
TRILINOS_ADD_EXECUTABLE(MVOPTester NAME MVOP ${TEST_ARGUMENTS} SOURCES cxx_main.cpp)
TRILINOS_ADD_EXECUTABLE(ModalSolverUtils ${TEST_ARGUMENTS} SOURCES cxx_main.cpp)
TRILINOS_ADD_EXECUTABLE(OrthoManager NAME OrthoManagerMat ${TEST_ARGUMENTS} SOURCES cxx_mattest.cpp)
TRILINOS_ADD_EXECUTABLE(OrthoManager NAME OrthoManagerGen ${TEST_ARGUMENTS} SOURCES cxx_gentest.cpp)
TRILINOS_ADD_EXECUTABLE(OrthoManager NAME OrthoManager ${TEST_ARGUMENTS} SOURCES cxx_main.cpp)
TRILINOS_ADD_EXECUTABLE(OrthoManager NAME OrthoManagerFloat ${TEST_ARGUMENTS} SOURCES cxx_main.cpp)
TRILINOS_ADD_EXECUTABLE(SortManager ${TEST_ARGUMENTS} SOURCES cxx_main.cpp)
TRILINOS_ADD_EXECUTABLE(StatusTest ${TEST_ARGUMENTS} SOURCES cxx_main.cpp)

IF(Teuchos_ENABLE_COMPLEX)
  TRILINOS_ADD_EXECUTABLE(BlockKrylovSchur NAME BlockKrylovSchurComplexLap ${TEST_ARGUMENTS} SOURCES cxx_main_complex_lap.cpp)
  IF(Trilinos_ENABLE_TRIUTILS)
    TRILINOS_ADD_EXECUTABLE(BlockDavidson NAME BlockDavidsonComplex ${TEST_ARGUMENTS} SOURCES cxx_main_complex.cpp)
    TRILINOS_ADD_EXECUTABLE(BlockKrylovSchur NAME BlockKrylovSchurComplex ${TEST_ARGUMENTS} SOURCES cxx_main_complex.cpp)
    TRILINOS_ADD_EXECUTABLE(LOBPCG NAME LOBPCGComplex ${TEST_ARGUMENTS} SOURCES cxx_main_complex.cpp)
    TRILINOS_ADD_EXECUTABLE(MVOPTester NAME MVOPComplex ${TEST_ARGUMENTS} SOURCES cxx_main_complex.cpp)
    TRILINOS_ADD_EXECUTABLE(OrthoManager NAME OrthoManagerComplex ${TEST_ARGUMENTS} SOURCES cxx_main_complex.cpp)
    TRILINOS_ADD_EXECUTABLE(OrthoManager NAME OrthoManagerComplexGen ${TEST_ARGUMENTS} SOURCES cxx_main_complex.cpp)
    TRILINOS_ADD_EXECUTABLE(OrthoManager NAME OrthoManagerComplexMat ${TEST_ARGUMENTS} SOURCES cxx_main_complex.cpp)
  ENDIF(Trilinos_ENABLE_TRIUTILS)
ENDIF(Teuchos_ENABLE_COMPLEX)

IF(Teuchos_ENABLE_TRIUTILS)
  TRILINOS_ADD_EXECUTABLE(MVOPTester NAME MVOPTpetra ${TEST_ARGUMENTS} SOURCES cxx_main_tpetra.cpp)
ENDIF(Teuchos_ENABLE_TRIUTILS)
