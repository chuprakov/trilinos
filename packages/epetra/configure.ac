# ------------------------------------------------------------------------
# Process this file with autoconf to produce a configure script.
# ------------------------------------------------------------------------

# @HEADER
# ************************************************************************
# 
#               Epetra: Linear Algebra Services Package 
#                 Copyright (2001) Sandia Corporation
# 
# Under terms of Contract DE-AC04-94AL85000, there is a non-exclusive
# license for use of this work by or on behalf of the U.S. Government.
# 
# This library is free software; you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation; either version 2.1 of the
# License, or (at your option) any later version.
#  
# This library is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#  
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
# USA
# Questions? Contact Michael A. Heroux (maherou@sandia.gov) 
# 
# ************************************************************************
# @HEADER

# ------------------------------------------------------------------------
# Initialization 
# ------------------------------------------------------------------------

# This must be the first line in configure.ac.
# Optional 3rd argument is email address for bugs.

AC_INIT(epetra, 3.7, maherou@sandia.gov)

# Hello World!
echo "----------------------------------------"
echo "Running Epetra Configure Script"
echo "----------------------------------------"

# This is to protect against accidentally specifying the wrong
# directory with --srcdir.

AC_CONFIG_SRCDIR([src/Epetra_SerialComm.cpp])

# Specify directory for auxillary build tools (e.g., install-sh,
# config.sub, config.guess) and M4 files.

AC_CONFIG_AUX_DIR(config)

# Configure should create src/Epetra_config.h from src/Epetra_config.h.in

AM_CONFIG_HEADER(src/Epetra_config.h:src/Epetra_config.h.in)

# Allow users to specify their own "install" command.  If none is specified,
# the default is install-sh found in the config subdirectory.
                                                                                
AC_ARG_WITH(install,
 [AC_HELP_STRING([--with-install=INSTALL_PROGRAM],
 [Use the installation program INSTALL_PROGRAM rather the default that is provided.  For example --with-install="/path/install -p"])],
 [
   INSTALL=$withval
   INSTALL_PROGRAM=$withval
   INSTALL_SCRIPT=$withval
   INSTALL_DATA="$withval -m 644"
 ],)
                                                                                
# AM_MAINTAINER_MODE turns off maintainer-only makefile targets by
# default, and changes configure to understand a
# --enable-maintainer-mode option. --enable-maintainer-mode turns the
# maintainer-only targets back on. The maintainer-only makefile
# targets permit end users to clean automatically-generated files such
# as configure, which means they have to have autoconf and automake
# installed to repair the damage. AM_MAINTAINER_MODE makes it a bit
# harder for users to shoot themselves in the foot.

AM_MAINTAINER_MODE

# Define $build, $host, $target, etc

AC_CANONICAL_TARGET

# Use automake

AM_INIT_AUTOMAKE(1.10 no-define tar-ustar)

# Specify required version of autoconf.

AC_PREREQ(2.61)

# Specify revision number of configure.ac that was used to generate
# configure.

dnl Commented out this line for now because it causes headaches in
dnl committing.
dnl AC_REVISION($Revision$)

# ------------------------------------------------------------------------
# Check if Fortran is enabled or not
# ------------------------------------------------------------------------

TAC_ARG_ENABLE_OPTION(fortran, [enable Fortran support], FORTRAN_SUPPORT, yes)
AM_CONDITIONAL(FORTRAN_DISABLED, [test "X$ac_cv_use_fortran" != "Xyes"])

# ------------------------------------------------------------------------
# Check to see if MPI enabled and if any special configuration done
# ------------------------------------------------------------------------

TAC_ARG_CONFIG_MPI

# ------------------------------------------------------------------------
# Checks for programs
# ------------------------------------------------------------------------

AC_PROG_CC(cc gcc)
AC_PROG_CXX(CC g++ c++ cxx)
if test "X$ac_cv_use_fortran" != "Xno"; then
AC_PROG_F77(f77 g77 gfortran f90 xlf90 f95)
fi
AC_PROG_RANLIB

# ------------------------------------------------------------------------
# Get the absolute path to the build directory.
#
# We need this to be able to figure out paths to the libraries for the
# other Trilinos packages.
# ------------------------------------------------------------------------
                                                                                
AC_MSG_CHECKING([finding build directory])
if test "X" = "X"; then
  EPETRA_BUILD_DIRECTORY=`pwd`
  AC_MSG_RESULT($EPETRA_BUILD_DIRECTORY)
fi

# ------------------------------------------------------------------------
# Checks for extra flags
# ------------------------------------------------------------------------
# Check if --with-flags present, prepend any specs to FLAGS

TAC_ARG_WITH_FLAGS(ccflags, CCFLAGS)
TAC_ARG_WITH_FLAGS(cxxflags, CXXFLAGS)
TAC_ARG_WITH_FLAGS(cflags, CFLAGS)
if test "X$ac_cv_use_fortran" != "Xno"; then
TAC_ARG_WITH_FLAGS(fflags, FFLAGS)
fi
TAC_ARG_WITH_LIBS
TAC_ARG_WITH_FLAGS(ldflags, LDFLAGS)

# ------------------------------------------------------------------------
# Alternate archiver
# ------------------------------------------------------------------------

TAC_ARG_WITH_AR

# ------------------------------------------------------------------------
# MPI link check
# ------------------------------------------------------------------------
TAC_ARG_CHECK_MPI

# ------------------------------------------------------------------------
# Checks for header files
# ------------------------------------------------------------------------

AC_CHECK_HEADERS([cstdlib stdlib.h], [break],)
AC_CHECK_HEADERS([cstdio stdio.h], [break],)
AC_CHECK_HEADERS([cassert assert.h], [break],)
AC_CHECK_HEADERS([cmath], [break],)
AC_CHECK_HEADERS([math.h], [break],)
AC_CHECK_HEADERS([iomanip iomanip.h], [break],)
AC_CHECK_HEADERS([iostream iostream.h], [break],)
AC_CHECK_HEADERS([string string.h], [break],)
AC_CHECK_HEADERS([sstream ], [break],)

if test "X$ac_cv_header_cstdlib" != "Xyes" && test "X$ac_cv_header_stdlib_h" != "Xyes"; then
  AC_MSG_ERROR([[Cannot find cstdlib or stdlib.h.  Epetra requires at least one or the other.]])
fi

if test "X$ac_cv_header_cstdio" != "Xyes" && test "X$ac_cv_header_stdio_h" != "Xyes"; then
  AC_MSG_ERROR([[Cannot find cstdio or stdio.h.  Epetra requires at least one or the other.]])
fi

if test "X$ac_cv_header_cassert" != "Xyes" && test "X$ac_cv_header_assert_h" != "Xyes"; then
  AC_MSG_ERROR([[Cannot find cassert or assert.h.  Epetra requires at least one or the other.]])
fi

if test "X$ac_cv_header_string" != "Xyes" && test "X$ac_cv_header_string_h" != "Xyes"; then
  AC_MSG_ERROR([[Cannot find string or string.h.  Epetra requires at least one or the other.]])
fi

if test "X$ac_cv_header_iostream" != "Xyes" && test "X$ac_cv_header_iostream_h" != "Xyes"; then
  AC_MSG_ERROR([[Cannot find iostream or iostream.h.  Epetra requires at least one or the other.]])
fi

if test "X$ac_cv_header_cmath" != "Xyes" && test "X$ac_cv_header_math_h" != "Xyes"; then
  AC_MSG_ERROR([[Cannot find cmath or math.h.  Epetra requires at least one or the other.]])
fi

# ------------------------------------------------------------------------
# Checks for Makefile.export related systems
# ------------------------------------------------------------------------
TAC_ARG_ENABLE_EXPORT_MAKEFILES(yes)

# ------------------------------------------------------------------------
# Checks for special package flags
# ------------------------------------------------------------------------

TAC_ARG_ENABLE_FEATURE_SUB( epetra, abc, [Enable array bounds checking], 
		EPETRA_ARRAY_BOUNDS_CHECK, no)

TAC_ARG_ENABLE_OPTION(threads, [enable shared memory threads], THREADS, no)
AM_CONDITIONAL(HAVE_THREADS, [test "X$ac_cv_use_threads" != "Xno"])

TAC_ARG_ENABLE_OPTION(fatal_messages, [enable printing of fatal error messages], 
                   FATAL_MESSAGES, yes)
TAC_ARG_ENABLE_OPTION(warning_messages, [enable printing of warning error messages], 
                   WARNING_MESSAGES, no)
TAC_ARG_ENABLE_OPTION(format_io, [Use package-defined IO formatting for output], 
                   FORMAT_IO, yes)
TAC_ARG_WITH_PACKAGE(zoltan, [Enable Zoltan interface support], ZOLTAN, no)

TAC_ARG_WITH_PACKAGE(oski, [Enable OSKI interface support.  You must also use the configure option "--enable-epetra-prerelease" and specify the location of the OSKI library and headers.], OSKI, no)

# ------------------------------------------------------------------------
# Checks for package dependencies
# ------------------------------------------------------------------------

TAC_ARG_ENABLE_CAN_USE_PACKAGE(
  epetra, teuchos, EPETRA_TEUCHOS, ENABLE_EPETRA_TEUCHOS, yes,
  [Built in support for some Teuchos utilities into Epetra.],
  [Built in support for some Teuchos utilities into Epetra.  Can be overridden with --disable-epetra-teuchos.])

# ------------------------------------------------------------------------
# Checks if tests and examples should be built
# ------------------------------------------------------------------------

TAC_ARG_ENABLE_FEATURE(tests, [Make tests for all Trilinos packages buildable with 'make tests'], TESTS, yes)
TAC_ARG_ENABLE_FEATURE_SUB_CHECK( epetra, tests, [Make Epetra tests buildable with 'make tests'], EPETRA_TESTS)
AM_CONDITIONAL(BUILD_TESTS, test "X$ac_cv_use_epetra_tests" != "Xno")

TAC_ARG_ENABLE_FEATURE(examples, [Make examples for all Trilinos packages buildable with 'make examples'], EXAMPLES, yes)
TAC_ARG_ENABLE_FEATURE_SUB_CHECK( epetra, examples, [Make Epetra examples buildable with 'make examples'], EPETRA_EXAMPLES)
AM_CONDITIONAL(BUILD_EXAMPLES, test "X$ac_cv_use_epetra_examples" != "Xno")

#We now build tests and examples through separate make targets, rather than
#during "make".  We still need to conditionally include the test and example
#in SUBDIRS, even though SUB_TEST and SUB_EXAMPLE will never be
#defined, so that the tests and examples are included in the distribution
#tarball.
AM_CONDITIONAL(SUB_TEST, test "X$ac_cv_use_sub_test" = "Xyes")
AM_CONDITIONAL(SUB_EXAMPLE, test "X$ac_cv_use_sub_example" = "Xyes")

TAC_ARG_ENABLE_FEATURE(libcheck, [Check for some third-party libraries including BLAS and LAPACK.  Cannot be disabled unless tests and examples are also disabled.  Cannot be disabled when fortran is disabled.], LIBCHECK, yes)

# ------------------------------------------------------------------------
# Specify other directories 
# ------------------------------------------------------------------------

# enable use of --with-libdirs="-Llibdir1 -Llibdir2 ..." to prepend to LDFLAGS
TAC_ARG_WITH_LIBDIRS
# enable use of --with-incdirs="-Lincdir1 -Lincdir2 ..." to prepend to CPPFLAGS
TAC_ARG_WITH_INCDIRS

# Define F77_FUNC that will be used to link with Fortran subroutines found in
# Trilinos source code
if test "X$ac_cv_use_fortran" != "Xno"; then
AC_F77_WRAPPERS
fi

# ------------------------------------------------------------------------
# Checks for libraries
# ------------------------------------------------------------------------

# If tests, examples and libcheck are disabled, we don't have to check
# for these libraries.
if test "X$ac_cv_use_epetra_tests" != "Xno" || test "X$ac_cv_use_epetra_examples" != "Xno" || test "X$ac_cv_use_libcheck" != "Xno"; then

# checks for libraries now
dnl Replace `main' with a function in -lm:
AC_SEARCH_LIBS(pow,[m],,AC_MSG_ERROR(Cannot find math library))
AC_SEARCH_LIBS(sqrt,[m],,AC_MSG_ERROR(Cannot find math library))

# find or choose to supply valid blas and lapack libraries

  TAC_BLAS([], [AC_MSG_ERROR([[Cannot find blas library, specify a path using --with-ldflags=-I<DIR> (ex. --with-ldflags=-I/usr/path/lib) or a specific library using --with-blas=DIR/LIB (for example --with-blas=/usr/path/lib/libcxml.a)]])])
  TAC_LAPACK([], [AC_MSG_ERROR([[Cannot find lapack library, specify a path using --with-ldflags=-I<DIR> (ex. --with-dlflags=-I/usr/path/lib) or a specific library using --with-lapack=DIR/LIB (ex. --with-lapack=/usr/path/lib/libcxml.a)]])])

else

  if test "X$ac_cv_use_fortran" != "Xno"; then
  # If we don't check for BLAS above, we will use F77_FUNC as the name mangling
  # for the BLAS and LAPACK.  This is what we used before we allowed the BLAS
  # and LAPACK to use different name mangling than the compiler.
  AC_F77_FUNC(dgemm)
    if test "X$dgemm" = "Xdgemm_"; then
      AC_DEFINE([F77_BLAS_MANGLE(name,NAME)], [name ## _], [Define the Fortran name mangling to be used for the BLAS])
    else
      if test "X$dgemm" = "Xdgemm"; then
        AC_DEFINE([F77_BLAS_MANGLE(name,NAME)], [name], [Define the Fortran name mangling to be used for the BLAS])
      else
        if test "X$dgemm" = "XDGEMM"; then
          AC_DEFINE([F77_BLAS_MANGLE(name,NAME)], [NAME], [Define the Fortran name mangling to be used for the BLAS])
        else
          if test "X$dgemm" = "XDGEMM_"; then
             AC_DEFINE([F77_BLAS_MANGLE(name,NAME)], [NAME ## _], [Define the Fortran name mangling to be used for the BLAS])
          else
            AC_MSG_ERROR([[Cannot determine BLAS and LAPACK name mangling using the value of F77_FUNC.  Please try configuring Trilinos without the --disable-libcheck option.]])
          fi
        fi
      fi
    fi
  fi

fi
# end of the list of libraries that don't need to be checked for if
# tests and examples are disabled.

# ------------------------------------------------------------------------
# Checks for linker characteristics
# ------------------------------------------------------------------------

# Determine libraries needed for linking with Fortran
AC_F77_LIBRARY_LDFLAGS

# -- DEC CXX --
if test "X$TRILINOS_TEMPLATE_OBJS" = "X"; then
  case $target in
    alpha*)
      if test $CXX = cxx; then
        TRILINOS_TEMPLATE_OBJS="cxx_repository/*.o"
      fi
    ;;
  esac
fi

AC_MSG_CHECKING([for template-specific object files to be linked])
if test "X$TRILINOS_TEMPLATE_OBJS" = "X"; then
 AC_MSG_RESULT(none)
else
 AC_MSG_RESULT($TRILINOS_TEMPLATE_OBJS)
fi

AC_SUBST(TRILINOS_TEMPLATE_OBJS)

# ------------------------------------------------------------------------
# Should we compile 'predevelopment'  versions of the code
# ------------------------------------------------------------------------
AC_ARG_ENABLE(epetra-prerelease,
[AC_HELP_STRING([--enable-epetra-prerelease],[Enable compilation and documentation of prerelease code.  Prerelease code is code under development that we restrict from release to the public.  It is available to developers with no support - use at your own risk.])],
[WITH_PRERELEASE=$enableval],
[WITH_PRERELEASE=no])

if test X${WITH_PRERELEASE} = Xyes; then
   CPPFLAGS="${CPPFLAGS} -DWITH_EPETRA_PRERELEASE"
fi

if test X${WITH_PRERELEASE} = Xyes; then
  WITH_PRERELEASE_SUBST=WITH_PRERELEASE
else
  WITH_PRERELEASE_SUBST=
fi

AM_CONDITIONAL(BUILD_PRERELEASE, test X${WITH_PRERELEASE} = Xyes)
AC_SUBST(WITH_PRERELEASE_SUBST)

AC_MSG_CHECKING([whether or not we should build prerelease code])
AC_MSG_RESULT($WITH_PRERELEASE)



# ------------------------------------------------------------------------
# Perform substitutions in output files
# ------------------------------------------------------------------------

AC_SUBST(ac_aux_dir)
AC_SUBST(EPETRA_BUILD_DIRECTORY)

# ------------------------------------------------------------------------
# Output files
# ------------------------------------------------------------------------
##
AC_CONFIG_FILES([
		Makefile 
		Makefile.export
		Makefile.export.epetra
		src/Makefile
		test/Makefile
		test/BasicPerfTest/Makefile
		test/BasicPerfTest/Makefile.include
		test/BlockMap/Makefile
		test/BlockMap/Makefile.include
		test/Comm/Makefile
		test/Comm/Makefile.include
		test/CrsGraph/Makefile
		test/CrsGraph/Makefile.include
		test/CrsMatrix/Makefile
		test/CrsMatrix/Makefile.include
		test/RowMatrix/Makefile
		test/RowMatrix/Makefile.include
		test/CrsRectMatrix/Makefile
		test/CrsRectMatrix/Makefile.include
		test/Directory/Makefile
		test/Directory/Makefile.include
		test/FECrsGraph/Makefile
		test/FECrsGraph/Makefile.include
		test/FECrsMatrix/Makefile
		test/FECrsMatrix/Makefile.include
		test/FEVbrMatrix/Makefile
		test/FEVbrMatrix/Makefile.include
		test/FEVector/Makefile
		test/FEVector/Makefile.include
		test/ImportExport/Makefile
		test/ImportExport/Makefile.include
		test/IntSerialDense/Makefile
		test/IntSerialDense/Makefile.include
		test/Map/Makefile
		test/Map/Makefile.include
		test/MapColoring/Makefile
		test/MapColoring/Makefile.include
		test/MultiVector/Makefile
		test/MultiVector/Makefile.include
		test/Object/Makefile
		test/Object/Makefile.include
		test/RowMatrixTransposer/Makefile
		test/RowMatrixTransposer/Makefile.include
		test/SerialDense/Makefile
		test/SerialDense/Makefile.include
		test/SerialSpdDense/Makefile
		test/SerialSpdDense/Makefile.include
		test/VbrMatrix/Makefile
		test/VbrMatrix/Makefile.include
		test/Vector/Makefile
		test/Vector/Makefile.include
		test/src/Makefile
		example/Makefile 
		example/petra_power_method/Makefile
		example/verySimple/Makefile
		example/UG_Ex1/Makefile
		example/UG_ExMaps/Makefile
		example/my_example/Makefile
		])


#		test/OSKI/Makefile
#		test/OSKI/Makefile.include


AC_OUTPUT()

# Bye World!
echo "----------------------------------------"
echo "Finished Running Epetra Configure Script"
echo "----------------------------------------"
